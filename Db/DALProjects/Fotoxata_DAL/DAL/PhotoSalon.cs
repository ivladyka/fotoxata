
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace VikkiSoft_BLL.DAL
{
	public abstract class _PhotoSalon : SqlClientEntity
	{
		public _PhotoSalon()
		{
			this.QuerySource = "PhotoSalon";
			this.MappingName = "PhotoSalon";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllPhotoSalon]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PhotoSalonID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PhotoSalonID, PhotoSalonID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadPhotoSalonByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PhotoSalonID
			{
				get
				{
					return new SqlParameter("@PhotoSalonID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Address
			{
				get
				{
					return new SqlParameter("@Address", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Active
			{
				get
				{
					return new SqlParameter("@Active", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Phone1
			{
				get
				{
					return new SqlParameter("@Phone1", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter Phone2
			{
				get
				{
					return new SqlParameter("@Phone2", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter Phone3
			{
				get
				{
					return new SqlParameter("@Phone3", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter Description
			{
				get
				{
					return new SqlParameter("@Description", SqlDbType.VarChar, 2147483647);
				}
			}
			
			public static SqlParameter ButtonImage
			{
				get
				{
					return new SqlParameter("@ButtonImage", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter ButtonImageHover
			{
				get
				{
					return new SqlParameter("@ButtonImageHover", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Address_ru
			{
				get
				{
					return new SqlParameter("@Address_ru", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Address_en
			{
				get
				{
					return new SqlParameter("@Address_en", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Description_ru
			{
				get
				{
					return new SqlParameter("@Description_ru", SqlDbType.VarChar, 2147483647);
				}
			}
			
			public static SqlParameter Description_en
			{
				get
				{
					return new SqlParameter("@Description_en", SqlDbType.VarChar, 2147483647);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PhotoSalonID = "PhotoSalonID";
            public const string Address = "Address";
            public const string Active = "Active";
            public const string Phone1 = "Phone1";
            public const string Phone2 = "Phone2";
            public const string Phone3 = "Phone3";
            public const string Description = "Description";
            public const string ButtonImage = "ButtonImage";
            public const string ButtonImageHover = "ButtonImageHover";
            public const string Address_ru = "Address_ru";
            public const string Address_en = "Address_en";
            public const string Description_ru = "Description_ru";
            public const string Description_en = "Description_en";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PhotoSalonID] = _PhotoSalon.PropertyNames.PhotoSalonID;
					ht[Address] = _PhotoSalon.PropertyNames.Address;
					ht[Active] = _PhotoSalon.PropertyNames.Active;
					ht[Phone1] = _PhotoSalon.PropertyNames.Phone1;
					ht[Phone2] = _PhotoSalon.PropertyNames.Phone2;
					ht[Phone3] = _PhotoSalon.PropertyNames.Phone3;
					ht[Description] = _PhotoSalon.PropertyNames.Description;
					ht[ButtonImage] = _PhotoSalon.PropertyNames.ButtonImage;
					ht[ButtonImageHover] = _PhotoSalon.PropertyNames.ButtonImageHover;
					ht[Address_ru] = _PhotoSalon.PropertyNames.Address_ru;
					ht[Address_en] = _PhotoSalon.PropertyNames.Address_en;
					ht[Description_ru] = _PhotoSalon.PropertyNames.Description_ru;
					ht[Description_en] = _PhotoSalon.PropertyNames.Description_en;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PhotoSalonID = "PhotoSalonID";
            public const string Address = "Address";
            public const string Active = "Active";
            public const string Phone1 = "Phone1";
            public const string Phone2 = "Phone2";
            public const string Phone3 = "Phone3";
            public const string Description = "Description";
            public const string ButtonImage = "ButtonImage";
            public const string ButtonImageHover = "ButtonImageHover";
            public const string Address_ru = "Address_ru";
            public const string Address_en = "Address_en";
            public const string Description_ru = "Description_ru";
            public const string Description_en = "Description_en";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PhotoSalonID] = _PhotoSalon.ColumnNames.PhotoSalonID;
					ht[Address] = _PhotoSalon.ColumnNames.Address;
					ht[Active] = _PhotoSalon.ColumnNames.Active;
					ht[Phone1] = _PhotoSalon.ColumnNames.Phone1;
					ht[Phone2] = _PhotoSalon.ColumnNames.Phone2;
					ht[Phone3] = _PhotoSalon.ColumnNames.Phone3;
					ht[Description] = _PhotoSalon.ColumnNames.Description;
					ht[ButtonImage] = _PhotoSalon.ColumnNames.ButtonImage;
					ht[ButtonImageHover] = _PhotoSalon.ColumnNames.ButtonImageHover;
					ht[Address_ru] = _PhotoSalon.ColumnNames.Address_ru;
					ht[Address_en] = _PhotoSalon.ColumnNames.Address_en;
					ht[Description_ru] = _PhotoSalon.ColumnNames.Description_ru;
					ht[Description_en] = _PhotoSalon.ColumnNames.Description_en;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PhotoSalonID = "s_PhotoSalonID";
            public const string Address = "s_Address";
            public const string Active = "s_Active";
            public const string Phone1 = "s_Phone1";
            public const string Phone2 = "s_Phone2";
            public const string Phone3 = "s_Phone3";
            public const string Description = "s_Description";
            public const string ButtonImage = "s_ButtonImage";
            public const string ButtonImageHover = "s_ButtonImageHover";
            public const string Address_ru = "s_Address_ru";
            public const string Address_en = "s_Address_en";
            public const string Description_ru = "s_Description_ru";
            public const string Description_en = "s_Description_en";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PhotoSalonID
	    {
			get
	        {
				return base.Getint(ColumnNames.PhotoSalonID);
			}
			set
	        {
				base.Setint(ColumnNames.PhotoSalonID, value);
			}
		}

		public virtual string Address
	    {
			get
	        {
				return base.Getstring(ColumnNames.Address);
			}
			set
	        {
				base.Setstring(ColumnNames.Address, value);
			}
		}

		public virtual bool Active
	    {
			get
	        {
				return base.Getbool(ColumnNames.Active);
			}
			set
	        {
				base.Setbool(ColumnNames.Active, value);
			}
		}

		public virtual string Phone1
	    {
			get
	        {
				return base.Getstring(ColumnNames.Phone1);
			}
			set
	        {
				base.Setstring(ColumnNames.Phone1, value);
			}
		}

		public virtual string Phone2
	    {
			get
	        {
				return base.Getstring(ColumnNames.Phone2);
			}
			set
	        {
				base.Setstring(ColumnNames.Phone2, value);
			}
		}

		public virtual string Phone3
	    {
			get
	        {
				return base.Getstring(ColumnNames.Phone3);
			}
			set
	        {
				base.Setstring(ColumnNames.Phone3, value);
			}
		}

		public virtual string Description
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description);
			}
			set
	        {
				base.Setstring(ColumnNames.Description, value);
			}
		}

		public virtual string ButtonImage
	    {
			get
	        {
				return base.Getstring(ColumnNames.ButtonImage);
			}
			set
	        {
				base.Setstring(ColumnNames.ButtonImage, value);
			}
		}

		public virtual string ButtonImageHover
	    {
			get
	        {
				return base.Getstring(ColumnNames.ButtonImageHover);
			}
			set
	        {
				base.Setstring(ColumnNames.ButtonImageHover, value);
			}
		}

		public virtual string Address_ru
	    {
			get
	        {
				return base.Getstring(ColumnNames.Address_ru);
			}
			set
	        {
				base.Setstring(ColumnNames.Address_ru, value);
			}
		}

		public virtual string Address_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.Address_en);
			}
			set
	        {
				base.Setstring(ColumnNames.Address_en, value);
			}
		}

		public virtual string Description_ru
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description_ru);
			}
			set
	        {
				base.Setstring(ColumnNames.Description_ru, value);
			}
		}

		public virtual string Description_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description_en);
			}
			set
	        {
				base.Setstring(ColumnNames.Description_en, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PhotoSalonID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhotoSalonID) ? string.Empty : base.GetintAsString(ColumnNames.PhotoSalonID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhotoSalonID);
				else
					this.PhotoSalonID = base.SetintAsString(ColumnNames.PhotoSalonID, value);
			}
		}

		public virtual string s_Address
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Address) ? string.Empty : base.GetstringAsString(ColumnNames.Address);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Address);
				else
					this.Address = base.SetstringAsString(ColumnNames.Address, value);
			}
		}

		public virtual string s_Active
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Active) ? string.Empty : base.GetboolAsString(ColumnNames.Active);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Active);
				else
					this.Active = base.SetboolAsString(ColumnNames.Active, value);
			}
		}

		public virtual string s_Phone1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Phone1) ? string.Empty : base.GetstringAsString(ColumnNames.Phone1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Phone1);
				else
					this.Phone1 = base.SetstringAsString(ColumnNames.Phone1, value);
			}
		}

		public virtual string s_Phone2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Phone2) ? string.Empty : base.GetstringAsString(ColumnNames.Phone2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Phone2);
				else
					this.Phone2 = base.SetstringAsString(ColumnNames.Phone2, value);
			}
		}

		public virtual string s_Phone3
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Phone3) ? string.Empty : base.GetstringAsString(ColumnNames.Phone3);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Phone3);
				else
					this.Phone3 = base.SetstringAsString(ColumnNames.Phone3, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_ButtonImage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ButtonImage) ? string.Empty : base.GetstringAsString(ColumnNames.ButtonImage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ButtonImage);
				else
					this.ButtonImage = base.SetstringAsString(ColumnNames.ButtonImage, value);
			}
		}

		public virtual string s_ButtonImageHover
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ButtonImageHover) ? string.Empty : base.GetstringAsString(ColumnNames.ButtonImageHover);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ButtonImageHover);
				else
					this.ButtonImageHover = base.SetstringAsString(ColumnNames.ButtonImageHover, value);
			}
		}

		public virtual string s_Address_ru
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Address_ru) ? string.Empty : base.GetstringAsString(ColumnNames.Address_ru);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Address_ru);
				else
					this.Address_ru = base.SetstringAsString(ColumnNames.Address_ru, value);
			}
		}

		public virtual string s_Address_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Address_en) ? string.Empty : base.GetstringAsString(ColumnNames.Address_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Address_en);
				else
					this.Address_en = base.SetstringAsString(ColumnNames.Address_en, value);
			}
		}

		public virtual string s_Description_ru
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description_ru) ? string.Empty : base.GetstringAsString(ColumnNames.Description_ru);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description_ru);
				else
					this.Description_ru = base.SetstringAsString(ColumnNames.Description_ru, value);
			}
		}

		public virtual string s_Description_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description_en) ? string.Empty : base.GetstringAsString(ColumnNames.Description_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description_en);
				else
					this.Description_en = base.SetstringAsString(ColumnNames.Description_en, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PhotoSalonID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhotoSalonID, Parameters.PhotoSalonID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Address
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Address, Parameters.Address);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Active
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Active, Parameters.Active);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Phone1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Phone1, Parameters.Phone1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Phone2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Phone2, Parameters.Phone2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Phone3
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Phone3, Parameters.Phone3);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ButtonImage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ButtonImage, Parameters.ButtonImage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ButtonImageHover
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ButtonImageHover, Parameters.ButtonImageHover);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Address_ru
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Address_ru, Parameters.Address_ru);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Address_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Address_en, Parameters.Address_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description_ru
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description_ru, Parameters.Description_ru);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description_en, Parameters.Description_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PhotoSalonID
		    {
				get
		        {
					if(_PhotoSalonID_W == null)
	        	    {
						_PhotoSalonID_W = TearOff.PhotoSalonID;
					}
					return _PhotoSalonID_W;
				}
			}

			public WhereParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public WhereParameter Active
		    {
				get
		        {
					if(_Active_W == null)
	        	    {
						_Active_W = TearOff.Active;
					}
					return _Active_W;
				}
			}

			public WhereParameter Phone1
		    {
				get
		        {
					if(_Phone1_W == null)
	        	    {
						_Phone1_W = TearOff.Phone1;
					}
					return _Phone1_W;
				}
			}

			public WhereParameter Phone2
		    {
				get
		        {
					if(_Phone2_W == null)
	        	    {
						_Phone2_W = TearOff.Phone2;
					}
					return _Phone2_W;
				}
			}

			public WhereParameter Phone3
		    {
				get
		        {
					if(_Phone3_W == null)
	        	    {
						_Phone3_W = TearOff.Phone3;
					}
					return _Phone3_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter ButtonImage
		    {
				get
		        {
					if(_ButtonImage_W == null)
	        	    {
						_ButtonImage_W = TearOff.ButtonImage;
					}
					return _ButtonImage_W;
				}
			}

			public WhereParameter ButtonImageHover
		    {
				get
		        {
					if(_ButtonImageHover_W == null)
	        	    {
						_ButtonImageHover_W = TearOff.ButtonImageHover;
					}
					return _ButtonImageHover_W;
				}
			}

			public WhereParameter Address_ru
		    {
				get
		        {
					if(_Address_ru_W == null)
	        	    {
						_Address_ru_W = TearOff.Address_ru;
					}
					return _Address_ru_W;
				}
			}

			public WhereParameter Address_en
		    {
				get
		        {
					if(_Address_en_W == null)
	        	    {
						_Address_en_W = TearOff.Address_en;
					}
					return _Address_en_W;
				}
			}

			public WhereParameter Description_ru
		    {
				get
		        {
					if(_Description_ru_W == null)
	        	    {
						_Description_ru_W = TearOff.Description_ru;
					}
					return _Description_ru_W;
				}
			}

			public WhereParameter Description_en
		    {
				get
		        {
					if(_Description_en_W == null)
	        	    {
						_Description_en_W = TearOff.Description_en;
					}
					return _Description_en_W;
				}
			}

			private WhereParameter _PhotoSalonID_W = null;
			private WhereParameter _Address_W = null;
			private WhereParameter _Active_W = null;
			private WhereParameter _Phone1_W = null;
			private WhereParameter _Phone2_W = null;
			private WhereParameter _Phone3_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _ButtonImage_W = null;
			private WhereParameter _ButtonImageHover_W = null;
			private WhereParameter _Address_ru_W = null;
			private WhereParameter _Address_en_W = null;
			private WhereParameter _Description_ru_W = null;
			private WhereParameter _Description_en_W = null;

			public void WhereClauseReset()
			{
				_PhotoSalonID_W = null;
				_Address_W = null;
				_Active_W = null;
				_Phone1_W = null;
				_Phone2_W = null;
				_Phone3_W = null;
				_Description_W = null;
				_ButtonImage_W = null;
				_ButtonImageHover_W = null;
				_Address_ru_W = null;
				_Address_en_W = null;
				_Description_ru_W = null;
				_Description_en_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PhotoSalonID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhotoSalonID, Parameters.PhotoSalonID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Address
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Address, Parameters.Address);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Active
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Active, Parameters.Active);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Phone1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Phone1, Parameters.Phone1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Phone2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Phone2, Parameters.Phone2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Phone3
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Phone3, Parameters.Phone3);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ButtonImage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ButtonImage, Parameters.ButtonImage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ButtonImageHover
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ButtonImageHover, Parameters.ButtonImageHover);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Address_ru
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Address_ru, Parameters.Address_ru);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Address_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Address_en, Parameters.Address_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description_ru
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description_ru, Parameters.Description_ru);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description_en, Parameters.Description_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PhotoSalonID
		    {
				get
		        {
					if(_PhotoSalonID_W == null)
	        	    {
						_PhotoSalonID_W = TearOff.PhotoSalonID;
					}
					return _PhotoSalonID_W;
				}
			}

			public AggregateParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public AggregateParameter Active
		    {
				get
		        {
					if(_Active_W == null)
	        	    {
						_Active_W = TearOff.Active;
					}
					return _Active_W;
				}
			}

			public AggregateParameter Phone1
		    {
				get
		        {
					if(_Phone1_W == null)
	        	    {
						_Phone1_W = TearOff.Phone1;
					}
					return _Phone1_W;
				}
			}

			public AggregateParameter Phone2
		    {
				get
		        {
					if(_Phone2_W == null)
	        	    {
						_Phone2_W = TearOff.Phone2;
					}
					return _Phone2_W;
				}
			}

			public AggregateParameter Phone3
		    {
				get
		        {
					if(_Phone3_W == null)
	        	    {
						_Phone3_W = TearOff.Phone3;
					}
					return _Phone3_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter ButtonImage
		    {
				get
		        {
					if(_ButtonImage_W == null)
	        	    {
						_ButtonImage_W = TearOff.ButtonImage;
					}
					return _ButtonImage_W;
				}
			}

			public AggregateParameter ButtonImageHover
		    {
				get
		        {
					if(_ButtonImageHover_W == null)
	        	    {
						_ButtonImageHover_W = TearOff.ButtonImageHover;
					}
					return _ButtonImageHover_W;
				}
			}

			public AggregateParameter Address_ru
		    {
				get
		        {
					if(_Address_ru_W == null)
	        	    {
						_Address_ru_W = TearOff.Address_ru;
					}
					return _Address_ru_W;
				}
			}

			public AggregateParameter Address_en
		    {
				get
		        {
					if(_Address_en_W == null)
	        	    {
						_Address_en_W = TearOff.Address_en;
					}
					return _Address_en_W;
				}
			}

			public AggregateParameter Description_ru
		    {
				get
		        {
					if(_Description_ru_W == null)
	        	    {
						_Description_ru_W = TearOff.Description_ru;
					}
					return _Description_ru_W;
				}
			}

			public AggregateParameter Description_en
		    {
				get
		        {
					if(_Description_en_W == null)
	        	    {
						_Description_en_W = TearOff.Description_en;
					}
					return _Description_en_W;
				}
			}

			private AggregateParameter _PhotoSalonID_W = null;
			private AggregateParameter _Address_W = null;
			private AggregateParameter _Active_W = null;
			private AggregateParameter _Phone1_W = null;
			private AggregateParameter _Phone2_W = null;
			private AggregateParameter _Phone3_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _ButtonImage_W = null;
			private AggregateParameter _ButtonImageHover_W = null;
			private AggregateParameter _Address_ru_W = null;
			private AggregateParameter _Address_en_W = null;
			private AggregateParameter _Description_ru_W = null;
			private AggregateParameter _Description_en_W = null;

			public void AggregateClauseReset()
			{
				_PhotoSalonID_W = null;
				_Address_W = null;
				_Active_W = null;
				_Phone1_W = null;
				_Phone2_W = null;
				_Phone3_W = null;
				_Description_W = null;
				_ButtonImage_W = null;
				_ButtonImageHover_W = null;
				_Address_ru_W = null;
				_Address_en_W = null;
				_Description_ru_W = null;
				_Description_en_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertPhotoSalon]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PhotoSalonID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdatePhotoSalon]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeletePhotoSalon]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PhotoSalonID);
			p.SourceColumn = ColumnNames.PhotoSalonID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PhotoSalonID);
			p.SourceColumn = ColumnNames.PhotoSalonID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Address);
			p.SourceColumn = ColumnNames.Address;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Active);
			p.SourceColumn = ColumnNames.Active;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Phone1);
			p.SourceColumn = ColumnNames.Phone1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Phone2);
			p.SourceColumn = ColumnNames.Phone2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Phone3);
			p.SourceColumn = ColumnNames.Phone3;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description);
			p.SourceColumn = ColumnNames.Description;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ButtonImage);
			p.SourceColumn = ColumnNames.ButtonImage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ButtonImageHover);
			p.SourceColumn = ColumnNames.ButtonImageHover;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Address_ru);
			p.SourceColumn = ColumnNames.Address_ru;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Address_en);
			p.SourceColumn = ColumnNames.Address_en;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description_ru);
			p.SourceColumn = ColumnNames.Description_ru;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description_en);
			p.SourceColumn = ColumnNames.Description_en;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
