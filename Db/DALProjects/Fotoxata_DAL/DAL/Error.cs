
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace VikkiSoft_BLL.DAL
{
	public abstract class _Error : SqlClientEntity
	{
		public _Error()
		{
			this.QuerySource = "Error";
			this.MappingName = "Error";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllError]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ErrorID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ErrorID, ErrorID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadErrorByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ErrorID
			{
				get
				{
					return new SqlParameter("@ErrorID", SqlDbType.Int, 0);
				}
			}

            public static SqlParameter Date
            {
                get
                {
                    return new SqlParameter("@Date", SqlDbType.SmallDateTime, 0);
                }
            }

            public static SqlParameter StackTrace
			{
				get
				{
                    return new SqlParameter("@StackTrace", SqlDbType.Text);
				}
			}

            public static SqlParameter Browser
			{
				get
				{
                    return new SqlParameter("@Browser", SqlDbType.NVarChar, 1024);
				}
			}

            public static SqlParameter Name
			{
				get
				{
                    return new SqlParameter("@Name", SqlDbType.NVarChar, 4000);
				}
			}

            public static SqlParameter Description
			{
				get
				{
                    return new SqlParameter("@Description", SqlDbType.NVarChar, 4000);
				}
			}

            public static SqlParameter Session
			{
				get
				{
                    return new SqlParameter("@Session", SqlDbType.Text);
				}
			}

            public static SqlParameter OrderID
            {
                get
                {
                    return new SqlParameter("@OrderID", SqlDbType.Int, 0);
                }
            }
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ErrorID = "ErrorID";
            public const string Date = "Date";
            public const string StackTrace = "StackTrace";
            public const string Browser = "Browser";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string Session = "Session";
            public const string OrderID = "OrderID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ErrorID] = _Error.PropertyNames.ErrorID;
                    ht[Date] = _Error.PropertyNames.Date;
                    ht[StackTrace] = _Error.PropertyNames.StackTrace;
                    ht[Browser] = _Error.PropertyNames.Browser;
                    ht[Name] = _Error.PropertyNames.Name;
                    ht[Description] = _Error.PropertyNames.Description;
                    ht[Session] = _Error.PropertyNames.Session;
                    ht[OrderID] = _Error.PropertyNames.OrderID;
				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{
            public const string ErrorID = "ErrorID";
            public const string Date = "Date";
            public const string StackTrace = "StackTrace";
            public const string Browser = "Browser";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string Session = "Session";
            public const string OrderID = "OrderID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();

                    ht[ErrorID] = _Error.PropertyNames.ErrorID;
                    ht[Date] = _Error.PropertyNames.Date;
                    ht[StackTrace] = _Error.PropertyNames.StackTrace;
                    ht[Browser] = _Error.PropertyNames.Browser;
                    ht[Name] = _Error.PropertyNames.Name;
                    ht[Description] = _Error.PropertyNames.Description;
                    ht[Session] = _Error.PropertyNames.Session;
                    ht[OrderID] = _Error.PropertyNames.OrderID;
				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ErrorID = "s_ErrorID";
            public const string Date = "s_Date";
            public const string StackTrace = "s_StackTrace";
            public const string Browser = "s_Browser";
            public const string Name = "s_Name";
            public const string Description = "s_Description";
            public const string Session = "s_Session";
            public const string OrderID = "s_OrderID";
		}
		#endregion		
		
		#region Properties
	
		public virtual int ErrorID
	    {
			get
	        {
				return base.Getint(ColumnNames.ErrorID);
			}
			set
	        {
				base.Setint(ColumnNames.ErrorID, value);
			}
		}

        public virtual DateTime Date
        {
            get
            {
                return base.GetDateTime(ColumnNames.Date);
            }
            set
            {
                base.SetDateTime(ColumnNames.Date, value);
            }
        }

        public virtual string StackTrace
	    {
			get
	        {
                return base.Getstring(ColumnNames.StackTrace);
			}
			set
	        {
                base.Setstring(ColumnNames.StackTrace, value);
			}
		}

        public virtual string Browser
	    {
			get
	        {
                return base.Getstring(ColumnNames.Browser);
			}
			set
	        {
                base.Setstring(ColumnNames.Browser, value);
			}
		}

        public virtual string Name
        {
            get
            {
                return base.Getstring(ColumnNames.Name);
            }
            set
            {
                base.Setstring(ColumnNames.Name, value);
            }
        }

        public virtual string Description
	    {
			get
	        {
                return base.Getstring(ColumnNames.Description);
			}
			set
	        {
                base.Setstring(ColumnNames.Description, value);
			}
		}

        public virtual string Session
	    {
			get
	        {
                return base.Getstring(ColumnNames.Session);
			}
			set
	        {
                base.Setstring(ColumnNames.Session, value);
			}
		}

        public virtual int OrderID
        {
            get
            {
                return base.Getint(ColumnNames.OrderID);
            }
            set
            {
                base.Setint(ColumnNames.OrderID, value);
            }
        }

		#endregion
		
		#region String Properties
	
		public virtual string s_ErrorID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ErrorID) ? string.Empty : base.GetintAsString(ColumnNames.ErrorID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ErrorID);
				else
					this.ErrorID = base.SetintAsString(ColumnNames.ErrorID, value);
			}
		}

        public virtual string s_StackTrace
        {
            get
            {
                return this.IsColumnNull(ColumnNames.StackTrace) ? string.Empty : base.GetstringAsString(ColumnNames.StackTrace);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.StackTrace);
                else
                    this.StackTrace = base.SetstringAsString(ColumnNames.StackTrace, value);
            }
        }

        public virtual string s_Browser
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Browser) ? string.Empty : base.GetstringAsString(ColumnNames.Browser);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Browser);
                else
                    this.Browser = base.SetstringAsString(ColumnNames.Browser, value);
            }
        }

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_Session
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Session) ? string.Empty : base.GetstringAsString(ColumnNames.Session);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Session);
				else
					this.Session = base.SetstringAsString(ColumnNames.Session, value);
			}
		}

        public virtual string s_OrderID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.OrderID) ? string.Empty : base.GetintAsString(ColumnNames.OrderID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.OrderID);
                else
                    this.OrderID = base.SetintAsString(ColumnNames.OrderID, value);
            }
        }


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ErrorID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ErrorID, Parameters.ErrorID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

                public WhereParameter Date
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Date, Parameters.Date);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                public WhereParameter StackTrace
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.StackTrace, Parameters.StackTrace);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Browser
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Browser, Parameters.Browser);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

                public WhereParameter Description
				{
					get
					{
                        WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

                public WhereParameter Session
				{
					get
					{
                        WhereParameter where = new WhereParameter(ColumnNames.Session, Parameters.Session);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

                public WhereParameter OrderID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.OrderID, Parameters.OrderID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ErrorID
		    {
				get
		        {
					if(_ErrorID_W == null)
	        	    {
						_ErrorID_W = TearOff.ErrorID;
					}
					return _ErrorID_W;
				}
			}

            public WhereParameter Date
            {
                get
                {
                    if (_Date_W == null)
                    {
                        _Date_W = TearOff.Date;
                    }
                    return _Date_W;
                }
            }

            public WhereParameter StackTrace
            {
                get
                {
                    if (_StackTrace_W == null)
                    {
                        _StackTrace_W = TearOff.StackTrace;
                    }
                    return _StackTrace_W;
                }
            }

            public WhereParameter Browser
            {
                get
                {
                    if (_Browser_W == null)
                    {
                        _Browser_W = TearOff.Browser;
                    }
                    return _Browser_W;
                }
            }

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}



            public WhereParameter Description
		    {
				get
		        {
                    if (_Description_W == null)
	        	    {
                        _Description_W = TearOff.Description;
					}
                    return _Description_W;
				}
			}

            public WhereParameter Session
		    {
				get
		        {
                    if (_Session_W == null)
	        	    {
                        _Session_W = TearOff.Session;
					}
                    return _Session_W;
				}
			}

            public WhereParameter OrderID
            {
                get
                {
                    if (_OrderID_W == null)
                    {
                        _OrderID_W = TearOff.OrderID;
                    }
                    return _OrderID_W;
                }
            }

			private WhereParameter _ErrorID_W = null;
            private WhereParameter _Date_W = null;
            private WhereParameter _StackTrace_W = null;
            private WhereParameter _Browser_W = null;
			private WhereParameter _Name_W = null;
            private WhereParameter _Description_W = null;
            private WhereParameter _Session_W = null;
            private WhereParameter _OrderID_W = null;

			public void WhereClauseReset()
			{
				_ErrorID_W = null;
                _Date_W = null;
                _StackTrace_W = null;
                _Browser_W = null;
                _Name_W = null;
                _Description_W = null;
                _Session_W = null;
                _OrderID_W = null;

				this._entity.Query.FlushWhereParameters();
			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ErrorID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ErrorID, Parameters.ErrorID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

                public AggregateParameter Date
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Date, Parameters.Date);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter StackTrace
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.StackTrace, Parameters.StackTrace);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Browser
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Browser, Parameters.Browser);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

                public AggregateParameter Description
				{
					get
					{
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

                public AggregateParameter Session
				{
					get
					{
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Session, Parameters.Session);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

                public AggregateParameter OrderID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderID, Parameters.OrderID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ErrorID
		    {
				get
		        {
					if(_ErrorID_W == null)
	        	    {
						_ErrorID_W = TearOff.ErrorID;
					}
					return _ErrorID_W;
				}
			}

            public AggregateParameter Date
            {
                get
                {
                    if (_Date_W == null)
                    {
                        _Date_W = TearOff.Date;
                    }
                    return _Date_W;
                }
            }

            public AggregateParameter StackTrace
            {
                get
                {
                    if (_StackTrace_W == null)
                    {
                        _StackTrace_W = TearOff.StackTrace;
                    }
                    return _StackTrace_W;
                }
            }

            public AggregateParameter Browser
            {
                get
                {
                    if (_Browser_W == null)
                    {
                        _Browser_W = TearOff.Browser;
                    }
                    return _Browser_W;
                }
            }

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

            public AggregateParameter Description
		    {
				get
		        {
                    if (_Description_W == null)
	        	    {
                        _Description_W = TearOff.Description;
					}
                    return _Description_W;
				}
			}

            public AggregateParameter Session
		    {
				get
		        {
                    if (_Session_W == null)
	        	    {
                        _Session_W = TearOff.Session;
					}
                    return _Session_W;
				}
			}

            public AggregateParameter OrderID
            {
                get
                {
                    if (_OrderID_W == null)
                    {
                        _OrderID_W = TearOff.OrderID;
                    }
                    return _OrderID_W;
                }
            }

			private AggregateParameter _ErrorID_W = null;
            private AggregateParameter _Date_W = null;
            private AggregateParameter _StackTrace_W = null;
            private AggregateParameter _Browser_W = null;
            private AggregateParameter _Name_W = null;
            private AggregateParameter _Description_W = null;
            private AggregateParameter _Session_W = null;
            private AggregateParameter _OrderID_W = null;

			public void AggregateClauseReset()
			{
				_ErrorID_W = null;
                _Date_W = null;
                _StackTrace_W = null;
                _Browser_W = null;
				_Name_W = null;
                _Description_W = null;
                _Session_W = null;
                _OrderID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertError]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ErrorID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateError]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteError]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ErrorID);
			p.SourceColumn = ColumnNames.ErrorID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ErrorID);
			p.SourceColumn = ColumnNames.ErrorID;
			p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Date);
            p.SourceColumn = ColumnNames.Date;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.StackTrace);
            p.SourceColumn = ColumnNames.StackTrace;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Browser);
            p.SourceColumn = ColumnNames.Browser;
            p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Description);
            p.SourceColumn = ColumnNames.Description;
			p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Session);
            p.SourceColumn = ColumnNames.Session;
			p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.OrderID);
            p.SourceColumn = ColumnNames.OrderID;
            p.SourceVersion = DataRowVersion.Current;

			return cmd;
		}
	}
}
