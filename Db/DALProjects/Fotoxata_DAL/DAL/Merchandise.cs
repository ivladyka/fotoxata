
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace VikkiSoft_BLL.DAL
{
	public abstract class _Merchandise : SqlClientEntity
	{
		public _Merchandise()
		{
			this.QuerySource = "Merchandise";
			this.MappingName = "Merchandise";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllMerchandise]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int MerchandiseID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.MerchandiseID, MerchandiseID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadMerchandiseByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter MerchandiseID
			{
				get
				{
					return new SqlParameter("@MerchandiseID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter PhotoName
			{
				get
				{
					return new SqlParameter("@PhotoName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter CategoryID
			{
				get
				{
					return new SqlParameter("@CategoryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PriceFrom
			{
				get
				{
					return new SqlParameter("@PriceFrom", SqlDbType.Money, 0);
				}
			}
			
			public static SqlParameter PriceTo
			{
				get
				{
					return new SqlParameter("@PriceTo", SqlDbType.Money, 0);
				}
			}
			
			public static SqlParameter DisplayOnPrice
			{
				get
				{
					return new SqlParameter("@DisplayOnPrice", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Description
			{
				get
				{
					return new SqlParameter("@Description", SqlDbType.VarChar, 4000);
				}
			}
			
			public static SqlParameter Name_ru
			{
				get
				{
					return new SqlParameter("@Name_ru", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Name_en
			{
				get
				{
					return new SqlParameter("@Name_en", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Description_ru
			{
				get
				{
					return new SqlParameter("@Description_ru", SqlDbType.VarChar, 4000);
				}
			}
			
			public static SqlParameter Description_en
			{
				get
				{
					return new SqlParameter("@Description_en", SqlDbType.VarChar, 4000);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string MerchandiseID = "MerchandiseID";
            public const string Name = "Name";
            public const string PhotoName = "PhotoName";
            public const string CategoryID = "CategoryID";
            public const string PriceFrom = "PriceFrom";
            public const string PriceTo = "PriceTo";
            public const string DisplayOnPrice = "DisplayOnPrice";
            public const string Description = "Description";
            public const string Name_ru = "Name_ru";
            public const string Name_en = "Name_en";
            public const string Description_ru = "Description_ru";
            public const string Description_en = "Description_en";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MerchandiseID] = _Merchandise.PropertyNames.MerchandiseID;
					ht[Name] = _Merchandise.PropertyNames.Name;
					ht[PhotoName] = _Merchandise.PropertyNames.PhotoName;
					ht[CategoryID] = _Merchandise.PropertyNames.CategoryID;
					ht[PriceFrom] = _Merchandise.PropertyNames.PriceFrom;
					ht[PriceTo] = _Merchandise.PropertyNames.PriceTo;
					ht[DisplayOnPrice] = _Merchandise.PropertyNames.DisplayOnPrice;
					ht[Description] = _Merchandise.PropertyNames.Description;
					ht[Name_ru] = _Merchandise.PropertyNames.Name_ru;
					ht[Name_en] = _Merchandise.PropertyNames.Name_en;
					ht[Description_ru] = _Merchandise.PropertyNames.Description_ru;
					ht[Description_en] = _Merchandise.PropertyNames.Description_en;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string MerchandiseID = "MerchandiseID";
            public const string Name = "Name";
            public const string PhotoName = "PhotoName";
            public const string CategoryID = "CategoryID";
            public const string PriceFrom = "PriceFrom";
            public const string PriceTo = "PriceTo";
            public const string DisplayOnPrice = "DisplayOnPrice";
            public const string Description = "Description";
            public const string Name_ru = "Name_ru";
            public const string Name_en = "Name_en";
            public const string Description_ru = "Description_ru";
            public const string Description_en = "Description_en";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MerchandiseID] = _Merchandise.ColumnNames.MerchandiseID;
					ht[Name] = _Merchandise.ColumnNames.Name;
					ht[PhotoName] = _Merchandise.ColumnNames.PhotoName;
					ht[CategoryID] = _Merchandise.ColumnNames.CategoryID;
					ht[PriceFrom] = _Merchandise.ColumnNames.PriceFrom;
					ht[PriceTo] = _Merchandise.ColumnNames.PriceTo;
					ht[DisplayOnPrice] = _Merchandise.ColumnNames.DisplayOnPrice;
					ht[Description] = _Merchandise.ColumnNames.Description;
					ht[Name_ru] = _Merchandise.ColumnNames.Name_ru;
					ht[Name_en] = _Merchandise.ColumnNames.Name_en;
					ht[Description_ru] = _Merchandise.ColumnNames.Description_ru;
					ht[Description_en] = _Merchandise.ColumnNames.Description_en;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string MerchandiseID = "s_MerchandiseID";
            public const string Name = "s_Name";
            public const string PhotoName = "s_PhotoName";
            public const string CategoryID = "s_CategoryID";
            public const string PriceFrom = "s_PriceFrom";
            public const string PriceTo = "s_PriceTo";
            public const string DisplayOnPrice = "s_DisplayOnPrice";
            public const string Description = "s_Description";
            public const string Name_ru = "s_Name_ru";
            public const string Name_en = "s_Name_en";
            public const string Description_ru = "s_Description_ru";
            public const string Description_en = "s_Description_en";

		}
		#endregion		
		
		#region Properties
	
		public virtual int MerchandiseID
	    {
			get
	        {
				return base.Getint(ColumnNames.MerchandiseID);
			}
			set
	        {
				base.Setint(ColumnNames.MerchandiseID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string PhotoName
	    {
			get
	        {
				return base.Getstring(ColumnNames.PhotoName);
			}
			set
	        {
				base.Setstring(ColumnNames.PhotoName, value);
			}
		}

		public virtual int CategoryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CategoryID);
			}
			set
	        {
				base.Setint(ColumnNames.CategoryID, value);
			}
		}

		public virtual decimal PriceFrom
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.PriceFrom);
			}
			set
	        {
				base.Setdecimal(ColumnNames.PriceFrom, value);
			}
		}

		public virtual decimal PriceTo
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.PriceTo);
			}
			set
	        {
				base.Setdecimal(ColumnNames.PriceTo, value);
			}
		}

		public virtual bool DisplayOnPrice
	    {
			get
	        {
				return base.Getbool(ColumnNames.DisplayOnPrice);
			}
			set
	        {
				base.Setbool(ColumnNames.DisplayOnPrice, value);
			}
		}

		public virtual string Description
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description);
			}
			set
	        {
				base.Setstring(ColumnNames.Description, value);
			}
		}

		public virtual string Name_ru
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name_ru);
			}
			set
	        {
				base.Setstring(ColumnNames.Name_ru, value);
			}
		}

		public virtual string Name_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name_en);
			}
			set
	        {
				base.Setstring(ColumnNames.Name_en, value);
			}
		}

		public virtual string Description_ru
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description_ru);
			}
			set
	        {
				base.Setstring(ColumnNames.Description_ru, value);
			}
		}

		public virtual string Description_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description_en);
			}
			set
	        {
				base.Setstring(ColumnNames.Description_en, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_MerchandiseID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MerchandiseID) ? string.Empty : base.GetintAsString(ColumnNames.MerchandiseID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MerchandiseID);
				else
					this.MerchandiseID = base.SetintAsString(ColumnNames.MerchandiseID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_PhotoName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhotoName) ? string.Empty : base.GetstringAsString(ColumnNames.PhotoName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhotoName);
				else
					this.PhotoName = base.SetstringAsString(ColumnNames.PhotoName, value);
			}
		}

		public virtual string s_CategoryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CategoryID) ? string.Empty : base.GetintAsString(ColumnNames.CategoryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CategoryID);
				else
					this.CategoryID = base.SetintAsString(ColumnNames.CategoryID, value);
			}
		}

		public virtual string s_PriceFrom
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceFrom) ? string.Empty : base.GetdecimalAsString(ColumnNames.PriceFrom);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceFrom);
				else
					this.PriceFrom = base.SetdecimalAsString(ColumnNames.PriceFrom, value);
			}
		}

		public virtual string s_PriceTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceTo) ? string.Empty : base.GetdecimalAsString(ColumnNames.PriceTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceTo);
				else
					this.PriceTo = base.SetdecimalAsString(ColumnNames.PriceTo, value);
			}
		}

		public virtual string s_DisplayOnPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DisplayOnPrice) ? string.Empty : base.GetboolAsString(ColumnNames.DisplayOnPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DisplayOnPrice);
				else
					this.DisplayOnPrice = base.SetboolAsString(ColumnNames.DisplayOnPrice, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_Name_ru
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name_ru) ? string.Empty : base.GetstringAsString(ColumnNames.Name_ru);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name_ru);
				else
					this.Name_ru = base.SetstringAsString(ColumnNames.Name_ru, value);
			}
		}

		public virtual string s_Name_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name_en) ? string.Empty : base.GetstringAsString(ColumnNames.Name_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name_en);
				else
					this.Name_en = base.SetstringAsString(ColumnNames.Name_en, value);
			}
		}

		public virtual string s_Description_ru
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description_ru) ? string.Empty : base.GetstringAsString(ColumnNames.Description_ru);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description_ru);
				else
					this.Description_ru = base.SetstringAsString(ColumnNames.Description_ru, value);
			}
		}

		public virtual string s_Description_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description_en) ? string.Empty : base.GetstringAsString(ColumnNames.Description_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description_en);
				else
					this.Description_en = base.SetstringAsString(ColumnNames.Description_en, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter MerchandiseID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MerchandiseID, Parameters.MerchandiseID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhotoName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhotoName, Parameters.PhotoName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CategoryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CategoryID, Parameters.CategoryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceFrom
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceFrom, Parameters.PriceFrom);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceTo, Parameters.PriceTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DisplayOnPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DisplayOnPrice, Parameters.DisplayOnPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name_ru
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name_ru, Parameters.Name_ru);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name_en, Parameters.Name_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description_ru
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description_ru, Parameters.Description_ru);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description_en, Parameters.Description_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter MerchandiseID
		    {
				get
		        {
					if(_MerchandiseID_W == null)
	        	    {
						_MerchandiseID_W = TearOff.MerchandiseID;
					}
					return _MerchandiseID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter PhotoName
		    {
				get
		        {
					if(_PhotoName_W == null)
	        	    {
						_PhotoName_W = TearOff.PhotoName;
					}
					return _PhotoName_W;
				}
			}

			public WhereParameter CategoryID
		    {
				get
		        {
					if(_CategoryID_W == null)
	        	    {
						_CategoryID_W = TearOff.CategoryID;
					}
					return _CategoryID_W;
				}
			}

			public WhereParameter PriceFrom
		    {
				get
		        {
					if(_PriceFrom_W == null)
	        	    {
						_PriceFrom_W = TearOff.PriceFrom;
					}
					return _PriceFrom_W;
				}
			}

			public WhereParameter PriceTo
		    {
				get
		        {
					if(_PriceTo_W == null)
	        	    {
						_PriceTo_W = TearOff.PriceTo;
					}
					return _PriceTo_W;
				}
			}

			public WhereParameter DisplayOnPrice
		    {
				get
		        {
					if(_DisplayOnPrice_W == null)
	        	    {
						_DisplayOnPrice_W = TearOff.DisplayOnPrice;
					}
					return _DisplayOnPrice_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter Name_ru
		    {
				get
		        {
					if(_Name_ru_W == null)
	        	    {
						_Name_ru_W = TearOff.Name_ru;
					}
					return _Name_ru_W;
				}
			}

			public WhereParameter Name_en
		    {
				get
		        {
					if(_Name_en_W == null)
	        	    {
						_Name_en_W = TearOff.Name_en;
					}
					return _Name_en_W;
				}
			}

			public WhereParameter Description_ru
		    {
				get
		        {
					if(_Description_ru_W == null)
	        	    {
						_Description_ru_W = TearOff.Description_ru;
					}
					return _Description_ru_W;
				}
			}

			public WhereParameter Description_en
		    {
				get
		        {
					if(_Description_en_W == null)
	        	    {
						_Description_en_W = TearOff.Description_en;
					}
					return _Description_en_W;
				}
			}

			private WhereParameter _MerchandiseID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _PhotoName_W = null;
			private WhereParameter _CategoryID_W = null;
			private WhereParameter _PriceFrom_W = null;
			private WhereParameter _PriceTo_W = null;
			private WhereParameter _DisplayOnPrice_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _Name_ru_W = null;
			private WhereParameter _Name_en_W = null;
			private WhereParameter _Description_ru_W = null;
			private WhereParameter _Description_en_W = null;

			public void WhereClauseReset()
			{
				_MerchandiseID_W = null;
				_Name_W = null;
				_PhotoName_W = null;
				_CategoryID_W = null;
				_PriceFrom_W = null;
				_PriceTo_W = null;
				_DisplayOnPrice_W = null;
				_Description_W = null;
				_Name_ru_W = null;
				_Name_en_W = null;
				_Description_ru_W = null;
				_Description_en_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter MerchandiseID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MerchandiseID, Parameters.MerchandiseID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhotoName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhotoName, Parameters.PhotoName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CategoryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CategoryID, Parameters.CategoryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceFrom
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceFrom, Parameters.PriceFrom);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceTo, Parameters.PriceTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DisplayOnPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DisplayOnPrice, Parameters.DisplayOnPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name_ru
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name_ru, Parameters.Name_ru);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name_en, Parameters.Name_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description_ru
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description_ru, Parameters.Description_ru);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description_en, Parameters.Description_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter MerchandiseID
		    {
				get
		        {
					if(_MerchandiseID_W == null)
	        	    {
						_MerchandiseID_W = TearOff.MerchandiseID;
					}
					return _MerchandiseID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter PhotoName
		    {
				get
		        {
					if(_PhotoName_W == null)
	        	    {
						_PhotoName_W = TearOff.PhotoName;
					}
					return _PhotoName_W;
				}
			}

			public AggregateParameter CategoryID
		    {
				get
		        {
					if(_CategoryID_W == null)
	        	    {
						_CategoryID_W = TearOff.CategoryID;
					}
					return _CategoryID_W;
				}
			}

			public AggregateParameter PriceFrom
		    {
				get
		        {
					if(_PriceFrom_W == null)
	        	    {
						_PriceFrom_W = TearOff.PriceFrom;
					}
					return _PriceFrom_W;
				}
			}

			public AggregateParameter PriceTo
		    {
				get
		        {
					if(_PriceTo_W == null)
	        	    {
						_PriceTo_W = TearOff.PriceTo;
					}
					return _PriceTo_W;
				}
			}

			public AggregateParameter DisplayOnPrice
		    {
				get
		        {
					if(_DisplayOnPrice_W == null)
	        	    {
						_DisplayOnPrice_W = TearOff.DisplayOnPrice;
					}
					return _DisplayOnPrice_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter Name_ru
		    {
				get
		        {
					if(_Name_ru_W == null)
	        	    {
						_Name_ru_W = TearOff.Name_ru;
					}
					return _Name_ru_W;
				}
			}

			public AggregateParameter Name_en
		    {
				get
		        {
					if(_Name_en_W == null)
	        	    {
						_Name_en_W = TearOff.Name_en;
					}
					return _Name_en_W;
				}
			}

			public AggregateParameter Description_ru
		    {
				get
		        {
					if(_Description_ru_W == null)
	        	    {
						_Description_ru_W = TearOff.Description_ru;
					}
					return _Description_ru_W;
				}
			}

			public AggregateParameter Description_en
		    {
				get
		        {
					if(_Description_en_W == null)
	        	    {
						_Description_en_W = TearOff.Description_en;
					}
					return _Description_en_W;
				}
			}

			private AggregateParameter _MerchandiseID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _PhotoName_W = null;
			private AggregateParameter _CategoryID_W = null;
			private AggregateParameter _PriceFrom_W = null;
			private AggregateParameter _PriceTo_W = null;
			private AggregateParameter _DisplayOnPrice_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _Name_ru_W = null;
			private AggregateParameter _Name_en_W = null;
			private AggregateParameter _Description_ru_W = null;
			private AggregateParameter _Description_en_W = null;

			public void AggregateClauseReset()
			{
				_MerchandiseID_W = null;
				_Name_W = null;
				_PhotoName_W = null;
				_CategoryID_W = null;
				_PriceFrom_W = null;
				_PriceTo_W = null;
				_DisplayOnPrice_W = null;
				_Description_W = null;
				_Name_ru_W = null;
				_Name_en_W = null;
				_Description_ru_W = null;
				_Description_en_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertMerchandise]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.MerchandiseID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateMerchandise]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteMerchandise]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.MerchandiseID);
			p.SourceColumn = ColumnNames.MerchandiseID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.MerchandiseID);
			p.SourceColumn = ColumnNames.MerchandiseID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhotoName);
			p.SourceColumn = ColumnNames.PhotoName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CategoryID);
			p.SourceColumn = ColumnNames.CategoryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceFrom);
			p.SourceColumn = ColumnNames.PriceFrom;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceTo);
			p.SourceColumn = ColumnNames.PriceTo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DisplayOnPrice);
			p.SourceColumn = ColumnNames.DisplayOnPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description);
			p.SourceColumn = ColumnNames.Description;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name_ru);
			p.SourceColumn = ColumnNames.Name_ru;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name_en);
			p.SourceColumn = ColumnNames.Name_en;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description_ru);
			p.SourceColumn = ColumnNames.Description_ru;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description_en);
			p.SourceColumn = ColumnNames.Description_en;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
