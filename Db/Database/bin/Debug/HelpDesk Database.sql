/*
Deployment script for HelpDesk Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HelpDesk Database"
:setvar DefaultFilePrefix "HelpDesk Database"
:setvar DefaultDataPath "C:\Users\Vladyka\AppData\Local\Microsoft\VisualStudio\SSDT\HelpDesk Database\"
:setvar DefaultLogPath "C:\Users\Vladyka\AppData\Local\Microsoft\VisualStudio\SSDT\HelpDesk Database\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
        
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[AccessKey]...';


GO
CREATE TABLE [dbo].[AccessKey] (
    [CompanyID]        INT           NOT NULL,
    [AccessKeyID]      INT           IDENTITY (1, 1) NOT NULL,
    [UserID]           INT           NULL,
    [AccessKeyTypeID]  INT           NOT NULL,
    [PublicAccessKey]  NVARCHAR (50) NULL,
    [PrivateAccessKey] NVARCHAR (50) NULL,
    CONSTRAINT [PK_AccessKey] PRIMARY KEY CLUSTERED ([CompanyID] ASC, [AccessKeyID] ASC)
);


GO
PRINT N'Creating [dbo].[AccessKeyType]...';


GO
CREATE TABLE [dbo].[AccessKeyType] (
    [AccessKeyTypeID]  INT            IDENTITY (1, 1) NOT NULL,
    [Name]             NVARCHAR (50)  NOT NULL,
    [Description]      NVARCHAR (250) NULL,
    [EnableUser]       BIT            NOT NULL,
    [EnablePrivateKey] BIT            NOT NULL,
    CONSTRAINT [PK_AccessKeyType] PRIMARY KEY CLUSTERED ([AccessKeyTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[AccountFiles]...';


GO
CREATE TABLE [dbo].[AccountFiles] (
    [DId]          INT            NOT NULL,
    [AcctId]       INT            NOT NULL,
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [intBWAFileId] INT            NOT NULL,
    [vchName]      NVARCHAR (100) NOT NULL,
    [tintVersion]  TINYINT        NOT NULL,
    [intSizeKB]    INT            NOT NULL,
    [dtModified]   SMALLDATETIME  NOT NULL,
    CONSTRAINT [pk_AcctFiles] PRIMARY KEY CLUSTERED ([DId] ASC, [AcctId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AccountFilters]...';


GO
CREATE TABLE [dbo].[AccountFilters] (
    [DId]           INT           NOT NULL,
    [UId]           INT           NOT NULL,
    [vchAcctFields] NVARCHAR (30) NULL,
    [vchAcctSort]   NVARCHAR (25) NULL,
    CONSTRAINT [pk_AcctFilters] PRIMARY KEY CLUSTERED ([DId] ASC, [UId] ASC)
);


GO
PRINT N'Creating [dbo].[AccountLevels]...';


GO
CREATE TABLE [dbo].[AccountLevels] (
    [DId]               INT     NOT NULL,
    [AcctId]            INT     NOT NULL,
    [tintLevel]         TINYINT NOT NULL,
    [tintRoutingOption] TINYINT NOT NULL,
    CONSTRAINT [pk_AcctLvls] PRIMARY KEY CLUSTERED ([DId] ASC, [AcctId] ASC, [tintLevel] ASC)
);


GO
PRINT N'Creating [dbo].[AccountLevelTechs]...';


GO
CREATE TABLE [dbo].[AccountLevelTechs] (
    [DId]       INT     NOT NULL,
    [AcctId]    INT     NOT NULL,
    [tintLevel] TINYINT NOT NULL,
    [UId]       INT     NOT NULL,
    CONSTRAINT [pk_ALT] PRIMARY KEY CLUSTERED ([DId] ASC, [AcctId] ASC, [tintLevel] ASC, [UId] ASC)
);


GO
PRINT N'Creating [dbo].[AccountLocations]...';


GO
CREATE TABLE [dbo].[AccountLocations] (
    [DId]            INT           NOT NULL,
    [AccountId]      INT           NOT NULL,
    [Id]             INT           IDENTITY (1, 1) NOT NULL,
    [vchName]        NVARCHAR (25) NOT NULL,
    [vchAddress1]    NVARCHAR (50) NULL,
    [vchAddress2]    NVARCHAR (50) NULL,
    [vchCity]        NVARCHAR (25) NULL,
    [vchStateProv]   NVARCHAR (25) NULL,
    [vchPostalCode]  NVARCHAR (10) NULL,
    [vchCountry]     NVARCHAR (25) NULL,
    [sintHourOffset] SMALLINT      NULL,
    [vchPhone1]      NVARCHAR (20) NULL,
    [vchPhone2]      NVARCHAR (20) NULL,
    [dtUpdated]      SMALLDATETIME NOT NULL,
    [UpdatedId]      INT           NOT NULL,
    [btDefault]      BIT           NOT NULL,
    CONSTRAINT [pk_AccountLocations] PRIMARY KEY CLUSTERED ([DId] ASC, [AccountId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AccountRate]...';


GO
CREATE TABLE [dbo].[AccountRate] (
    [AccountRateID]     INT            IDENTITY (1, 1) NOT NULL,
    [CompanyID]         INT            NOT NULL,
    [AccountID]         INT            NULL,
    [BillingMethodID]   TINYINT        NULL,
    [FlatFee]           MONEY          NULL,
    [HourlyBlendedRate] SMALLMONEY     NULL,
    [RatePlanID]        INT            NULL,
    [FlatFeeMode]       INT            NULL,
    [FlatFeeNextDate]   SMALLDATETIME  NULL,
    [QBAccountAlias]    NVARCHAR (200) NULL,
    [QBItemAlias]       NVARCHAR (200) NULL,
    CONSTRAINT [PK_AccountRate] PRIMARY KEY CLUSTERED ([CompanyID] ASC, [AccountRateID] ASC)
);


GO
PRINT N'Creating [dbo].[AccountRate].[IX_AccountRate]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_AccountRate]
    ON [dbo].[AccountRate]([CompanyID] ASC, [AccountID] ASC);


GO
PRINT N'Creating [dbo].[AccountRetainer]...';


GO
CREATE TABLE [dbo].[AccountRetainer] (
    [DId]       INT           NOT NULL,
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [AccountId] INT           NULL,
    [TechId]    INT           NOT NULL,
    [Amount]    MONEY         NOT NULL,
    [StartDate] SMALLDATETIME NOT NULL,
    [EndDate]   SMALLDATETIME NULL,
    CONSTRAINT [PK_AccountRetainer] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[Accounts]...';


GO
CREATE TABLE [dbo].[Accounts] (
    [DId]                                   INT              NOT NULL,
    [Id]                                    INT              IDENTITY (1, 1) NOT NULL,
    [intBWDAcctNum]                         INT              NOT NULL,
    [btOrgAcct]                             BIT              NOT NULL,
    [vchAcctNum]                            NVARCHAR (25)    NULL,
    [vchRef1Num]                            NVARCHAR (25)    NULL,
    [vchRef2Num]                            NVARCHAR (25)    NULL,
    [location_id]                           INT              NULL,
    [SupGroupId]                            INT              NULL,
    [txtNote]                               NTEXT            NULL,
    [vchCust1]                              NVARCHAR (1000)  NULL,
    [vchCust2]                              NVARCHAR (1000)  NULL,
    [vchCust3]                              NVARCHAR (1000)  NULL,
    [vchCust4]                              NVARCHAR (1000)  NULL,
    [dtCust1]                               SMALLDATETIME    NULL,
    [dtCust2]                               SMALLDATETIME    NULL,
    [dtUpdated]                             SMALLDATETIME    NOT NULL,
    [UpdatedId]                             INT              NOT NULL,
    [btActive]                              BIT              NOT NULL,
    [vchName]                               NVARCHAR (100)   NOT NULL,
    [AcctRepId]                             INT              NOT NULL,
    [vchEmailSuffix]                        NVARCHAR (75)    NULL,
    [vchCust5]                              NVARCHAR (1000)  NULL,
    [vchCust6]                              NVARCHAR (1000)  NULL,
    [vchCust7]                              NVARCHAR (1000)  NULL,
    [vchCust8]                              NVARCHAR (1000)  NULL,
    [LocationId]                            INT              NULL,
    [vchCust10]                             NVARCHAR (1000)  NULL,
    [vchCust11]                             NVARCHAR (1000)  NULL,
    [vchCust12]                             NVARCHAR (1000)  NULL,
    [vchCust13]                             NVARCHAR (1000)  NULL,
    [vchCust14]                             NVARCHAR (1000)  NULL,
    [vchCust15]                             NVARCHAR (1000)  NULL,
    [vchCust9]                              NVARCHAR (1000)  NULL,
    [FBClientId]                            INT              NULL,
    [AccLevelTimeTracking]                  BIT              NOT NULL,
    [Guid]                                  UNIQUEIDENTIFIER NOT NULL,
    [City]                                  NVARCHAR (50)    NULL,
    [Country]                               NVARCHAR (50)    NULL,
    [Phone1]                                NVARCHAR (50)    NULL,
    [Phone2]                                NVARCHAR (50)    NULL,
    [State]                                 NVARCHAR (50)    NULL,
    [TimeZone]                              SMALLINT         NULL,
    [ZipCode]                               NVARCHAR (50)    NULL,
    [btCfgSupportPortal]                    BIT              NOT NULL,
    [btSPLimitNewUsersToKnownEmailSuffixes] BIT              NOT NULL,
    [SupportPhone]                          NVARCHAR (20)    NULL,
    [SupportEmail]                          NVARCHAR (50)    NULL,
    [Address1]                              NVARCHAR (255)   NULL,
    [Address2]                              NVARCHAR (255)   NULL,
    [LogoBackLinkURL]                       NVARCHAR (200)   NULL,
    [SPTitle]                               NVARCHAR (50)    NULL,
    [SPDisableCSS]                          BIT              NOT NULL,
    [SPFacebook]                            NVARCHAR (50)    NULL,
    [SPTwitter1]                            NVARCHAR (50)    NULL,
    [SPTwitter2]                            NVARCHAR (50)    NULL,
    [TimeZoneId]                            NVARCHAR (100)   NULL,
    [FBDefaultProjectId]                    INT              NULL,
    CONSTRAINT [PK_Accounts] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AccountsCfg]...';


GO
CREATE TABLE [dbo].[AccountsCfg] (
    [DId]              INT             NOT NULL,
    [intNextAcctNum]   INT             NOT NULL,
    [btCust1On]        BIT             NOT NULL,
    [btCust1Type]      BIT             NOT NULL,
    [vchCust1Cap]      NVARCHAR (25)   NULL,
    [vchCust1Options]  NVARCHAR (1000) NULL,
    [btCust2On]        BIT             NOT NULL,
    [btCust2Type]      BIT             NOT NULL,
    [vchCust2Cap]      NVARCHAR (25)   NULL,
    [vchCust2Options]  NVARCHAR (1000) NULL,
    [btCust3On]        BIT             NOT NULL,
    [btCust3Type]      BIT             NOT NULL,
    [vchCust3Cap]      NVARCHAR (25)   NULL,
    [vchCust3Options]  NVARCHAR (1000) NULL,
    [btCust4On]        BIT             NOT NULL,
    [btCust4Type]      BIT             NOT NULL,
    [vchCust4Cap]      NVARCHAR (25)   NULL,
    [vchCust4Options]  NVARCHAR (1000) NULL,
    [btCust5On]        BIT             NOT NULL,
    [btCust5Type]      BIT             NOT NULL,
    [vchCust5Cap]      NVARCHAR (25)   NULL,
    [vchCust5Options]  NVARCHAR (1000) NULL,
    [btCust6On]        BIT             NOT NULL,
    [btCust6Type]      BIT             NOT NULL,
    [vchCust6Cap]      NVARCHAR (25)   NULL,
    [vchCust6Options]  NVARCHAR (1000) NULL,
    [btCust7On]        BIT             NOT NULL,
    [btCust7Type]      BIT             NOT NULL,
    [vchCust7Cap]      NVARCHAR (25)   NULL,
    [vchCust7Options]  NVARCHAR (1000) NULL,
    [btCust8On]        BIT             NOT NULL,
    [btCust8Type]      BIT             NOT NULL,
    [vchCust8Cap]      NVARCHAR (25)   NULL,
    [vchCust8Options]  NVARCHAR (1000) NULL,
    [btCust9On]        BIT             NOT NULL,
    [btCust9Type]      BIT             NOT NULL,
    [vchCust9Cap]      NVARCHAR (25)   NULL,
    [vchCust9Options]  NVARCHAR (1000) NULL,
    [btCust10On]       BIT             NOT NULL,
    [btCust10Type]     BIT             NOT NULL,
    [vchCust10Cap]     NVARCHAR (25)   NULL,
    [vchCust10Options] NVARCHAR (1000) NULL,
    [btDateCust1On]    BIT             NOT NULL,
    [btCust11On]       BIT             NOT NULL,
    [btCust11Type]     BIT             NOT NULL,
    [vchCust11Cap]     NVARCHAR (25)   NULL,
    [vchCust11Options] NVARCHAR (1000) NULL,
    [btCust12On]       BIT             NOT NULL,
    [btCust12Type]     BIT             NOT NULL,
    [vchCust12Cap]     NVARCHAR (25)   NULL,
    [vchCust12Options] NVARCHAR (1000) NULL,
    [btCust13On]       BIT             NOT NULL,
    [btCust13Type]     BIT             NOT NULL,
    [vchCust13Cap]     NVARCHAR (25)   NULL,
    [vchCust13Options] NVARCHAR (1000) NULL,
    [btCust14On]       BIT             NOT NULL,
    [btCust14Type]     BIT             NOT NULL,
    [vchCust14Cap]     NVARCHAR (25)   NULL,
    [vchCust14Options] NVARCHAR (1000) NULL,
    [btCust15On]       BIT             NOT NULL,
    [btCust15Type]     BIT             NOT NULL,
    [vchCust15Cap]     NVARCHAR (25)   NULL,
    [vchCust15Options] NVARCHAR (1000) NULL,
    [vchDateCust1Cap]  NVARCHAR (25)   NULL,
    [btDateCust2On]    BIT             NOT NULL,
    [vchDateCust2Cap]  NVARCHAR (25)   NULL,
    [btCust1Req]       BIT             NOT NULL,
    [btCust2Req]       BIT             NOT NULL,
    [btCust3Req]       BIT             NOT NULL,
    [btCust4Req]       BIT             NOT NULL,
    [btCust5Req]       BIT             NOT NULL,
    [btCust6Req]       BIT             NOT NULL,
    [btCust7Req]       BIT             NOT NULL,
    [btCust8Req]       BIT             NOT NULL,
    [btCust9Req]       BIT             NOT NULL,
    [btCust10Req]      BIT             NOT NULL,
    [btCust11Req]      BIT             NOT NULL,
    [btCust12Req]      BIT             NOT NULL,
    [btCust13Req]      BIT             NOT NULL,
    [btCust14Req]      BIT             NOT NULL,
    [btCust15Req]      BIT             NOT NULL,
    [btDateCust1Req]   BIT             NOT NULL,
    [btDateCust2Req]   BIT             NOT NULL,
    [vchCust1Default]  NVARCHAR (1000) NULL,
    [vchCust2Default]  NVARCHAR (1000) NULL,
    [vchCust3Default]  NVARCHAR (1000) NULL,
    [vchCust4Default]  NVARCHAR (1000) NULL,
    [vchCust5Default]  NVARCHAR (1000) NULL,
    [vchCust6Default]  NVARCHAR (1000) NULL,
    [vchCust7Default]  NVARCHAR (1000) NULL,
    [vchCust8Default]  NVARCHAR (1000) NULL,
    [vchCust9Default]  NVARCHAR (1000) NULL,
    [vchCust10Default] NVARCHAR (1000) NULL,
    [vchCust11Default] NVARCHAR (1000) NULL,
    [vchCust12Default] NVARCHAR (1000) NULL,
    [vchCust13Default] NVARCHAR (1000) NULL,
    [vchCust14Default] NVARCHAR (1000) NULL,
    [vchCust15Default] NVARCHAR (1000) NULL,
    [isProject]        BIT             NOT NULL,
    CONSTRAINT [PK_AcctsCfg_DId] PRIMARY KEY CLUSTERED ([DId] ASC, [isProject] ASC)
);


GO
PRINT N'Creating [dbo].[AccountTaskTypeRate]...';


GO
CREATE TABLE [dbo].[AccountTaskTypeRate] (
    [AccountTaskTypeRateID] INT        IDENTITY (1, 1) NOT NULL,
    [CompanyID]             INT        NOT NULL,
    [AccountID]             INT        NULL,
    [TaskTypeID]            INT        NOT NULL,
    [HourlyRate]            SMALLMONEY NULL,
    CONSTRAINT [PK_AccountTaskTypeRate] PRIMARY KEY CLUSTERED ([CompanyID] ASC, [AccountTaskTypeRateID] ASC)
);


GO
PRINT N'Creating [dbo].[AccountTech]...';


GO
CREATE TABLE [dbo].[AccountTech] (
    [AccountTechID] INT IDENTITY (1, 1) NOT NULL,
    [CompanyID]     INT NOT NULL,
    [AccountID]     INT NULL,
    [TechID]        INT NULL,
    CONSTRAINT [PK_AccountTech] PRIMARY KEY CLUSTERED ([CompanyID] ASC, [AccountTechID] ASC)
);


GO
PRINT N'Creating [dbo].[AssetBulk]...';


GO
CREATE TABLE [dbo].[AssetBulk] (
    [DepartmentId] INT            NOT NULL,
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [CategoryId]   INT            NOT NULL,
    [TypeId]       INT            NOT NULL,
    [Name]         NVARCHAR (50)  NOT NULL,
    [Description]  NVARCHAR (250) NULL,
    [Active]       BIT            NOT NULL,
    [Created]      DATETIME       NOT NULL,
    [CreatedBy]    INT            NOT NULL,
    [Updated]      DATETIME       NULL,
    [UpdatedBy]    INT            NULL,
    CONSTRAINT [PK_AssetBulk] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetBulkLocation]...';


GO
CREATE TABLE [dbo].[AssetBulkLocation] (
    [DId]            INT      NOT NULL,
    [Id]             INT      IDENTITY (1, 1) NOT NULL,
    [AssetBulkId]    INT      NOT NULL,
    [LocationId]     INT      NOT NULL,
    [AuditDate]      DATETIME NOT NULL,
    [Quantity]       INT      NOT NULL,
    [ExcessQuantity] INT      NOT NULL,
    [Created]        DATETIME NOT NULL,
    [CreatedBy]      INT      NOT NULL,
    [AuditId]        INT      NULL,
    CONSTRAINT [PK_AssetBulkLocation] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetCategories]...';


GO
CREATE TABLE [dbo].[AssetCategories] (
    [id]           INT           IDENTITY (1, 1) NOT NULL,
    [DepartmentId] INT           NOT NULL,
    [Name]         NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_AssetCategories] PRIMARY KEY NONCLUSTERED ([DepartmentId] ASC, [id] ASC),
    CONSTRAINT [CL_AssetCategories] UNIQUE CLUSTERED ([DepartmentId] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetColumnSettings]...';


GO
CREATE TABLE [dbo].[AssetColumnSettings] (
    [DId]   INT            NOT NULL,
    [Id]    INT            IDENTITY (1, 1) NOT NULL,
    [UId]   INT            NOT NULL,
    [Name]  NVARCHAR (255) NOT NULL,
    [State] NVARCHAR (512) NULL,
    CONSTRAINT [PK_AssetColumnSettings] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC),
    CONSTRAINT [IX_AssetColumnSettings_Name] UNIQUE NONCLUSTERED ([DId] ASC, [UId] ASC, [Name] ASC)
);


GO
PRINT N'Creating [dbo].[AssetColumnSettings].[IX_AssetColumnSettings_UId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssetColumnSettings_UId]
    ON [dbo].[AssetColumnSettings]([UId] ASC);


GO
PRINT N'Creating [dbo].[AssetComputerLogicalDrives]...';


GO
CREATE TABLE [dbo].[AssetComputerLogicalDrives] (
    [DepartmentId] INT            NOT NULL,
    [AssetId]      INT            NOT NULL,
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [DeviceID]     NVARCHAR (50)  NULL,
    [FileSystem]   NVARCHAR (50)  NULL,
    [SizeGB]       FLOAT (53)     NULL,
    [FreeSpaceGB]  FLOAT (53)     NULL,
    [Description]  NVARCHAR (MAX) NULL,
    [VolumeName]   NVARCHAR (250) NULL,
    [VolumeSerial] NVARCHAR (50)  NULL,
    [Compressed]   BIT            NULL,
    [DriveType]    NVARCHAR (50)  NULL,
    CONSTRAINT [PK_AssetComputerLogicalDrives] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [AssetId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetComputerPrinters]...';


GO
CREATE TABLE [dbo].[AssetComputerPrinters] (
    [DepartmentId]  INT            NOT NULL,
    [AssetId]       INT            NOT NULL,
    [Id]            INT            IDENTITY (1, 1) NOT NULL,
    [PrinterName]   NVARCHAR (250) NULL,
    [PrinterDriver] NVARCHAR (250) NULL,
    [PrinterPort]   NVARCHAR (250) NULL,
    CONSTRAINT [PK_AssetComputerPrinters] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [AssetId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetComputerProcessors]...';


GO
CREATE TABLE [dbo].[AssetComputerProcessors] (
    [DepartmentId]      INT            NOT NULL,
    [AssetId]           INT            NOT NULL,
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [CPUType]           NVARCHAR (250) NULL,
    [CPUSerial]         NVARCHAR (50)  NULL,
    [CPUVendor]         NVARCHAR (250) NULL,
    [CPUSpeedMHz]       INT            NULL,
    [CPUClass]          NVARCHAR (250) NULL,
    [CurrentClockSpeed] INT            NULL,
    [UniqueId]          NVARCHAR (50)  NULL,
    [Description]       NVARCHAR (MAX) NULL,
    [Version]           NVARCHAR (50)  NULL,
    [L2CachSize]        INT            NULL,
    [ExtClock]          INT            NULL,
    [CurrentVoltage]    FLOAT (53)     NULL,
    [DeviceID]          NVARCHAR (50)  NULL,
    CONSTRAINT [PK_AssetComputerProcessors] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [AssetId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetComputers]...';


GO
CREATE TABLE [dbo].[AssetComputers] (
    [DepartmentId]            INT            NOT NULL,
    [AssetId]                 INT            NOT NULL,
    [RegisteredUser]          NVARCHAR (250) NULL,
    [OperatingSystem]         NVARCHAR (250) NULL,
    [OSSerial]                NVARCHAR (50)  NULL,
    [RamMbytes]               INT            NULL,
    [VideoDescription]        NVARCHAR (MAX) NULL,
    [VideoMemoryMbytes]       INT            NULL,
    [VideoHResolution]        INT            NULL,
    [VideoVResolution]        INT            NULL,
    [NetworkName]             NVARCHAR (250) NULL,
    [NetworkDomain]           NVARCHAR (250) NULL,
    [NetworkCard1IP]          NVARCHAR (50)  NULL,
    [NetworkCard1Mask]        NVARCHAR (50)  NULL,
    [NetworkCard1Gate]        NVARCHAR (50)  NULL,
    [NetworkCard1Address]     NVARCHAR (50)  NULL,
    [NetworkCard1Description] NVARCHAR (MAX) NULL,
    [BiosSerial]              NVARCHAR (250) NULL,
    [MotherboardSerial]       NVARCHAR (250) NULL,
    CONSTRAINT [PK_AssetComputers] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [AssetId] ASC)
);


GO
PRINT N'Creating [dbo].[AssetComputerSoftwares]...';


GO
CREATE TABLE [dbo].[AssetComputerSoftwares] (
    [DepartmentId]      INT            NOT NULL,
    [AssetId]           INT            NOT NULL,
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [SoftwareName]      NVARCHAR (MAX) NULL,
    [SoftwarePublisher] NVARCHAR (MAX) NULL,
    [SoftwareVersion]   NVARCHAR (50)  NULL,
    CONSTRAINT [PK_AssetComputerSoftwares] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [AssetId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetFilters]...';


GO
CREATE TABLE [dbo].[AssetFilters] (
    [DId]                  INT            NOT NULL,
    [Id]                   INT            IDENTITY (1, 1) NOT NULL,
    [UId]                  INT            NOT NULL,
    [AssetColumnSettingId] INT            NULL,
    [Name]                 NVARCHAR (255) NOT NULL,
    [FilterState]          NTEXT          NULL,
    CONSTRAINT [PK_AssetFilters] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC),
    CONSTRAINT [IX_AssetFilters_Name] UNIQUE NONCLUSTERED ([DId] ASC, [UId] ASC, [Name] ASC)
);


GO
PRINT N'Creating [dbo].[AssetFilters].[IX_AssetFilters_UId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssetFilters_UId]
    ON [dbo].[AssetFilters]([UId] ASC);


GO
PRINT N'Creating [dbo].[AssetImports]...';


GO
CREATE TABLE [dbo].[AssetImports] (
    [DepartmentId] INT      NOT NULL,
    [AssetId]      INT      NOT NULL,
    [ImportId]     INT      NOT NULL,
    [dtUpdated]    DATETIME NULL,
    [UpdatedBy]    INT      NULL,
    CONSTRAINT [PK_AssetImports] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [AssetId] ASC, [ImportId] ASC)
);


GO
PRINT N'Creating [dbo].[AssetLogs]...';


GO
CREATE TABLE [dbo].[AssetLogs] (
    [id]      INT           IDENTITY (1, 1) NOT NULL,
    [AssetId] INT           NOT NULL,
    [Note]    NTEXT         NOT NULL,
    [dtDate]  SMALLDATETIME NOT NULL,
    [Name]    NVARCHAR (75) NULL,
    CONSTRAINT [PK_AssetLogs] PRIMARY KEY NONCLUSTERED ([AssetId] ASC, [id] ASC),
    CONSTRAINT [CL_AssetLogs] UNIQUE CLUSTERED ([AssetId] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetMakes]...';


GO
CREATE TABLE [dbo].[AssetMakes] (
    [id]           INT           IDENTITY (1, 1) NOT NULL,
    [TypeId]       INT           NOT NULL,
    [Make]         NVARCHAR (50) NOT NULL,
    [DepartmentId] INT           NOT NULL,
    CONSTRAINT [PK_AssetMakes] PRIMARY KEY NONCLUSTERED ([DepartmentId] ASC, [id] ASC),
    CONSTRAINT [CL_DepartmentId_id] UNIQUE CLUSTERED ([DepartmentId] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetModels]...';


GO
CREATE TABLE [dbo].[AssetModels] (
    [id]           INT            IDENTITY (1, 1) NOT NULL,
    [MakeId]       INT            NOT NULL,
    [DepartmentId] INT            NOT NULL,
    [Model]        NVARCHAR (50)  NOT NULL,
    [Links]        NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_AssetModels] PRIMARY KEY NONCLUSTERED ([DepartmentId] ASC, [id] ASC),
    CONSTRAINT [DepartmentId_Id_CLU] UNIQUE CLUSTERED ([DepartmentId] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetOwnership]...';


GO
CREATE TABLE [dbo].[AssetOwnership] (
    [id]           INT           IDENTITY (1, 1) NOT NULL,
    [DId]          INT           NULL,
    [vchOwnership] NVARCHAR (30) NOT NULL,
    CONSTRAINT [PK__AssetOwnership__63CEACD4] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetProfiles]...';


GO
CREATE TABLE [dbo].[AssetProfiles] (
    [Id]   INT           NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_AssetProfiles] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetPropertyValues]...';


GO
CREATE TABLE [dbo].[AssetPropertyValues] (
    [DId]                 INT            NOT NULL,
    [Id]                  INT            IDENTITY (1, 1) NOT NULL,
    [AssetId]             INT            NOT NULL,
    [AssetTypePropertyId] INT            NOT NULL,
    [PropertyValue]       NVARCHAR (255) NULL,
    CONSTRAINT [PK_AssetPropertyValues] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetPropertyValues].[IX_AssetPropertyValues_AssetId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssetPropertyValues_AssetId]
    ON [dbo].[AssetPropertyValues]([DId] ASC, [AssetId] ASC);


GO
PRINT N'Creating [dbo].[AssetPropertyValues].[IX_AssetPropertyValues_AssetTypePropertyId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssetPropertyValues_AssetTypePropertyId]
    ON [dbo].[AssetPropertyValues]([DId] ASC, [AssetTypePropertyId] ASC);


GO
PRINT N'Creating [dbo].[Assets]...';


GO
CREATE TABLE [dbo].[Assets] (
    [DepartmentId]        INT              NOT NULL,
    [Id]                  INT              IDENTITY (1, 1) NOT NULL,
    [OwnerId]             INT              NULL,
    [CheckedOutId]        INT              NULL,
    [TypeId]              INT              NOT NULL,
    [MakeId]              INT              NULL,
    [ModelId]             INT              NULL,
    [location_id]         INT              NULL,
    [LocationId]          INT              NULL,
    [VendorId]            INT              NULL,
    [WarrantyVendor]      INT              NULL,
    [Name]                NVARCHAR (50)    NULL,
    [SerialNumber]        NVARCHAR (50)    NULL,
    [Description]         NVARCHAR (250)   NULL,
    [Value]               MONEY            NULL,
    [DateAquired]         SMALLDATETIME    NULL,
    [LaborWarrantyLength] TINYINT          NULL,
    [PartsWarrantyLength] TINYINT          NULL,
    [Notes]               NTEXT            NULL,
    [Room]                NVARCHAR (30)    NULL,
    [PONumber]            NVARCHAR (25)    NULL,
    [Active]              BIT              NOT NULL,
    [FundingCode]         NVARCHAR (40)    NULL,
    [CategoryId]          INT              NOT NULL,
    [StatusId]            INT              NOT NULL,
    [AssetSort]           SMALLINT         NOT NULL,
    [DatePurchased]       DATETIME         NULL,
    [DateDeployed]        DATETIME         NULL,
    [DateOutOfService]    DATETIME         NULL,
    [DateEntered]         DATETIME         NULL,
    [DateReceived]        DATETIME         NULL,
    [DateDisposed]        DATETIME         NULL,
    [ValueCurrent]        MONEY            NULL,
    [ValueReplacement]    MONEY            NULL,
    [ValueDepreciated]    MONEY            NULL,
    [ValueSalvage]        MONEY            NULL,
    [DisposalCost]        MONEY            NULL,
    [FundingSource]       NVARCHAR (40)    NULL,
    [dtUpdated]           DATETIME         NULL,
    [intUpdatedBy]        INT              NULL,
    [AccountId]           INT              NULL,
    [AssetNumber]         INT              NULL,
    [AssetGUID]           UNIQUEIDENTIFIER NOT NULL,
    [Unique1]             NVARCHAR (100)   NULL,
    [Unique2]             NVARCHAR (100)   NULL,
    [Unique3]             NVARCHAR (100)   NULL,
    [Unique4]             NVARCHAR (100)   NULL,
    [Unique5]             NVARCHAR (100)   NULL,
    [Unique6]             NVARCHAR (100)   NULL,
    [Unique7]             NVARCHAR (100)   NULL,
    [MergedId]            INT              NULL,
    [Lost]                BIT              NOT NULL,
    [LostOn]              DATETIME         NULL,
    [AuditNote]           NVARCHAR (500)   NULL,
    CONSTRAINT [PK_Assets_id] PRIMARY KEY NONCLUSTERED ([DepartmentId] ASC, [Id] ASC),
    CONSTRAINT [CL_Assets] UNIQUE CLUSTERED ([DepartmentId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetStatus]...';


GO
CREATE TABLE [dbo].[AssetStatus] (
    [id]        INT           IDENTITY (1, 1) NOT NULL,
    [DId]       INT           NULL,
    [vchStatus] NVARCHAR (30) NOT NULL,
    [NonActive] BIT           NOT NULL,
    CONSTRAINT [PK__AssetStatus__61E66462] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetStatusCompany]...';


GO
CREATE TABLE [dbo].[AssetStatusCompany] (
    [DId]           INT NOT NULL,
    [AssetStatusID] INT NOT NULL,
    [NonActive]     BIT NOT NULL,
    [EnableUse]     BIT NOT NULL,
    CONSTRAINT [PK_AssetStatusCompany] PRIMARY KEY CLUSTERED ([DId] ASC, [AssetStatusID] ASC)
);


GO
PRINT N'Creating [dbo].[AssetSubAssets]...';


GO
CREATE TABLE [dbo].[AssetSubAssets] (
    [DId]          INT            NOT NULL,
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [AssetId]      INT            NOT NULL,
    [AssetChildId] INT            NOT NULL,
    [Description]  NVARCHAR (255) NULL,
    CONSTRAINT [PK_AssetSubAssets] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetSubAssets].[IX_AssetSubAssets_AssetId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssetSubAssets_AssetId]
    ON [dbo].[AssetSubAssets]([DId] ASC, [AssetId] ASC);


GO
PRINT N'Creating [dbo].[AssetSubAssets].[IX_AssetSubAssets_AssetChildId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssetSubAssets_AssetChildId]
    ON [dbo].[AssetSubAssets]([DId] ASC, [AssetChildId] ASC);


GO
PRINT N'Creating [dbo].[AssetTypeCustCap]...';


GO
CREATE TABLE [dbo].[AssetTypeCustCap] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [TypeId]    INT            NOT NULL,
    [bit1Cap]   NVARCHAR (100) NULL,
    [bit2Cap]   NVARCHAR (100) NULL,
    [bit3Cap]   NVARCHAR (100) NULL,
    [bit4Cap]   NVARCHAR (100) NULL,
    [bit5Cap]   NVARCHAR (100) NULL,
    [bit6Cap]   NVARCHAR (100) NULL,
    [bit7Cap]   NVARCHAR (100) NULL,
    [bit8Cap]   NVARCHAR (100) NULL,
    [char1Cap]  NVARCHAR (100) NULL,
    [char2Cap]  NVARCHAR (100) NULL,
    [char3Cap]  NVARCHAR (100) NULL,
    [char4Cap]  NVARCHAR (100) NULL,
    [int1Cap]   NVARCHAR (100) NULL,
    [int2Cap]   NVARCHAR (100) NULL,
    [int3Cap]   NVARCHAR (100) NULL,
    [int4Cap]   NVARCHAR (100) NULL,
    [multi1Cap] NVARCHAR (100) NULL,
    [multi2Cap] NVARCHAR (100) NULL,
    [multi3Cap] NVARCHAR (100) NULL,
    [multi4Cap] NVARCHAR (100) NULL,
    [char5Cap]  NVARCHAR (100) NULL,
    [char6Cap]  NVARCHAR (100) NULL,
    [char7Cap]  NVARCHAR (100) NULL,
    [char8Cap]  NVARCHAR (100) NULL,
    [char9Cap]  NVARCHAR (100) NULL,
    [char10Cap] NVARCHAR (100) NULL,
    [char11Cap] NVARCHAR (100) NULL,
    [char12Cap] NVARCHAR (100) NULL,
    [char13Cap] NVARCHAR (100) NULL,
    [char14Cap] NVARCHAR (100) NULL,
    [char15Cap] NVARCHAR (100) NULL,
    [char16Cap] NVARCHAR (100) NULL,
    [dec1Cap]   NVARCHAR (100) NULL,
    [dec2Cap]   NVARCHAR (100) NULL,
    [dec3Cap]   NVARCHAR (100) NULL,
    [dec4Cap]   NVARCHAR (100) NULL,
    CONSTRAINT [PK_AssetTypeCustCap] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetTypeCustFields]...';


GO
CREATE TABLE [dbo].[AssetTypeCustFields] (
    [AssetId]      INT             NOT NULL,
    [bit1]         BIT             NULL,
    [bit2]         BIT             NULL,
    [bit3]         BIT             NULL,
    [bit4]         BIT             NULL,
    [bit5]         BIT             NULL,
    [bit6]         BIT             NULL,
    [bit7]         BIT             NULL,
    [bit8]         BIT             NULL,
    [char1]        NVARCHAR (50)   NULL,
    [char2]        NVARCHAR (50)   NULL,
    [char3]        NVARCHAR (50)   NULL,
    [char4]        NVARCHAR (50)   NULL,
    [int1]         INT             NULL,
    [int2]         INT             NULL,
    [int3]         INT             NULL,
    [int4]         INT             NULL,
    [multi1]       TINYINT         NULL,
    [multi2]       TINYINT         NULL,
    [multi3]       TINYINT         NULL,
    [multi4]       TINYINT         NULL,
    [DepartmentId] INT             NOT NULL,
    [TypeId]       INT             NOT NULL,
    [char5]        NVARCHAR (50)   NULL,
    [char6]        NVARCHAR (50)   NULL,
    [char7]        NVARCHAR (50)   NULL,
    [char8]        NVARCHAR (50)   NULL,
    [char9]        NVARCHAR (50)   NULL,
    [char10]       NVARCHAR (50)   NULL,
    [char11]       NVARCHAR (50)   NULL,
    [char12]       NVARCHAR (50)   NULL,
    [char13]       NVARCHAR (50)   NULL,
    [char14]       NVARCHAR (50)   NULL,
    [char15]       NVARCHAR (50)   NULL,
    [char16]       NVARCHAR (50)   NULL,
    [dec1]         DECIMAL (19, 4) NULL,
    [dec2]         DECIMAL (19, 4) NULL,
    [dec3]         DECIMAL (19, 4) NULL,
    [dec4]         DECIMAL (19, 4) NULL,
    CONSTRAINT [PK_AssetTypeCustFields] PRIMARY KEY NONCLUSTERED ([DepartmentId] ASC, [AssetId] ASC),
    CONSTRAINT [CL_AssetTypeCustFields] UNIQUE CLUSTERED ([DepartmentId] ASC, [TypeId] ASC, [AssetId] ASC)
);


GO
PRINT N'Creating [dbo].[AssetTypeMultiChoices]...';


GO
CREATE TABLE [dbo].[AssetTypeMultiChoices] (
    [TypeId]       INT           NOT NULL,
    [MultiNumber]  TINYINT       NOT NULL,
    [OptionNumber] TINYINT       NOT NULL,
    [vchOption]    NVARCHAR (50) NOT NULL,
    CONSTRAINT [cl_AssetTypeMultiChoices] UNIQUE CLUSTERED ([TypeId] ASC, [MultiNumber] ASC, [OptionNumber] ASC)
);


GO
PRINT N'Creating [dbo].[AssetTypeProperties]...';


GO
CREATE TABLE [dbo].[AssetTypeProperties] (
    [DId]         INT            NOT NULL,
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [AssetTypeId] INT            NOT NULL,
    [Name]        NVARCHAR (50)  NOT NULL,
    [DataType]    INT            NOT NULL,
    [Enumeration] NVARCHAR (512) NULL,
    [Description] NVARCHAR (255) NULL,
    CONSTRAINT [PK_AssetTypeProperties] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC),
    CONSTRAINT [IX_AssetTypeProperties] UNIQUE NONCLUSTERED ([DId] ASC, [AssetTypeId] ASC, [Name] ASC)
);


GO
PRINT N'Creating [dbo].[AssetTypeProperties].[IX_AssetTypeProperties_AssetTypeId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssetTypeProperties_AssetTypeId]
    ON [dbo].[AssetTypeProperties]([DId] ASC, [AssetTypeId] ASC);


GO
PRINT N'Creating [dbo].[AssetTypes]...';


GO
CREATE TABLE [dbo].[AssetTypes] (
    [id]               INT           IDENTITY (1, 1) NOT NULL,
    [DepartmentId]     INT           NOT NULL,
    [Name]             NVARCHAR (50) NOT NULL,
    [CategoryId]       INT           NOT NULL,
    [configCustFields] BIT           NOT NULL,
    [AssetProfileId]   INT           NULL,
    [EnableAudit]      BIT           NOT NULL,
    [cfgPortable]      BIT           NOT NULL,
    CONSTRAINT [PK_AssetTypes] PRIMARY KEY NONCLUSTERED ([DepartmentId] ASC, [id] ASC),
    CONSTRAINT [CL_AssetTypes] UNIQUE CLUSTERED ([DepartmentId] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[BillingMethod]...';


GO
CREATE TABLE [dbo].[BillingMethod] (
    [BillingMethodID] TINYINT       NOT NULL,
    [Name]            NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_BillingMethod] PRIMARY KEY CLUSTERED ([BillingMethodID] ASC)
);


GO
PRINT N'Creating [dbo].[ClassLevels]...';


GO
CREATE TABLE [dbo].[ClassLevels] (
    [DId]                    INT     NOT NULL,
    [ClassId]                INT     NOT NULL,
    [Id]                     INT     IDENTITY (1, 1) NOT NULL,
    [tintLevel]              TINYINT NOT NULL,
    [intLastResortId]        INT     NOT NULL,
    [tintDistributedRouting] TINYINT NOT NULL,
    [tintClassType]          TINYINT NOT NULL,
    CONSTRAINT [pk_ClassLevels] PRIMARY KEY CLUSTERED ([DId] ASC, [ClassId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[ClassLevelsTechJctn]...';


GO
CREATE TABLE [dbo].[ClassLevelsTechJctn] (
    [DId]           INT NOT NULL,
    [ClassId]       INT NOT NULL,
    [intClssLvlId]  INT NOT NULL,
    [Id]            INT IDENTITY (1, 1) NOT NULL,
    [intUId]        INT NOT NULL,
    [intLocationId] INT NULL,
    [LocationId]    INT NULL,
    CONSTRAINT [pk_ClassLevelsTechJctn] PRIMARY KEY CLUSTERED ([DId] ASC, [ClassId] ASC, [intClssLvlId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[CreationCats]...';


GO
CREATE TABLE [dbo].[CreationCats] (
    [DId]          INT           NOT NULL,
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [btInactive]   BIT           NOT NULL,
    [intCreated]   INT           NOT NULL,
    [dtCreated]    DATETIME      NOT NULL,
    [intUpdatedBy] INT           NULL,
    [dtUpdated]    DATETIME      NULL,
    [vchName]      NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_CreationCats] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC),
    CONSTRAINT [IX_CreationCats] UNIQUE NONCLUSTERED ([DId] ASC, [vchName] ASC)
);


GO
PRINT N'Creating [dbo].[CustomEmailFields]...';


GO
CREATE TABLE [dbo].[CustomEmailFields] (
    [Id]            INT IDENTITY (1, 1) NOT NULL,
    [DepartmentId]  INT NOT NULL,
    [FieldType]     INT NOT NULL,
    [IsChecked]     BIT NOT NULL,
    [CustomFieldId] INT NULL,
    CONSTRAINT [PK_CustomMails] PRIMARY KEY CLUSTERED ([Id] ASC, [DepartmentId] ASC)
);


GO
PRINT N'Creating [dbo].[CustomFields]...';


GO
CREATE TABLE [dbo].[CustomFields] (
    [id]                 INT             IDENTITY (1, 1) NOT NULL,
    [DepartmentId]       INT             NOT NULL,
    [Caption]            NVARCHAR (50)   NOT NULL,
    [Type]               TINYINT         NOT NULL,
    [Choices]            NVARCHAR (1000) NULL,
    [required]           BIT             NOT NULL,
    [DefaultValue]       NVARCHAR (50)   NULL,
    [Position]           INT             NOT NULL,
    [DisableUserEditing] BIT             NOT NULL,
    [IsForTech]          BIT             NOT NULL,
    [class_id]           INT             NULL,
    CONSTRAINT [PK_CustomFields] PRIMARY KEY NONCLUSTERED ([DepartmentId] ASC, [id] ASC),
    CONSTRAINT [id_uniqueclu] UNIQUE CLUSTERED ([DepartmentId] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[CustomNames]...';


GO
CREATE TABLE [dbo].[CustomNames] (
    [CustomNameId]  INT IDENTITY (1, 1) NOT NULL,
    [CompanyId]     INT NOT NULL,
    [TermId]        INT NOT NULL,
    [TermVariantId] INT NOT NULL,
    CONSTRAINT [PK_CustomNames] PRIMARY KEY CLUSTERED ([CompanyId] ASC, [CustomNameId] ASC)
);


GO
PRINT N'Creating [dbo].[CustomNamesStore]...';


GO
CREATE TABLE [dbo].[CustomNamesStore] (
    [CustomNamesStoreId]  INT            IDENTITY (1, 1) NOT NULL,
    [TermId]              INT            NOT NULL,
    [TermVariantId]       INT            NOT NULL,
    [FullSingular]        NVARCHAR (255) NOT NULL,
    [FullPlural]          NVARCHAR (255) NOT NULL,
    [AbbreviatedSingular] NVARCHAR (255) NOT NULL,
    [AbbreviatedPlural]   NVARCHAR (255) NOT NULL,
    [IsDefault]           BIT            NOT NULL,
    CONSTRAINT [PK_CustomNamesStore] PRIMARY KEY CLUSTERED ([CustomNamesStoreId] ASC)
);


GO
PRINT N'Creating [dbo].[CustomText]...';


GO
CREATE TABLE [dbo].[CustomText] (
    [DId]     INT           NOT NULL,
    [Type]    NVARCHAR (25) NOT NULL,
    [txtText] NTEXT         NOT NULL,
    CONSTRAINT [CL_CustomText] UNIQUE CLUSTERED ([DId] ASC, [Type] ASC)
);


GO
PRINT N'Creating [dbo].[DaySummaryTime]...';


GO
CREATE TABLE [dbo].[DaySummaryTime] (
    [DepartmentId]        INT             NOT NULL,
    [Id]                  INT             IDENTITY (1, 1) NOT NULL,
    [UserId]              INT             NOT NULL,
    [Date]                SMALLDATETIME   NOT NULL,
    [StartTime]           SMALLDATETIME   NOT NULL,
    [StopTime]            SMALLDATETIME   NOT NULL,
    [TimeOut]             DECIMAL (10, 4) NULL,
    [TotalDayTime]        DECIMAL (10, 4) NOT NULL,
    [CreatedDate]         SMALLDATETIME   NULL,
    [CreatedBy]           INT             NULL,
    [UpdatedDate]         SMALLDATETIME   NULL,
    [UpdatedBy]           INT             NULL,
    [Deleted]             BIT             NOT NULL,
    [LocalTimeZoneOffset] DECIMAL (18)    NULL,
    CONSTRAINT [PK_DaySummaryTime] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[DayTimeProjectNotes]...';


GO
CREATE TABLE [dbo].[DayTimeProjectNotes] (
    [DId]            INT            NOT NULL,
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [Date]           SMALLDATETIME  NOT NULL,
    [UserId]         INT            NOT NULL,
    [AccountId]      INT            NULL,
    [ProjectId]      INT            NULL,
    [CreatedDate]    SMALLDATETIME  NULL,
    [UpdatedDate]    SMALLDATETIME  NULL,
    [CompletedNotes] NVARCHAR (512) NULL,
    [NextStepsNotes] NVARCHAR (512) NULL,
    CONSTRAINT [PK_DayTimeProjectNotes] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[DeploymentLogger]...';


GO
CREATE TABLE [dbo].[DeploymentLogger] (
    [ID]               INT IDENTITY (1, 1) NOT NULL,
    [companyID]        INT NOT NULL,
    [DLOrganizationID] INT NOT NULL,
    [DLDepartmentID]   INT NOT NULL,
    [Enabled]          BIT NOT NULL,
    CONSTRAINT [PK_DeploymentLogger] PRIMARY KEY NONCLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[DeploymentLogger].[IX_DeploymentLogger]...';


GO
CREATE CLUSTERED INDEX [IX_DeploymentLogger]
    ON [dbo].[DeploymentLogger]([companyID] ASC);


GO
PRINT N'Creating [dbo].[DeploymentLoggerUser]...';


GO
CREATE TABLE [dbo].[DeploymentLoggerUser] (
    [ID]       INT IDENTITY (1, 1) NOT NULL,
    [LoginID]  INT NOT NULL,
    [DLUserID] INT NOT NULL,
    CONSTRAINT [PK_DeploymentLoggerUser] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[DeploymentLoggerUser].[AK_DeploymentLoggerUser]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [AK_DeploymentLoggerUser]
    ON [dbo].[DeploymentLoggerUser]([LoginID] ASC, [DLUserID] ASC);


GO
PRINT N'Creating [dbo].[EMailParserDropBoxes]...';


GO
CREATE TABLE [dbo].[EMailParserDropBoxes] (
    [DId]              INT            NOT NULL,
    [Id]               INT            IDENTITY (1, 1) NOT NULL,
    [PseudoId]         CHAR (6)       NOT NULL,
    [DropBoxName]      NVARCHAR (50)  NULL,
    [TechnicianId]     INT            NULL,
    [ClassId]          INT            NULL,
    [tintLevel]        TINYINT        NULL,
    [NormalPriorityId] INT            NULL,
    [HighPriorityId]   INT            NULL,
    [LowPriorityId]    INT            NULL,
    [IsDefault]        BIT            NOT NULL,
    [ExternalEmail]    NVARCHAR (255) NULL,
    CONSTRAINT [PK_EMailParserDropBoxes] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[Folders]...';


GO
CREATE TABLE [dbo].[Folders] (
    [id]       INT           IDENTITY (1, 1) NOT NULL,
    [DId]      INT           NOT NULL,
    [ParentId] INT           NULL,
    [vchName]  NVARCHAR (50) NULL,
    CONSTRAINT [PK_Folders] PRIMARY KEY CLUSTERED ([DId] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[GlobalFilters]...';


GO
CREATE TABLE [dbo].[GlobalFilters] (
    [Id]           INT IDENTITY (1, 1) NOT NULL,
    [LoginId]      INT NOT NULL,
    [FilterTypeId] INT NOT NULL,
    [FilterDataId] INT NOT NULL,
    CONSTRAINT [PK_GlobalFilters] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[GlobalFilters].[IX_GlobalFilters_LoginId_FilterTypeId_FilterDataId]...';


GO
CREATE NONCLUSTERED INDEX [IX_GlobalFilters_LoginId_FilterTypeId_FilterDataId]
    ON [dbo].[GlobalFilters]([LoginId] ASC, [FilterTypeId] ASC, [FilterDataId] ASC);


GO
PRINT N'Creating [dbo].[GlobalFilterTypes]...';


GO
CREATE TABLE [dbo].[GlobalFilterTypes] (
    [Id]      INT           NOT NULL,
    [vchName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_GlobalFilterTypes] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Holidays]...';


GO
CREATE TABLE [dbo].[Holidays] (
    [DId]     INT           NOT NULL,
    [Id]      INT           IDENTITY (1, 1) NOT NULL,
    [Name]    NVARCHAR (50) NOT NULL,
    [dtStart] SMALLDATETIME NOT NULL,
    [dtStop]  SMALLDATETIME NOT NULL,
    CONSTRAINT [PK_Holidays] PRIMARY KEY NONCLUSTERED ([DId] ASC, [Id] ASC),
    CONSTRAINT [CL_Holidays] UNIQUE CLUSTERED ([DId] ASC, [dtStart] ASC)
);


GO
PRINT N'Creating [dbo].[ImportTemp]...';


GO
CREATE TABLE [dbo].[ImportTemp] (
    [id]         INT            IDENTITY (1, 1) NOT NULL,
    [btImported] BIT            NOT NULL,
    [vchField1]  NVARCHAR (255) NULL,
    [vchField2]  NVARCHAR (255) NULL,
    [vchField3]  NVARCHAR (255) NULL,
    [vchField4]  NVARCHAR (255) NULL,
    [vchField5]  NVARCHAR (255) NULL,
    [vchField6]  NVARCHAR (255) NULL,
    [vchField7]  NVARCHAR (255) NULL,
    [vchField8]  NVARCHAR (255) NULL,
    [vchField9]  NVARCHAR (255) NULL,
    [vchField10] NVARCHAR (255) NULL,
    [vchField11] NVARCHAR (255) NULL,
    [vchField12] NVARCHAR (255) NULL,
    [vchField13] NVARCHAR (255) NULL,
    [vchField14] NVARCHAR (255) NULL,
    [vchField15] NVARCHAR (255) NULL,
    [vchField16] NVARCHAR (255) NULL,
    [Updated]    BIT            NULL,
    [LocationId] INT            NULL,
    [TypeId]     INT            NULL,
    [MakeId]     INT            NULL,
    [ModelId]    INT            NULL,
    [CategoryId] INT            NULL,
    [vchField17] NVARCHAR (255) NULL,
    [vchField18] NVARCHAR (255) NULL,
    [vchField19] NVARCHAR (255) NULL,
    [vchField20] NVARCHAR (255) NULL,
    [vchField21] NVARCHAR (255) NULL,
    [vchField22] NVARCHAR (255) NULL,
    [vchField23] NVARCHAR (255) NULL,
    [vchField24] NVARCHAR (255) NULL,
    [vchField25] NVARCHAR (255) NULL,
    [vchField26] NVARCHAR (255) NULL,
    [vchField27] NVARCHAR (255) NULL,
    [vchField28] NVARCHAR (255) NULL,
    [vchField29] NVARCHAR (255) NULL,
    [vchField30] NVARCHAR (255) NULL,
    [btHeader]   BIT            NOT NULL,
    [vchField31] NVARCHAR (255) NULL,
    [vchField32] NVARCHAR (255) NULL,
    [vchField33] NVARCHAR (255) NULL,
    [vchField34] NVARCHAR (255) NULL,
    [vchField35] NVARCHAR (255) NULL,
    [vchField36] NVARCHAR (255) NULL,
    [vchField37] NVARCHAR (255) NULL,
    [vchField38] NVARCHAR (255) NULL,
    [vchField39] NVARCHAR (255) NULL,
    [vchField40] NVARCHAR (255) NULL,
    [vchField41] NVARCHAR (255) NULL,
    [vchField42] NVARCHAR (255) NULL,
    [vchField43] NVARCHAR (255) NULL,
    [vchField44] NVARCHAR (255) NULL,
    [vchField45] NVARCHAR (255) NULL,
    [vchField46] NVARCHAR (255) NULL,
    [vchField47] NVARCHAR (255) NULL,
    [vchField48] NVARCHAR (255) NULL,
    [vchField49] NVARCHAR (255) NULL,
    [vchField50] NVARCHAR (255) NULL,
    [vchField51] NVARCHAR (255) NULL,
    [vchField52] NVARCHAR (255) NULL,
    [vchField53] NVARCHAR (255) NULL,
    [vchField54] NVARCHAR (255) NULL,
    [vchField55] NVARCHAR (255) NULL,
    [vchField56] NVARCHAR (255) NULL,
    [vchField57] NVARCHAR (255) NULL,
    [vchField58] NVARCHAR (255) NULL,
    [vchField59] NVARCHAR (255) NULL,
    [vchField60] NVARCHAR (255) NULL,
    [vchField61] NVARCHAR (255) NULL,
    [vchField62] NVARCHAR (255) NULL,
    [vchField63] NVARCHAR (255) NULL,
    [vchField64] NVARCHAR (255) NULL,
    [vchField65] NVARCHAR (255) NULL,
    [vchField66] NVARCHAR (255) NULL,
    [vchField67] NVARCHAR (255) NULL,
    [vchField68] NVARCHAR (255) NULL,
    [vchField69] NVARCHAR (255) NULL,
    [vchField70] NVARCHAR (255) NULL,
    [vchField71] NVARCHAR (255) NULL,
    [vchField72] NVARCHAR (255) NULL,
    [vchField73] NVARCHAR (255) NULL,
    [vchField74] NVARCHAR (255) NULL,
    [vchField75] NVARCHAR (255) NULL,
    [vchField76] NVARCHAR (255) NULL,
    [vchField77] NVARCHAR (255) NULL,
    [vchField78] NVARCHAR (255) NULL,
    [vchField79] NVARCHAR (255) NULL,
    CONSTRAINT [PK_ImportTemp] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[Invoice]...';


GO
CREATE TABLE [dbo].[Invoice] (
    [DId]             INT             NOT NULL,
    [Id]              INT             IDENTITY (1, 1) NOT NULL,
    [BeginDate]       SMALLDATETIME   NOT NULL,
    [EndDate]         SMALLDATETIME   NOT NULL,
    [Date]            SMALLDATETIME   NOT NULL,
    [AccountId]       INT             NULL,
    [ProjectId]       INT             NULL,
    [Amount]          MONEY           NULL,
    [QBExported]      BIT             NOT NULL,
    [FBExported]      BIT             NOT NULL,
    [CreatedBy]       INT             NOT NULL,
    [TotalHours]      DECIMAL (12, 4) NULL,
    [TimeLogsCount]   INT             NULL,
    [BillingMethodID] TINYINT         NULL,
    [FlatFeeNextDate] SMALLDATETIME   NULL,
    [QBAccountAlias]  NVARCHAR (200)  NULL,
    [QBItemAlias]     NVARCHAR (200)  NULL,
    [TravelCost]      MONEY           NULL,
    [Archived]        BIT             NOT NULL,
    CONSTRAINT [PK_Invoice] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[InvoiceRetainer]...';


GO
CREATE TABLE [dbo].[InvoiceRetainer] (
    [DId]         INT             NOT NULL,
    [InvoiceId]   INT             NOT NULL,
    [Id]          INT             IDENTITY (1, 1) NOT NULL,
    [TechId]      INT             NOT NULL,
    [Amount]      MONEY           NOT NULL,
    [TechStart]   SMALLDATETIME   NOT NULL,
    [TechEnd]     SMALLDATETIME   NULL,
    [LoggedHours] DECIMAL (12, 4) NOT NULL,
    [LogsCount]   INT             NOT NULL,
    [FullAmount]  MONEY           NOT NULL,
    CONSTRAINT [PK_InvoiceRetainer] PRIMARY KEY CLUSTERED ([DId] ASC, [InvoiceId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[IzendaSavedReports]...';


GO
CREATE TABLE [dbo].[IzendaSavedReports] (
    [DId]          INT            NOT NULL,
    [Name]         NVARCHAR (255) NOT NULL,
    [CreatedDate]  DATETIME       NULL,
    [ModifiedDate] DATETIME       NULL,
    [Xml]          NVARCHAR (MAX) NULL,
    [TenantID]     NVARCHAR (255) NULL,
    CONSTRAINT [PK_IzendaSavedReports] PRIMARY KEY CLUSTERED ([DId] ASC, [Name] ASC)
);


GO
PRINT N'Creating [dbo].[JunkMailRules]...';


GO
CREATE TABLE [dbo].[JunkMailRules] (
    [DId]        INT            NOT NULL,
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [dtUpdated]  SMALLDATETIME  NOT NULL,
    [intUId]     INT            NULL,
    [vchEmail]   NVARCHAR (100) NULL,
    [vchSubject] NVARCHAR (150) NULL,
    CONSTRAINT [PK_JunkMailRules] PRIMARY KEY NONCLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[JunkMailRules].[CL_JMR]...';


GO
CREATE CLUSTERED INDEX [CL_JMR]
    ON [dbo].[JunkMailRules]([DId] ASC, [dtUpdated] DESC);


GO
PRINT N'Creating [dbo].[LocationAliases]...';


GO
CREATE TABLE [dbo].[LocationAliases] (
    [DId]               INT           NOT NULL,
    [Id]                INT           IDENTITY (1, 1) NOT NULL,
    [LocationId]        INT           NOT NULL,
    [LocationAliasName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_LocationAliases] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC),
    CONSTRAINT [IX_LocationAliases_LocationAliasName] UNIQUE NONCLUSTERED ([DId] ASC, [LocationId] ASC, [LocationAliasName] ASC)
);


GO
PRINT N'Creating [dbo].[LocationAuditHistory]...';


GO
CREATE TABLE [dbo].[LocationAuditHistory] (
    [DId]        INT      NOT NULL,
    [Id]         INT      IDENTITY (1, 1) NOT NULL,
    [LocationId] INT      NULL,
    [AuditDate]  DATETIME NOT NULL,
    [AuditorId]  INT      NOT NULL,
    [Created]    DATETIME NOT NULL,
    [CreatedBy]  INT      NOT NULL,
    [Completed]  BIT      NOT NULL,
    CONSTRAINT [PK_LocationAuditHistory] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[LocationAuditTaggedAssets]...';


GO
CREATE TABLE [dbo].[LocationAuditTaggedAssets] (
    [DId]              INT            NOT NULL,
    [Id]               INT            IDENTITY (1, 1) NOT NULL,
    [LocationId]       INT            NULL,
    [AssetId]          INT            NOT NULL,
    [AuditDate]        DATETIME       NOT NULL,
    [Status]           BIT            NULL,
    [Note]             NVARCHAR (500) NULL,
    [Created]          DATETIME       NOT NULL,
    [AuditorId]        INT            NOT NULL,
    [AuditId]          INT            NULL,
    [AddedAsset]       BIT            NOT NULL,
    [Transferred]      BIT            NOT NULL,
    [SourceLocationId] INT            NULL,
    CONSTRAINT [PK_LocationAuditTaggedAssets] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[LocationLevels]...';


GO
CREATE TABLE [dbo].[LocationLevels] (
    [DId]              INT     NOT NULL,
    [LocationId]       INT     NOT NULL,
    [Id]               INT     IDENTITY (1, 1) NOT NULL,
    [tintLevel]        TINYINT NOT NULL,
    [intLastResortId]  INT     NOT NULL,
    [tintRoutingType]  TINYINT NOT NULL,
    [tintLocationType] TINYINT NOT NULL,
    CONSTRAINT [pk_LocationLevels] PRIMARY KEY CLUSTERED ([DId] ASC, [LocationId] ASC, [Id] ASC),
    CONSTRAINT [un_LocationLevels] UNIQUE NONCLUSTERED ([DId] ASC, [LocationId] ASC, [tintLevel] ASC)
);


GO
PRINT N'Creating [dbo].[LocationLevelsTechJctn]...';


GO
CREATE TABLE [dbo].[LocationLevelsTechJctn] (
    [DId]         INT NOT NULL,
    [LocationId]  INT NOT NULL,
    [intLctLvlId] INT NOT NULL,
    [Id]          INT IDENTITY (1, 1) NOT NULL,
    [intUId]      INT NOT NULL,
    CONSTRAINT [pk_LocLvlTchJctn] PRIMARY KEY CLUSTERED ([DId] ASC, [LocationId] ASC, [intLctLvlId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[LocationPropertyValues]...';


GO
CREATE TABLE [dbo].[LocationPropertyValues] (
    [Id]                     INT            IDENTITY (1, 1) NOT NULL,
    [DId]                    INT            NOT NULL,
    [LocationId]             INT            NOT NULL,
    [LocationTypePropertyId] INT            NOT NULL,
    [PropertyValue]          NVARCHAR (255) NULL,
    CONSTRAINT [PK_LocationPropertyValues] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[LocationPropertyValues].[IX_LocationPropertyValues_LocationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocationPropertyValues_LocationId]
    ON [dbo].[LocationPropertyValues]([LocationId] ASC);


GO
PRINT N'Creating [dbo].[LocationPropertyValues].[IX_LocationPropertyValues_LocationTypePropertyId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocationPropertyValues_LocationTypePropertyId]
    ON [dbo].[LocationPropertyValues]([LocationTypePropertyId] ASC);


GO
PRINT N'Creating [dbo].[LocationRouteLevels]...';


GO
CREATE TABLE [dbo].[LocationRouteLevels] (
    [Id]               INT     IDENTITY (1, 1) NOT NULL,
    [DId]              INT     NOT NULL,
    [LocationId]       INT     NOT NULL,
    [TicketLevel]      TINYINT NOT NULL,
    [TechPoolType]     INT     NOT NULL,
    [RoutingMethod]    INT     NOT NULL,
    [LastResortTechId] INT     NOT NULL,
    CONSTRAINT [PK_LocationRouteLevels] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC),
    CONSTRAINT [IX_LocationRouteLevels] UNIQUE NONCLUSTERED ([DId] ASC, [LocationId] ASC, [TicketLevel] ASC)
);


GO
PRINT N'Creating [dbo].[LocationRouteLevels].[IX_LocationRouteLevels_LocationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocationRouteLevels_LocationId]
    ON [dbo].[LocationRouteLevels]([LocationId] ASC);


GO
PRINT N'Creating [dbo].[LocationRouteLevels].[IX_LocationRouteLevels_LastResortTechId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocationRouteLevels_LastResortTechId]
    ON [dbo].[LocationRouteLevels]([LastResortTechId] ASC);


GO
PRINT N'Creating [dbo].[LocationRouteLevels].[IX_LocationRouteLevels_TicketLevel]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocationRouteLevels_TicketLevel]
    ON [dbo].[LocationRouteLevels]([TicketLevel] ASC);


GO
PRINT N'Creating [dbo].[LocationRouteLevelTechs]...';


GO
CREATE TABLE [dbo].[LocationRouteLevelTechs] (
    [Id]                   INT IDENTITY (1, 1) NOT NULL,
    [DId]                  INT NOT NULL,
    [LocationRouteLevelId] INT NOT NULL,
    [TechId]               INT NOT NULL,
    CONSTRAINT [PK_LocationRouteLevelTechs] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[LocationRouteLevelTechs].[IX_LocationRouteLevelTechs_LocationRouteLevelId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocationRouteLevelTechs_LocationRouteLevelId]
    ON [dbo].[LocationRouteLevelTechs]([LocationRouteLevelId] ASC);


GO
PRINT N'Creating [dbo].[LocationRouteLevelTechs].[IX_LocationRouteLevelTechs_TechId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocationRouteLevelTechs_TechId]
    ON [dbo].[LocationRouteLevelTechs]([TechId] ASC);


GO
PRINT N'Creating [dbo].[Locations]...';


GO
CREATE TABLE [dbo].[Locations] (
    [Id]              INT             IDENTITY (1, 1) NOT NULL,
    [DId]             INT             NOT NULL,
    [ParentId]        INT             NULL,
    [AccountId]       INT             NULL,
    [LocationTypeId]  INT             NULL,
    [Name]            NVARCHAR (50)   NOT NULL,
    [Country]         NVARCHAR (50)   NULL,
    [State]           NVARCHAR (50)   NULL,
    [City]            NVARCHAR (50)   NULL,
    [Address1]        NVARCHAR (255)  NULL,
    [Address2]        NVARCHAR (255)  NULL,
    [ZipCode]         NVARCHAR (20)   NULL,
    [Phone1]          NVARCHAR (20)   NULL,
    [Phone2]          NVARCHAR (20)   NULL,
    [WorkPlaces]      INT             NULL,
    [RoomNumber]      NVARCHAR (10)   NULL,
    [RoomSize]        DECIMAL (18, 2) NULL,
    [Description]     NVARCHAR (512)  NULL,
    [IsDefault]       BIT             NOT NULL,
    [AuditorId]       INT             NULL,
    [AuditPeriodDays] INT             NULL,
    [CfgEnableAudit]  BIT             NOT NULL,
    [Status]          BIT             NULL,
    [Inactive]        AS              (CASE WHEN [Status] = (1) THEN CONVERT (BIT, (0), (0)) ELSE CONVERT (BIT, (1), (0)) END),
    CONSTRAINT [PK_Locations] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC),
    CONSTRAINT [IX_Locations_DId_ParentId_AccountId_LocationTypeId_Name] UNIQUE NONCLUSTERED ([DId] ASC, [ParentId] ASC, [AccountId] ASC, [LocationTypeId] ASC, [Name] ASC, [Status] ASC)
);


GO
PRINT N'Creating [dbo].[Locations].[IX_Locations_AccountId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Locations_AccountId]
    ON [dbo].[Locations]([AccountId] ASC);


GO
PRINT N'Creating [dbo].[Locations].[IX_Locations_LocationTypeId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Locations_LocationTypeId]
    ON [dbo].[Locations]([LocationTypeId] ASC);


GO
PRINT N'Creating [dbo].[Locations].[IX_Locations_ParentId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Locations_ParentId]
    ON [dbo].[Locations]([ParentId] ASC);


GO
PRINT N'Creating [dbo].[LocationTechJctn]...';


GO
CREATE TABLE [dbo].[LocationTechJctn] (
    [DId]        INT NOT NULL,
    [LocationId] INT NOT NULL,
    [Id]         INT IDENTITY (1, 1) NOT NULL,
    [intUId]     INT NULL,
    CONSTRAINT [pk_LocTechJctn] PRIMARY KEY CLUSTERED ([DId] ASC, [LocationId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[LocationTypeProperties]...';


GO
CREATE TABLE [dbo].[LocationTypeProperties] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [DId]            INT            NOT NULL,
    [LocationTypeId] INT            NOT NULL,
    [Name]           NVARCHAR (50)  NOT NULL,
    [DataType]       INT            NOT NULL,
    [Enumeration]    NVARCHAR (255) NULL,
    [Description]    NVARCHAR (255) NULL,
    [Deleted]        BIT            NOT NULL,
    [GroupId]        INT            NULL,
    [SortOrder]      INT            NOT NULL,
    CONSTRAINT [PK_LocationTypeProperties] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC),
    CONSTRAINT [IX_LocationTypeProperties_DId_LocationTypeId_Name] UNIQUE NONCLUSTERED ([DId] ASC, [LocationTypeId] ASC, [Name] ASC)
);


GO
PRINT N'Creating [dbo].[LocationTypeProperties].[IX_LocationTypeProperties_LocationTypeId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocationTypeProperties_LocationTypeId]
    ON [dbo].[LocationTypeProperties]([LocationTypeId] ASC);


GO
PRINT N'Creating [dbo].[LocationTypePropertiesGroup]...';


GO
CREATE TABLE [dbo].[LocationTypePropertiesGroup] (
    [Id]             INT           IDENTITY (1, 1) NOT NULL,
    [DId]            INT           NOT NULL,
    [Name]           NVARCHAR (50) NOT NULL,
    [Deleted]        BIT           NOT NULL,
    [LocationTypeId] INT           NOT NULL,
    [SortOrder]      INT           NOT NULL,
    CONSTRAINT [PK_LocationTypePropertiesGroup_1] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[LocationTypes]...';


GO
CREATE TABLE [dbo].[LocationTypes] (
    [Id]             INT           IDENTITY (1, 1) NOT NULL,
    [DId]            INT           NULL,
    [Name]           NVARCHAR (50) NOT NULL,
    [HierarchyLevel] INT           NOT NULL,
    [Deleted]        BIT           NOT NULL,
    CONSTRAINT [PK_LocationTypes] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [IX_LocationTypes_DId_Name] UNIQUE NONCLUSTERED ([DId] ASC, [Name] ASC)
);


GO
PRINT N'Creating [dbo].[LocationTypes].[IX_LocationTypes_DId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocationTypes_DId]
    ON [dbo].[LocationTypes]([DId] ASC);


GO
PRINT N'Creating [dbo].[LoginTokens]...';


GO
CREATE TABLE [dbo].[LoginTokens] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [Token]     INT           NOT NULL,
    [Seed]      NVARCHAR (50) NOT NULL,
    [dtExpires] SMALLDATETIME NOT NULL,
    CONSTRAINT [PK_LoginTokens] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MailGroups]...';


GO
CREATE TABLE [dbo].[MailGroups] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [DepartmentId] INT           NOT NULL,
    [Name]         NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_MailGroups] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[MailGroupUsers]...';


GO
CREATE TABLE [dbo].[MailGroupUsers] (
    [Id]           INT IDENTITY (1, 1) NOT NULL,
    [DepartmentId] INT NOT NULL,
    [MailGroupId]  INT NOT NULL,
    [LoginId]      INT NOT NULL,
    CONSTRAINT [PK_MailGroupUsers] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[MailGroupUsers].[IX_MailGroupUserLogins]...';


GO
CREATE NONCLUSTERED INDEX [IX_MailGroupUserLogins]
    ON [dbo].[MailGroupUsers]([LoginId] ASC);


GO
PRINT N'Creating [dbo].[MailGroupUsers].[IX_MailGroupUsers]...';


GO
CREATE NONCLUSTERED INDEX [IX_MailGroupUsers]
    ON [dbo].[MailGroupUsers]([MailGroupId] ASC);


GO
PRINT N'Creating [dbo].[Mc_EntityField]...';


GO
CREATE TABLE [dbo].[Mc_EntityField] (
    [EntityFieldId]     UNIQUEIDENTIFIER NOT NULL,
    [EntityFieldTypeId] INT              NOT NULL,
    [Name]              NVARCHAR (255)   NOT NULL,
    [Description]       NVARCHAR (255)   NOT NULL,
    [DataTypeId]        INT              NOT NULL,
    [DefaultValue]      NVARCHAR (512)   NULL,
    [AllowDBNull]       BIT              NOT NULL,
    [Unique]            BIT              NOT NULL,
    [MaxLength]         INT              NOT NULL,
    [MinValue]          NVARCHAR (512)   NULL,
    [MaxValue]          NVARCHAR (512)   NULL,
    [DecimalDigits]     INT              NOT NULL,
    [OrderNumber]       INT              NOT NULL,
    [EntityId]          UNIQUEIDENTIFIER NOT NULL,
    [OrganizationId]    UNIQUEIDENTIFIER NOT NULL,
    [InstanceId]        UNIQUEIDENTIFIER NULL,
    [Active]            BIT              NOT NULL,
    CONSTRAINT [PK_Mc_EntityField] PRIMARY KEY CLUSTERED ([EntityFieldId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_EntityFieldListsValues]...';


GO
CREATE TABLE [dbo].[Mc_EntityFieldListsValues] (
    [EntityFieldListValueId] UNIQUEIDENTIFIER NOT NULL,
    [EntityFieldId]          UNIQUEIDENTIFIER NOT NULL,
    [Name]                   NVARCHAR (255)   NOT NULL,
    [Value]                  NVARCHAR (512)   NOT NULL,
    [Default]                BIT              NOT NULL,
    [Active]                 BIT              NOT NULL,
    CONSTRAINT [PK_Mc_EntityFieldListsValues] PRIMARY KEY CLUSTERED ([EntityFieldListValueId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_EntityFieldsValues]...';


GO
CREATE TABLE [dbo].[Mc_EntityFieldsValues] (
    [EntityFieldValueId] UNIQUEIDENTIFIER NOT NULL,
    [EntityFieldId]      UNIQUEIDENTIFIER NOT NULL,
    [LocalEntityId]      NVARCHAR (255)   NOT NULL,
    [Value]              NVARCHAR (MAX)   NULL,
    CONSTRAINT [PK_Mc_EntityFieldsValues] PRIMARY KEY CLUSTERED ([EntityFieldValueId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_EntityNode]...';


GO
CREATE TABLE [dbo].[Mc_EntityNode] (
    [EntityNodeId]       UNIQUEIDENTIFIER NOT NULL,
    [ParentEntityNodeId] UNIQUEIDENTIFIER NULL,
    [Name]               NVARCHAR (255)   NOT NULL,
    [OrderNumber]        INT              NOT NULL,
    [OrganizationId]     UNIQUEIDENTIFIER NOT NULL,
    [InstanceId]         UNIQUEIDENTIFIER NULL,
    [EntityId]           UNIQUEIDENTIFIER NOT NULL,
    [EntityNodeTypeId]   UNIQUEIDENTIFIER NULL,
    [SubEntityId]        UNIQUEIDENTIFIER NULL,
    [SubEntityLocalId]   NVARCHAR (255)   NULL,
    [FullPath]           NVARCHAR (1024)  NOT NULL,
    [Deleted]            BIT              NOT NULL,
    CONSTRAINT [PK_Mc_EntityNode] PRIMARY KEY CLUSTERED ([EntityNodeId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_EntityNodesRelatedEntityNodes]...';


GO
CREATE TABLE [dbo].[Mc_EntityNodesRelatedEntityNodes] (
    [EntityNodesRelatedEntityNodesId] UNIQUEIDENTIFIER NOT NULL,
    [EntityNodeId]                    UNIQUEIDENTIFIER NOT NULL,
    [RelatedEntityNodeId]             UNIQUEIDENTIFIER NOT NULL,
    [EntityId]                        UNIQUEIDENTIFIER NOT NULL,
    [RelationType]                    INT              NOT NULL,
    CONSTRAINT [PK_Mc_EntityNodesRelatedEntityNodes] PRIMARY KEY CLUSTERED ([EntityNodesRelatedEntityNodesId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_EntityNodeType]...';


GO
CREATE TABLE [dbo].[Mc_EntityNodeType] (
    [EntityNodeTypeId] UNIQUEIDENTIFIER NOT NULL,
    [EntityId]         UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (255)   NOT NULL,
    [OrderNumber]      INT              NOT NULL,
    [OrganizationId]   UNIQUEIDENTIFIER NOT NULL,
    [InstanceId]       UNIQUEIDENTIFIER NULL,
    [Deleted]          BIT              NOT NULL,
    CONSTRAINT [PK_Mc_EntityNodeType] PRIMARY KEY CLUSTERED ([EntityNodeTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_Group]...';


GO
CREATE TABLE [dbo].[Mc_Group] (
    [GroupId]        UNIQUEIDENTIFIER NOT NULL,
    [OrganizationId] UNIQUEIDENTIFIER NOT NULL,
    [Name]           NVARCHAR (255)   NOT NULL,
    [Description]    NVARCHAR (1024)  NOT NULL,
    [BuiltIn]        BIT              NOT NULL,
    [Deleted]        BIT              NOT NULL,
    CONSTRAINT [PK_Mc_Group] PRIMARY KEY CLUSTERED ([GroupId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_Group].[IX_Mc_Group_OrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Mc_Group_OrganizationId]
    ON [dbo].[Mc_Group]([OrganizationId] ASC);


GO
PRINT N'Creating [dbo].[Mc_GroupsInstancesActions]...';


GO
CREATE TABLE [dbo].[Mc_GroupsInstancesActions] (
    [GroupId]    UNIQUEIDENTIFIER NOT NULL,
    [InstanceId] UNIQUEIDENTIFIER NOT NULL,
    [ActionId]   UNIQUEIDENTIFIER NOT NULL,
    [Enabled]    BIT              NOT NULL,
    CONSTRAINT [PK_Mc_GroupsInstancesActions] PRIMARY KEY CLUSTERED ([GroupId] ASC, [InstanceId] ASC, [ActionId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_GroupsInstancesRoles]...';


GO
CREATE TABLE [dbo].[Mc_GroupsInstancesRoles] (
    [GroupId]    UNIQUEIDENTIFIER NOT NULL,
    [InstanceId] UNIQUEIDENTIFIER NOT NULL,
    [RoleId]     UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_Mc_GroupsInstancesRoles] PRIMARY KEY CLUSTERED ([GroupId] ASC, [InstanceId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_Instance]...';


GO
CREATE TABLE [dbo].[Mc_Instance] (
    [InstanceId]       UNIQUEIDENTIFIER NOT NULL,
    [PseudoId]         VARCHAR (6)      NOT NULL,
    [OrganizationId]   UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (255)   NOT NULL,
    [Description]      NVARCHAR (1024)  NOT NULL,
    [EnableSignUpUser] BIT              NOT NULL,
    [ExternalId]       NVARCHAR (255)   NOT NULL,
    [WorkingDays]      CHAR (7)         NOT NULL,
    [Active]           BIT              NOT NULL,
    [CanceledTime]     DATETIME         NULL,
    [Trial]            BIT              NOT NULL,
    [Beta]             BIT              NOT NULL,
    [Deleted]          BIT              NOT NULL,
    [CreatedTime]      DATETIME         NULL,
    [TimeZoneId]       NVARCHAR (100)   NOT NULL,
    [TimeFormat]       INT              NOT NULL,
    [DateFormat]       INT              NOT NULL,
    [BillingPlan]      TINYINT          NOT NULL,
    [CreditCardStatus] TINYINT          NOT NULL,
    CONSTRAINT [PK_Mc_Instance] PRIMARY KEY CLUSTERED ([InstanceId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_Instance].[IX_Mc_Instance_OrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Mc_Instance_OrganizationId]
    ON [dbo].[Mc_Instance]([OrganizationId] ASC);


GO
PRINT N'Creating [dbo].[Mc_Instance].[IX_Mc_Instance_PseudoId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Mc_Instance_PseudoId]
    ON [dbo].[Mc_Instance]([PseudoId] ASC);


GO
PRINT N'Creating [dbo].[Mc_Message]...';


GO
CREATE TABLE [dbo].[Mc_Message] (
    [MessageId]       UNIQUEIDENTIFIER NOT NULL,
    [ParentMessageId] UNIQUEIDENTIFIER NULL,
    [LocalObjectType] NVARCHAR (50)    NOT NULL,
    [LocalObjectId]   NVARCHAR (255)   NOT NULL,
    [FromUserId]      UNIQUEIDENTIFIER NOT NULL,
    [ToUserId]        UNIQUEIDENTIFIER NULL,
    [Subject]         NVARCHAR (255)   NOT NULL,
    [Text]            NVARCHAR (MAX)   NOT NULL,
    [CreatedTime]     DATETIME         NOT NULL,
    CONSTRAINT [PK_Mc_Message] PRIMARY KEY CLUSTERED ([MessageId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_OrganizationsUsers]...';


GO
CREATE TABLE [dbo].[Mc_OrganizationsUsers] (
    [OrganizationId]            UNIQUEIDENTIFIER NOT NULL,
    [UserId]                    UNIQUEIDENTIFIER NOT NULL,
    [OrganizationAdministrator] BIT              NOT NULL,
    [Active]                    BIT              NOT NULL,
    CONSTRAINT [PK_Mc_OrganizationsUsers] PRIMARY KEY CLUSTERED ([OrganizationId] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_RecurringSchedule]...';


GO
CREATE TABLE [dbo].[Mc_RecurringSchedule] (
    [RecurringScheduleId] UNIQUEIDENTIFIER NOT NULL,
    [OrganizationId]      UNIQUEIDENTIFIER NOT NULL,
    [InstanceId]          UNIQUEIDENTIFIER NULL,
    [LocalEntityType]     NVARCHAR (50)    NOT NULL,
    [LocalEntityId]       NVARCHAR (255)   NOT NULL,
    [Name]                NVARCHAR (255)   NOT NULL,
    [StartDate]           DATETIME         NOT NULL,
    [EndDate]             DATETIME         NOT NULL,
    [RecurrenceRule]      NVARCHAR (1024)  NOT NULL,
    [UpdatedTime]         DATETIME         NOT NULL,
    [UpdatedBy]           UNIQUEIDENTIFIER NOT NULL,
    [Deleted]             BIT              NOT NULL,
    CONSTRAINT [PK_MC_RecurringSchedule] PRIMARY KEY CLUSTERED ([RecurringScheduleId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_Rule]...';


GO
CREATE TABLE [dbo].[Mc_Rule] (
    [RuleId]         UNIQUEIDENTIFIER NOT NULL,
    [RuleEngineId]   UNIQUEIDENTIFIER NOT NULL,
    [OrganizationId] UNIQUEIDENTIFIER NOT NULL,
    [InstanceId]     UNIQUEIDENTIFIER NULL,
    [Name]           NVARCHAR (255)   NOT NULL,
    [DisplayName]    NVARCHAR (255)   NOT NULL,
    [UsedQty]        INT              NOT NULL,
    [LastUsedUser]   UNIQUEIDENTIFIER NULL,
    [LastUsedDate]   DATETIME         NULL,
    [CreatedBy]      UNIQUEIDENTIFIER NOT NULL,
    [CreatedDate]    DATETIME         NOT NULL,
    [OrderNumber]    INT              NOT NULL,
    [Active]         BIT              NOT NULL,
    CONSTRAINT [PK_Mc_RuleEngine] PRIMARY KEY CLUSTERED ([RuleId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_RuleParameters]...';


GO
CREATE TABLE [dbo].[Mc_RuleParameters] (
    [RuleParameterId]  UNIQUEIDENTIFIER NOT NULL,
    [RuleId]           UNIQUEIDENTIFIER NOT NULL,
    [EntityNodeTypeId] UNIQUEIDENTIFIER NULL,
    [IsInputParameter] BIT              NOT NULL,
    [IsEntity]         BIT              NOT NULL,
    [FieldName]        NVARCHAR (255)   NOT NULL,
    [FullName]         NVARCHAR (512)   NOT NULL,
    [TypeName]         NVARCHAR (255)   NULL,
    [Term]             NVARCHAR (50)    NOT NULL,
    [Value]            SQL_VARIANT      NOT NULL,
    CONSTRAINT [PK_Mc_RuleEngineParameters] PRIMARY KEY CLUSTERED ([RuleParameterId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_SettingsValues]...';


GO
CREATE TABLE [dbo].[Mc_SettingsValues] (
    [SettingValueId] UNIQUEIDENTIFIER NOT NULL,
    [SettingId]      UNIQUEIDENTIFIER NOT NULL,
    [Value]          NVARCHAR (MAX)   NOT NULL,
    [OrganizationId] UNIQUEIDENTIFIER NULL,
    [InstanceId]     UNIQUEIDENTIFIER NULL,
    [GroupId]        UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_Mc_SettingsValues] PRIMARY KEY CLUSTERED ([SettingValueId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_User]...';


GO
CREATE TABLE [dbo].[Mc_User] (
    [UserId]        UNIQUEIDENTIFIER NOT NULL,
    [Email]         NVARCHAR (255)   NOT NULL,
    [FirstName]     NVARCHAR (255)   NOT NULL,
    [LastName]      NVARCHAR (255)   NOT NULL,
    [MiddleName]    NVARCHAR (255)   NOT NULL,
    [Phone]         NVARCHAR (20)    NOT NULL,
    [MobilePhone]   NVARCHAR (20)    NOT NULL,
    [Fax]           NVARCHAR (20)    NOT NULL,
    [Title]         NVARCHAR (30)    NOT NULL,
    [Department]    NVARCHAR (255)   NOT NULL,
    [Street]        NVARCHAR (255)   NOT NULL,
    [Street2]       NVARCHAR (255)   NOT NULL,
    [City]          NVARCHAR (255)   NOT NULL,
    [State]         NVARCHAR (255)   NOT NULL,
    [PostalCode]    NVARCHAR (20)    NOT NULL,
    [Country]       NVARCHAR (255)   NOT NULL,
    [LastLoginDate] DATETIME         NULL,
    [Deleted]       BIT              NOT NULL,
    [TimeZoneId]    NVARCHAR (100)   NULL,
    [TimeFormat]    INT              NULL,
    [DateFormat]    INT              NULL,
    CONSTRAINT [PK_Mc_User] PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_User].[IX_Mc_User_Email]...';


GO
CREATE NONCLUSTERED INDEX [IX_Mc_User_Email]
    ON [dbo].[Mc_User]([Email] ASC);


GO
PRINT N'Creating [dbo].[Mc_UsersGroups]...';


GO
CREATE TABLE [dbo].[Mc_UsersGroups] (
    [UserId]  UNIQUEIDENTIFIER NOT NULL,
    [GroupId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_Mc_UsersGroups] PRIMARY KEY CLUSTERED ([UserId] ASC, [GroupId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_UsersInstances]...';


GO
CREATE TABLE [dbo].[Mc_UsersInstances] (
    [UserId]     UNIQUEIDENTIFIER NOT NULL,
    [InstanceId] UNIQUEIDENTIFIER NOT NULL,
    [Active]     BIT              NOT NULL,
    CONSTRAINT [PK_Mc_UsersInstances] PRIMARY KEY CLUSTERED ([UserId] ASC, [InstanceId] ASC)
);


GO
PRINT N'Creating [dbo].[Mc_Version]...';


GO
CREATE TABLE [dbo].[Mc_Version] (
    [Version] INT NOT NULL,
    CONSTRAINT [PK_Mc_Version] PRIMARY KEY CLUSTERED ([Version] ASC)
);


GO
PRINT N'Creating [dbo].[Mfs_File]...';


GO
CREATE TABLE [dbo].[Mfs_File] (
    [FileUniqueId]    NVARCHAR (32)    NOT NULL,
    [OrganizationId]  UNIQUEIDENTIFIER NOT NULL,
    [DepartmentId]    UNIQUEIDENTIFIER NOT NULL,
    [LocalObjectType] NVARCHAR (50)    NOT NULL,
    [LocalObjectId]   NVARCHAR (255)   NOT NULL,
    [Name]            NVARCHAR (255)   NOT NULL,
    [SizeInBytes]     INT              NOT NULL,
    [UpdatedTime]     DATETIME         NOT NULL,
    [UpdatedBy]       NVARCHAR (255)   NULL,
    [Deleted]         BIT              NOT NULL,
    [Checksum]        VARCHAR (32)     NULL,
    CONSTRAINT [PK_Mfs_File] PRIMARY KEY CLUSTERED ([OrganizationId] ASC, [DepartmentId] ASC, [FileUniqueId] ASC)
);


GO
PRINT N'Creating [dbo].[Mfs_File].[IX_Mfs_File_3]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Mfs_File_3]
    ON [dbo].[Mfs_File]([FileUniqueId] ASC);


GO
PRINT N'Creating [dbo].[Mfs_File].[IX_Mfs_File_2]...';


GO
CREATE NONCLUSTERED INDEX [IX_Mfs_File_2]
    ON [dbo].[Mfs_File]([DepartmentId] ASC, [LocalObjectId] ASC);


GO
PRINT N'Creating [dbo].[Mfs_File].[IX_Mfs_File_1]...';


GO
CREATE NONCLUSTERED INDEX [IX_Mfs_File_1]
    ON [dbo].[Mfs_File]([OrganizationId] ASC, [DepartmentId] ASC, [LocalObjectId] ASC);


GO
PRINT N'Creating [dbo].[NotificationEventsQueue]...';


GO
CREATE TABLE [dbo].[NotificationEventsQueue] (
    [DId]               INT           NOT NULL,
    [Id]                INT           IDENTITY (1, 1) NOT NULL,
    [CreatedByUserId]   INT           NOT NULL,
    [EventType]         TINYINT       NOT NULL,
    [CreateTime]        SMALLDATETIME NOT NULL,
    [RunTime]           SMALLDATETIME NOT NULL,
    [ObjectStateNew]    NTEXT         NULL,
    [ObjectStateOld]    NTEXT         NULL,
    [ScheduledTicketId] INT           NULL,
    CONSTRAINT [PK_NotificationEventsQueue] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[NotificationEventsQueue].[IX_NotificationEventsQueue]...';


GO
CREATE NONCLUSTERED INDEX [IX_NotificationEventsQueue]
    ON [dbo].[NotificationEventsQueue]([CreateTime] ASC);


GO
PRINT N'Creating [dbo].[NotificationEventsQueueFiles]...';


GO
CREATE TABLE [dbo].[NotificationEventsQueueFiles] (
    [DId]                       INT            NOT NULL,
    [Id]                        INT            IDENTITY (1, 1) NOT NULL,
    [NotificationEventsQueueId] INT            NOT NULL,
    [FileName]                  NVARCHAR (255) NOT NULL,
    [FileSize]                  INT            NOT NULL,
    [dtUpdated]                 SMALLDATETIME  NOT NULL,
    [FileData]                  IMAGE          NOT NULL,
    CONSTRAINT [PK_NotificationEventsQueueFiles] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[NotificationEventsQueueFiles].[IX_NotificationEventsQueueFiles]...';


GO
CREATE NONCLUSTERED INDEX [IX_NotificationEventsQueueFiles]
    ON [dbo].[NotificationEventsQueueFiles]([DId] ASC, [NotificationEventsQueueId] ASC);


GO
PRINT N'Creating [dbo].[NotificationRuleEvents]...';


GO
CREATE TABLE [dbo].[NotificationRuleEvents] (
    [DId]                INT     NOT NULL,
    [Id]                 INT     IDENTITY (1, 1) NOT NULL,
    [NotificationRuleId] INT     NOT NULL,
    [EventType]          TINYINT NOT NULL,
    CONSTRAINT [PK_NotificationRuleEvents] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[NotificationRules]...';


GO
CREATE TABLE [dbo].[NotificationRules] (
    [DId]                    INT            NOT NULL,
    [Id]                     INT            IDENTITY (1, 1) NOT NULL,
    [UserId]                 INT            NULL,
    [RuleName]               NVARCHAR (255) NOT NULL,
    [dtUpdated]              SMALLDATETIME  NOT NULL,
    [UpdatedByUserId]        INT            NOT NULL,
    [btInactive]             BIT            NOT NULL,
    [btForTech]              BIT            NOT NULL,
    [btBuiltIn]              BIT            NOT NULL,
    [btReceiveTriggerEvents] BIT            NOT NULL,
    CONSTRAINT [PK_NotificationRules] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[NotificationRuleUsers]...';


GO
CREATE TABLE [dbo].[NotificationRuleUsers] (
    [DId]                INT     NOT NULL,
    [Id]                 INT     IDENTITY (1, 1) NOT NULL,
    [NotificationRuleId] INT     NOT NULL,
    [UserId]             INT     NULL,
    [UserGroupId]        INT     NULL,
    [NotificationEmail]  TINYINT NOT NULL,
    CONSTRAINT [PK_NotificationRuleUsers] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[Priorities]...';


GO
CREATE TABLE [dbo].[Priorities] (
    [DId]                    INT           NOT NULL,
    [Id]                     INT           IDENTITY (1, 1) NOT NULL,
    [tintPriority]           TINYINT       NOT NULL,
    [Name]                   NVARCHAR (50) NOT NULL,
    [Description]            NTEXT         NULL,
    [SLAPercentage]          TINYINT       NULL,
    [SLADays]                TINYINT       NOT NULL,
    [SLAHours]               TINYINT       NOT NULL,
    [SLAMinutes]             TINYINT       NOT NULL,
    [bitDefault]             BIT           NULL,
    [btSkipSaturday]         BIT           NOT NULL,
    [btSkipSunday]           BIT           NOT NULL,
    [btSkipHolidays]         BIT           NOT NULL,
    [btUseBusHours]          BIT           NOT NULL,
    [SLAResponsePercentage]  TINYINT       NULL,
    [SLAResponseDays]        TINYINT       NOT NULL,
    [SLAResponseHours]       TINYINT       NOT NULL,
    [SLAResponseMinutes]     TINYINT       NOT NULL,
    [btResponseSkipSaturday] BIT           NOT NULL,
    [btResponseSkipSunday]   BIT           NOT NULL,
    [btResponseSkipHolidays] BIT           NOT NULL,
    [btResponseUseBusHours]  BIT           NOT NULL,
    [btRstrctUsr]            BIT           NOT NULL,
    CONSTRAINT [PK_Priorities] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[Project]...';


GO
CREATE TABLE [dbo].[Project] (
    [ProjectID]               INT             IDENTITY (1, 1) NOT NULL,
    [CompanyID]               INT             NOT NULL,
    [AccountID]               INT             NULL,
    [ParentID]                INT             NULL,
    [Name]                    NVARCHAR (50)   NOT NULL,
    [Description]             NTEXT           NULL,
    [InternalPMID]            INT             NULL,
    [ClientPMID]              INT             NULL,
    [Active]                  BIT             NULL,
    [BillingMethodID]         TINYINT         NULL,
    [FlatFee]                 MONEY           NULL,
    [HourlyBlendedRate]       SMALLMONEY      NULL,
    [RatePlanID]              INT             NULL,
    [FlatFeeMode]             INT             NULL,
    [FlatFeeNextDate]         SMALLDATETIME   NULL,
    [QBAccountAlias]          NVARCHAR (200)  NULL,
    [QBItemAlias]             NVARCHAR (200)  NULL,
    [EstimatedCost]           DECIMAL (12, 4) NULL,
    [EstimatedHours]          INT             NULL,
    [EstimatedInvoicedAmount] DECIMAL (12, 4) NULL,
    [dtCust1]                 SMALLDATETIME   NULL,
    [dtCust2]                 SMALLDATETIME   NULL,
    [SupGroupId]              INT             NULL,
    [vchCust1]                NVARCHAR (1000) NULL,
    [vchCust10]               NVARCHAR (1000) NULL,
    [vchCust11]               NVARCHAR (1000) NULL,
    [vchCust12]               NVARCHAR (1000) NULL,
    [vchCust13]               NVARCHAR (1000) NULL,
    [vchCust14]               NVARCHAR (1000) NULL,
    [vchCust15]               NVARCHAR (1000) NULL,
    [vchCust2]                NVARCHAR (1000) NULL,
    [vchCust3]                NVARCHAR (1000) NULL,
    [vchCust4]                NVARCHAR (1000) NULL,
    [vchCust5]                NVARCHAR (1000) NULL,
    [vchCust6]                NVARCHAR (1000) NULL,
    [vchCust7]                NVARCHAR (1000) NULL,
    [vchCust8]                NVARCHAR (1000) NULL,
    [vchCust9]                NVARCHAR (1000) NULL,
    [PriorityId]              INT             NULL,
    [FBProjectID]             INT             NULL,
    CONSTRAINT [PK_Project] PRIMARY KEY CLUSTERED ([CompanyID] ASC, [ProjectID] ASC)
);


GO
PRINT N'Creating [dbo].[ProjectPriority]...';


GO
CREATE TABLE [dbo].[ProjectPriority] (
    [DId]          INT             NOT NULL,
    [Id]           INT             IDENTITY (1, 1) NOT NULL,
    [tintPriority] TINYINT         NOT NULL,
    [Name]         NVARCHAR (50)   NOT NULL,
    [Description]  NVARCHAR (2000) NULL,
    [bitDefault]   BIT             NOT NULL,
    CONSTRAINT [PK_ProjectPriority] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[ProjectRetainer]...';


GO
CREATE TABLE [dbo].[ProjectRetainer] (
    [DId]       INT           NOT NULL,
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [ProjectId] INT           NOT NULL,
    [TechId]    INT           NOT NULL,
    [Amount]    MONEY         NOT NULL,
    [StartDate] SMALLDATETIME NOT NULL,
    [EndDate]   SMALLDATETIME NULL,
    CONSTRAINT [PK_ProjectRetainer] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[ProjectTaskTypeRate]...';


GO
CREATE TABLE [dbo].[ProjectTaskTypeRate] (
    [ProjectTaskTypeRateID] INT        IDENTITY (1, 1) NOT NULL,
    [CompanyID]             INT        NOT NULL,
    [ProjectID]             INT        NOT NULL,
    [TaskTypeID]            INT        NOT NULL,
    [HourlyRate]            SMALLMONEY NULL,
    CONSTRAINT [PK_ProjectTaskTypeRate] PRIMARY KEY CLUSTERED ([CompanyID] ASC, [ProjectTaskTypeRateID] ASC)
);


GO
PRINT N'Creating [dbo].[ProjectTech]...';


GO
CREATE TABLE [dbo].[ProjectTech] (
    [ProjectTechID] INT IDENTITY (1, 1) NOT NULL,
    [CompanyID]     INT NOT NULL,
    [ProjectID]     INT NOT NULL,
    [TechID]        INT NULL,
    CONSTRAINT [PK_ProjectTech] PRIMARY KEY CLUSTERED ([CompanyID] ASC, [ProjectTechID] ASC)
);


GO
PRINT N'Creating [dbo].[ProjectTime]...';


GO
CREATE TABLE [dbo].[ProjectTime] (
    [DepartmentId]        INT             NOT NULL,
    [ProjectId]           INT             NULL,
    [Id]                  INT             IDENTITY (1, 1) NOT NULL,
    [UserId]              INT             NULL,
    [TaskTypeId]          INT             NULL,
    [Date]                SMALLDATETIME   NOT NULL,
    [Hours]               DECIMAL (10, 4) NOT NULL,
    [Note]                NVARCHAR (512)  NULL,
    [StartTimeUTC]        SMALLDATETIME   NULL,
    [StopTimeUTC]         SMALLDATETIME   NULL,
    [Downloaded]          BIT             NOT NULL,
    [CreatedTimeUTC]      SMALLDATETIME   NULL,
    [CreatedBy]           INT             NULL,
    [UpdatedTimeUTC]      SMALLDATETIME   NULL,
    [UpdatedBy]           INT             NULL,
    [Deleted]             BIT             NOT NULL,
    [LocalTimeZoneOffset] DECIMAL (18)    NULL,
    [HourlyRate]          SMALLMONEY      NOT NULL,
    [BillId]              INT             NULL,
    [BillRate]            SMALLMONEY      NULL,
    [InvoiceId]           INT             NULL,
    [AccountID]           INT             NULL,
    [FBTimeEntryID]       INT             NULL,
    CONSTRAINT [PK_ProjectTime] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[QueueMembers]...';


GO
CREATE TABLE [dbo].[QueueMembers] (
    [DepartmentId] INT            NOT NULL,
    [QueueId]      INT            NOT NULL,
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [UserId]       INT            NULL,
    [UserEmail]    NVARCHAR (255) NULL,
    CONSTRAINT [PK_QueueMembers] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [QueueId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[RatePlan]...';


GO
CREATE TABLE [dbo].[RatePlan] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (100) NOT NULL,
    [Description]  NVARCHAR (100) NULL,
    [DepartmentId] INT            NOT NULL,
    CONSTRAINT [PK_RatePlan] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[RatePlanRates]...';


GO
CREATE TABLE [dbo].[RatePlanRates] (
    [Id]           INT        IDENTITY (1, 1) NOT NULL,
    [RatePlanId]   INT        NOT NULL,
    [TaskTypeId]   INT        NOT NULL,
    [HourlyRate]   SMALLMONEY NOT NULL,
    [DepartmentId] INT        NOT NULL,
    CONSTRAINT [PK_RatePlanRates] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[RelatedTickets]...';


GO
CREATE TABLE [dbo].[RelatedTickets] (
    [DId]             INT     NOT NULL,
    [Id]              INT     IDENTITY (1, 1) NOT NULL,
    [TicketId]        INT     NOT NULL,
    [RelatedTicketId] INT     NOT NULL,
    [RelationType]    TINYINT NOT NULL,
    CONSTRAINT [PK_RelatedTickets] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[RemoteSessions]...';


GO
CREATE TABLE [dbo].[RemoteSessions] (
    [DId]          INT           NOT NULL,
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [TId]          INT           NULL,
    [SId]          NVARCHAR (50) NOT NULL,
    [SStart]       DATETIME      NOT NULL,
    [SEnd]         DATETIME      NULL,
    [SIsCompleted] BIT           NOT NULL,
    CONSTRAINT [PK_RemoteSessions] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[RemoteSessions].[IX_RemoteSessions_DId]...';


GO
CREATE NONCLUSTERED INDEX [IX_RemoteSessions_DId]
    ON [dbo].[RemoteSessions]([DId] ASC);


GO
PRINT N'Creating [dbo].[RemoteSessions].[IX_RemoteSessions_SId]...';


GO
CREATE NONCLUSTERED INDEX [IX_RemoteSessions_SId]
    ON [dbo].[RemoteSessions]([SId] ASC);


GO
PRINT N'Creating [dbo].[ReportFilters]...';


GO
CREATE TABLE [dbo].[ReportFilters] (
    [DId]         INT            NOT NULL,
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [UId]         INT            NOT NULL,
    [ReportType]  TINYINT        NOT NULL,
    [Name]        NVARCHAR (255) NOT NULL,
    [FilterState] NTEXT          NULL,
    CONSTRAINT [PK_ReportFilters] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC),
    CONSTRAINT [IX_ReportFilters_UId_ReportType_Name] UNIQUE NONCLUSTERED ([DId] ASC, [UId] ASC, [ReportType] ASC, [Name] ASC)
);


GO
PRINT N'Creating [dbo].[ResolutionCats]...';


GO
CREATE TABLE [dbo].[ResolutionCats] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [DId]          INT           NOT NULL,
    [btInactive]   BIT           NOT NULL,
    [intCreated]   INT           NOT NULL,
    [dtCreated]    DATETIME      NOT NULL,
    [intUpdatedBy] INT           NULL,
    [dtUpdated]    DATETIME      NULL,
    [vchName]      NVARCHAR (50) NOT NULL,
    [ParentId]     INT           NULL,
    [btResolved]   BIT           NOT NULL,
    CONSTRAINT [PK_ResolutionCats] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[RoutingOrder]...';


GO
CREATE TABLE [dbo].[RoutingOrder] (
    [DId]       INT     NOT NULL,
    [tintOrder] TINYINT NOT NULL,
    [tintRoute] TINYINT NOT NULL
);


GO
PRINT N'Creating [dbo].[RoutingOrder].[in_RoutingOrder]...';


GO
CREATE CLUSTERED INDEX [in_RoutingOrder]
    ON [dbo].[RoutingOrder]([DId] ASC, [tintOrder] ASC);


GO
PRINT N'Creating [dbo].[SchedTicketAssets]...';


GO
CREATE TABLE [dbo].[SchedTicketAssets] (
    [DId]           INT            NOT NULL,
    [Id]            INT            IDENTITY (1, 1) NOT NULL,
    [SchedTicketId] INT            NOT NULL,
    [AssetId]       INT            NOT NULL,
    [Description]   NVARCHAR (255) NULL,
    CONSTRAINT [PK_SchedTicketAssets] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[SchedTicketAssets].[IX_SchedTicketAssets_SchedTicketId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SchedTicketAssets_SchedTicketId]
    ON [dbo].[SchedTicketAssets]([DId] ASC, [SchedTicketId] ASC);


GO
PRINT N'Creating [dbo].[SchedTicketAssets].[IX_SchedTicketAssets_AssetId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SchedTicketAssets_AssetId]
    ON [dbo].[SchedTicketAssets]([DId] ASC, [AssetId] ASC);


GO
PRINT N'Creating [dbo].[SchedTicketFiles]...';


GO
CREATE TABLE [dbo].[SchedTicketFiles] (
    [DId]       INT            NOT NULL,
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [STId]      INT            NOT NULL,
    [FileName]  NVARCHAR (255) NOT NULL,
    [FileSize]  INT            NOT NULL,
    [dtUpdated] SMALLDATETIME  NOT NULL,
    [FileData]  IMAGE          NOT NULL,
    CONSTRAINT [PK_SchedTicketFiles] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC),
    CONSTRAINT [IX_SchedTicketFiles] UNIQUE NONCLUSTERED ([DId] ASC, [STId] ASC, [FileName] ASC)
);


GO
PRINT N'Creating [dbo].[SchedTickets]...';


GO
CREATE TABLE [dbo].[SchedTickets] (
    [DId]                  INT            NOT NULL,
    [Id]                   INT            IDENTITY (1, 1) NOT NULL,
    [intUserId]            INT            NOT NULL,
    [intOwnerId]           INT            NOT NULL,
    [intTechId]            INT            NULL,
    [intLocationId]        INT            NULL,
    [intPriorityId]        INT            NULL,
    [intClassId]           INT            NULL,
    [tintLevel]            TINYINT        NULL,
    [vchAssetSerial]       NVARCHAR (50)  NULL,
    [vchSubject]           NVARCHAR (100) NOT NULL,
    [vchText]              NVARCHAR (MAX) NULL,
    [dtCreate]             SMALLDATETIME  NOT NULL,
    [dtNext]               SMALLDATETIME  NULL,
    [vchRecurringOn]       NVARCHAR (8)   NOT NULL,
    [vchEndMethod]         NVARCHAR (5)   NULL,
    [tintEndCount]         TINYINT        NOT NULL,
    [dtStop]               SMALLDATETIME  NULL,
    [tintRecurringFeq]     TINYINT        NOT NULL,
    [btEnabled]            BIT            NOT NULL,
    [vchRoom]              NVARCHAR (30)  NULL,
    [dtLastRun]            SMALLDATETIME  NULL,
    [intAcctId]            INT            NULL,
    [intAcctLocationId]    INT            NULL,
    [CreationCatsId]       INT            NULL,
    [AccountLocationId]    INT            NULL,
    [LocationId]           INT            NULL,
    [CustomXML]            NTEXT          NULL,
    [vchIdMethod]          NVARCHAR (255) NULL,
    [ProjectID]            INT            NULL,
    [FolderID]             INT            NULL,
    [RepeatFromCompletion] BIT            NOT NULL,
    CONSTRAINT [pk_SchedTicket] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[SubmissionCategories]...';


GO
CREATE TABLE [dbo].[SubmissionCategories] (
    [Id]            INT           IDENTITY (1, 1) NOT NULL,
    [ParentId]      INT           NULL,
    [vchName]       NVARCHAR (50) NULL,
    [bitSelectable] BIT           NOT NULL,
    CONSTRAINT [PK_SubmissionCategories] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SupportGroups]...';


GO
CREATE TABLE [dbo].[SupportGroups] (
    [DId]     INT           NOT NULL,
    [Id]      INT           IDENTITY (1, 1) NOT NULL,
    [vchName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_AcctGroups] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[SupportPortal]...';


GO
CREATE TABLE [dbo].[SupportPortal] (
    [DId]       INT   NOT NULL,
    [AccountID] INT   NULL,
    [Header]    NTEXT NULL,
    [Footer]    NTEXT NULL,
    [Css]       NTEXT NULL,
    CONSTRAINT [IX_SupportPortal] UNIQUE CLUSTERED ([DId] ASC, [AccountID] ASC)
);


GO
PRINT N'Creating [dbo].[SupportPortalLinks]...';


GO
CREATE TABLE [dbo].[SupportPortalLinks] (
    [DId]        INT            NOT NULL,
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [AccountID]  INT            NULL,
    [Title]      NVARCHAR (50)  NOT NULL,
    [Url]        NVARCHAR (500) NOT NULL,
    [OrderIndex] TINYINT        NOT NULL,
    [Bold]       BIT            NULL,
    CONSTRAINT [PK_SupportPortalLinks] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TaskType]...';


GO
CREATE TABLE [dbo].[TaskType] (
    [TaskTypeId]        INT            IDENTITY (1, 1) NOT NULL,
    [TaskTypeName]      NVARCHAR (50)  NOT NULL,
    [HourlyRate]        SMALLMONEY     NULL,
    [DepartmentID]      INT            NOT NULL,
    [Active]            BIT            NOT NULL,
    [AppliesToTickets]  BIT            NOT NULL,
    [AppliesToProjects] BIT            NOT NULL,
    [QBAccountAlias]    NVARCHAR (200) NULL,
    [QBItemAlias]       NVARCHAR (200) NULL,
    [EstimatedCost]     SMALLMONEY     NULL,
    [FBTaskTypeID]      INT            NULL,
    CONSTRAINT [PK_TaskType] PRIMARY KEY CLUSTERED ([DepartmentID] ASC, [TaskTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[TaskTypeTech]...';


GO
CREATE TABLE [dbo].[TaskTypeTech] (
    [TaskTypeTechID] INT IDENTITY (1, 1) NOT NULL,
    [CompanyID]      INT NOT NULL,
    [TaskTypeID]     INT NOT NULL,
    [TechID]         INT NULL,
    CONSTRAINT [PK_TaskTypeTech] PRIMARY KEY CLUSTERED ([CompanyID] ASC, [TaskTypeTechID] ASC)
);


GO
PRINT N'Creating [dbo].[TaskTypeTechBillableRate]...';


GO
CREATE TABLE [dbo].[TaskTypeTechBillableRate] (
    [DId]        INT        NOT NULL,
    [Id]         INT        IDENTITY (1, 1) NOT NULL,
    [TaskTypeId] INT        NOT NULL,
    [TechId]     INT        NOT NULL,
    [HourlyRate] SMALLMONEY NOT NULL,
    CONSTRAINT [PK_TaskTypeTechBillableRate] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TaskTypeTechCost]...';


GO
CREATE TABLE [dbo].[TaskTypeTechCost] (
    [DId]        INT        NOT NULL,
    [Id]         INT        IDENTITY (1, 1) NOT NULL,
    [TaskTypeId] INT        NOT NULL,
    [TechId]     INT        NOT NULL,
    [Cost]       SMALLMONEY NOT NULL,
    CONSTRAINT [PK_TaskTypeTechCost] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_class]...';


GO
CREATE TABLE [dbo].[tbl_class] (
    [id]                       INT           IDENTITY (1, 1) NOT NULL,
    [company_id]               INT           NOT NULL,
    [Name]                     NVARCHAR (50) NOT NULL,
    [LastResortTechId]         INT           NOT NULL,
    [ConfigDistributedRouting] TINYINT       NOT NULL,
    [tintClassType]            TINYINT       NOT NULL,
    [bitRestrictToTechs]       BIT           NOT NULL,
    [txtDesc]                  NTEXT         NULL,
    [bitAllowEmailParsing]     BIT           NOT NULL,
    [intPriorityId]            INT           NULL,
    [tintLevelOverride]        TINYINT       NULL,
    [btInactive]               BIT           NOT NULL,
    [ParentId]                 INT           NULL,
    [KBPortal]                 BIT           NOT NULL,
    [KBPortalAlias]            NVARCHAR (75) NULL,
    [KBPortalOrder]            TINYINT       NULL,
    CONSTRAINT [PK_tbl_class] PRIMARY KEY NONCLUSTERED ([company_id] ASC, [id] ASC),
    CONSTRAINT [CL_Class] UNIQUE CLUSTERED ([company_id] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_class].[IX_tbl_class_company_id_ParentId]...';


GO
CREATE NONCLUSTERED INDEX [IX_tbl_class_company_id_ParentId]
    ON [dbo].[tbl_class]([company_id] ASC, [ParentId] ASC);


GO
PRINT N'Creating [dbo].[tbl_ClassTechnicianJctn]...';


GO
CREATE TABLE [dbo].[tbl_ClassTechnicianJctn] (
    [id]                  INT IDENTITY (1, 1) NOT NULL,
    [class_id]            INT NULL,
    [LoginCompanyJunc_id] INT NULL,
    [locations_id]        INT NULL,
    [LocationId]          INT NULL,
    CONSTRAINT [PK_tbl_ClassTechnicianJctn] PRIMARY KEY NONCLUSTERED ([id] ASC),
    CONSTRAINT [CL_CTJ] UNIQUE CLUSTERED ([class_id] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_ClassTechnicianJctn].[IX_tbl_ClassTechnicianJctn_LocationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_tbl_ClassTechnicianJctn_LocationId]
    ON [dbo].[tbl_ClassTechnicianJctn]([LocationId] ASC);


GO
PRINT N'Creating [dbo].[tbl_company]...';


GO
CREATE TABLE [dbo].[tbl_company] (
    [company_id]   INT              IDENTITY (1, 1) NOT NULL,
    [company_name] NVARCHAR (150)   NULL,
    [company_guid] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_tbl_company] PRIMARY KEY CLUSTERED ([company_id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_Knowledgebase]...';


GO
CREATE TABLE [dbo].[tbl_Knowledgebase] (
    [id]                  INT            IDENTITY (1, 1) NOT NULL,
    [LoginCompanyJunc_id] INT            NULL,
    [fullname]            NVARCHAR (75)  NULL,
    [subject]             NVARCHAR (150) NULL,
    [symptom]             NTEXT          NULL,
    [cause]               NTEXT          NULL,
    [resolution]          NTEXT          NULL,
    [dtDate]              SMALLDATETIME  NULL,
    [globalknowledgebase] BIT            NULL,
    [DepartmentId]        INT            NOT NULL,
    CONSTRAINT [PK_tbl_ticket_resolution] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [id] ASC),
    CONSTRAINT [IX_tbl_Knowledgebase] UNIQUE NONCLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_KnowledgebaseResponses]...';


GO
CREATE TABLE [dbo].[tbl_KnowledgebaseResponses] (
    [id]                  INT            IDENTITY (1, 1) NOT NULL,
    [Knowledgebase_Id]    INT            NOT NULL,
    [dtDate]              SMALLDATETIME  NOT NULL,
    [Comment]             NTEXT          NOT NULL,
    [vchPostedBy]         NVARCHAR (100) NOT NULL,
    [LoginCompanyJunc_Id] INT            NULL,
    [DepartmentId]        INT            NOT NULL,
    CONSTRAINT [PK_tbl_KnowledgebaseResponses] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [Knowledgebase_Id] ASC, [id] ASC),
    CONSTRAINT [IX_tbl_KnowledgebaseResponses] UNIQUE NONCLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_Locations]...';


GO
CREATE TABLE [dbo].[tbl_Locations] (
    [id]               INT           IDENTITY (1, 1) NOT NULL,
    [DId]              INT           NOT NULL,
    [Name]             NVARCHAR (50) NOT NULL,
    [intLastResortId]  INT           NOT NULL,
    [Attention]        NVARCHAR (50) NULL,
    [Address1]         NVARCHAR (50) NULL,
    [Address2]         NVARCHAR (50) NULL,
    [City]             NVARCHAR (50) NULL,
    [State]            NVARCHAR (50) NULL,
    [Zip]              NVARCHAR (20) NULL,
    [Phone]            NVARCHAR (20) NULL,
    [tintRoutingType]  TINYINT       NOT NULL,
    [tintLocationType] TINYINT       NOT NULL,
    [btInactive]       BIT           NOT NULL,
    CONSTRAINT [PK_tbl_locations] PRIMARY KEY NONCLUSTERED ([id] ASC),
    CONSTRAINT [CL_tbl_locations] UNIQUE CLUSTERED ([DId] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_LoginCompanyJunc]...';


GO
CREATE TABLE [dbo].[tbl_LoginCompanyJunc] (
    [id]                            INT            IDENTITY (1, 1) NOT NULL,
    [login_id]                      INT            NOT NULL,
    [company_id]                    INT            NOT NULL,
    [location_id]                   INT            NULL,
    [UserType_Id]                   INT            NOT NULL,
    [Room]                          NVARCHAR (30)  NULL,
    [CheckinStatus]                 BIT            NOT NULL,
    [Notes]                         NTEXT          NULL,
    [QueEmailAddress]               NVARCHAR (255) NULL,
    [dtLastLogin]                   SMALLDATETIME  NULL,
    [configHourlyRate]              SMALLMONEY     NULL,
    [configPartialSetup]            BIT            NOT NULL,
    [configEmailNewTicket]          BIT            NOT NULL,
    [configEmailTicketResponse]     BIT            NOT NULL,
    [configEmailUserTicketResponse] BIT            NOT NULL,
    [configEmailUserNewTicket]      BIT            NOT NULL,
    [bitAllowQueEmailParsing]       BIT            NOT NULL,
    [Token]                         BIGINT         NULL,
    [tintLevel]                     TINYINT        NULL,
    [SupGroupId]                    INT            NULL,
    [intAccountId]                  INT            NULL,
    [intAcctLocationId]             INT            NULL,
    [btCfgCCRep]                    BIT            NOT NULL,
    [vchOrganization]               NVARCHAR (50)  NULL,
    [btGlobalFilterEnabled]         BIT            NOT NULL,
    [btLimitToAssignedTkts]         BIT            NOT NULL,
    [btDisabledReports]             BIT            NOT NULL,
    [btUserInactive]                BIT            NOT NULL,
    [printFontSize]                 TINYINT        NULL,
    [AccountLocationId]             INT            NULL,
    [CreationCatId]                 INT            NULL,
    [LocationId]                    INT            NULL,
    [tintTicketTimer]               TINYINT        NULL,
    [configHourlyBillableRate]      SMALLMONEY     NULL,
    [CfgQBAccount]                  NVARCHAR (200) NULL,
    [CfgIsBillable]                 BIT            NOT NULL,
    [FBStaffID]                     INT            NULL,
    CONSTRAINT [PK_LCJ] PRIMARY KEY NONCLUSTERED ([id] ASC),
    CONSTRAINT [CL_LCJ] UNIQUE CLUSTERED ([company_id] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_LoginCompanyJunc].[IND_LoginId]...';


GO
CREATE NONCLUSTERED INDEX [IND_LoginId]
    ON [dbo].[tbl_LoginCompanyJunc]([login_id] ASC);


GO
PRINT N'Creating [dbo].[tbl_Logins]...';


GO
CREATE TABLE [dbo].[tbl_Logins] (
    [id]                  INT              IDENTITY (1, 1) NOT NULL,
    [Email]               NVARCHAR (50)    NOT NULL,
    [FirstName]           NVARCHAR (50)    NOT NULL,
    [LastName]            NVARCHAR (50)    NOT NULL,
    [Password]            NVARCHAR (50)    NOT NULL,
    [ConfigUnassignedQue] BIT              NOT NULL,
    [Title]               NVARCHAR (30)    NULL,
    [Phone]               NVARCHAR (20)    NULL,
    [MobilePhone]         NVARCHAR (20)    NULL,
    [sintHourOffset]      INT              NULL,
    [tintDateFormat]      INT              NULL,
    [Guid]                UNIQUEIDENTIFIER NULL,
    [dtUTCUpdated]        SMALLDATETIME    NULL,
    [LdapUserAccount]     NVARCHAR (255)   NULL,
    [LdapUserSID]         NVARCHAR (255)   NULL,
    [MobileEmail]         NVARCHAR (50)    NULL,
    [MobileEmailType]     TINYINT          NOT NULL,
    CONSTRAINT [PK_tbl_login] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_Logins].[UniqueEmail]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UniqueEmail]
    ON [dbo].[tbl_Logins]([Email] ASC);


GO
PRINT N'Creating [dbo].[tbl_part]...';


GO
CREATE TABLE [dbo].[tbl_part] (
    [id]                  INT            IDENTITY (1, 1) NOT NULL,
    [company_id]          INT            NOT NULL,
    [ticket_id]           INT            NULL,
    [PartsOrder_id]       INT            NULL,
    [Description]         NVARCHAR (125) NULL,
    [VendorDescription]   NVARCHAR (150) NULL,
    [PartNumber]          NVARCHAR (50)  NULL,
    [Cost]                MONEY          NULL,
    [Qty4Tkt]             INT            NULL,
    [Status]              NVARCHAR (50)  NULL,
    [ExpectedArrivalDate] SMALLDATETIME  NULL,
    [intReceivedBy]       INT            NULL,
    [intRequestedBy]      INT            NULL,
    [Qty2Inv]             TINYINT        NULL,
    [ShippingCost]        MONEY          NOT NULL,
    [ExternalOrderId]     INT            NULL,
    [ExternalPartId]      INT            NULL,
    CONSTRAINT [PK_tbl_part] PRIMARY KEY NONCLUSTERED ([company_id] ASC, [id] ASC),
    CONSTRAINT [CL_Part] UNIQUE CLUSTERED ([company_id] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_PartsOrder]...';


GO
CREATE TABLE [dbo].[tbl_PartsOrder] (
    [id]                 INT           IDENTITY (1, 1) NOT NULL,
    [company_id]         INT           NOT NULL,
    [OrderDate]          SMALLDATETIME NOT NULL,
    [VendorId]           INT           NULL,
    [RepName]            NVARCHAR (50) NULL,
    [ConfirmationNumber] NVARCHAR (50) NULL,
    [InternalPoNumber]   NVARCHAR (50) NULL,
    [TotalOrderCost]     MONEY         NULL,
    [intOrderedBy]       INT           NULL,
    [location_id]        INT           NULL,
    [LocationId]         INT           NULL,
    CONSTRAINT [PK_tbl_PartsOrder] PRIMARY KEY NONCLUSTERED ([company_id] ASC, [id] ASC),
    CONSTRAINT [CL_PartsOrder] UNIQUE CLUSTERED ([company_id] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_PartsRequestNotifyTechs]...';


GO
CREATE TABLE [dbo].[tbl_PartsRequestNotifyTechs] (
    [DepartmentId]        INT NOT NULL,
    [LoginCompanyJunc_id] INT NOT NULL,
    CONSTRAINT [CL_PRNT] UNIQUE CLUSTERED ([DepartmentId] ASC, [LoginCompanyJunc_id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_ticket]...';


GO
CREATE TABLE [dbo].[tbl_ticket] (
    [Id]                 INT             IDENTITY (1, 1) NOT NULL,
    [company_id]         INT             NOT NULL,
    [User_id]            INT             NOT NULL,
    [Technician_id]      INT             NOT NULL,
    [Created_id]         INT             NULL,
    [location_id]        INT             NULL,
    [class_id]           INT             NULL,
    [Status]             VARCHAR (15)    NOT NULL,
    [Subject]            NVARCHAR (100)  NULL,
    [CreateTime]         SMALLDATETIME   NOT NULL,
    [Note]               NTEXT           NULL,
    [NewUserPost]        BIT             NOT NULL,
    [NewTechPost]        BIT             NOT NULL,
    [ClosedTime]         SMALLDATETIME   NULL,
    [btPreventive]       BIT             NOT NULL,
    [SerialNumber]       NVARCHAR (50)   NULL,
    [folder_id]          INT             NULL,
    [Room]               NVARCHAR (30)   NULL,
    [TicketNumber]       INT             NOT NULL,
    [CustomXML]          NTEXT           NULL,
    [PartsCost]          MONEY           NOT NULL,
    [LaborCost]          MONEY           NOT NULL,
    [TravelCost]         MONEY           NOT NULL,
    [MiscCost]           MONEY           NOT NULL,
    [PriorityId]         INT             NULL,
    [dtSLAComplete]      SMALLDATETIME   NULL,
    [dtSLAResponse]      SMALLDATETIME   NULL,
    [dtSLAStart]         SMALLDATETIME   NULL,
    [intSLACompleteUsed] INT             NOT NULL,
    [intSLAResponseUsed] INT             NOT NULL,
    [btInitResponse]     BIT             NOT NULL,
    [dtReqComp]          SMALLDATETIME   NULL,
    [ReqCompNote]        NVARCHAR (50)   NULL,
    [dtFollowUp]         SMALLDATETIME   NULL,
    [FollowUpNote]       NVARCHAR (50)   NULL,
    [tintLevel]          TINYINT         NULL,
    [intTktTimeMin]      INT             NOT NULL,
    [btViaEmailParser]   BIT             NOT NULL,
    [intAcctId]          INT             NULL,
    [intAcctLocationId]  INT             NULL,
    [ClosureNote]        NVARCHAR (50)   NULL,
    [btResolved]         BIT             NULL,
    [ResolutionCatsId]   INT             NULL,
    [btConfirmed]        BIT             NULL,
    [intConfirmedBy]     INT             NULL,
    [dtConfirmed]        DATETIME        NULL,
    [vchConfirmedNote]   NVARCHAR (254)  NULL,
    [CreationCatsId]     INT             NULL,
    [vchIdMethod]        NVARCHAR (255)  NULL,
    [btHandledByCC]      BIT             NOT NULL,
    [intSubmissionCatId] INT             NULL,
    [EmailCC]            NVARCHAR (255)  NULL,
    [AccountLocationId]  INT             NULL,
    [LocationId]         INT             NULL,
    [Closed_id]          INT             NULL,
    [TicketNumberPrefix] NVARCHAR (10)   NULL,
    [RemainingHours]     DECIMAL (10, 4) NULL,
    [TotalHours]         DECIMAL (10, 4) NULL,
    [ProjectID]          INT             NULL,
    [NextStep]           NVARCHAR (100)  NULL,
    [Workpad]            NTEXT           NULL,
    [NextStepDate]       DATETIME        NULL,
    [SchedTicketID]      INT             NULL,
    [UpdatedTime]        SMALLDATETIME   NULL,
    [EstimatedTime]      DECIMAL (10, 4) NULL,
    [PseudoId]           CHAR (6)        NULL,
    [KB]                 BIT             NULL,
    [KBAlternateId]      NVARCHAR (255)  NULL,
    [KBHelpfulCount]     INT             NULL,
    [KBPublishLevel]     TINYINT         NULL,
    [KBSearchDesc]       NVARCHAR (150)  NULL,
    [KBType]             TINYINT         NULL,
    [btNoAccount]        BIT             NULL,
    CONSTRAINT [PK_tbl_ticket] PRIMARY KEY NONCLUSTERED ([company_id] ASC, [Id] ASC),
    CONSTRAINT [CL_tbl_ticket] UNIQUE CLUSTERED ([company_id] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_ticket].[IN_ktNumber]...';


GO
CREATE NONCLUSTERED INDEX [IN_ktNumber]
    ON [dbo].[tbl_ticket]([company_id] ASC, [TicketNumber] ASC);


GO
PRINT N'Creating [dbo].[tbl_ticket].[IDX_tbl_ticket_id]...';


GO
CREATE NONCLUSTERED INDEX [IDX_tbl_ticket_id]
    ON [dbo].[tbl_ticket]([Id] ASC);


GO
PRINT N'Creating [dbo].[tbl_ticket].[IDX_tbl_ticket_PseudoId]...';


GO
CREATE NONCLUSTERED INDEX [IDX_tbl_ticket_PseudoId]
    ON [dbo].[tbl_ticket]([PseudoId] ASC);


GO
PRINT N'Creating [dbo].[tbl_UserType]...';


GO
CREATE TABLE [dbo].[tbl_UserType] (
    [id]   INT          IDENTITY (1, 1) NOT NULL,
    [Name] VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_tbl_group] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_vendors]...';


GO
CREATE TABLE [dbo].[tbl_vendors] (
    [id]            INT           IDENTITY (1, 1) NOT NULL,
    [name]          NVARCHAR (50) NOT NULL,
    [phone]         NVARCHAR (20) NULL,
    [fax]           NVARCHAR (20) NULL,
    [AccountNumber] NVARCHAR (50) NULL,
    [notes]         NTEXT         NULL,
    [company_id]    INT           NOT NULL,
    CONSTRAINT [PK_tbl_vendors] PRIMARY KEY NONCLUSTERED ([company_id] ASC, [id] ASC),
    CONSTRAINT [CL_Vendors] UNIQUE CLUSTERED ([company_id] ASC, [id] ASC)
);


GO
PRINT N'Creating [dbo].[Terms]...';


GO
CREATE TABLE [dbo].[Terms] (
    [TermId]       INT           NOT NULL,
    [TermDesc]     NVARCHAR (32) NOT NULL,
    [TermNodeName] NVARCHAR (32) NOT NULL,
    CONSTRAINT [PK_Terms] PRIMARY KEY CLUSTERED ([TermId] ASC)
);


GO
PRINT N'Creating [dbo].[TicketAssets]...';


GO
CREATE TABLE [dbo].[TicketAssets] (
    [DId]             INT            NOT NULL,
    [Id]              INT            IDENTITY (1, 1) NOT NULL,
    [TicketId]        INT            NOT NULL,
    [AssetId]         INT            NULL,
    [Description]     NVARCHAR (255) NULL,
    [SerialTagNumber] NVARCHAR (50)  NULL,
    CONSTRAINT [PK_TicketAssets] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TicketAssets].[IX_TicketAssets_TicketId]...';


GO
CREATE NONCLUSTERED INDEX [IX_TicketAssets_TicketId]
    ON [dbo].[TicketAssets]([DId] ASC, [TicketId] ASC);


GO
PRINT N'Creating [dbo].[TicketAssets].[IX_TicketAssets_AssetId]...';


GO
CREATE NONCLUSTERED INDEX [IX_TicketAssets_AssetId]
    ON [dbo].[TicketAssets]([DId] ASC, [AssetId] ASC);


GO
PRINT N'Creating [dbo].[TicketAssignment]...';


GO
CREATE TABLE [dbo].[TicketAssignment] (
    [DepartmentId]   INT      NOT NULL,
    [TicketId]       INT      NOT NULL,
    [Id]             INT      IDENTITY (1, 1) NOT NULL,
    [UserId]         INT      NOT NULL,
    [AssignmentType] INT      NOT NULL,
    [StartDate]      DATETIME NOT NULL,
    [StopDate]       DATETIME NULL,
    [IsPrimary]      BIT      NOT NULL,
    CONSTRAINT [PK_TicketAssignments] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [TicketId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TicketCriteriaData]...';


GO
CREATE TABLE [dbo].[TicketCriteriaData] (
    [DId]              INT     NOT NULL,
    [TicketCriteriaId] INT     NOT NULL,
    [Id]               INT     IDENTITY (1, 1) NOT NULL,
    [FilterType]       TINYINT NOT NULL,
    [FilterDataId]     INT     NOT NULL,
    [btExclude]        BIT     NOT NULL,
    CONSTRAINT [PK_TicketCriteriaData] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TicketCriterias]...';


GO
CREATE TABLE [dbo].[TicketCriterias] (
    [DId]                   INT            NOT NULL,
    [Id]                    INT            IDENTITY (1, 1) NOT NULL,
    [UserId]                INT            NULL,
    [NotificationRuleId]    INT            NULL,
    [CriteriaType]          TINYINT        NOT NULL,
    [CriteriaName]          NVARCHAR (255) NOT NULL,
    [btLimitToAssignedTkts] BIT            NOT NULL,
    [btDisabledReports]     BIT            NOT NULL,
    [btNoFilter]            BIT            NOT NULL,
    CONSTRAINT [PK_TicketCriterias] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TicketLogs]...';


GO
CREATE TABLE [dbo].[TicketLogs] (
    [DId]          INT             NOT NULL,
    [TId]          INT             NOT NULL,
    [Id]           INT             IDENTITY (1, 1) NOT NULL,
    [UId]          INT             NULL,
    [dtDate]       SMALLDATETIME   NOT NULL,
    [vchType]      NVARCHAR (30)   NULL,
    [vchNote]      NVARCHAR (MAX)  NULL,
    [TicketTimeId] INT             NULL,
    [To]           NVARCHAR (1000) NULL,
    [EditedBy]     INT             NULL,
    [EditedTime]   SMALLDATETIME   NULL,
    [Hidden]       BIT             NULL,
    [KBRateSum]    INT             NULL,
    [UserEmail]    NVARCHAR (50)   NULL,
    [UserName]     NVARCHAR (100)  NULL,
    CONSTRAINT [PK_TicketLogs] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TicketLogs].[IX_TicketLogs]...';


GO
CREATE NONCLUSTERED INDEX [IX_TicketLogs]
    ON [dbo].[TicketLogs]([TId] ASC);


GO
PRINT N'Creating [dbo].[TicketMiscCosts]...';


GO
CREATE TABLE [dbo].[TicketMiscCosts] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [TicketId]  INT            NOT NULL,
    [UserId]    INT            NOT NULL,
    [Amount]    MONEY          NOT NULL,
    [Note]      NVARCHAR (100) NULL,
    [dtDate]    SMALLDATETIME  NOT NULL,
    [InvoiceId] INT            NULL,
    CONSTRAINT [PK_TicketMiscCosts] PRIMARY KEY NONCLUSTERED ([Id] ASC),
    CONSTRAINT [CL_TMC] UNIQUE CLUSTERED ([TicketId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TicketSentEmails]...';


GO
CREATE TABLE [dbo].[TicketSentEmails] (
    [DId]              INT            NOT NULL,
    [TicketId]         INT            NOT NULL,
    [Email]            NVARCHAR (50)  NOT NULL,
    [MessageId]        NVARCHAR (255) NOT NULL,
    [LastSentDateTime] DATETIME       NOT NULL,
    CONSTRAINT [PK_TicketSentEmails] PRIMARY KEY CLUSTERED ([DId] ASC, [TicketId] ASC, [Email] ASC)
);


GO
PRINT N'Creating [dbo].[TicketTime]...';


GO
CREATE TABLE [dbo].[TicketTime] (
    [DepartmentId]      INT             NOT NULL,
    [TicketId]          INT             NOT NULL,
    [Id]                INT             IDENTITY (1, 1) NOT NULL,
    [UserId]            INT             NULL,
    [Date]              SMALLDATETIME   NOT NULL,
    [Hours]             DECIMAL (8, 4)  NOT NULL,
    [Note]              NVARCHAR (512)  NULL,
    [HourlyRate]        SMALLMONEY      NOT NULL,
    [StartTime]         SMALLDATETIME   NULL,
    [StopTime]          SMALLDATETIME   NULL,
    [Downloaded]        BIT             NOT NULL,
    [TaskTypeId]        INT             NULL,
    [HoursRemaining]    DECIMAL (10, 4) NULL,
    [UTCOffset]         DECIMAL (18)    NULL,
    [CreatedTime]       SMALLDATETIME   NULL,
    [CreatedBy]         INT             NULL,
    [UpdatedTime]       SMALLDATETIME   NULL,
    [UpdatedBy]         INT             NULL,
    [Deleted]           BIT             NOT NULL,
    [BillId]            INT             NULL,
    [BillRate]          SMALLMONEY      NULL,
    [InvoiceId]         INT             NULL,
    [TimeEntryOnDetail] BIT             NOT NULL,
    [FBTimeEntryID]     INT             NULL,
    CONSTRAINT [pk_TicketTime] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [TicketId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TicketTimeEstimated]...';


GO
CREATE TABLE [dbo].[TicketTimeEstimated] (
    [DId]           INT             NOT NULL,
    [TicketId]      INT             NOT NULL,
    [Id]            INT             IDENTITY (1, 1) NOT NULL,
    [UserId]        INT             NULL,
    [Date]          SMALLDATETIME   NOT NULL,
    [EstimatedTime] DECIMAL (10, 4) NULL,
    [CreatedTime]   SMALLDATETIME   NULL,
    [CreatedBy]     INT             NULL,
    CONSTRAINT [PK_TicketTimeEstimated] PRIMARY KEY CLUSTERED ([DId] ASC, [TicketId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TicketTravelCosts]...';


GO
CREATE TABLE [dbo].[TicketTravelCosts] (
    [Id]            INT            IDENTITY (1, 1) NOT NULL,
    [DepartmentId]  INT            NOT NULL,
    [TicketId]      INT            NOT NULL,
    [StartLocation] NVARCHAR (250) NOT NULL,
    [EndLocation]   NVARCHAR (250) NOT NULL,
    [Distance]      INT            NOT NULL,
    [DistanceRate]  MONEY          NOT NULL,
    [Total]         AS             ([Distance] * [DistanceRate]),
    [Date]          SMALLDATETIME  NULL,
    [InvoiceId]     INT            NULL,
    [Note]          NVARCHAR (250) NULL,
    CONSTRAINT [PK_TicketTravelCosts] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [TicketId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TimeBill]...';


GO
CREATE TABLE [dbo].[TimeBill] (
    [DId]           INT             NOT NULL,
    [Id]            INT             IDENTITY (1, 1) NOT NULL,
    [BeginDate]     SMALLDATETIME   NOT NULL,
    [EndDate]       SMALLDATETIME   NOT NULL,
    [Date]          SMALLDATETIME   NOT NULL,
    [Exported]      BIT             NOT NULL,
    [TechID]        INT             NOT NULL,
    [TotalHours]    DECIMAL (12, 4) NULL,
    [Amount]        MONEY           NULL,
    [CreatedBy]     INT             NULL,
    [TimeLogsCount] INT             NULL,
    CONSTRAINT [PK_TimeBill] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[TktLevels]...';


GO
CREATE TABLE [dbo].[TktLevels] (
    [DId]             INT             NOT NULL,
    [tintLevel]       TINYINT         NOT NULL,
    [Description]     NVARCHAR (2000) NULL,
    [bitDefault]      BIT             NULL,
    [intLastResortId] INT             NOT NULL,
    [tintRoutingType] TINYINT         NOT NULL,
    [LevelName]       NVARCHAR (50)   NULL,
    CONSTRAINT [pk_TktLevels] PRIMARY KEY CLUSTERED ([DId] ASC, [tintLevel] ASC)
);


GO
PRINT N'Creating [dbo].[ToDoItem]...';


GO
CREATE TABLE [dbo].[ToDoItem] (
    [Id]                      UNIQUEIDENTIFIER NOT NULL,
    [DId]                     INT              NOT NULL,
    [ToDoListId]              UNIQUEIDENTIFIER NOT NULL,
    [CreatedAt]               DATETIME         NOT NULL,
    [CreatedBy]               INT              NOT NULL,
    [UpdatedAt]               DATETIME         NULL,
    [UpdatedBy]               INT              NULL,
    [Text]                    NVARCHAR (1000)  NOT NULL,
    [AssignedId]              INT              NULL,
    [Completed]               BIT              NOT NULL,
    [HoursEstimatedRemaining] DECIMAL (10, 4)  NULL,
    [ToDoItemTemplateId]      UNIQUEIDENTIFIER NULL,
    [Order]                   TINYINT          NOT NULL,
    [Due]                     DATETIME         NULL,
    [TicketId]                INT              NULL,
    CONSTRAINT [PK_ToDoItem] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[ToDoItemTemplate]...';


GO
CREATE TABLE [dbo].[ToDoItemTemplate] (
    [Id]                      UNIQUEIDENTIFIER NOT NULL,
    [DId]                     INT              NOT NULL,
    [ToDoListTemplateId]      UNIQUEIDENTIFIER NOT NULL,
    [Text]                    NVARCHAR (1000)  NOT NULL,
    [Order]                   TINYINT          NOT NULL,
    [AssignedId]              INT              NULL,
    [HoursEstimatedRemaining] DECIMAL (10, 4)  NULL,
    CONSTRAINT [PK_ToDoItemTemplate] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[ToDoList]...';


GO
CREATE TABLE [dbo].[ToDoList] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [DId]                INT              NOT NULL,
    [Name]               NVARCHAR (50)    NOT NULL,
    [ToDoListTemplateId] UNIQUEIDENTIFIER NULL,
    [TicketId]           INT              NULL,
    [ProjectId]          INT              NULL,
    [Order]              TINYINT          NOT NULL,
    CONSTRAINT [PK_ToDoList] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[ToDoListTemplate]...';


GO
CREATE TABLE [dbo].[ToDoListTemplate] (
    [Id]   UNIQUEIDENTIFIER NOT NULL,
    [DId]  INT              NOT NULL,
    [Name] NVARCHAR (50)    NOT NULL,
    CONSTRAINT [PK_ToDoListTemplate] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserAccounts]...';


GO
CREATE TABLE [dbo].[UserAccounts] (
    [DepartmentId]             INT NOT NULL,
    [UserId]                   INT NOT NULL,
    [Id]                       INT IDENTITY (1, 1) NOT NULL,
    [AccountId]                INT NULL,
    [AccountLocationId]        INT NULL,
    [AccountingContact]        BIT NOT NULL,
    [AccountingContactPrimary] BIT NOT NULL,
    CONSTRAINT [PK_UserAccounts] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [UserId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserLocations]...';


GO
CREATE TABLE [dbo].[UserLocations] (
    [Id]         INT IDENTITY (1, 1) NOT NULL,
    [DId]        INT NOT NULL,
    [UId]        INT NOT NULL,
    [LocationId] INT NOT NULL,
    CONSTRAINT [PK_UserLocations] PRIMARY KEY CLUSTERED ([DId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserProjects]...';


GO
CREATE TABLE [dbo].[UserProjects] (
    [DepartmentId]   INT NOT NULL,
    [UserId]         INT NOT NULL,
    [Id]             INT IDENTITY (1, 1) NOT NULL,
    [ProjectID]      INT NOT NULL,
    [SubscribeEmail] BIT NOT NULL,
    CONSTRAINT [PK_UserProjects] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [UserId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserProjects].[IX_UserProjects]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_UserProjects]
    ON [dbo].[UserProjects]([DepartmentId] ASC, [ProjectID] ASC, [UserId] ASC);


GO
PRINT N'Creating [dbo].[WrkLstFilters]...';


GO
CREATE TABLE [dbo].[WrkLstFilters] (
    [DId]             INT             NOT NULL,
    [UId]             INT             NOT NULL,
    [vchLocations]    NVARCHAR (1024) NULL,
    [vchClasses]      NVARCHAR (1024) NULL,
    [vchStatus]       NVARCHAR (100)  NULL,
    [vchPriority]     NVARCHAR (10)   NULL,
    [btFolder]        BIT             NULL,
    [vchLevels]       NVARCHAR (100)  NULL,
    [vchWrkLstFields] NVARCHAR (25)   NULL,
    [vchWrkLstSort]   NVARCHAR (25)   NULL,
    [btFilterEnabled] BIT             NOT NULL,
    [vchAccounts]     NVARCHAR (1024) NULL,
    [btProject]       BIT             NULL,
    CONSTRAINT [pk_WrkLstFilters] PRIMARY KEY CLUSTERED ([DId] ASC, [UId] ASC)
);


GO
PRINT N'Creating DF_AccessKeyType_EnableUser...';


GO
ALTER TABLE [dbo].[AccessKeyType]
    ADD CONSTRAINT [DF_AccessKeyType_EnableUser] DEFAULT ((0)) FOR [EnableUser];


GO
PRINT N'Creating DF_AccessKeyType_EnablePrivateKey...';


GO
ALTER TABLE [dbo].[AccessKeyType]
    ADD CONSTRAINT [DF_AccessKeyType_EnablePrivateKey] DEFAULT ((0)) FOR [EnablePrivateKey];


GO
PRINT N'Creating DF__AccountFi__tintV__0D5AD24C...';


GO
ALTER TABLE [dbo].[AccountFiles]
    ADD CONSTRAINT [DF__AccountFi__tintV__0D5AD24C] DEFAULT ((0)) FOR [tintVersion];


GO
PRINT N'Creating DF__AccountLe__tintR__478773E1...';


GO
ALTER TABLE [dbo].[AccountLevels]
    ADD CONSTRAINT [DF__AccountLe__tintR__478773E1] DEFAULT ((0)) FOR [tintRoutingOption];


GO
PRINT N'Creating DF__AccountLo__btDef__7F0CB2F5...';


GO
ALTER TABLE [dbo].[AccountLocations]
    ADD CONSTRAINT [DF__AccountLo__btDef__7F0CB2F5] DEFAULT ((0)) FOR [btDefault];


GO
PRINT N'Creating DF__Accounts__btOrgA__396E5EB4...';


GO
ALTER TABLE [dbo].[Accounts]
    ADD CONSTRAINT [DF__Accounts__btOrgA__396E5EB4] DEFAULT ((1)) FOR [btOrgAcct];


GO
PRINT N'Creating DF__Accounts__btActi__4D755761...';


GO
ALTER TABLE [dbo].[Accounts]
    ADD CONSTRAINT [DF__Accounts__btActi__4D755761] DEFAULT ((1)) FOR [btActive];


GO
PRINT N'Creating DF_Accounts_AccLevelTimeTracking...';


GO
ALTER TABLE [dbo].[Accounts]
    ADD CONSTRAINT [DF_Accounts_AccLevelTimeTracking] DEFAULT ((1)) FOR [AccLevelTimeTracking];


GO
PRINT N'Creating DF_Accounts_Guid...';


GO
ALTER TABLE [dbo].[Accounts]
    ADD CONSTRAINT [DF_Accounts_Guid] DEFAULT (newid()) FOR [Guid];


GO
PRINT N'Creating DF_Accounts_btCfgSupportPortal...';


GO
ALTER TABLE [dbo].[Accounts]
    ADD CONSTRAINT [DF_Accounts_btCfgSupportPortal] DEFAULT ((0)) FOR [btCfgSupportPortal];


GO
PRINT N'Creating DF_Accounts_btSPLimitNewUsersToKnownEmailSuffixes...';


GO
ALTER TABLE [dbo].[Accounts]
    ADD CONSTRAINT [DF_Accounts_btSPLimitNewUsersToKnownEmailSuffixes] DEFAULT ((0)) FOR [btSPLimitNewUsersToKnownEmailSuffixes];


GO
PRINT N'Creating DF_Accounts_SPDisableCSS...';


GO
ALTER TABLE [dbo].[Accounts]
    ADD CONSTRAINT [DF_Accounts_SPDisableCSS] DEFAULT ((0)) FOR [SPDisableCSS];


GO
PRINT N'Creating DF__tmp_Accou__intNe__55EAA1D1...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__intNe__55EAA1D1] DEFAULT ((1001)) FOR [intNextAcctNum];


GO
PRINT N'Creating DF__tmp_Accou__btCus__56DEC60A...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__56DEC60A] DEFAULT ((0)) FOR [btCust1On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__57D2EA43...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__57D2EA43] DEFAULT ((0)) FOR [btCust1Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__58C70E7C...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__58C70E7C] DEFAULT ((0)) FOR [btCust2On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__59BB32B5...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__59BB32B5] DEFAULT ((0)) FOR [btCust2Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__5AAF56EE...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__5AAF56EE] DEFAULT ((0)) FOR [btCust3On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__5BA37B27...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__5BA37B27] DEFAULT ((0)) FOR [btCust3Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__5C979F60...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__5C979F60] DEFAULT ((0)) FOR [btCust4On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__5D8BC399...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__5D8BC399] DEFAULT ((0)) FOR [btCust4Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__5E7FE7D2...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__5E7FE7D2] DEFAULT ((0)) FOR [btCust5On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__5F740C0B...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__5F740C0B] DEFAULT ((0)) FOR [btCust5Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__60683044...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__60683044] DEFAULT ((0)) FOR [btCust6On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__615C547D...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__615C547D] DEFAULT ((0)) FOR [btCust6Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__625078B6...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__625078B6] DEFAULT ((0)) FOR [btCust7On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__63449CEF...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__63449CEF] DEFAULT ((0)) FOR [btCust7Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__6438C128...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__6438C128] DEFAULT ((0)) FOR [btCust8On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__652CE561...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__652CE561] DEFAULT ((0)) FOR [btCust8Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__6621099A...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__6621099A] DEFAULT ((0)) FOR [btCust9On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__67152DD3...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__67152DD3] DEFAULT ((0)) FOR [btCust9Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__6809520C...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__6809520C] DEFAULT ((0)) FOR [btCust10On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__68FD7645...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__68FD7645] DEFAULT ((0)) FOR [btCust10Type];


GO
PRINT N'Creating DF__tmp_Accou__btDat__69F19A7E...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btDat__69F19A7E] DEFAULT ((0)) FOR [btDateCust1On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__6AE5BEB7...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__6AE5BEB7] DEFAULT ((0)) FOR [btCust11On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__6BD9E2F0...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__6BD9E2F0] DEFAULT ((0)) FOR [btCust11Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__6CCE0729...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__6CCE0729] DEFAULT ((0)) FOR [btCust12On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__6DC22B62...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__6DC22B62] DEFAULT ((0)) FOR [btCust12Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__6EB64F9B...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__6EB64F9B] DEFAULT ((0)) FOR [btCust13On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__6FAA73D4...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__6FAA73D4] DEFAULT ((0)) FOR [btCust13Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__709E980D...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__709E980D] DEFAULT ((0)) FOR [btCust14On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__7192BC46...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__7192BC46] DEFAULT ((0)) FOR [btCust14Type];


GO
PRINT N'Creating DF__tmp_Accou__btCus__7286E07F...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__7286E07F] DEFAULT ((0)) FOR [btCust15On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__737B04B8...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__737B04B8] DEFAULT ((0)) FOR [btCust15Type];


GO
PRINT N'Creating DF__tmp_Accou__btDat__746F28F1...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btDat__746F28F1] DEFAULT ((0)) FOR [btDateCust2On];


GO
PRINT N'Creating DF__tmp_Accou__btCus__75634D2A...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__75634D2A] DEFAULT ((0)) FOR [btCust1Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__76577163...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__76577163] DEFAULT ((0)) FOR [btCust2Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__774B959C...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__774B959C] DEFAULT ((0)) FOR [btCust3Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__783FB9D5...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__783FB9D5] DEFAULT ((0)) FOR [btCust4Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__7933DE0E...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__7933DE0E] DEFAULT ((0)) FOR [btCust5Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__7A280247...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__7A280247] DEFAULT ((0)) FOR [btCust6Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__7B1C2680...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__7B1C2680] DEFAULT ((0)) FOR [btCust7Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__7C104AB9...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__7C104AB9] DEFAULT ((0)) FOR [btCust8Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__7D046EF2...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__7D046EF2] DEFAULT ((0)) FOR [btCust9Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__7DF8932B...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__7DF8932B] DEFAULT ((0)) FOR [btCust10Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__7EECB764...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__7EECB764] DEFAULT ((0)) FOR [btCust11Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__7FE0DB9D...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__7FE0DB9D] DEFAULT ((0)) FOR [btCust12Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__00D4FFD6...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__00D4FFD6] DEFAULT ((0)) FOR [btCust13Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__01C9240F...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__01C9240F] DEFAULT ((0)) FOR [btCust14Req];


GO
PRINT N'Creating DF__tmp_Accou__btCus__02BD4848...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btCus__02BD4848] DEFAULT ((0)) FOR [btCust15Req];


GO
PRINT N'Creating DF__tmp_Accou__btDat__03B16C81...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btDat__03B16C81] DEFAULT ((0)) FOR [btDateCust1Req];


GO
PRINT N'Creating DF__tmp_Accou__btDat__04A590BA...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF__tmp_Accou__btDat__04A590BA] DEFAULT ((0)) FOR [btDateCust2Req];


GO
PRINT N'Creating DF_AccountsCfg_isProject...';


GO
ALTER TABLE [dbo].[AccountsCfg]
    ADD CONSTRAINT [DF_AccountsCfg_isProject] DEFAULT ((0)) FOR [isProject];


GO
PRINT N'Creating DF_AssetBulk_Active...';


GO
ALTER TABLE [dbo].[AssetBulk]
    ADD CONSTRAINT [DF_AssetBulk_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_AssetBulkLocation_Quantity...';


GO
ALTER TABLE [dbo].[AssetBulkLocation]
    ADD CONSTRAINT [DF_AssetBulkLocation_Quantity] DEFAULT ((0)) FOR [Quantity];


GO
PRINT N'Creating DF_AssetBulkLocation_ExcessQuantity...';


GO
ALTER TABLE [dbo].[AssetBulkLocation]
    ADD CONSTRAINT [DF_AssetBulkLocation_ExcessQuantity] DEFAULT ((0)) FOR [ExcessQuantity];


GO
PRINT N'Creating DF__Assets__Active__114071C9...';


GO
ALTER TABLE [dbo].[Assets]
    ADD CONSTRAINT [DF__Assets__Active__114071C9] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF__Assets__StatusId__64C2D10D...';


GO
ALTER TABLE [dbo].[Assets]
    ADD CONSTRAINT [DF__Assets__StatusId__64C2D10D] DEFAULT ((1)) FOR [StatusId];


GO
PRINT N'Creating DF_Assets_AssetSort...';


GO
ALTER TABLE [dbo].[Assets]
    ADD CONSTRAINT [DF_Assets_AssetSort] DEFAULT ((1)) FOR [AssetSort];


GO
PRINT N'Creating DF__Assets__AssetGUI__398438A4...';


GO
ALTER TABLE [dbo].[Assets]
    ADD CONSTRAINT [DF__Assets__AssetGUI__398438A4] DEFAULT (newid()) FOR [AssetGUID];


GO
PRINT N'Creating DF_Assets_Lost...';


GO
ALTER TABLE [dbo].[Assets]
    ADD CONSTRAINT [DF_Assets_Lost] DEFAULT ((0)) FOR [Lost];


GO
PRINT N'Creating DF_AssetStatus_NonActive...';


GO
ALTER TABLE [dbo].[AssetStatus]
    ADD CONSTRAINT [DF_AssetStatus_NonActive] DEFAULT ((0)) FOR [NonActive];


GO
PRINT N'Creating DF_AssetStatusCompany_ActiveStatus...';


GO
ALTER TABLE [dbo].[AssetStatusCompany]
    ADD CONSTRAINT [DF_AssetStatusCompany_ActiveStatus] DEFAULT ((0)) FOR [NonActive];


GO
PRINT N'Creating DF_AssetStatusCompany_Use...';


GO
ALTER TABLE [dbo].[AssetStatusCompany]
    ADD CONSTRAINT [DF_AssetStatusCompany_Use] DEFAULT ((1)) FOR [EnableUse];


GO
PRINT N'Creating DF_AssetTypeProperties_DataType...';


GO
ALTER TABLE [dbo].[AssetTypeProperties]
    ADD CONSTRAINT [DF_AssetTypeProperties_DataType] DEFAULT ((0)) FOR [DataType];


GO
PRINT N'Creating DF_AssetTypes_EnableAudit...';


GO
ALTER TABLE [dbo].[AssetTypes]
    ADD CONSTRAINT [DF_AssetTypes_EnableAudit] DEFAULT ((1)) FOR [EnableAudit];


GO
PRINT N'Creating DF_AssetTypes_cfgPortable...';


GO
ALTER TABLE [dbo].[AssetTypes]
    ADD CONSTRAINT [DF_AssetTypes_cfgPortable] DEFAULT ((0)) FOR [cfgPortable];


GO
PRINT N'Creating DF_Categories_btInactive...';


GO
ALTER TABLE [dbo].[CreationCats]
    ADD CONSTRAINT [DF_Categories_btInactive] DEFAULT ((0)) FOR [btInactive];


GO
PRINT N'Creating DF_Categories_dtCreated...';


GO
ALTER TABLE [dbo].[CreationCats]
    ADD CONSTRAINT [DF_Categories_dtCreated] DEFAULT (getutcdate()) FOR [dtCreated];


GO
PRINT N'Creating DF_CustomEmailFields_IsChecked...';


GO
ALTER TABLE [dbo].[CustomEmailFields]
    ADD CONSTRAINT [DF_CustomEmailFields_IsChecked] DEFAULT ((0)) FOR [IsChecked];


GO
PRINT N'Creating Default Constraint on [dbo].[CustomFields]....';


GO
ALTER TABLE [dbo].[CustomFields]
    ADD DEFAULT (0) FOR [Position];


GO
PRINT N'Creating Default Constraint on [dbo].[CustomFields]....';


GO
ALTER TABLE [dbo].[CustomFields]
    ADD DEFAULT (0) FOR [DisableUserEditing];


GO
PRINT N'Creating Default Constraint on [dbo].[CustomFields]....';


GO
ALTER TABLE [dbo].[CustomFields]
    ADD DEFAULT (0) FOR [IsForTech];


GO
PRINT N'Creating DF_CustomNamesStore_IsDefault...';


GO
ALTER TABLE [dbo].[CustomNamesStore]
    ADD CONSTRAINT [DF_CustomNamesStore_IsDefault] DEFAULT ((0)) FOR [IsDefault];


GO
PRINT N'Creating DF_DaySummaryTime_Deleted...';


GO
ALTER TABLE [dbo].[DaySummaryTime]
    ADD CONSTRAINT [DF_DaySummaryTime_Deleted] DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating DF_DeploymentLogger_Enabled...';


GO
ALTER TABLE [dbo].[DeploymentLogger]
    ADD CONSTRAINT [DF_DeploymentLogger_Enabled] DEFAULT ((0)) FOR [Enabled];


GO
PRINT N'Creating DF_EMailParserDropBoxes_IsDefault...';


GO
ALTER TABLE [dbo].[EMailParserDropBoxes]
    ADD CONSTRAINT [DF_EMailParserDropBoxes_IsDefault] DEFAULT ((0)) FOR [IsDefault];


GO
PRINT N'Creating DF__ImportLog__btImp__3BE0B70B...';


GO
ALTER TABLE [dbo].[ImportTemp]
    ADD CONSTRAINT [DF__ImportLog__btImp__3BE0B70B] DEFAULT ((0)) FOR [btImported];


GO
PRINT N'Creating DF__ImportTem__Updat__4B22FA9B...';


GO
ALTER TABLE [dbo].[ImportTemp]
    ADD CONSTRAINT [DF__ImportTem__Updat__4B22FA9B] DEFAULT ((0)) FOR [Updated];


GO
PRINT N'Creating DF__ImportTem__btHea__4C171ED4...';


GO
ALTER TABLE [dbo].[ImportTemp]
    ADD CONSTRAINT [DF__ImportTem__btHea__4C171ED4] DEFAULT ((0)) FOR [btHeader];


GO
PRINT N'Creating DF_Invoice_QBExported...';


GO
ALTER TABLE [dbo].[Invoice]
    ADD CONSTRAINT [DF_Invoice_QBExported] DEFAULT ((0)) FOR [QBExported];


GO
PRINT N'Creating DF_Invoice_FBExported...';


GO
ALTER TABLE [dbo].[Invoice]
    ADD CONSTRAINT [DF_Invoice_FBExported] DEFAULT ((0)) FOR [FBExported];


GO
PRINT N'Creating DF_Invoice_Archived...';


GO
ALTER TABLE [dbo].[Invoice]
    ADD CONSTRAINT [DF_Invoice_Archived] DEFAULT ((0)) FOR [Archived];


GO
PRINT N'Creating DF_LocationAuditHistory_Completed...';


GO
ALTER TABLE [dbo].[LocationAuditHistory]
    ADD CONSTRAINT [DF_LocationAuditHistory_Completed] DEFAULT ((0)) FOR [Completed];


GO
PRINT N'Creating DF_LocationAuditTaggedAssets_AddedAsset...';


GO
ALTER TABLE [dbo].[LocationAuditTaggedAssets]
    ADD CONSTRAINT [DF_LocationAuditTaggedAssets_AddedAsset] DEFAULT ((0)) FOR [AddedAsset];


GO
PRINT N'Creating DF_LocationAuditTaggedAssets_Transferred...';


GO
ALTER TABLE [dbo].[LocationAuditTaggedAssets]
    ADD CONSTRAINT [DF_LocationAuditTaggedAssets_Transferred] DEFAULT ((0)) FOR [Transferred];


GO
PRINT N'Creating Default Constraint on [dbo].[LocationRouteLevels]....';


GO
ALTER TABLE [dbo].[LocationRouteLevels]
    ADD DEFAULT (0) FOR [TechPoolType];


GO
PRINT N'Creating Default Constraint on [dbo].[LocationRouteLevels]....';


GO
ALTER TABLE [dbo].[LocationRouteLevels]
    ADD DEFAULT (0) FOR [RoutingMethod];


GO
PRINT N'Creating DF__Locations__IsDef__0E2EFAF4...';


GO
ALTER TABLE [dbo].[Locations]
    ADD CONSTRAINT [DF__Locations__IsDef__0E2EFAF4] DEFAULT ((0)) FOR [IsDefault];


GO
PRINT N'Creating DF_Locations_CfgEnableAudit...';


GO
ALTER TABLE [dbo].[Locations]
    ADD CONSTRAINT [DF_Locations_CfgEnableAudit] DEFAULT ((0)) FOR [CfgEnableAudit];


GO
PRINT N'Creating DF_Locations_Status...';


GO
ALTER TABLE [dbo].[Locations]
    ADD CONSTRAINT [DF_Locations_Status] DEFAULT ((1)) FOR [Status];


GO
PRINT N'Creating DF__LocationT__DataT__11FF8BD8...';


GO
ALTER TABLE [dbo].[LocationTypeProperties]
    ADD CONSTRAINT [DF__LocationT__DataT__11FF8BD8] DEFAULT ((0)) FOR [DataType];


GO
PRINT N'Creating DF_LocationTypeProperties_Deleted...';


GO
ALTER TABLE [dbo].[LocationTypeProperties]
    ADD CONSTRAINT [DF_LocationTypeProperties_Deleted] DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating DF_LocationTypeProperties_SortOrder...';


GO
ALTER TABLE [dbo].[LocationTypeProperties]
    ADD CONSTRAINT [DF_LocationTypeProperties_SortOrder] DEFAULT ((0)) FOR [SortOrder];


GO
PRINT N'Creating DF_LocationTypePropertiesGroup_Deleted...';


GO
ALTER TABLE [dbo].[LocationTypePropertiesGroup]
    ADD CONSTRAINT [DF_LocationTypePropertiesGroup_Deleted] DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating DF_LocationTypePropertiesGroup_SortOrder...';


GO
ALTER TABLE [dbo].[LocationTypePropertiesGroup]
    ADD CONSTRAINT [DF_LocationTypePropertiesGroup_SortOrder] DEFAULT ((0)) FOR [SortOrder];


GO
PRINT N'Creating DF_LocationTypes_Deleted...';


GO
ALTER TABLE [dbo].[LocationTypes]
    ADD CONSTRAINT [DF_LocationTypes_Deleted] DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating DF_Mc_EntityField_AllowDBNull...';


GO
ALTER TABLE [dbo].[Mc_EntityField]
    ADD CONSTRAINT [DF_Mc_EntityField_AllowDBNull] DEFAULT ((1)) FOR [AllowDBNull];


GO
PRINT N'Creating DF_Mc_EntityField_Unique...';


GO
ALTER TABLE [dbo].[Mc_EntityField]
    ADD CONSTRAINT [DF_Mc_EntityField_Unique] DEFAULT ((0)) FOR [Unique];


GO
PRINT N'Creating DF_Mc_EntityField_MaxLength...';


GO
ALTER TABLE [dbo].[Mc_EntityField]
    ADD CONSTRAINT [DF_Mc_EntityField_MaxLength] DEFAULT ((0)) FOR [MaxLength];


GO
PRINT N'Creating DF_Mc_EntityField_DecimalDigits...';


GO
ALTER TABLE [dbo].[Mc_EntityField]
    ADD CONSTRAINT [DF_Mc_EntityField_DecimalDigits] DEFAULT ((0)) FOR [DecimalDigits];


GO
PRINT N'Creating DF_Mc_EntityField_OrderNumber...';


GO
ALTER TABLE [dbo].[Mc_EntityField]
    ADD CONSTRAINT [DF_Mc_EntityField_OrderNumber] DEFAULT ((0)) FOR [OrderNumber];


GO
PRINT N'Creating DF_Mc_EntityField_Active...';


GO
ALTER TABLE [dbo].[Mc_EntityField]
    ADD CONSTRAINT [DF_Mc_EntityField_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Mc_EntityFieldListsValues_Default...';


GO
ALTER TABLE [dbo].[Mc_EntityFieldListsValues]
    ADD CONSTRAINT [DF_Mc_EntityFieldListsValues_Default] DEFAULT ((0)) FOR [Default];


GO
PRINT N'Creating DF_Mc_EntityFieldListsValues_Active...';


GO
ALTER TABLE [dbo].[Mc_EntityFieldListsValues]
    ADD CONSTRAINT [DF_Mc_EntityFieldListsValues_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Mc_EntityFieldsValues_EntityFieldValueId...';


GO
ALTER TABLE [dbo].[Mc_EntityFieldsValues]
    ADD CONSTRAINT [DF_Mc_EntityFieldsValues_EntityFieldValueId] DEFAULT (newid()) FOR [EntityFieldValueId];


GO
PRINT N'Creating DF_Mc_EntityNode_OrderNumber...';


GO
ALTER TABLE [dbo].[Mc_EntityNode]
    ADD CONSTRAINT [DF_Mc_EntityNode_OrderNumber] DEFAULT ((0)) FOR [OrderNumber];


GO
PRINT N'Creating DF_Mc_EntityNode_Deleted...';


GO
ALTER TABLE [dbo].[Mc_EntityNode]
    ADD CONSTRAINT [DF_Mc_EntityNode_Deleted] DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating DF_Mc_EntityNodeType_Deleted...';


GO
ALTER TABLE [dbo].[Mc_EntityNodeType]
    ADD CONSTRAINT [DF_Mc_EntityNodeType_Deleted] DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating DF_Mc_Group_Description...';


GO
ALTER TABLE [dbo].[Mc_Group]
    ADD CONSTRAINT [DF_Mc_Group_Description] DEFAULT (N'') FOR [Description];


GO
PRINT N'Creating DF_Mc_Group_BuiltIn...';


GO
ALTER TABLE [dbo].[Mc_Group]
    ADD CONSTRAINT [DF_Mc_Group_BuiltIn] DEFAULT ((0)) FOR [BuiltIn];


GO
PRINT N'Creating DF_Mc_Group_Deleted...';


GO
ALTER TABLE [dbo].[Mc_Group]
    ADD CONSTRAINT [DF_Mc_Group_Deleted] DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating DF_Mc_GroupsInstancesActions_Enabled...';


GO
ALTER TABLE [dbo].[Mc_GroupsInstancesActions]
    ADD CONSTRAINT [DF_Mc_GroupsInstancesActions_Enabled] DEFAULT ((1)) FOR [Enabled];


GO
PRINT N'Creating DF_Mc_Instance_InstanceId...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_InstanceId] DEFAULT (newid()) FOR [InstanceId];


GO
PRINT N'Creating DF_Mc_Instance_PseudoId...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_PseudoId] DEFAULT ('') FOR [PseudoId];


GO
PRINT N'Creating DF_Mc_Instance_Description...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_Description] DEFAULT (N'') FOR [Description];


GO
PRINT N'Creating DF_Mc_Instance_EnableSignUpUser...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_EnableSignUpUser] DEFAULT ((0)) FOR [EnableSignUpUser];


GO
PRINT N'Creating DF_Mc_Instance_ExternalId...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_ExternalId] DEFAULT (N'') FOR [ExternalId];


GO
PRINT N'Creating DF_Mc_Instance_WorkingDays...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_WorkingDays] DEFAULT ((1111100)) FOR [WorkingDays];


GO
PRINT N'Creating DF_Mc_Instance_Active...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Mc_Instance_Trial...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_Trial] DEFAULT ((0)) FOR [Trial];


GO
PRINT N'Creating DF_Mc_Instance_Beta...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_Beta] DEFAULT ((0)) FOR [Beta];


GO
PRINT N'Creating DF_Mc_Instance_Deleted...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_Deleted] DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating DF_Mc_Instance_TimeZoneId...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_TimeZoneId] DEFAULT ('') FOR [TimeZoneId];


GO
PRINT N'Creating DF_Mc_Instance_TimeFormat...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_TimeFormat] DEFAULT ((0)) FOR [TimeFormat];


GO
PRINT N'Creating DF_Mc_Instance_DateFormat...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_DateFormat] DEFAULT ((0)) FOR [DateFormat];


GO
PRINT N'Creating DF_Mc_Instance_BillingPlan...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_BillingPlan] DEFAULT ((0)) FOR [BillingPlan];


GO
PRINT N'Creating DF_Mc_Instance_CreditCardStatus...';


GO
ALTER TABLE [dbo].[Mc_Instance]
    ADD CONSTRAINT [DF_Mc_Instance_CreditCardStatus] DEFAULT ((0)) FOR [CreditCardStatus];


GO
PRINT N'Creating DF_Mc_OrganizationsUsers_OrganizationAdministrator...';


GO
ALTER TABLE [dbo].[Mc_OrganizationsUsers]
    ADD CONSTRAINT [DF_Mc_OrganizationsUsers_OrganizationAdministrator] DEFAULT ((0)) FOR [OrganizationAdministrator];


GO
PRINT N'Creating DF_Mc_OrganizationsUsers_Active...';


GO
ALTER TABLE [dbo].[Mc_OrganizationsUsers]
    ADD CONSTRAINT [DF_Mc_OrganizationsUsers_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_MC_RecurringSchedule_RecurringScheduleId...';


GO
ALTER TABLE [dbo].[Mc_RecurringSchedule]
    ADD CONSTRAINT [DF_MC_RecurringSchedule_RecurringScheduleId] DEFAULT (newid()) FOR [RecurringScheduleId];


GO
PRINT N'Creating DF_Table_1_EntityType...';


GO
ALTER TABLE [dbo].[Mc_RecurringSchedule]
    ADD CONSTRAINT [DF_Table_1_EntityType] DEFAULT (N'') FOR [LocalEntityType];


GO
PRINT N'Creating DF_MC_RecurringSchedule_Deleted...';


GO
ALTER TABLE [dbo].[Mc_RecurringSchedule]
    ADD CONSTRAINT [DF_MC_RecurringSchedule_Deleted] DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating DF_Mc_RuleEngine_RoleId...';


GO
ALTER TABLE [dbo].[Mc_Rule]
    ADD CONSTRAINT [DF_Mc_RuleEngine_RoleId] DEFAULT (newid()) FOR [RuleId];


GO
PRINT N'Creating DF_Mc_RuleEngine_Name...';


GO
ALTER TABLE [dbo].[Mc_Rule]
    ADD CONSTRAINT [DF_Mc_RuleEngine_Name] DEFAULT (N'') FOR [Name];


GO
PRINT N'Creating DF_Mc_RuleEngine_DisplayName...';


GO
ALTER TABLE [dbo].[Mc_Rule]
    ADD CONSTRAINT [DF_Mc_RuleEngine_DisplayName] DEFAULT (N'') FOR [DisplayName];


GO
PRINT N'Creating DF_Mc_Rule_UsedQty...';


GO
ALTER TABLE [dbo].[Mc_Rule]
    ADD CONSTRAINT [DF_Mc_Rule_UsedQty] DEFAULT ((0)) FOR [UsedQty];


GO
PRINT N'Creating DF_Mc_Rule_Active...';


GO
ALTER TABLE [dbo].[Mc_Rule]
    ADD CONSTRAINT [DF_Mc_Rule_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Mc_RuleEngineParameters_RuleParameterId...';


GO
ALTER TABLE [dbo].[Mc_RuleParameters]
    ADD CONSTRAINT [DF_Mc_RuleEngineParameters_RuleParameterId] DEFAULT (newid()) FOR [RuleParameterId];


GO
PRINT N'Creating DF_Mc_RuleEngineParameters_Term...';


GO
ALTER TABLE [dbo].[Mc_RuleParameters]
    ADD CONSTRAINT [DF_Mc_RuleEngineParameters_Term] DEFAULT (N'=') FOR [Term];


GO
PRINT N'Creating DF_Mc_User_FirstName...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_FirstName] DEFAULT (N'') FOR [FirstName];


GO
PRINT N'Creating DF_Mc_User_LastName...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_LastName] DEFAULT (N'') FOR [LastName];


GO
PRINT N'Creating DF_Mc_User_MiddleName...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_MiddleName] DEFAULT (N'') FOR [MiddleName];


GO
PRINT N'Creating DF_Mc_User_Phone...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_Phone] DEFAULT ('') FOR [Phone];


GO
PRINT N'Creating DF_Mc_User_MobilePhone...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_MobilePhone] DEFAULT ('') FOR [MobilePhone];


GO
PRINT N'Creating DF_Mc_User_Fax...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_Fax] DEFAULT ('') FOR [Fax];


GO
PRINT N'Creating DF_Mc_User_Title...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_Title] DEFAULT ('') FOR [Title];


GO
PRINT N'Creating DF_Mc_User_Department...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_Department] DEFAULT ('') FOR [Department];


GO
PRINT N'Creating DF_Mc_User_Street...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_Street] DEFAULT ('') FOR [Street];


GO
PRINT N'Creating DF_Mc_User_Street2...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_Street2] DEFAULT ('') FOR [Street2];


GO
PRINT N'Creating DF_Mc_User_City...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_City] DEFAULT ('') FOR [City];


GO
PRINT N'Creating DF_Mc_User_State...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_State] DEFAULT ('') FOR [State];


GO
PRINT N'Creating DF_Mc_User_PostalCode...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_PostalCode] DEFAULT ('') FOR [PostalCode];


GO
PRINT N'Creating DF_Mc_User_Country...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_Country] DEFAULT ('') FOR [Country];


GO
PRINT N'Creating DF_Mc_User_Deleted...';


GO
ALTER TABLE [dbo].[Mc_User]
    ADD CONSTRAINT [DF_Mc_User_Deleted] DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating DF_Mc_UsersInstances_Active...';


GO
ALTER TABLE [dbo].[Mc_UsersInstances]
    ADD CONSTRAINT [DF_Mc_UsersInstances_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_EventsToDoQueue_EventType...';


GO
ALTER TABLE [dbo].[NotificationEventsQueue]
    ADD CONSTRAINT [DF_EventsToDoQueue_EventType] DEFAULT (0) FOR [EventType];


GO
PRINT N'Creating DF_NotificationRuleEvents_EventType...';


GO
ALTER TABLE [dbo].[NotificationRuleEvents]
    ADD CONSTRAINT [DF_NotificationRuleEvents_EventType] DEFAULT (0) FOR [EventType];


GO
PRINT N'Creating DF_NotificationRules_btInactive...';


GO
ALTER TABLE [dbo].[NotificationRules]
    ADD CONSTRAINT [DF_NotificationRules_btInactive] DEFAULT ((0)) FOR [btInactive];


GO
PRINT N'Creating DF_NotificationRules_btIsForTech...';


GO
ALTER TABLE [dbo].[NotificationRules]
    ADD CONSTRAINT [DF_NotificationRules_btIsForTech] DEFAULT ((0)) FOR [btForTech];


GO
PRINT N'Creating DF_NotificationRules_btIsBuiltIn...';


GO
ALTER TABLE [dbo].[NotificationRules]
    ADD CONSTRAINT [DF_NotificationRules_btIsBuiltIn] DEFAULT ((0)) FOR [btBuiltIn];


GO
PRINT N'Creating DF_NotificationRules_btReceiveTriggerEvents...';


GO
ALTER TABLE [dbo].[NotificationRules]
    ADD CONSTRAINT [DF_NotificationRules_btReceiveTriggerEvents] DEFAULT ((1)) FOR [btReceiveTriggerEvents];


GO
PRINT N'Creating DF_NotificationRuleUsers_NotificationEmail...';


GO
ALTER TABLE [dbo].[NotificationRuleUsers]
    ADD CONSTRAINT [DF_NotificationRuleUsers_NotificationEmail] DEFAULT ((0)) FOR [NotificationEmail];


GO
PRINT N'Creating DF__Prioritie__SLADa__5F3F01E1...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__SLADa__5F3F01E1] DEFAULT ((0)) FOR [SLADays];


GO
PRINT N'Creating DF__Prioritie__SLAHo__6033261A...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__SLAHo__6033261A] DEFAULT ((0)) FOR [SLAHours];


GO
PRINT N'Creating DF__Prioritie__SLAMi__61274A53...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__SLAMi__61274A53] DEFAULT ((0)) FOR [SLAMinutes];


GO
PRINT N'Creating DF__Prioritie__btSki__7EB7AD3A...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__btSki__7EB7AD3A] DEFAULT ((0)) FOR [btSkipSaturday];


GO
PRINT N'Creating DF__Prioritie__btSki__7FABD173...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__btSki__7FABD173] DEFAULT ((0)) FOR [btSkipSunday];


GO
PRINT N'Creating DF__Prioritie__btSki__009FF5AC...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__btSki__009FF5AC] DEFAULT ((0)) FOR [btSkipHolidays];


GO
PRINT N'Creating DF__Prioritie__btUse__019419E5...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__btUse__019419E5] DEFAULT ((0)) FOR [btUseBusHours];


GO
PRINT N'Creating DF__Prioritie__SLARe__0658CF02...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__SLARe__0658CF02] DEFAULT ((0)) FOR [SLAResponseDays];


GO
PRINT N'Creating DF__Prioritie__SLARe__074CF33B...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__SLARe__074CF33B] DEFAULT ((0)) FOR [SLAResponseHours];


GO
PRINT N'Creating DF__Prioritie__SLARe__08411774...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__SLARe__08411774] DEFAULT ((0)) FOR [SLAResponseMinutes];


GO
PRINT N'Creating DF__Prioritie__btRes__09353BAD...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__btRes__09353BAD] DEFAULT ((0)) FOR [btResponseSkipSaturday];


GO
PRINT N'Creating DF__Prioritie__btRes__0A295FE6...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__btRes__0A295FE6] DEFAULT ((0)) FOR [btResponseSkipSunday];


GO
PRINT N'Creating DF__Prioritie__btRes__0B1D841F...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__btRes__0B1D841F] DEFAULT ((0)) FOR [btResponseSkipHolidays];


GO
PRINT N'Creating DF__Prioritie__btRes__0C11A858...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__btRes__0C11A858] DEFAULT ((0)) FOR [btResponseUseBusHours];


GO
PRINT N'Creating DF__Prioritie__btRst__50BBD860...';


GO
ALTER TABLE [dbo].[Priorities]
    ADD CONSTRAINT [DF__Prioritie__btRst__50BBD860] DEFAULT ((0)) FOR [btRstrctUsr];


GO
PRINT N'Creating DF_Project_Active_1...';


GO
ALTER TABLE [dbo].[Project]
    ADD CONSTRAINT [DF_Project_Active_1] DEFAULT ((0)) FOR [Active];


GO
PRINT N'Creating DF_ProjectTime_Downloaded...';


GO
ALTER TABLE [dbo].[ProjectTime]
    ADD CONSTRAINT [DF_ProjectTime_Downloaded] DEFAULT (0) FOR [Downloaded];


GO
PRINT N'Creating DF_ProjectTime_Deleted...';


GO
ALTER TABLE [dbo].[ProjectTime]
    ADD CONSTRAINT [DF_ProjectTime_Deleted] DEFAULT (0) FOR [Deleted];


GO
PRINT N'Creating DF_ProjectTime_HourlyRate...';


GO
ALTER TABLE [dbo].[ProjectTime]
    ADD CONSTRAINT [DF_ProjectTime_HourlyRate] DEFAULT (0) FOR [HourlyRate];


GO
PRINT N'Creating DF_RelatedTickets_RelationType...';


GO
ALTER TABLE [dbo].[RelatedTickets]
    ADD CONSTRAINT [DF_RelatedTickets_RelationType] DEFAULT ((0)) FOR [RelationType];


GO
PRINT N'Creating Default Constraint on [dbo].[RemoteSessions]....';


GO
ALTER TABLE [dbo].[RemoteSessions]
    ADD DEFAULT (0) FOR [SIsCompleted];


GO
PRINT N'Creating DF_ResolutionCats_btInactive...';


GO
ALTER TABLE [dbo].[ResolutionCats]
    ADD CONSTRAINT [DF_ResolutionCats_btInactive] DEFAULT (1) FOR [btInactive];


GO
PRINT N'Creating DF_ResolutionCats_btResolved...';


GO
ALTER TABLE [dbo].[ResolutionCats]
    ADD CONSTRAINT [DF_ResolutionCats_btResolved] DEFAULT (0) FOR [btResolved];


GO
PRINT N'Creating DF_SchedTickets_RepeatFromCompletion...';


GO
ALTER TABLE [dbo].[SchedTickets]
    ADD CONSTRAINT [DF_SchedTickets_RepeatFromCompletion] DEFAULT ((0)) FOR [RepeatFromCompletion];


GO
PRINT N'Creating DF_SubmissionCategories_bitSelectable...';


GO
ALTER TABLE [dbo].[SubmissionCategories]
    ADD CONSTRAINT [DF_SubmissionCategories_bitSelectable] DEFAULT ((0)) FOR [bitSelectable];


GO
PRINT N'Creating DF_SupportPortalLinks_Bold...';


GO
ALTER TABLE [dbo].[SupportPortalLinks]
    ADD CONSTRAINT [DF_SupportPortalLinks_Bold] DEFAULT ((0)) FOR [Bold];


GO
PRINT N'Creating DF_TaskType_Active...';


GO
ALTER TABLE [dbo].[TaskType]
    ADD CONSTRAINT [DF_TaskType_Active] DEFAULT (1) FOR [Active];


GO
PRINT N'Creating DF_TaskType_AppliesToTickets...';


GO
ALTER TABLE [dbo].[TaskType]
    ADD CONSTRAINT [DF_TaskType_AppliesToTickets] DEFAULT (1) FOR [AppliesToTickets];


GO
PRINT N'Creating DF_TaskType_AppliesToProjects...';


GO
ALTER TABLE [dbo].[TaskType]
    ADD CONSTRAINT [DF_TaskType_AppliesToProjects] DEFAULT (1) FOR [AppliesToProjects];


GO
PRINT N'Creating DF_TaskTypeTechBillableRate_HourlyRate...';


GO
ALTER TABLE [dbo].[TaskTypeTechBillableRate]
    ADD CONSTRAINT [DF_TaskTypeTechBillableRate_HourlyRate] DEFAULT ((0)) FOR [HourlyRate];


GO
PRINT N'Creating DF_TaskTypeTechCost_Cost...';


GO
ALTER TABLE [dbo].[TaskTypeTechCost]
    ADD CONSTRAINT [DF_TaskTypeTechCost_Cost] DEFAULT ((0)) FOR [Cost];


GO
PRINT N'Creating DF__tmp_tbl_c__Confi__524F1B17...';


GO
ALTER TABLE [dbo].[tbl_class]
    ADD CONSTRAINT [DF__tmp_tbl_c__Confi__524F1B17] DEFAULT ((0)) FOR [ConfigDistributedRouting];


GO
PRINT N'Creating DF__tmp_tbl_c__tintC__53433F50...';


GO
ALTER TABLE [dbo].[tbl_class]
    ADD CONSTRAINT [DF__tmp_tbl_c__tintC__53433F50] DEFAULT ((0)) FOR [tintClassType];


GO
PRINT N'Creating DF__tmp_tbl_c__bitRe__54376389...';


GO
ALTER TABLE [dbo].[tbl_class]
    ADD CONSTRAINT [DF__tmp_tbl_c__bitRe__54376389] DEFAULT ((0)) FOR [bitRestrictToTechs];


GO
PRINT N'Creating DF__tmp_tbl_c__bitAl__552B87C2...';


GO
ALTER TABLE [dbo].[tbl_class]
    ADD CONSTRAINT [DF__tmp_tbl_c__bitAl__552B87C2] DEFAULT ((0)) FOR [bitAllowEmailParsing];


GO
PRINT N'Creating DF__tmp_tbl_c__btIna__561FABFB...';


GO
ALTER TABLE [dbo].[tbl_class]
    ADD CONSTRAINT [DF__tmp_tbl_c__btIna__561FABFB] DEFAULT ((0)) FOR [btInactive];


GO
PRINT N'Creating DF_tbl_class_KBPortal...';


GO
ALTER TABLE [dbo].[tbl_class]
    ADD CONSTRAINT [DF_tbl_class_KBPortal] DEFAULT ((1)) FOR [KBPortal];


GO
PRINT N'Creating DF__tbl_compa__compa__25083EAB...';


GO
ALTER TABLE [dbo].[tbl_company]
    ADD CONSTRAINT [DF__tbl_compa__compa__25083EAB] DEFAULT (newid()) FOR [company_guid];


GO
PRINT N'Creating DF_tbl_KnowledgebaseResponses_DepartmentId...';


GO
ALTER TABLE [dbo].[tbl_KnowledgebaseResponses]
    ADD CONSTRAINT [DF_tbl_KnowledgebaseResponses_DepartmentId] DEFAULT (0) FOR [DepartmentId];


GO
PRINT N'Creating Default Constraint on [dbo].[tbl_Locations]....';


GO
ALTER TABLE [dbo].[tbl_Locations]
    ADD DEFAULT (0) FOR [btInactive];


GO
PRINT N'Creating DF__tmp_tbl_L__UserT__355DD6AE...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__UserT__355DD6AE] DEFAULT ((1)) FOR [UserType_Id];


GO
PRINT N'Creating DF__tmp_tbl_L__Check__3651FAE7...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__Check__3651FAE7] DEFAULT ((1)) FOR [CheckinStatus];


GO
PRINT N'Creating DF__tmp_tbl_L__confi__383A4359...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__confi__383A4359] DEFAULT ((0)) FOR [configPartialSetup];


GO
PRINT N'Creating DF__tmp_tbl_L__confi__392E6792...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__confi__392E6792] DEFAULT ((1)) FOR [configEmailNewTicket];


GO
PRINT N'Creating DF__tmp_tbl_L__confi__3A228BCB...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__confi__3A228BCB] DEFAULT ((1)) FOR [configEmailTicketResponse];


GO
PRINT N'Creating DF__tmp_tbl_L__confi__3B16B004...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__confi__3B16B004] DEFAULT ((1)) FOR [configEmailUserTicketResponse];


GO
PRINT N'Creating DF__tmp_tbl_L__confi__3C0AD43D...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__confi__3C0AD43D] DEFAULT ((1)) FOR [configEmailUserNewTicket];


GO
PRINT N'Creating DF__tmp_tbl_L__bitAl__3CFEF876...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__bitAl__3CFEF876] DEFAULT ((0)) FOR [bitAllowQueEmailParsing];


GO
PRINT N'Creating DF__tmp_tbl_L__btCfg__3DF31CAF...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__btCfg__3DF31CAF] DEFAULT ((0)) FOR [btCfgCCRep];


GO
PRINT N'Creating DF__tmp_tbl_L__btGlo__3EE740E8...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__btGlo__3EE740E8] DEFAULT ((0)) FOR [btGlobalFilterEnabled];


GO
PRINT N'Creating DF__tmp_tbl_L__btLim__3FDB6521...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__btLim__3FDB6521] DEFAULT ((0)) FOR [btLimitToAssignedTkts];


GO
PRINT N'Creating DF__tmp_tbl_L__btDis__40CF895A...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__btDis__40CF895A] DEFAULT ((0)) FOR [btDisabledReports];


GO
PRINT N'Creating DF__tmp_tbl_L__btUse__41C3AD93...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF__tmp_tbl_L__btUse__41C3AD93] DEFAULT ((0)) FOR [btUserInactive];


GO
PRINT N'Creating DF_tbl_LoginCompanyJunc_CfgIsBillable...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc]
    ADD CONSTRAINT [DF_tbl_LoginCompanyJunc_CfgIsBillable] DEFAULT ((1)) FOR [CfgIsBillable];


GO
PRINT N'Creating DF_tbl_Logins_ConfigUnassignedQue...';


GO
ALTER TABLE [dbo].[tbl_Logins]
    ADD CONSTRAINT [DF_tbl_Logins_ConfigUnassignedQue] DEFAULT ((0)) FOR [ConfigUnassignedQue];


GO
PRINT N'Creating DF_tbl_Logins_MobileEmailType...';


GO
ALTER TABLE [dbo].[tbl_Logins]
    ADD CONSTRAINT [DF_tbl_Logins_MobileEmailType] DEFAULT ((0)) FOR [MobileEmailType];


GO
PRINT N'Creating DF_Part_ShippingCost...';


GO
ALTER TABLE [dbo].[tbl_part]
    ADD CONSTRAINT [DF_Part_ShippingCost] DEFAULT ((0)) FOR [ShippingCost];


GO
PRINT N'Creating DF_tbl_ticket_NewUserPost...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF_tbl_ticket_NewUserPost] DEFAULT ((0)) FOR [NewUserPost];


GO
PRINT N'Creating DF_tbl_ticket_NewTechPost...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF_tbl_ticket_NewTechPost] DEFAULT ((0)) FOR [NewTechPost];


GO
PRINT N'Creating DF_Tickets_PartsCost...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF_Tickets_PartsCost] DEFAULT (0) FOR [PartsCost];


GO
PRINT N'Creating DF_Tickets_LaborCost...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF_Tickets_LaborCost] DEFAULT (0) FOR [LaborCost];


GO
PRINT N'Creating DF_Tickets_TravelCost...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF_Tickets_TravelCost] DEFAULT (0) FOR [TravelCost];


GO
PRINT N'Creating DF_Tickets_MiscCost...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF_Tickets_MiscCost] DEFAULT (0) FOR [MiscCost];


GO
PRINT N'Creating DF_Tkts_intSLACompleteUsed...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF_Tkts_intSLACompleteUsed] DEFAULT (0) FOR [intSLACompleteUsed];


GO
PRINT N'Creating DF_tbl_ticket_intSLAResponseUsed...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF_tbl_ticket_intSLAResponseUsed] DEFAULT (0) FOR [intSLAResponseUsed];


GO
PRINT N'Creating DF__tbl_ticke__btIni__2018A105...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF__tbl_ticke__btIni__2018A105] DEFAULT (0) FOR [btInitResponse];


GO
PRINT N'Creating DF__tbl_ticke__intTk__62A57E71...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF__tbl_ticke__intTk__62A57E71] DEFAULT (0) FOR [intTktTimeMin];


GO
PRINT N'Creating DF__tbl_ticke__btVia__75B852E5...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF__tbl_ticke__btVia__75B852E5] DEFAULT (0) FOR [btViaEmailParser];


GO
PRINT N'Creating DF_tbl_ticket_btHandledByCC...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF_tbl_ticket_btHandledByCC] DEFAULT (0) FOR [btHandledByCC];


GO
PRINT N'Creating DF_tbl_ticket_KB...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF_tbl_ticket_KB] DEFAULT ((0)) FOR [KB];


GO
PRINT N'Creating DF_tbl_ticket_btNoAccount...';


GO
ALTER TABLE [dbo].[tbl_ticket]
    ADD CONSTRAINT [DF_tbl_ticket_btNoAccount] DEFAULT ((0)) FOR [btNoAccount];


GO
PRINT N'Creating DF_TicketAssignments_AssignmentDate...';


GO
ALTER TABLE [dbo].[TicketAssignment]
    ADD CONSTRAINT [DF_TicketAssignments_AssignmentDate] DEFAULT (getutcdate()) FOR [StartDate];


GO
PRINT N'Creating DF_TicketAssignment_IsPrimary...';


GO
ALTER TABLE [dbo].[TicketAssignment]
    ADD CONSTRAINT [DF_TicketAssignment_IsPrimary] DEFAULT ((0)) FOR [IsPrimary];


GO
PRINT N'Creating DF_TicketCriteriaData_btExclude...';


GO
ALTER TABLE [dbo].[TicketCriteriaData]
    ADD CONSTRAINT [DF_TicketCriteriaData_btExclude] DEFAULT (0) FOR [btExclude];


GO
PRINT N'Creating DF_TicketCriterias_CriteriaType...';


GO
ALTER TABLE [dbo].[TicketCriterias]
    ADD CONSTRAINT [DF_TicketCriterias_CriteriaType] DEFAULT (0) FOR [CriteriaType];


GO
PRINT N'Creating DF_TicketCriterias_btLimitToAssignedTkts...';


GO
ALTER TABLE [dbo].[TicketCriterias]
    ADD CONSTRAINT [DF_TicketCriterias_btLimitToAssignedTkts] DEFAULT (0) FOR [btLimitToAssignedTkts];


GO
PRINT N'Creating DF_TicketCriterias_btDisabledReports...';


GO
ALTER TABLE [dbo].[TicketCriterias]
    ADD CONSTRAINT [DF_TicketCriterias_btDisabledReports] DEFAULT (0) FOR [btDisabledReports];


GO
PRINT N'Creating DF_TicketCriterias_btNoFilter...';


GO
ALTER TABLE [dbo].[TicketCriterias]
    ADD CONSTRAINT [DF_TicketCriterias_btNoFilter] DEFAULT (1) FOR [btNoFilter];


GO
PRINT N'Creating DF_TicketLogs_Hidden...';


GO
ALTER TABLE [dbo].[TicketLogs]
    ADD CONSTRAINT [DF_TicketLogs_Hidden] DEFAULT ((0)) FOR [Hidden];


GO
PRINT N'Creating DF__TicketTim__btDow__6C2EE8AB...';


GO
ALTER TABLE [dbo].[TicketTime]
    ADD CONSTRAINT [DF__TicketTim__btDow__6C2EE8AB] DEFAULT (0) FOR [Downloaded];


GO
PRINT N'Creating DF_TicketTime_Deleted...';


GO
ALTER TABLE [dbo].[TicketTime]
    ADD CONSTRAINT [DF_TicketTime_Deleted] DEFAULT (0) FOR [Deleted];


GO
PRINT N'Creating DF_TicketTime_TimeEntryOnDetail...';


GO
ALTER TABLE [dbo].[TicketTime]
    ADD CONSTRAINT [DF_TicketTime_TimeEntryOnDetail] DEFAULT ((1)) FOR [TimeEntryOnDetail];


GO
PRINT N'Creating DF_TimeBill_Exported...';


GO
ALTER TABLE [dbo].[TimeBill]
    ADD CONSTRAINT [DF_TimeBill_Exported] DEFAULT ((0)) FOR [Exported];


GO
PRINT N'Creating DF_ToDoItem_Completed...';


GO
ALTER TABLE [dbo].[ToDoItem]
    ADD CONSTRAINT [DF_ToDoItem_Completed] DEFAULT ((0)) FOR [Completed];


GO
PRINT N'Creating DF_UserAccounts_AccountingContact...';


GO
ALTER TABLE [dbo].[UserAccounts]
    ADD CONSTRAINT [DF_UserAccounts_AccountingContact] DEFAULT ((0)) FOR [AccountingContact];


GO
PRINT N'Creating DF_UserAccounts_AccountingContactPrimary...';


GO
ALTER TABLE [dbo].[UserAccounts]
    ADD CONSTRAINT [DF_UserAccounts_AccountingContactPrimary] DEFAULT ((0)) FOR [AccountingContactPrimary];


GO
PRINT N'Creating DF_UserProjects_SubscribeEmail...';


GO
ALTER TABLE [dbo].[UserProjects]
    ADD CONSTRAINT [DF_UserProjects_SubscribeEmail] DEFAULT ((1)) FOR [SubscribeEmail];


GO
PRINT N'Creating DF__WrkLstFil__btFil__5A9A4855...';


GO
ALTER TABLE [dbo].[WrkLstFilters]
    ADD CONSTRAINT [DF__WrkLstFil__btFil__5A9A4855] DEFAULT ((0)) FOR [btFilterEnabled];


GO
PRINT N'Creating FK_AccessKey_AccessKeyType...';


GO
ALTER TABLE [dbo].[AccessKey] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessKey_AccessKeyType] FOREIGN KEY ([AccessKeyTypeID]) REFERENCES [dbo].[AccessKeyType] ([AccessKeyTypeID]);


GO
PRINT N'Creating FK_AccessKey_tbl_company...';


GO
ALTER TABLE [dbo].[AccessKey] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessKey_tbl_company] FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AccessKey_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[AccessKey] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessKey_tbl_LoginCompanyJunc] FOREIGN KEY ([CompanyID], [UserID]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_AcctFiles_Acct...';


GO
ALTER TABLE [dbo].[AccountFiles] WITH NOCHECK
    ADD CONSTRAINT [fk_AcctFiles_Acct] FOREIGN KEY ([DId], [AcctId]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating fk_AcctFiles_DId...';


GO
ALTER TABLE [dbo].[AccountFiles] WITH NOCHECK
    ADD CONSTRAINT [fk_AcctFiles_DId] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_AcctFilters_DId...';


GO
ALTER TABLE [dbo].[AccountFilters] WITH NOCHECK
    ADD CONSTRAINT [fk_AcctFilters_DId] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_AcctFilters_UId...';


GO
ALTER TABLE [dbo].[AccountFilters] WITH NOCHECK
    ADD CONSTRAINT [fk_AcctFilters_UId] FOREIGN KEY ([DId], [UId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK__AccountLeve__DId__46934FA8...';


GO
ALTER TABLE [dbo].[AccountLevels] WITH NOCHECK
    ADD CONSTRAINT [FK__AccountLeve__DId__46934FA8] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_AcctLvls_Accts...';


GO
ALTER TABLE [dbo].[AccountLevels] WITH NOCHECK
    ADD CONSTRAINT [fk_AcctLvls_Accts] FOREIGN KEY ([DId], [AcctId]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_AccountLevelTechs_tbl_company...';


GO
ALTER TABLE [dbo].[AccountLevelTechs] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountLevelTechs_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AccountLevelTechs_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[AccountLevelTechs] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountLevelTechs_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [UId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_ALT_AcctLvls...';


GO
ALTER TABLE [dbo].[AccountLevelTechs] WITH NOCHECK
    ADD CONSTRAINT [fk_ALT_AcctLvls] FOREIGN KEY ([DId], [AcctId], [tintLevel]) REFERENCES [dbo].[AccountLevels] ([DId], [AcctId], [tintLevel]);


GO
PRINT N'Creating FK_AcctLoc_Acct...';


GO
ALTER TABLE [dbo].[AccountLocations] WITH NOCHECK
    ADD CONSTRAINT [FK_AcctLoc_Acct] FOREIGN KEY ([DId], [AccountId]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_AcctLoc_DId...';


GO
ALTER TABLE [dbo].[AccountLocations] WITH NOCHECK
    ADD CONSTRAINT [FK_AcctLoc_DId] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AccountRate_Accounts...';


GO
ALTER TABLE [dbo].[AccountRate] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountRate_Accounts] FOREIGN KEY ([CompanyID], [AccountID]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_AccountRate_BillingMethod...';


GO
ALTER TABLE [dbo].[AccountRate] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountRate_BillingMethod] FOREIGN KEY ([BillingMethodID]) REFERENCES [dbo].[BillingMethod] ([BillingMethodID]);


GO
PRINT N'Creating FK_AccountRate_RatePlan...';


GO
ALTER TABLE [dbo].[AccountRate] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountRate_RatePlan] FOREIGN KEY ([CompanyID], [RatePlanID]) REFERENCES [dbo].[RatePlan] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AccountRate_tbl_company...';


GO
ALTER TABLE [dbo].[AccountRate] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountRate_tbl_company] FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AccountRetainer_Accounts...';


GO
ALTER TABLE [dbo].[AccountRetainer] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountRetainer_Accounts] FOREIGN KEY ([DId], [AccountId]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_AccountRetainer_tbl_company...';


GO
ALTER TABLE [dbo].[AccountRetainer] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountRetainer_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AccountRetainer_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[AccountRetainer] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountRetainer_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [TechId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_Accounts_DId...';


GO
ALTER TABLE [dbo].[Accounts] WITH NOCHECK
    ADD CONSTRAINT [FK_Accounts_DId] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_Acct_LCJ...';


GO
ALTER TABLE [dbo].[Accounts] WITH NOCHECK
    ADD CONSTRAINT [fk_Acct_LCJ] FOREIGN KEY ([DId], [AcctRepId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_Accts_AcctGroups...';


GO
ALTER TABLE [dbo].[Accounts] WITH NOCHECK
    ADD CONSTRAINT [FK_Accts_AcctGroups] FOREIGN KEY ([DId], [SupGroupId]) REFERENCES [dbo].[SupportGroups] ([DId], [Id]);


GO
PRINT N'Creating FK_AcctsCfg_DId...';


GO
ALTER TABLE [dbo].[AccountsCfg] WITH NOCHECK
    ADD CONSTRAINT [FK_AcctsCfg_DId] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AccountTaskTypeRate_Accounts...';


GO
ALTER TABLE [dbo].[AccountTaskTypeRate] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountTaskTypeRate_Accounts] FOREIGN KEY ([CompanyID], [AccountID]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_AccountTaskTypeRate_TaskType...';


GO
ALTER TABLE [dbo].[AccountTaskTypeRate] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountTaskTypeRate_TaskType] FOREIGN KEY ([CompanyID], [TaskTypeID]) REFERENCES [dbo].[TaskType] ([DepartmentID], [TaskTypeId]);


GO
PRINT N'Creating FK_AccountTaskTypeRate_tbl_company...';


GO
ALTER TABLE [dbo].[AccountTaskTypeRate] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountTaskTypeRate_tbl_company] FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AccountTech_Accounts...';


GO
ALTER TABLE [dbo].[AccountTech] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountTech_Accounts] FOREIGN KEY ([CompanyID], [AccountID]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_AccountTech_tbl_company...';


GO
ALTER TABLE [dbo].[AccountTech] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountTech_tbl_company] FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AccountTech_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[AccountTech] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountTech_tbl_LoginCompanyJunc] FOREIGN KEY ([CompanyID], [TechID]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_AssetBulk_AssetCategories...';


GO
ALTER TABLE [dbo].[AssetBulk] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetBulk_AssetCategories] FOREIGN KEY ([DepartmentId], [CategoryId]) REFERENCES [dbo].[AssetCategories] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_AssetBulk_AssetTypes...';


GO
ALTER TABLE [dbo].[AssetBulk] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetBulk_AssetTypes] FOREIGN KEY ([DepartmentId], [TypeId]) REFERENCES [dbo].[AssetTypes] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_AssetBulk_tbl_company...';


GO
ALTER TABLE [dbo].[AssetBulk] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetBulk_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AssetBulk_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[AssetBulk] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetBulk_tbl_LoginCompanyJunc] FOREIGN KEY ([DepartmentId], [CreatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_AssetBulk_tbl_LoginCompanyJunc1...';


GO
ALTER TABLE [dbo].[AssetBulk] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetBulk_tbl_LoginCompanyJunc1] FOREIGN KEY ([DepartmentId], [UpdatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_AssetBulkLocation_AssetBulk...';


GO
ALTER TABLE [dbo].[AssetBulkLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetBulkLocation_AssetBulk] FOREIGN KEY ([DId], [AssetBulkId]) REFERENCES [dbo].[AssetBulk] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AssetBulkLocation_LocationAuditHistory...';


GO
ALTER TABLE [dbo].[AssetBulkLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetBulkLocation_LocationAuditHistory] FOREIGN KEY ([DId], [AuditId]) REFERENCES [dbo].[LocationAuditHistory] ([DId], [Id]);


GO
PRINT N'Creating FK_AssetBulkLocation_Locations...';


GO
ALTER TABLE [dbo].[AssetBulkLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetBulkLocation_Locations] FOREIGN KEY ([DId], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_AssetBulkLocation_tbl_company...';


GO
ALTER TABLE [dbo].[AssetBulkLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetBulkLocation_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AssetBulkLocation_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[AssetBulkLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetBulkLocation_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [CreatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_AssetCategories_DepartmentId...';


GO
ALTER TABLE [dbo].[AssetCategories] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetCategories_DepartmentId] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AssetColumnSettings_tbl_company...';


GO
ALTER TABLE [dbo].[AssetColumnSettings] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetColumnSettings_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AssetColumnSettings_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[AssetColumnSettings] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetColumnSettings_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [UId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_AssetComputerLogicalDrives_Assets...';


GO
ALTER TABLE [dbo].[AssetComputerLogicalDrives] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetComputerLogicalDrives_Assets] FOREIGN KEY ([DepartmentId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AssetComputerPrinters_Assets...';


GO
ALTER TABLE [dbo].[AssetComputerPrinters] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetComputerPrinters_Assets] FOREIGN KEY ([DepartmentId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AssetComputerProcessors_Assets...';


GO
ALTER TABLE [dbo].[AssetComputerProcessors] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetComputerProcessors_Assets] FOREIGN KEY ([DepartmentId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AssetComputers_Assets...';


GO
ALTER TABLE [dbo].[AssetComputers] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetComputers_Assets] FOREIGN KEY ([DepartmentId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AssetComputerSoftwares_Assets...';


GO
ALTER TABLE [dbo].[AssetComputerSoftwares] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetComputerSoftwares_Assets] FOREIGN KEY ([DepartmentId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AssetFilters_AssetColumnSettings...';


GO
ALTER TABLE [dbo].[AssetFilters] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetFilters_AssetColumnSettings] FOREIGN KEY ([DId], [AssetColumnSettingId]) REFERENCES [dbo].[AssetColumnSettings] ([DId], [Id]);


GO
PRINT N'Creating FK_AssetFilters_tbl_company...';


GO
ALTER TABLE [dbo].[AssetFilters] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetFilters_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AssetFilters_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[AssetFilters] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetFilters_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [UId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_AssetImports_Assets...';


GO
ALTER TABLE [dbo].[AssetImports] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetImports_Assets] FOREIGN KEY ([DepartmentId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AssetImports_tbl_company...';


GO
ALTER TABLE [dbo].[AssetImports] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetImports_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AssetImports_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[AssetImports] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetImports_tbl_LoginCompanyJunc] FOREIGN KEY ([DepartmentId], [UpdatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_AssetMakes_AssetTypes...';


GO
ALTER TABLE [dbo].[AssetMakes] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetMakes_AssetTypes] FOREIGN KEY ([DepartmentId], [TypeId]) REFERENCES [dbo].[AssetTypes] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_AssetMakes_DepartmentId...';


GO
ALTER TABLE [dbo].[AssetMakes] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetMakes_DepartmentId] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AssetModels_AssetMakes...';


GO
ALTER TABLE [dbo].[AssetModels] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetModels_AssetMakes] FOREIGN KEY ([DepartmentId], [MakeId]) REFERENCES [dbo].[AssetMakes] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_DepartmentId...';


GO
ALTER TABLE [dbo].[AssetModels] WITH NOCHECK
    ADD CONSTRAINT [FK_DepartmentId] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AssetPropertyValues_Assets...';


GO
ALTER TABLE [dbo].[AssetPropertyValues] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetPropertyValues_Assets] FOREIGN KEY ([DId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AssetPropertyValues_AssetTypeProperties...';


GO
ALTER TABLE [dbo].[AssetPropertyValues] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetPropertyValues_AssetTypeProperties] FOREIGN KEY ([DId], [AssetTypePropertyId]) REFERENCES [dbo].[AssetTypeProperties] ([DId], [Id]);


GO
PRINT N'Creating FK_AssetPropertyValues_tbl_company...';


GO
ALTER TABLE [dbo].[AssetPropertyValues] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetPropertyValues_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating Assets_tbl_company_fk...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [Assets_tbl_company_fk] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_Assets_Accounts...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [FK_Assets_Accounts] FOREIGN KEY ([DepartmentId], [AccountId]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_Assets_AssetCategories...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [FK_Assets_AssetCategories] FOREIGN KEY ([DepartmentId], [CategoryId]) REFERENCES [dbo].[AssetCategories] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_Assets_AssetMakes...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [FK_Assets_AssetMakes] FOREIGN KEY ([DepartmentId], [MakeId]) REFERENCES [dbo].[AssetMakes] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_Assets_AssetModels...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [FK_Assets_AssetModels] FOREIGN KEY ([DepartmentId], [ModelId]) REFERENCES [dbo].[AssetModels] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_Assets_AssetTypes...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [FK_Assets_AssetTypes] FOREIGN KEY ([DepartmentId], [TypeId]) REFERENCES [dbo].[AssetTypes] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_Assets_Locations...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [FK_Assets_Locations] FOREIGN KEY ([DepartmentId], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_Assets_MergedAssets...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [FK_Assets_MergedAssets] FOREIGN KEY ([DepartmentId], [MergedId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating fk_Assets_Status...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [fk_Assets_Status] FOREIGN KEY ([StatusId]) REFERENCES [dbo].[AssetStatus] ([id]);


GO
PRINT N'Creating FK_Assets_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [FK_Assets_tbl_LoginCompanyJunc] FOREIGN KEY ([DepartmentId], [intUpdatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_Assets_tbl_vendors...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [FK_Assets_tbl_vendors] FOREIGN KEY ([DepartmentId], [VendorId]) REFERENCES [dbo].[tbl_vendors] ([company_id], [id]);


GO
PRINT N'Creating fk_LCJ_Assets...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_Assets] FOREIGN KEY ([DepartmentId], [CheckedOutId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_LCJ_Assets2...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_Assets2] FOREIGN KEY ([DepartmentId], [OwnerId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_Locations_Assets...';


GO
ALTER TABLE [dbo].[Assets] WITH NOCHECK
    ADD CONSTRAINT [FK_Locations_Assets] FOREIGN KEY ([location_id]) REFERENCES [dbo].[tbl_Locations] ([id]);


GO
PRINT N'Creating FK_AssetStatusCompany_AssetStatus...';


GO
ALTER TABLE [dbo].[AssetStatusCompany] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetStatusCompany_AssetStatus] FOREIGN KEY ([AssetStatusID]) REFERENCES [dbo].[AssetStatus] ([id]);


GO
PRINT N'Creating FK_AssetStatusCompany_tbl_company...';


GO
ALTER TABLE [dbo].[AssetStatusCompany] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetStatusCompany_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AssetSubAssets_Assets...';


GO
ALTER TABLE [dbo].[AssetSubAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetSubAssets_Assets] FOREIGN KEY ([DId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AssetSubAssets_Assets1...';


GO
ALTER TABLE [dbo].[AssetSubAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetSubAssets_Assets1] FOREIGN KEY ([DId], [AssetChildId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AssetSubAssets_tbl_company...';


GO
ALTER TABLE [dbo].[AssetSubAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetSubAssets_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AssetTypeCustFields_Assets...';


GO
ALTER TABLE [dbo].[AssetTypeCustFields] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetTypeCustFields_Assets] FOREIGN KEY ([DepartmentId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_AssetTypeProperties_AssetTypes...';


GO
ALTER TABLE [dbo].[AssetTypeProperties] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetTypeProperties_AssetTypes] FOREIGN KEY ([DId], [AssetTypeId]) REFERENCES [dbo].[AssetTypes] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_AssetTypeProperties_tbl_company...';


GO
ALTER TABLE [dbo].[AssetTypeProperties] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetTypeProperties_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_AssetTypes_AssetCategories...';


GO
ALTER TABLE [dbo].[AssetTypes] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetTypes_AssetCategories] FOREIGN KEY ([DepartmentId], [CategoryId]) REFERENCES [dbo].[AssetCategories] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_AssetTypes_AssetProfiles...';


GO
ALTER TABLE [dbo].[AssetTypes] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetTypes_AssetProfiles] FOREIGN KEY ([AssetProfileId]) REFERENCES [dbo].[AssetProfiles] ([Id]);


GO
PRINT N'Creating FK_AssetTypes_DepartmentId...';


GO
ALTER TABLE [dbo].[AssetTypes] WITH NOCHECK
    ADD CONSTRAINT [FK_AssetTypes_DepartmentId] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_ClassLevels_Levels...';


GO
ALTER TABLE [dbo].[ClassLevels] WITH NOCHECK
    ADD CONSTRAINT [fk_ClassLevels_Levels] FOREIGN KEY ([DId], [tintLevel]) REFERENCES [dbo].[TktLevels] ([DId], [tintLevel]);


GO
PRINT N'Creating fk_ClssLvls_Class...';


GO
ALTER TABLE [dbo].[ClassLevels] WITH NOCHECK
    ADD CONSTRAINT [fk_ClssLvls_Class] FOREIGN KEY ([DId], [ClassId]) REFERENCES [dbo].[tbl_class] ([company_id], [id]);


GO
PRINT N'Creating fk_ClssLvls_DId...';


GO
ALTER TABLE [dbo].[ClassLevels] WITH NOCHECK
    ADD CONSTRAINT [fk_ClssLvls_DId] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_ClssLvls_LCJ...';


GO
ALTER TABLE [dbo].[ClassLevels] WITH NOCHECK
    ADD CONSTRAINT [fk_ClssLvls_LCJ] FOREIGN KEY ([DId], [intLastResortId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_ClassLevelsTechJctn_Locations...';


GO
ALTER TABLE [dbo].[ClassLevelsTechJctn] WITH NOCHECK
    ADD CONSTRAINT [FK_ClassLevelsTechJctn_Locations] FOREIGN KEY ([DId], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating fk_ClassLvlsJctn_Loc...';


GO
ALTER TABLE [dbo].[ClassLevelsTechJctn] WITH NOCHECK
    ADD CONSTRAINT [fk_ClassLvlsJctn_Loc] FOREIGN KEY ([DId], [intLocationId]) REFERENCES [dbo].[tbl_Locations] ([DId], [id]);


GO
PRINT N'Creating fk_ClssLvlsJctn_ClssLvls...';


GO
ALTER TABLE [dbo].[ClassLevelsTechJctn] WITH NOCHECK
    ADD CONSTRAINT [fk_ClssLvlsJctn_ClssLvls] FOREIGN KEY ([DId], [ClassId], [intClssLvlId]) REFERENCES [dbo].[ClassLevels] ([DId], [ClassId], [Id]);


GO
PRINT N'Creating fk_ClssLvlsJctn_DId...';


GO
ALTER TABLE [dbo].[ClassLevelsTechJctn] WITH NOCHECK
    ADD CONSTRAINT [fk_ClssLvlsJctn_DId] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_ClssLvlsJctn_LCJ...';


GO
ALTER TABLE [dbo].[ClassLevelsTechJctn] WITH NOCHECK
    ADD CONSTRAINT [fk_ClssLvlsJctn_LCJ] FOREIGN KEY ([DId], [intUId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_CreationCats_tbl_company...';


GO
ALTER TABLE [dbo].[CreationCats] WITH NOCHECK
    ADD CONSTRAINT [FK_CreationCats_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_CreationCats_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[CreationCats] WITH NOCHECK
    ADD CONSTRAINT [FK_CreationCats_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [intUpdatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_CreationCats_tbl_LoginCompanyJunc1...';


GO
ALTER TABLE [dbo].[CreationCats] WITH NOCHECK
    ADD CONSTRAINT [FK_CreationCats_tbl_LoginCompanyJunc1] FOREIGN KEY ([DId], [intCreated]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_CustomEmailFields_CustomFields...';


GO
ALTER TABLE [dbo].[CustomEmailFields] WITH NOCHECK
    ADD CONSTRAINT [FK_CustomEmailFields_CustomFields] FOREIGN KEY ([DepartmentId], [CustomFieldId]) REFERENCES [dbo].[CustomFields] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_CustomMails_tbl_company...';


GO
ALTER TABLE [dbo].[CustomEmailFields] WITH NOCHECK
    ADD CONSTRAINT [FK_CustomMails_tbl_company] FOREIGN KEY ([DepartmentId], [CustomFieldId]) REFERENCES [dbo].[CustomFields] ([DepartmentId], [id]) ON DELETE CASCADE;


GO
PRINT N'Creating DepartmentId_fk...';


GO
ALTER TABLE [dbo].[CustomFields] WITH NOCHECK
    ADD CONSTRAINT [DepartmentId_fk] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_CustomFields_tbl_class...';


GO
ALTER TABLE [dbo].[CustomFields] WITH NOCHECK
    ADD CONSTRAINT [FK_CustomFields_tbl_class] FOREIGN KEY ([DepartmentId], [class_id]) REFERENCES [dbo].[tbl_class] ([company_id], [id]);


GO
PRINT N'Creating FK_CustomNames_tbl_company...';


GO
ALTER TABLE [dbo].[CustomNames] WITH NOCHECK
    ADD CONSTRAINT [FK_CustomNames_tbl_company] FOREIGN KEY ([CompanyId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_CustomNames_Terms...';


GO
ALTER TABLE [dbo].[CustomNames] WITH NOCHECK
    ADD CONSTRAINT [FK_CustomNames_Terms] FOREIGN KEY ([TermId]) REFERENCES [dbo].[Terms] ([TermId]);


GO
PRINT N'Creating FK_CustomText_Company...';


GO
ALTER TABLE [dbo].[CustomText] WITH NOCHECK
    ADD CONSTRAINT [FK_CustomText_Company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_DaySummaryTime_LCJ_CreatedBy...';


GO
ALTER TABLE [dbo].[DaySummaryTime] WITH NOCHECK
    ADD CONSTRAINT [FK_DaySummaryTime_LCJ_CreatedBy] FOREIGN KEY ([DepartmentId], [CreatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_DaySummaryTime_LCJ_UID...';


GO
ALTER TABLE [dbo].[DaySummaryTime] WITH NOCHECK
    ADD CONSTRAINT [FK_DaySummaryTime_LCJ_UID] FOREIGN KEY ([DepartmentId], [UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_DaySummaryTime_LCJ_UpdatedBy...';


GO
ALTER TABLE [dbo].[DaySummaryTime] WITH NOCHECK
    ADD CONSTRAINT [FK_DaySummaryTime_LCJ_UpdatedBy] FOREIGN KEY ([DepartmentId], [UpdatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_DaySummaryTime_tbl_company...';


GO
ALTER TABLE [dbo].[DaySummaryTime] WITH NOCHECK
    ADD CONSTRAINT [FK_DaySummaryTime_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_DayTimeProjectNotes_Accounts...';


GO
ALTER TABLE [dbo].[DayTimeProjectNotes] WITH NOCHECK
    ADD CONSTRAINT [FK_DayTimeProjectNotes_Accounts] FOREIGN KEY ([DId], [AccountId]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_DayTimeProjectNotes_Project...';


GO
ALTER TABLE [dbo].[DayTimeProjectNotes] WITH NOCHECK
    ADD CONSTRAINT [FK_DayTimeProjectNotes_Project] FOREIGN KEY ([DId], [ProjectId]) REFERENCES [dbo].[Project] ([CompanyID], [ProjectID]);


GO
PRINT N'Creating FK_DayTimeProjectNotes_tbl_company...';


GO
ALTER TABLE [dbo].[DayTimeProjectNotes] WITH NOCHECK
    ADD CONSTRAINT [FK_DayTimeProjectNotes_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_DayTimeProjectNotes_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[DayTimeProjectNotes] WITH NOCHECK
    ADD CONSTRAINT [FK_DayTimeProjectNotes_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_DeploymentLogger_tbl_company...';


GO
ALTER TABLE [dbo].[DeploymentLogger] WITH NOCHECK
    ADD CONSTRAINT [FK_DeploymentLogger_tbl_company] FOREIGN KEY ([companyID]) REFERENCES [dbo].[tbl_company] ([company_id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_DeploymentLoggerUser_tbl_Logins...';


GO
ALTER TABLE [dbo].[DeploymentLoggerUser] WITH NOCHECK
    ADD CONSTRAINT [FK_DeploymentLoggerUser_tbl_Logins] FOREIGN KEY ([LoginID]) REFERENCES [dbo].[tbl_Logins] ([id]);


GO
PRINT N'Creating FK_EMailParserDropBoxes_Priorities_High...';


GO
ALTER TABLE [dbo].[EMailParserDropBoxes] WITH NOCHECK
    ADD CONSTRAINT [FK_EMailParserDropBoxes_Priorities_High] FOREIGN KEY ([DId], [HighPriorityId]) REFERENCES [dbo].[Priorities] ([DId], [Id]);


GO
PRINT N'Creating FK_EMailParserDropBoxes_Priorities_Low...';


GO
ALTER TABLE [dbo].[EMailParserDropBoxes] WITH NOCHECK
    ADD CONSTRAINT [FK_EMailParserDropBoxes_Priorities_Low] FOREIGN KEY ([DId], [LowPriorityId]) REFERENCES [dbo].[Priorities] ([DId], [Id]);


GO
PRINT N'Creating FK_EMailParserDropBoxes_Priorities_Normal...';


GO
ALTER TABLE [dbo].[EMailParserDropBoxes] WITH NOCHECK
    ADD CONSTRAINT [FK_EMailParserDropBoxes_Priorities_Normal] FOREIGN KEY ([DId], [NormalPriorityId]) REFERENCES [dbo].[Priorities] ([DId], [Id]);


GO
PRINT N'Creating FK_EMailParserDropBoxes_tbl_class...';


GO
ALTER TABLE [dbo].[EMailParserDropBoxes] WITH NOCHECK
    ADD CONSTRAINT [FK_EMailParserDropBoxes_tbl_class] FOREIGN KEY ([DId], [ClassId]) REFERENCES [dbo].[tbl_class] ([company_id], [id]);


GO
PRINT N'Creating FK_EMailParserDropBoxes_tbl_company...';


GO
ALTER TABLE [dbo].[EMailParserDropBoxes] WITH NOCHECK
    ADD CONSTRAINT [FK_EMailParserDropBoxes_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_EMailParserDropBoxes_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[EMailParserDropBoxes] WITH NOCHECK
    ADD CONSTRAINT [FK_EMailParserDropBoxes_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [TechnicianId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_EMailParserDropBoxes_TktLevels...';


GO
ALTER TABLE [dbo].[EMailParserDropBoxes] WITH NOCHECK
    ADD CONSTRAINT [FK_EMailParserDropBoxes_TktLevels] FOREIGN KEY ([DId], [tintLevel]) REFERENCES [dbo].[TktLevels] ([DId], [tintLevel]);


GO
PRINT N'Creating FK_Company_Folders...';


GO
ALTER TABLE [dbo].[Folders] WITH NOCHECK
    ADD CONSTRAINT [FK_Company_Folders] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_GlobalFilters_GlobalFilterTypes...';


GO
ALTER TABLE [dbo].[GlobalFilters] WITH NOCHECK
    ADD CONSTRAINT [FK_GlobalFilters_GlobalFilterTypes] FOREIGN KEY ([FilterTypeId]) REFERENCES [dbo].[GlobalFilterTypes] ([Id]);


GO
PRINT N'Creating FK_GlobalFilters_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[GlobalFilters] WITH NOCHECK
    ADD CONSTRAINT [FK_GlobalFilters_tbl_LoginCompanyJunc] FOREIGN KEY ([LoginId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([id]);


GO
PRINT N'Creating FK_Holidays_Dept...';


GO
ALTER TABLE [dbo].[Holidays] WITH NOCHECK
    ADD CONSTRAINT [FK_Holidays_Dept] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_Invoice_Accounts...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_Accounts] FOREIGN KEY ([DId], [AccountId]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_Invoice_BillingMethod...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_BillingMethod] FOREIGN KEY ([BillingMethodID]) REFERENCES [dbo].[BillingMethod] ([BillingMethodID]);


GO
PRINT N'Creating FK_Invoice_Project...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_Project] FOREIGN KEY ([DId], [ProjectId]) REFERENCES [dbo].[Project] ([CompanyID], [ProjectID]);


GO
PRINT N'Creating FK_Invoice_tbl_company...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_Invoice_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[Invoice] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoice_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [CreatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_InvoiceRetainer_Invoice...';


GO
ALTER TABLE [dbo].[InvoiceRetainer] WITH NOCHECK
    ADD CONSTRAINT [FK_InvoiceRetainer_Invoice] FOREIGN KEY ([DId], [InvoiceId]) REFERENCES [dbo].[Invoice] ([DId], [Id]);


GO
PRINT N'Creating FK_InvoiceRetainer_tbl_company...';


GO
ALTER TABLE [dbo].[InvoiceRetainer] WITH NOCHECK
    ADD CONSTRAINT [FK_InvoiceRetainer_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_InvoiceRetainer_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[InvoiceRetainer] WITH NOCHECK
    ADD CONSTRAINT [FK_InvoiceRetainer_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [TechId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_IzendaSavedReports_tbl_company...';


GO
ALTER TABLE [dbo].[IzendaSavedReports] WITH NOCHECK
    ADD CONSTRAINT [FK_IzendaSavedReports_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_JMR_DId...';


GO
ALTER TABLE [dbo].[JunkMailRules] WITH NOCHECK
    ADD CONSTRAINT [fk_JMR_DId] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_LocationAliases_Locations...';


GO
ALTER TABLE [dbo].[LocationAliases] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAliases_Locations] FOREIGN KEY ([DId], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_LocationAliases_tbl_company...';


GO
ALTER TABLE [dbo].[LocationAliases] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAliases_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_LocationAuditHistory_Locations...';


GO
ALTER TABLE [dbo].[LocationAuditHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAuditHistory_Locations] FOREIGN KEY ([DId], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_LocationAuditHistory_tbl_company...';


GO
ALTER TABLE [dbo].[LocationAuditHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAuditHistory_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_LocationAuditHistory_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[LocationAuditHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAuditHistory_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [AuditorId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_LocationAuditHistory_tbl_LoginCompanyJunc1...';


GO
ALTER TABLE [dbo].[LocationAuditHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAuditHistory_tbl_LoginCompanyJunc1] FOREIGN KEY ([DId], [CreatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_LocationAuditTaggedAssets_Assets...';


GO
ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAuditTaggedAssets_Assets] FOREIGN KEY ([DId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_LocationAuditTaggedAssets_LocationAuditHistory...';


GO
ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAuditTaggedAssets_LocationAuditHistory] FOREIGN KEY ([DId], [AuditId]) REFERENCES [dbo].[LocationAuditHistory] ([DId], [Id]);


GO
PRINT N'Creating FK_LocationAuditTaggedAssets_Locations...';


GO
ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAuditTaggedAssets_Locations] FOREIGN KEY ([DId], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_LocationAuditTaggedAssets_Locations1...';


GO
ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAuditTaggedAssets_Locations1] FOREIGN KEY ([DId], [SourceLocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_LocationAuditTaggedAssets_tbl_company...';


GO
ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAuditTaggedAssets_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_LocationAuditTaggedAssets_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationAuditTaggedAssets_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [AuditorId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_LocLvl_Dept...';


GO
ALTER TABLE [dbo].[LocationLevels] WITH NOCHECK
    ADD CONSTRAINT [fk_LocLvl_Dept] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_LocLvl_Locations...';


GO
ALTER TABLE [dbo].[LocationLevels] WITH NOCHECK
    ADD CONSTRAINT [fk_LocLvl_Locations] FOREIGN KEY ([DId], [LocationId]) REFERENCES [dbo].[tbl_Locations] ([DId], [id]);


GO
PRINT N'Creating fk_LocLvl_Lvls...';


GO
ALTER TABLE [dbo].[LocationLevels] WITH NOCHECK
    ADD CONSTRAINT [fk_LocLvl_Lvls] FOREIGN KEY ([DId], [tintLevel]) REFERENCES [dbo].[TktLevels] ([DId], [tintLevel]);


GO
PRINT N'Creating fk_LocLvlTchJctn...';


GO
ALTER TABLE [dbo].[LocationLevelsTechJctn] WITH NOCHECK
    ADD CONSTRAINT [fk_LocLvlTchJctn] FOREIGN KEY ([DId], [LocationId], [intLctLvlId]) REFERENCES [dbo].[LocationLevels] ([DId], [LocationId], [Id]);


GO
PRINT N'Creating FK_LocationPropertyValues_Locations...';


GO
ALTER TABLE [dbo].[LocationPropertyValues] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationPropertyValues_Locations] FOREIGN KEY ([DId], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_LocationPropertyValues_LocationTypeProperties...';


GO
ALTER TABLE [dbo].[LocationPropertyValues] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationPropertyValues_LocationTypeProperties] FOREIGN KEY ([DId], [LocationTypePropertyId]) REFERENCES [dbo].[LocationTypeProperties] ([DId], [Id]);


GO
PRINT N'Creating FK_LocationPropertyValues_tbl_company...';


GO
ALTER TABLE [dbo].[LocationPropertyValues] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationPropertyValues_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_LocationRouteLevels_Locations...';


GO
ALTER TABLE [dbo].[LocationRouteLevels] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationRouteLevels_Locations] FOREIGN KEY ([DId], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_LocationRouteLevels_tbl_company...';


GO
ALTER TABLE [dbo].[LocationRouteLevels] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationRouteLevels_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_LocationRouteLevels_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[LocationRouteLevels] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationRouteLevels_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [LastResortTechId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_LocationRouteLevelTechs_LocationRouteLevels...';


GO
ALTER TABLE [dbo].[LocationRouteLevelTechs] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationRouteLevelTechs_LocationRouteLevels] FOREIGN KEY ([DId], [LocationRouteLevelId]) REFERENCES [dbo].[LocationRouteLevels] ([DId], [Id]);


GO
PRINT N'Creating FK_LocationRouteLevelTechs_tbl_company...';


GO
ALTER TABLE [dbo].[LocationRouteLevelTechs] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationRouteLevelTechs_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_LocationRouteLevelTechs_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[LocationRouteLevelTechs] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationRouteLevelTechs_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [TechId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_Locations_Accounts...';


GO
ALTER TABLE [dbo].[Locations] WITH NOCHECK
    ADD CONSTRAINT [FK_Locations_Accounts] FOREIGN KEY ([DId], [AccountId]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_Locations_Locations...';


GO
ALTER TABLE [dbo].[Locations] WITH NOCHECK
    ADD CONSTRAINT [FK_Locations_Locations] FOREIGN KEY ([DId], [ParentId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_Locations_LocationTypes...';


GO
ALTER TABLE [dbo].[Locations] WITH NOCHECK
    ADD CONSTRAINT [FK_Locations_LocationTypes] FOREIGN KEY ([LocationTypeId]) REFERENCES [dbo].[LocationTypes] ([Id]);


GO
PRINT N'Creating FK_Locations_tbl_company...';


GO
ALTER TABLE [dbo].[Locations] WITH NOCHECK
    ADD CONSTRAINT [FK_Locations_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_LocTechJctn_Loc...';


GO
ALTER TABLE [dbo].[LocationTechJctn] WITH NOCHECK
    ADD CONSTRAINT [fk_LocTechJctn_Loc] FOREIGN KEY ([DId], [LocationId]) REFERENCES [dbo].[tbl_Locations] ([DId], [id]);


GO
PRINT N'Creating FK_LocationTypeProperties_LocationTypePropertiesGroup...';


GO
ALTER TABLE [dbo].[LocationTypeProperties] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationTypeProperties_LocationTypePropertiesGroup] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[LocationTypePropertiesGroup] ([Id]);


GO
PRINT N'Creating FK_LocationTypeProperties_LocationTypes...';


GO
ALTER TABLE [dbo].[LocationTypeProperties] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationTypeProperties_LocationTypes] FOREIGN KEY ([LocationTypeId]) REFERENCES [dbo].[LocationTypes] ([Id]);


GO
PRINT N'Creating FK_LocationTypeProperties_tbl_company...';


GO
ALTER TABLE [dbo].[LocationTypeProperties] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationTypeProperties_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_LocationTypePropertiesGroup_LocationTypes...';


GO
ALTER TABLE [dbo].[LocationTypePropertiesGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationTypePropertiesGroup_LocationTypes] FOREIGN KEY ([LocationTypeId]) REFERENCES [dbo].[LocationTypes] ([Id]);


GO
PRINT N'Creating FK_LocationTypePropertiesGroup_tbl_company...';


GO
ALTER TABLE [dbo].[LocationTypePropertiesGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationTypePropertiesGroup_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_LocationTypes_tbl_company...';


GO
ALTER TABLE [dbo].[LocationTypes] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationTypes_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_MailGroups_tbl_company...';


GO
ALTER TABLE [dbo].[MailGroups] WITH NOCHECK
    ADD CONSTRAINT [FK_MailGroups_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_MailGroupUsers_MailGroups...';


GO
ALTER TABLE [dbo].[MailGroupUsers] WITH NOCHECK
    ADD CONSTRAINT [FK_MailGroupUsers_MailGroups] FOREIGN KEY ([DepartmentId], [MailGroupId]) REFERENCES [dbo].[MailGroups] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_MailGroupUsers_tbl_company...';


GO
ALTER TABLE [dbo].[MailGroupUsers] WITH NOCHECK
    ADD CONSTRAINT [FK_MailGroupUsers_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_MailGroupUsers_tbl_Logins1...';


GO
ALTER TABLE [dbo].[MailGroupUsers] WITH NOCHECK
    ADD CONSTRAINT [FK_MailGroupUsers_tbl_Logins1] FOREIGN KEY ([LoginId]) REFERENCES [dbo].[tbl_Logins] ([id]);


GO
PRINT N'Creating FK_Mc_EntityField_Mc_Instance...';


GO
ALTER TABLE [dbo].[Mc_EntityField] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_EntityField_Mc_Instance] FOREIGN KEY ([InstanceId]) REFERENCES [dbo].[Mc_Instance] ([InstanceId]);


GO
PRINT N'Creating FK_Mc_EntityFieldListsValues_Mc_EntityField...';


GO
ALTER TABLE [dbo].[Mc_EntityFieldListsValues] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_EntityFieldListsValues_Mc_EntityField] FOREIGN KEY ([EntityFieldId]) REFERENCES [dbo].[Mc_EntityField] ([EntityFieldId]);


GO
PRINT N'Creating FK_Mc_EntityFieldsValues_Mc_EntityField...';


GO
ALTER TABLE [dbo].[Mc_EntityFieldsValues] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_EntityFieldsValues_Mc_EntityField] FOREIGN KEY ([EntityFieldId]) REFERENCES [dbo].[Mc_EntityField] ([EntityFieldId]);


GO
PRINT N'Creating FK_Mc_EntityNode_Mc_EntityNode...';


GO
ALTER TABLE [dbo].[Mc_EntityNode] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_EntityNode_Mc_EntityNode] FOREIGN KEY ([ParentEntityNodeId]) REFERENCES [dbo].[Mc_EntityNode] ([EntityNodeId]);


GO
PRINT N'Creating FK_Mc_EntityNode_Mc_Instance...';


GO
ALTER TABLE [dbo].[Mc_EntityNode] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_EntityNode_Mc_Instance] FOREIGN KEY ([InstanceId]) REFERENCES [dbo].[Mc_Instance] ([InstanceId]);


GO
PRINT N'Creating FK_Mc_EntityNodeType_Mc_Instance...';


GO
ALTER TABLE [dbo].[Mc_EntityNodeType] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_EntityNodeType_Mc_Instance] FOREIGN KEY ([InstanceId]) REFERENCES [dbo].[Mc_Instance] ([InstanceId]);


GO
PRINT N'Creating FK_Mc_GroupsInstancesActions_Mc_Group...';


GO
ALTER TABLE [dbo].[Mc_GroupsInstancesActions] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_GroupsInstancesActions_Mc_Group] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Mc_Group] ([GroupId]);


GO
PRINT N'Creating FK_Mc_GroupsInstancesActions_Mc_Instance...';


GO
ALTER TABLE [dbo].[Mc_GroupsInstancesActions] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_GroupsInstancesActions_Mc_Instance] FOREIGN KEY ([InstanceId]) REFERENCES [dbo].[Mc_Instance] ([InstanceId]);


GO
PRINT N'Creating FK_Mc_GroupsInstancesRoles_Mc_Group...';


GO
ALTER TABLE [dbo].[Mc_GroupsInstancesRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_GroupsInstancesRoles_Mc_Group] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Mc_Group] ([GroupId]);


GO
PRINT N'Creating FK_Mc_GroupsInstancesRoles_Mc_Instance...';


GO
ALTER TABLE [dbo].[Mc_GroupsInstancesRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_GroupsInstancesRoles_Mc_Instance] FOREIGN KEY ([InstanceId]) REFERENCES [dbo].[Mc_Instance] ([InstanceId]);


GO
PRINT N'Creating FK_Mc_Message_Mc_Message...';


GO
ALTER TABLE [dbo].[Mc_Message] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_Message_Mc_Message] FOREIGN KEY ([ParentMessageId]) REFERENCES [dbo].[Mc_Message] ([MessageId]);


GO
PRINT N'Creating FK_Mc_Message_Mc_User_1...';


GO
ALTER TABLE [dbo].[Mc_Message] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_Message_Mc_User_1] FOREIGN KEY ([FromUserId]) REFERENCES [dbo].[Mc_User] ([UserId]);


GO
PRINT N'Creating FK_Mc_Message_Mc_User_2...';


GO
ALTER TABLE [dbo].[Mc_Message] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_Message_Mc_User_2] FOREIGN KEY ([ToUserId]) REFERENCES [dbo].[Mc_User] ([UserId]);


GO
PRINT N'Creating FK_Mc_OrganizationsUsers_Mc_User...';


GO
ALTER TABLE [dbo].[Mc_OrganizationsUsers] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_OrganizationsUsers_Mc_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Mc_User] ([UserId]);


GO
PRINT N'Creating FK_Mc_RuleEngineParameters_Mc_RuleEngine...';


GO
ALTER TABLE [dbo].[Mc_RuleParameters] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_RuleEngineParameters_Mc_RuleEngine] FOREIGN KEY ([RuleId]) REFERENCES [dbo].[Mc_Rule] ([RuleId]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_Mc_SettingsValues_Mc_Group...';


GO
ALTER TABLE [dbo].[Mc_SettingsValues] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_SettingsValues_Mc_Group] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Mc_Group] ([GroupId]);


GO
PRINT N'Creating FK_Mc_SettingsValues_Mc_Instance...';


GO
ALTER TABLE [dbo].[Mc_SettingsValues] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_SettingsValues_Mc_Instance] FOREIGN KEY ([InstanceId]) REFERENCES [dbo].[Mc_Instance] ([InstanceId]);


GO
PRINT N'Creating FK_Mc_UsersGroups_Mc_Group...';


GO
ALTER TABLE [dbo].[Mc_UsersGroups] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_UsersGroups_Mc_Group] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Mc_Group] ([GroupId]);


GO
PRINT N'Creating FK_Mc_UsersGroups_Mc_User...';


GO
ALTER TABLE [dbo].[Mc_UsersGroups] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_UsersGroups_Mc_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Mc_User] ([UserId]);


GO
PRINT N'Creating FK_Mc_UsersInstances_Mc_Instance...';


GO
ALTER TABLE [dbo].[Mc_UsersInstances] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_UsersInstances_Mc_Instance] FOREIGN KEY ([InstanceId]) REFERENCES [dbo].[Mc_Instance] ([InstanceId]);


GO
PRINT N'Creating FK_Mc_UsersInstances_Mc_User...';


GO
ALTER TABLE [dbo].[Mc_UsersInstances] WITH NOCHECK
    ADD CONSTRAINT [FK_Mc_UsersInstances_Mc_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Mc_User] ([UserId]);


GO
PRINT N'Creating FK_NotificationEventsQueue_SchedTickets...';


GO
ALTER TABLE [dbo].[NotificationEventsQueue] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationEventsQueue_SchedTickets] FOREIGN KEY ([DId], [ScheduledTicketId]) REFERENCES [dbo].[SchedTickets] ([DId], [Id]);


GO
PRINT N'Creating FK_NotificationEventsQueue_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[NotificationEventsQueue] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationEventsQueue_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [CreatedByUserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_NotificationEventsQueueFiles_NotificationEventsQueue...';


GO
ALTER TABLE [dbo].[NotificationEventsQueueFiles] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationEventsQueueFiles_NotificationEventsQueue] FOREIGN KEY ([DId], [NotificationEventsQueueId]) REFERENCES [dbo].[NotificationEventsQueue] ([DId], [Id]);


GO
PRINT N'Creating FK_NotificationRuleEvents_NotificationRules...';


GO
ALTER TABLE [dbo].[NotificationRuleEvents] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationRuleEvents_NotificationRules] FOREIGN KEY ([DId], [NotificationRuleId]) REFERENCES [dbo].[NotificationRules] ([DId], [Id]);


GO
PRINT N'Creating FK_NotificationRuleEvents_tbl_company...';


GO
ALTER TABLE [dbo].[NotificationRuleEvents] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationRuleEvents_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_NotificationRules_tbl_company...';


GO
ALTER TABLE [dbo].[NotificationRules] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationRules_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_NotificationRules_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[NotificationRules] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationRules_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_NotificationRules_tbl_LoginCompanyJunc1...';


GO
ALTER TABLE [dbo].[NotificationRules] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationRules_tbl_LoginCompanyJunc1] FOREIGN KEY ([DId], [UpdatedByUserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_NotificationRuleUsers_MailGroups...';


GO
ALTER TABLE [dbo].[NotificationRuleUsers] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationRuleUsers_MailGroups] FOREIGN KEY ([DId], [UserGroupId]) REFERENCES [dbo].[MailGroups] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_NotificationRuleUsers_NotificationRules...';


GO
ALTER TABLE [dbo].[NotificationRuleUsers] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationRuleUsers_NotificationRules] FOREIGN KEY ([DId], [NotificationRuleId]) REFERENCES [dbo].[NotificationRules] ([DId], [Id]);


GO
PRINT N'Creating FK_NotificationRuleUsers_tbl_company...';


GO
ALTER TABLE [dbo].[NotificationRuleUsers] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationRuleUsers_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_NotificationRuleUsers_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[NotificationRuleUsers] WITH NOCHECK
    ADD CONSTRAINT [FK_NotificationRuleUsers_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_Priorities_Dept...';


GO
ALTER TABLE [dbo].[Priorities] WITH NOCHECK
    ADD CONSTRAINT [FK_Priorities_Dept] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_Project_Accounts...';


GO
ALTER TABLE [dbo].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_Accounts] FOREIGN KEY ([CompanyID], [AccountID]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_Project_BillingMethod...';


GO
ALTER TABLE [dbo].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_BillingMethod] FOREIGN KEY ([BillingMethodID]) REFERENCES [dbo].[BillingMethod] ([BillingMethodID]);


GO
PRINT N'Creating FK_Project_Company...';


GO
ALTER TABLE [dbo].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_Company] FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_Project_Project...';


GO
ALTER TABLE [dbo].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_Project] FOREIGN KEY ([CompanyID], [ParentID]) REFERENCES [dbo].[Project] ([CompanyID], [ProjectID]);


GO
PRINT N'Creating FK_Project_ProjectPriority...';


GO
ALTER TABLE [dbo].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_ProjectPriority] FOREIGN KEY ([CompanyID], [PriorityId]) REFERENCES [dbo].[ProjectPriority] ([DId], [Id]);


GO
PRINT N'Creating FK_Project_RatePlan...';


GO
ALTER TABLE [dbo].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_RatePlan] FOREIGN KEY ([CompanyID], [RatePlanID]) REFERENCES [dbo].[RatePlan] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_Project_SupportGroups...';


GO
ALTER TABLE [dbo].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_SupportGroups] FOREIGN KEY ([CompanyID], [SupGroupId]) REFERENCES [dbo].[SupportGroups] ([DId], [Id]);


GO
PRINT N'Creating FK_Project_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_tbl_LoginCompanyJunc] FOREIGN KEY ([CompanyID], [ClientPMID]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_Project_tbl_LoginCompanyJuncInternalPM...';


GO
ALTER TABLE [dbo].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_tbl_LoginCompanyJuncInternalPM] FOREIGN KEY ([CompanyID], [InternalPMID]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_ProjectRetainer_Project...';


GO
ALTER TABLE [dbo].[ProjectRetainer] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectRetainer_Project] FOREIGN KEY ([DId], [ProjectId]) REFERENCES [dbo].[Project] ([CompanyID], [ProjectID]);


GO
PRINT N'Creating FK_ProjectRetainer_tbl_company...';


GO
ALTER TABLE [dbo].[ProjectRetainer] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectRetainer_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_ProjectRetainer_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[ProjectRetainer] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectRetainer_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [TechId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_ProjectTaskTypeRate_Project...';


GO
ALTER TABLE [dbo].[ProjectTaskTypeRate] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectTaskTypeRate_Project] FOREIGN KEY ([CompanyID], [ProjectID]) REFERENCES [dbo].[Project] ([CompanyID], [ProjectID]);


GO
PRINT N'Creating FK_ProjectTaskTypeRate_TaskType...';


GO
ALTER TABLE [dbo].[ProjectTaskTypeRate] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectTaskTypeRate_TaskType] FOREIGN KEY ([CompanyID], [TaskTypeID]) REFERENCES [dbo].[TaskType] ([DepartmentID], [TaskTypeId]);


GO
PRINT N'Creating FK_ProjectTech_Project...';


GO
ALTER TABLE [dbo].[ProjectTech] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectTech_Project] FOREIGN KEY ([CompanyID], [ProjectID]) REFERENCES [dbo].[Project] ([CompanyID], [ProjectID]);


GO
PRINT N'Creating FK_ProjectTech_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[ProjectTech] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectTech_tbl_LoginCompanyJunc] FOREIGN KEY ([CompanyID], [TechID]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_ProjectTime_Accounts...';


GO
ALTER TABLE [dbo].[ProjectTime] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectTime_Accounts] FOREIGN KEY ([DepartmentId], [AccountID]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating fk_ProjectTime_Company...';


GO
ALTER TABLE [dbo].[ProjectTime] WITH NOCHECK
    ADD CONSTRAINT [fk_ProjectTime_Company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_ProjectTime_CreatedByUID...';


GO
ALTER TABLE [dbo].[ProjectTime] WITH NOCHECK
    ADD CONSTRAINT [fk_ProjectTime_CreatedByUID] FOREIGN KEY ([DepartmentId], [CreatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_ProjectTime_Invoice...';


GO
ALTER TABLE [dbo].[ProjectTime] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectTime_Invoice] FOREIGN KEY ([DepartmentId], [InvoiceId]) REFERENCES [dbo].[Invoice] ([DId], [Id]);


GO
PRINT N'Creating FK_ProjectTime_Project...';


GO
ALTER TABLE [dbo].[ProjectTime] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectTime_Project] FOREIGN KEY ([DepartmentId], [ProjectId]) REFERENCES [dbo].[Project] ([CompanyID], [ProjectID]);


GO
PRINT N'Creating FK_ProjectTime_TaskType...';


GO
ALTER TABLE [dbo].[ProjectTime] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectTime_TaskType] FOREIGN KEY ([DepartmentId], [TaskTypeId]) REFERENCES [dbo].[TaskType] ([DepartmentID], [TaskTypeId]);


GO
PRINT N'Creating FK_ProjectTime_TimeBill...';


GO
ALTER TABLE [dbo].[ProjectTime] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectTime_TimeBill] FOREIGN KEY ([DepartmentId], [BillId]) REFERENCES [dbo].[TimeBill] ([DId], [Id]);


GO
PRINT N'Creating fk_ProjectTime_UID...';


GO
ALTER TABLE [dbo].[ProjectTime] WITH NOCHECK
    ADD CONSTRAINT [fk_ProjectTime_UID] FOREIGN KEY ([DepartmentId], [UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_ProjectTime_UpdatedByUID...';


GO
ALTER TABLE [dbo].[ProjectTime] WITH NOCHECK
    ADD CONSTRAINT [fk_ProjectTime_UpdatedByUID] FOREIGN KEY ([DepartmentId], [UpdatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_QueueMembers_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[QueueMembers] WITH NOCHECK
    ADD CONSTRAINT [FK_QueueMembers_tbl_LoginCompanyJunc] FOREIGN KEY ([DepartmentId], [QueueId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_QueueMembers_tbl_LoginCompanyJunc1...';


GO
ALTER TABLE [dbo].[QueueMembers] WITH NOCHECK
    ADD CONSTRAINT [FK_QueueMembers_tbl_LoginCompanyJunc1] FOREIGN KEY ([DepartmentId], [UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_RatePlan_tbl_company...';


GO
ALTER TABLE [dbo].[RatePlan] WITH NOCHECK
    ADD CONSTRAINT [FK_RatePlan_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_RatePlanRates_RatePlan...';


GO
ALTER TABLE [dbo].[RatePlanRates] WITH NOCHECK
    ADD CONSTRAINT [FK_RatePlanRates_RatePlan] FOREIGN KEY ([DepartmentId], [RatePlanId]) REFERENCES [dbo].[RatePlan] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_RatePlanRates_TaskType...';


GO
ALTER TABLE [dbo].[RatePlanRates] WITH NOCHECK
    ADD CONSTRAINT [FK_RatePlanRates_TaskType] FOREIGN KEY ([DepartmentId], [TaskTypeId]) REFERENCES [dbo].[TaskType] ([DepartmentID], [TaskTypeId]);


GO
PRINT N'Creating FK_RatePlanRates_tbl_company...';


GO
ALTER TABLE [dbo].[RatePlanRates] WITH NOCHECK
    ADD CONSTRAINT [FK_RatePlanRates_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_RelatedTickets_tbl_company...';


GO
ALTER TABLE [dbo].[RelatedTickets] WITH NOCHECK
    ADD CONSTRAINT [FK_RelatedTickets_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_RelatedTickets_tbl_ticket...';


GO
ALTER TABLE [dbo].[RelatedTickets] WITH NOCHECK
    ADD CONSTRAINT [FK_RelatedTickets_tbl_ticket] FOREIGN KEY ([DId], [TicketId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating FK_RelatedTickets_tbl_ticket1...';


GO
ALTER TABLE [dbo].[RelatedTickets] WITH NOCHECK
    ADD CONSTRAINT [FK_RelatedTickets_tbl_ticket1] FOREIGN KEY ([DId], [RelatedTicketId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating FK_RemoteSessions_tbl_company...';


GO
ALTER TABLE [dbo].[RemoteSessions] WITH NOCHECK
    ADD CONSTRAINT [FK_RemoteSessions_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_RemoteSessions_tbl_ticket...';


GO
ALTER TABLE [dbo].[RemoteSessions] WITH NOCHECK
    ADD CONSTRAINT [FK_RemoteSessions_tbl_ticket] FOREIGN KEY ([DId], [TId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating FK_ReportFilters_tbl_company...';


GO
ALTER TABLE [dbo].[ReportFilters] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportFilters_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_ReportFilters_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[ReportFilters] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportFilters_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [UId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_ResolutionCats_ResolutionCats...';


GO
ALTER TABLE [dbo].[ResolutionCats] WITH NOCHECK
    ADD CONSTRAINT [FK_ResolutionCats_ResolutionCats] FOREIGN KEY ([DId], [ParentId]) REFERENCES [dbo].[ResolutionCats] ([DId], [Id]);


GO
PRINT N'Creating FK_ResolutionCats_tbl_company...';


GO
ALTER TABLE [dbo].[ResolutionCats] WITH NOCHECK
    ADD CONSTRAINT [FK_ResolutionCats_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_ResolutionCats_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[ResolutionCats] WITH NOCHECK
    ADD CONSTRAINT [FK_ResolutionCats_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [intUpdatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_SchedTicketAssets_Assets...';


GO
ALTER TABLE [dbo].[SchedTicketAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_SchedTicketAssets_Assets] FOREIGN KEY ([DId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_SchedTicketAssets_SchedTickets...';


GO
ALTER TABLE [dbo].[SchedTicketAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_SchedTicketAssets_SchedTickets] FOREIGN KEY ([DId], [SchedTicketId]) REFERENCES [dbo].[SchedTickets] ([DId], [Id]);


GO
PRINT N'Creating FK_SchedTicketAssets_tbl_company...';


GO
ALTER TABLE [dbo].[SchedTicketAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_SchedTicketAssets_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_SchedTicketFiles_SchedTickets...';


GO
ALTER TABLE [dbo].[SchedTicketFiles] WITH NOCHECK
    ADD CONSTRAINT [FK_SchedTicketFiles_SchedTickets] FOREIGN KEY ([DId], [STId]) REFERENCES [dbo].[SchedTickets] ([DId], [Id]);


GO
PRINT N'Creating FK_SchedTicketFiles_tbl_company...';


GO
ALTER TABLE [dbo].[SchedTicketFiles] WITH NOCHECK
    ADD CONSTRAINT [FK_SchedTicketFiles_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_SchedTickets_Accounts...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [FK_SchedTickets_Accounts] FOREIGN KEY ([DId], [intAcctId]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_SchedTickets_CreationCats...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [FK_SchedTickets_CreationCats] FOREIGN KEY ([DId], [CreationCatsId]) REFERENCES [dbo].[CreationCats] ([DId], [Id]);


GO
PRINT N'Creating FK_SchedTickets_Folders...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [FK_SchedTickets_Folders] FOREIGN KEY ([DId], [FolderID]) REFERENCES [dbo].[Folders] ([DId], [id]);


GO
PRINT N'Creating FK_SchedTickets_Locations...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [FK_SchedTickets_Locations] FOREIGN KEY ([DId], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_SchedTickets_Locations1...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [FK_SchedTickets_Locations1] FOREIGN KEY ([DId], [AccountLocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_SchedTickets_Project...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [FK_SchedTickets_Project] FOREIGN KEY ([DId], [ProjectID]) REFERENCES [dbo].[Project] ([CompanyID], [ProjectID]);


GO
PRINT N'Creating fk_SchedTkt_Class...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [fk_SchedTkt_Class] FOREIGN KEY ([DId], [intClassId]) REFERENCES [dbo].[tbl_class] ([company_id], [id]);


GO
PRINT N'Creating fk_SchedTkt_Department...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [fk_SchedTkt_Department] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_SchedTkt_Loc...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [fk_SchedTkt_Loc] FOREIGN KEY ([DId], [intLocationId]) REFERENCES [dbo].[tbl_Locations] ([DId], [id]);


GO
PRINT N'Creating fk_SchedTkt_LVL...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [fk_SchedTkt_LVL] FOREIGN KEY ([DId], [tintLevel]) REFERENCES [dbo].[TktLevels] ([DId], [tintLevel]);


GO
PRINT N'Creating fk_SchedTkt_Pri...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [fk_SchedTkt_Pri] FOREIGN KEY ([DId], [intPriorityId]) REFERENCES [dbo].[Priorities] ([DId], [Id]);


GO
PRINT N'Creating fk_ShedTkt_LCJ...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [fk_ShedTkt_LCJ] FOREIGN KEY ([DId], [intUserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_ShedTkt_LCJ2...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [fk_ShedTkt_LCJ2] FOREIGN KEY ([DId], [intTechId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_ShedTkt_LCJ3...';


GO
ALTER TABLE [dbo].[SchedTickets] WITH NOCHECK
    ADD CONSTRAINT [fk_ShedTkt_LCJ3] FOREIGN KEY ([DId], [intOwnerId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_AcctGroups_DId...';


GO
ALTER TABLE [dbo].[SupportGroups] WITH NOCHECK
    ADD CONSTRAINT [FK_AcctGroups_DId] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_SupGroup_DId...';


GO
ALTER TABLE [dbo].[SupportGroups] WITH NOCHECK
    ADD CONSTRAINT [fk_SupGroup_DId] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_SupportPortal_Accounts...';


GO
ALTER TABLE [dbo].[SupportPortal] WITH NOCHECK
    ADD CONSTRAINT [FK_SupportPortal_Accounts] FOREIGN KEY ([DId], [AccountID]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_SupportPortal_tbl_company...';


GO
ALTER TABLE [dbo].[SupportPortal] WITH NOCHECK
    ADD CONSTRAINT [FK_SupportPortal_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_SupportPortalLinks_Accounts...';


GO
ALTER TABLE [dbo].[SupportPortalLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_SupportPortalLinks_Accounts] FOREIGN KEY ([DId], [AccountID]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_SupportPortalLinks_tbl_company...';


GO
ALTER TABLE [dbo].[SupportPortalLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_SupportPortalLinks_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TaskType_tbl_company...';


GO
ALTER TABLE [dbo].[TaskType] WITH NOCHECK
    ADD CONSTRAINT [FK_TaskType_tbl_company] FOREIGN KEY ([DepartmentID]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TaskTypeTech_TaskType...';


GO
ALTER TABLE [dbo].[TaskTypeTech] WITH NOCHECK
    ADD CONSTRAINT [FK_TaskTypeTech_TaskType] FOREIGN KEY ([CompanyID], [TaskTypeID]) REFERENCES [dbo].[TaskType] ([DepartmentID], [TaskTypeId]);


GO
PRINT N'Creating FK_TaskTypeTech_tbl_company...';


GO
ALTER TABLE [dbo].[TaskTypeTech] WITH NOCHECK
    ADD CONSTRAINT [FK_TaskTypeTech_tbl_company] FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TaskTypeTech_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[TaskTypeTech] WITH NOCHECK
    ADD CONSTRAINT [FK_TaskTypeTech_tbl_LoginCompanyJunc] FOREIGN KEY ([CompanyID], [TechID]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_TaskTypeTechBillableRate_TaskType...';


GO
ALTER TABLE [dbo].[TaskTypeTechBillableRate] WITH NOCHECK
    ADD CONSTRAINT [FK_TaskTypeTechBillableRate_TaskType] FOREIGN KEY ([DId], [TaskTypeId]) REFERENCES [dbo].[TaskType] ([DepartmentID], [TaskTypeId]);


GO
PRINT N'Creating FK_TaskTypeTechBillableRate_tbl_company...';


GO
ALTER TABLE [dbo].[TaskTypeTechBillableRate] WITH NOCHECK
    ADD CONSTRAINT [FK_TaskTypeTechBillableRate_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TaskTypeTechBillableRate_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[TaskTypeTechBillableRate] WITH NOCHECK
    ADD CONSTRAINT [FK_TaskTypeTechBillableRate_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [TechId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_TaskTypeTechCost_TaskType...';


GO
ALTER TABLE [dbo].[TaskTypeTechCost] WITH NOCHECK
    ADD CONSTRAINT [FK_TaskTypeTechCost_TaskType] FOREIGN KEY ([DId], [TaskTypeId]) REFERENCES [dbo].[TaskType] ([DepartmentID], [TaskTypeId]);


GO
PRINT N'Creating FK_TaskTypeTechCost_tbl_company...';


GO
ALTER TABLE [dbo].[TaskTypeTechCost] WITH NOCHECK
    ADD CONSTRAINT [FK_TaskTypeTechCost_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TaskTypeTechCost_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[TaskTypeTechCost] WITH NOCHECK
    ADD CONSTRAINT [FK_TaskTypeTechCost_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [TechId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_Class_Priorities...';


GO
ALTER TABLE [dbo].[tbl_class] WITH NOCHECK
    ADD CONSTRAINT [FK_Class_Priorities] FOREIGN KEY ([company_id], [intPriorityId]) REFERENCES [dbo].[Priorities] ([DId], [Id]);


GO
PRINT N'Creating FK_Department_Class...';


GO
ALTER TABLE [dbo].[tbl_class] WITH NOCHECK
    ADD CONSTRAINT [FK_Department_Class] FOREIGN KEY ([company_id]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_tbl_class_tbl_class...';


GO
ALTER TABLE [dbo].[tbl_class] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_class_tbl_class] FOREIGN KEY ([company_id], [ParentId]) REFERENCES [dbo].[tbl_class] ([company_id], [id]);


GO
PRINT N'Creating FK_tbl_class_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[tbl_class] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_class_tbl_LoginCompanyJunc] FOREIGN KEY ([company_id], [LastResortTechId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_LCJ_CTJ...';


GO
ALTER TABLE [dbo].[tbl_ClassTechnicianJctn] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_CTJ] FOREIGN KEY ([LoginCompanyJunc_id]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([id]);


GO
PRINT N'Creating FK_Locations_CTJ...';


GO
ALTER TABLE [dbo].[tbl_ClassTechnicianJctn] WITH NOCHECK
    ADD CONSTRAINT [FK_Locations_CTJ] FOREIGN KEY ([locations_id]) REFERENCES [dbo].[tbl_Locations] ([id]);


GO
PRINT N'Creating FK_tbl_Knowledgebase_tbl_company...';


GO
ALTER TABLE [dbo].[tbl_Knowledgebase] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Knowledgebase_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_tbl_Knowledgebase_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[tbl_Knowledgebase] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Knowledgebase_tbl_LoginCompanyJunc] FOREIGN KEY ([DepartmentId], [LoginCompanyJunc_id]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_tbl_KnowledgebaseResponses_tbl_company...';


GO
ALTER TABLE [dbo].[tbl_KnowledgebaseResponses] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_KnowledgebaseResponses_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_tbl_KnowledgebaseResponses_tbl_Knowledgebase...';


GO
ALTER TABLE [dbo].[tbl_KnowledgebaseResponses] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_KnowledgebaseResponses_tbl_Knowledgebase] FOREIGN KEY ([DepartmentId], [Knowledgebase_Id]) REFERENCES [dbo].[tbl_Knowledgebase] ([DepartmentId], [id]);


GO
PRINT N'Creating FK_tbl_KnowledgebaseResponses_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[tbl_KnowledgebaseResponses] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_KnowledgebaseResponses_tbl_LoginCompanyJunc] FOREIGN KEY ([LoginCompanyJunc_Id]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([id]);


GO
PRINT N'Creating fk_LCJ_Locations...';


GO
ALTER TABLE [dbo].[tbl_Locations] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_Locations] FOREIGN KEY ([intLastResortId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([id]);


GO
PRINT N'Creating fk_LCJ_SupGroups...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_SupGroups] FOREIGN KEY ([company_id], [SupGroupId]) REFERENCES [dbo].[SupportGroups] ([DId], [Id]);


GO
PRINT N'Creating fk_LCJ_tbl_user...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_tbl_user] FOREIGN KEY ([UserType_Id]) REFERENCES [dbo].[tbl_UserType] ([id]);


GO
PRINT N'Creating FK_tbl_LoginCompanyJunc_tbl_company...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_LoginCompanyJunc_tbl_company] FOREIGN KEY ([company_id]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_tbl_LoginCompanyJunc_tbl_Logins...';


GO
ALTER TABLE [dbo].[tbl_LoginCompanyJunc] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_LoginCompanyJunc_tbl_Logins] FOREIGN KEY ([login_id]) REFERENCES [dbo].[tbl_Logins] ([id]);


GO
PRINT N'Creating fk_LCJ_Part1...';


GO
ALTER TABLE [dbo].[tbl_part] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_Part1] FOREIGN KEY ([company_id], [intReceivedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_LCJ_Part2...';


GO
ALTER TABLE [dbo].[tbl_part] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_Part2] FOREIGN KEY ([company_id], [intRequestedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_tbl_part_tbl_company...';


GO
ALTER TABLE [dbo].[tbl_part] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_part_tbl_company] FOREIGN KEY ([company_id]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_tbl_part_tbl_PartsOrder...';


GO
ALTER TABLE [dbo].[tbl_part] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_part_tbl_PartsOrder] FOREIGN KEY ([company_id], [PartsOrder_id]) REFERENCES [dbo].[tbl_PartsOrder] ([company_id], [id]);


GO
PRINT N'Creating fk_LCJ_PartsOrder...';


GO
ALTER TABLE [dbo].[tbl_PartsOrder] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_PartsOrder] FOREIGN KEY ([company_id], [intOrderedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_Locations_PartOrders...';


GO
ALTER TABLE [dbo].[tbl_PartsOrder] WITH NOCHECK
    ADD CONSTRAINT [FK_Locations_PartOrders] FOREIGN KEY ([location_id]) REFERENCES [dbo].[tbl_Locations] ([id]);


GO
PRINT N'Creating FK_tbl_PartsOrder_Locations...';


GO
ALTER TABLE [dbo].[tbl_PartsOrder] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PartsOrder_Locations] FOREIGN KEY ([company_id], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_tbl_PartsOrder_tbl_vendors...';


GO
ALTER TABLE [dbo].[tbl_PartsOrder] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PartsOrder_tbl_vendors] FOREIGN KEY ([company_id], [VendorId]) REFERENCES [dbo].[tbl_vendors] ([company_id], [id]);


GO
PRINT N'Creating FK_Folders_Ticket...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_Folders_Ticket] FOREIGN KEY ([company_id], [folder_id]) REFERENCES [dbo].[Folders] ([DId], [id]);


GO
PRINT N'Creating fk_LCJ_Ticket1...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_Ticket1] FOREIGN KEY ([company_id], [User_id]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_LCJ_Ticket2...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_Ticket2] FOREIGN KEY ([company_id], [Technician_id]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_LCJ_Ticket3...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_Ticket3] FOREIGN KEY ([company_id], [Created_id]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_LCJ_Ticket4...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_Ticket4] FOREIGN KEY ([company_id], [Closed_id]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_Locations_Ticket...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_Locations_Ticket] FOREIGN KEY ([location_id]) REFERENCES [dbo].[tbl_Locations] ([id]);


GO
PRINT N'Creating FK_tbl_ticket_Accounts...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_ticket_Accounts] FOREIGN KEY ([company_id], [intAcctId]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_tbl_ticket_CreationCats...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_ticket_CreationCats] FOREIGN KEY ([company_id], [CreationCatsId]) REFERENCES [dbo].[CreationCats] ([DId], [Id]);


GO
PRINT N'Creating FK_tbl_ticket_Locations...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_ticket_Locations] FOREIGN KEY ([company_id], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_tbl_ticket_Locations1...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_ticket_Locations1] FOREIGN KEY ([company_id], [AccountLocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_tbl_ticket_Project...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_ticket_Project] FOREIGN KEY ([company_id], [ProjectID]) REFERENCES [dbo].[Project] ([CompanyID], [ProjectID]);


GO
PRINT N'Creating FK_tbl_ticket_ResolutionCats...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_ticket_ResolutionCats] FOREIGN KEY ([company_id], [ResolutionCatsId]) REFERENCES [dbo].[ResolutionCats] ([DId], [Id]);


GO
PRINT N'Creating FK_tbl_ticket_SchedTickets...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_ticket_SchedTickets] FOREIGN KEY ([company_id], [SchedTicketID]) REFERENCES [dbo].[SchedTickets] ([DId], [Id]);


GO
PRINT N'Creating FK_tbl_ticket_SubmissionCategories...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_ticket_SubmissionCategories] FOREIGN KEY ([intSubmissionCatId]) REFERENCES [dbo].[SubmissionCategories] ([Id]);


GO
PRINT N'Creating FK_tbl_ticket_tbl_company...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_ticket_tbl_company] FOREIGN KEY ([company_id]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_tbl_ticket_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_ticket_tbl_LoginCompanyJunc] FOREIGN KEY ([company_id], [intConfirmedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_ticket_Levels...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [fk_ticket_Levels] FOREIGN KEY ([company_id], [tintLevel]) REFERENCES [dbo].[TktLevels] ([DId], [tintLevel]);


GO
PRINT N'Creating FK_Ticket_Priority...';


GO
ALTER TABLE [dbo].[tbl_ticket] WITH NOCHECK
    ADD CONSTRAINT [FK_Ticket_Priority] FOREIGN KEY ([company_id], [PriorityId]) REFERENCES [dbo].[Priorities] ([DId], [Id]);


GO
PRINT N'Creating FK_TicketAssets_Assets...';


GO
ALTER TABLE [dbo].[TicketAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketAssets_Assets] FOREIGN KEY ([DId], [AssetId]) REFERENCES [dbo].[Assets] ([DepartmentId], [Id]);


GO
PRINT N'Creating FK_TicketAssets_tbl_company...';


GO
ALTER TABLE [dbo].[TicketAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketAssets_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TicketAssets_tbl_ticket...';


GO
ALTER TABLE [dbo].[TicketAssets] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketAssets_tbl_ticket] FOREIGN KEY ([DId], [TicketId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating FK_TicketAssignments_tbl_company...';


GO
ALTER TABLE [dbo].[TicketAssignment] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketAssignments_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TicketAssignments_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[TicketAssignment] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketAssignments_tbl_LoginCompanyJunc] FOREIGN KEY ([DepartmentId], [UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_TicketAssignments_tbl_ticket...';


GO
ALTER TABLE [dbo].[TicketAssignment] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketAssignments_tbl_ticket] FOREIGN KEY ([DepartmentId], [TicketId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating FK_TicketCriteriaData_tbl_company...';


GO
ALTER TABLE [dbo].[TicketCriteriaData] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketCriteriaData_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TicketCriteriaData_TicketCriterias...';


GO
ALTER TABLE [dbo].[TicketCriteriaData] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketCriteriaData_TicketCriterias] FOREIGN KEY ([DId], [TicketCriteriaId]) REFERENCES [dbo].[TicketCriterias] ([DId], [Id]);


GO
PRINT N'Creating FK_TicketCriterias_NotificationRules...';


GO
ALTER TABLE [dbo].[TicketCriterias] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketCriterias_NotificationRules] FOREIGN KEY ([DId], [NotificationRuleId]) REFERENCES [dbo].[NotificationRules] ([DId], [Id]);


GO
PRINT N'Creating FK_TicketCriterias_tbl_company...';


GO
ALTER TABLE [dbo].[TicketCriterias] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketCriterias_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TicketCriterias_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[TicketCriterias] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketCriterias_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_TicketLogs_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[TicketLogs] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketLogs_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [UId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_TicketLogs_tbl_LoginCompanyJunc1...';


GO
ALTER TABLE [dbo].[TicketLogs] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketLogs_tbl_LoginCompanyJunc1] FOREIGN KEY ([DId], [EditedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_TktLogs_DId...';


GO
ALTER TABLE [dbo].[TicketLogs] WITH NOCHECK
    ADD CONSTRAINT [FK_TktLogs_DId] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TktLogs_TID...';


GO
ALTER TABLE [dbo].[TicketLogs] WITH NOCHECK
    ADD CONSTRAINT [FK_TktLogs_TID] FOREIGN KEY ([DId], [TId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating FK_TktLogs_TktTime...';


GO
ALTER TABLE [dbo].[TicketLogs] WITH NOCHECK
    ADD CONSTRAINT [FK_TktLogs_TktTime] FOREIGN KEY ([DId], [TId], [TicketTimeId]) REFERENCES [dbo].[TicketTime] ([DepartmentId], [TicketId], [Id]);


GO
PRINT N'Creating fk_LCJ_TMC...';


GO
ALTER TABLE [dbo].[TicketMiscCosts] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_TMC] FOREIGN KEY ([UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([id]);


GO
PRINT N'Creating FK_TicketMiscCosts_TicketMiscCosts...';


GO
ALTER TABLE [dbo].[TicketMiscCosts] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketMiscCosts_TicketMiscCosts] FOREIGN KEY ([TicketId], [Id]) REFERENCES [dbo].[TicketMiscCosts] ([TicketId], [Id]);


GO
PRINT N'Creating FK_TicketMiscCosts_TicketMiscCosts1...';


GO
ALTER TABLE [dbo].[TicketMiscCosts] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketMiscCosts_TicketMiscCosts1] FOREIGN KEY ([TicketId], [Id]) REFERENCES [dbo].[TicketMiscCosts] ([TicketId], [Id]);


GO
PRINT N'Creating FK_TicketMiscCosts_TicketMiscCosts2...';


GO
ALTER TABLE [dbo].[TicketMiscCosts] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketMiscCosts_TicketMiscCosts2] FOREIGN KEY ([TicketId], [Id]) REFERENCES [dbo].[TicketMiscCosts] ([TicketId], [Id]);


GO
PRINT N'Creating FK_TicketSentEmails_tbl_company...';


GO
ALTER TABLE [dbo].[TicketSentEmails] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketSentEmails_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TicketSentEmails_tbl_ticket...';


GO
ALTER TABLE [dbo].[TicketSentEmails] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketSentEmails_tbl_ticket] FOREIGN KEY ([DId], [TicketId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating fk_TicketTime_CreatedByUID...';


GO
ALTER TABLE [dbo].[TicketTime] WITH NOCHECK
    ADD CONSTRAINT [fk_TicketTime_CreatedByUID] FOREIGN KEY ([DepartmentId], [CreatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_TicketTime_Invoice...';


GO
ALTER TABLE [dbo].[TicketTime] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketTime_Invoice] FOREIGN KEY ([DepartmentId], [InvoiceId]) REFERENCES [dbo].[Invoice] ([DId], [Id]);


GO
PRINT N'Creating FK_TicketTime_TaskType...';


GO
ALTER TABLE [dbo].[TicketTime] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketTime_TaskType] FOREIGN KEY ([DepartmentId], [TaskTypeId]) REFERENCES [dbo].[TaskType] ([DepartmentID], [TaskTypeId]);


GO
PRINT N'Creating fk_TicketTime_Ticket...';


GO
ALTER TABLE [dbo].[TicketTime] WITH NOCHECK
    ADD CONSTRAINT [fk_TicketTime_Ticket] FOREIGN KEY ([DepartmentId], [TicketId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating FK_TicketTime_TimeBill...';


GO
ALTER TABLE [dbo].[TicketTime] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketTime_TimeBill] FOREIGN KEY ([DepartmentId], [BillId]) REFERENCES [dbo].[TimeBill] ([DId], [Id]);


GO
PRINT N'Creating fk_TicketTime_UId...';


GO
ALTER TABLE [dbo].[TicketTime] WITH NOCHECK
    ADD CONSTRAINT [fk_TicketTime_UId] FOREIGN KEY ([DepartmentId], [UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_TicketTime_UpdatedByUID...';


GO
ALTER TABLE [dbo].[TicketTime] WITH NOCHECK
    ADD CONSTRAINT [fk_TicketTime_UpdatedByUID] FOREIGN KEY ([DepartmentId], [UpdatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_TicketTimeEstimated_tbl_company...';


GO
ALTER TABLE [dbo].[TicketTimeEstimated] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketTimeEstimated_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TicketTimeEstimated_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[TicketTimeEstimated] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketTimeEstimated_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_TicketTimeEstimated_tbl_LoginCompanyJunc1...';


GO
ALTER TABLE [dbo].[TicketTimeEstimated] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketTimeEstimated_tbl_LoginCompanyJunc1] FOREIGN KEY ([DId], [CreatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_TicketTimeEstimated_tbl_ticket...';


GO
ALTER TABLE [dbo].[TicketTimeEstimated] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketTimeEstimated_tbl_ticket] FOREIGN KEY ([DId], [TicketId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating FK_TicketTravelCosts_Invoice...';


GO
ALTER TABLE [dbo].[TicketTravelCosts] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketTravelCosts_Invoice] FOREIGN KEY ([DepartmentId], [InvoiceId]) REFERENCES [dbo].[Invoice] ([DId], [Id]);


GO
PRINT N'Creating FK_TicketTravelCosts_tbl_company...';


GO
ALTER TABLE [dbo].[TicketTravelCosts] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketTravelCosts_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TicketTravelCosts_tbl_ticket...';


GO
ALTER TABLE [dbo].[TicketTravelCosts] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketTravelCosts_tbl_ticket] FOREIGN KEY ([DepartmentId], [TicketId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating FK_TimeBill_tbl_company...';


GO
ALTER TABLE [dbo].[TimeBill] WITH NOCHECK
    ADD CONSTRAINT [FK_TimeBill_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_TimeBill_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[TimeBill] WITH NOCHECK
    ADD CONSTRAINT [FK_TimeBill_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [TechID]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_TimeBill_tbl_LoginCompanyJunc1...';


GO
ALTER TABLE [dbo].[TimeBill] WITH NOCHECK
    ADD CONSTRAINT [FK_TimeBill_tbl_LoginCompanyJunc1] FOREIGN KEY ([DId], [CreatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_Levels_company...';


GO
ALTER TABLE [dbo].[TktLevels] WITH NOCHECK
    ADD CONSTRAINT [fk_Levels_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating fk_Levels_LCJ...';


GO
ALTER TABLE [dbo].[TktLevels] WITH NOCHECK
    ADD CONSTRAINT [fk_Levels_LCJ] FOREIGN KEY ([DId], [intLastResortId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_ToDoItem_tbl_company...';


GO
ALTER TABLE [dbo].[ToDoItem] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoItem_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_ToDoItem_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[ToDoItem] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoItem_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [CreatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_ToDoItem_tbl_LoginCompanyJunc1...';


GO
ALTER TABLE [dbo].[ToDoItem] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoItem_tbl_LoginCompanyJunc1] FOREIGN KEY ([DId], [UpdatedBy]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_ToDoItem_tbl_LoginCompanyJunc2...';


GO
ALTER TABLE [dbo].[ToDoItem] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoItem_tbl_LoginCompanyJunc2] FOREIGN KEY ([DId], [AssignedId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_ToDoItem_tbl_ticket...';


GO
ALTER TABLE [dbo].[ToDoItem] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoItem_tbl_ticket] FOREIGN KEY ([DId], [TicketId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating FK_ToDoItem_ToDoItemTemplate...';


GO
ALTER TABLE [dbo].[ToDoItem] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoItem_ToDoItemTemplate] FOREIGN KEY ([DId], [ToDoItemTemplateId]) REFERENCES [dbo].[ToDoItemTemplate] ([DId], [Id]);


GO
PRINT N'Creating FK_ToDoItem_ToDoList...';


GO
ALTER TABLE [dbo].[ToDoItem] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoItem_ToDoList] FOREIGN KEY ([DId], [ToDoListId]) REFERENCES [dbo].[ToDoList] ([DId], [Id]);


GO
PRINT N'Creating FK_ToDoItemTemplate_tbl_company...';


GO
ALTER TABLE [dbo].[ToDoItemTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoItemTemplate_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_ToDoItemTemplate_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[ToDoItemTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoItemTemplate_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [AssignedId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_ToDoItemTemplate_ToDoListTemplate...';


GO
ALTER TABLE [dbo].[ToDoItemTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoItemTemplate_ToDoListTemplate] FOREIGN KEY ([DId], [ToDoListTemplateId]) REFERENCES [dbo].[ToDoListTemplate] ([DId], [Id]);


GO
PRINT N'Creating FK_ToDoList_Project...';


GO
ALTER TABLE [dbo].[ToDoList] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoList_Project] FOREIGN KEY ([DId], [ProjectId]) REFERENCES [dbo].[Project] ([CompanyID], [ProjectID]);


GO
PRINT N'Creating FK_ToDoList_tbl_company...';


GO
ALTER TABLE [dbo].[ToDoList] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoList_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_ToDoList_tbl_ticket...';


GO
ALTER TABLE [dbo].[ToDoList] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoList_tbl_ticket] FOREIGN KEY ([DId], [TicketId]) REFERENCES [dbo].[tbl_ticket] ([company_id], [Id]);


GO
PRINT N'Creating FK_ToDoList_ToDoListTemplate...';


GO
ALTER TABLE [dbo].[ToDoList] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoList_ToDoListTemplate] FOREIGN KEY ([DId], [ToDoListTemplateId]) REFERENCES [dbo].[ToDoListTemplate] ([DId], [Id]);


GO
PRINT N'Creating FK_ToDoListTemplate_tbl_company...';


GO
ALTER TABLE [dbo].[ToDoListTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ToDoListTemplate_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_UserAccounts_Accounts...';


GO
ALTER TABLE [dbo].[UserAccounts] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccounts_Accounts] FOREIGN KEY ([DepartmentId], [AccountId]) REFERENCES [dbo].[Accounts] ([DId], [Id]);


GO
PRINT N'Creating FK_UserAccounts_Locations...';


GO
ALTER TABLE [dbo].[UserAccounts] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccounts_Locations] FOREIGN KEY ([DepartmentId], [AccountLocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_UserLocations_Locations...';


GO
ALTER TABLE [dbo].[UserLocations] WITH NOCHECK
    ADD CONSTRAINT [FK_UserLocations_Locations] FOREIGN KEY ([DId], [LocationId]) REFERENCES [dbo].[Locations] ([DId], [Id]);


GO
PRINT N'Creating FK_UserLocations_tbl_company...';


GO
ALTER TABLE [dbo].[UserLocations] WITH NOCHECK
    ADD CONSTRAINT [FK_UserLocations_tbl_company] FOREIGN KEY ([DId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_UserLocations_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[UserLocations] WITH NOCHECK
    ADD CONSTRAINT [FK_UserLocations_tbl_LoginCompanyJunc] FOREIGN KEY ([DId], [UId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating FK_UserProjects_Project...';


GO
ALTER TABLE [dbo].[UserProjects] WITH NOCHECK
    ADD CONSTRAINT [FK_UserProjects_Project] FOREIGN KEY ([DepartmentId], [ProjectID]) REFERENCES [dbo].[Project] ([CompanyID], [ProjectID]);


GO
PRINT N'Creating FK_UserProjects_tbl_company...';


GO
ALTER TABLE [dbo].[UserProjects] WITH NOCHECK
    ADD CONSTRAINT [FK_UserProjects_tbl_company] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[tbl_company] ([company_id]);


GO
PRINT N'Creating FK_UserProjects_tbl_LoginCompanyJunc...';


GO
ALTER TABLE [dbo].[UserProjects] WITH NOCHECK
    ADD CONSTRAINT [FK_UserProjects_tbl_LoginCompanyJunc] FOREIGN KEY ([DepartmentId], [UserId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating fk_LCJ_WLF...';


GO
ALTER TABLE [dbo].[WrkLstFilters] WITH NOCHECK
    ADD CONSTRAINT [fk_LCJ_WLF] FOREIGN KEY ([DId], [UId]) REFERENCES [dbo].[tbl_LoginCompanyJunc] ([company_id], [id]);


GO
PRINT N'Creating CK_JunkMailRules...';


GO
ALTER TABLE [dbo].[JunkMailRules] WITH NOCHECK
    ADD CONSTRAINT [CK_JunkMailRules] CHECK (((not(([vchEmail] is null or len([vchEmail]) = 0) and ([vchSubject] is null or len([vchSubject]) = 0)))));


GO
PRINT N'Creating [dbo].[fxGetAccountList]...';


GO
CREATE FUNCTION dbo.fxGetAccountList 
	(
		@DId int,
		@UId int
	)  
RETURNS 
	nvarchar(max)
AS  
BEGIN 
	
	DECLARE @AccountList nvarchar(max),
		@vchName nvarchar(170)

	SET @AccountList = ''
	
	DECLARE UserAccounts_crsr CURSOR
   	FOR
   	SELECT     
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END AS vchName
	FROM         
		UserAccounts 
	LEFT OUTER JOIN
        Accounts ON UserAccounts.DepartmentId = Accounts.DId AND UserAccounts.AccountId = Accounts.Id
	INNER JOIN 
		tbl_company ON UserAccounts.DepartmentId = tbl_company.company_id
	WHERE   
		UserAccounts.DepartmentId = @DId
		AND  
		UserAccounts.UserId = @UId
		

	OPEN UserAccounts_crsr

	FETCH NEXT FROM UserAccounts_crsr INTO @vchName
	   WHILE @@Fetch_Status = 0
	     BEGIN

		SET @AccountList = @AccountList + @vchName + ', '

		FETCH NEXT FROM UserAccounts_crsr INTO @vchName
	     END

	CLOSE UserAccounts_crsr
	DEALLOCATE UserAccounts_crsr

	IF LEN(@AccountList) > 0
	 BEGIN
		SET @AccountList = SUBSTRING(@AccountList,0,LEN(@AccountList))
	 END


	RETURN @AccountList
	
END
GO
PRINT N'Creating [dbo].[fxGetAccountName]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION dbo.fxGetAccountName
(
	@DepartmentId int,
	@AccountId int
)
RETURNS nvarchar(250)
AS
BEGIN
	DECLARE @AccountName nvarchar(250)
	IF @AccountId > 0
		SELECT @AccountName = vchName FROM Accounts WHERE DId = @DepartmentId AND Id = @AccountId 
	ELSE
		SELECT 	@AccountName = company_name + ' (Internal)' FROM tbl_company WHERE company_id = @DepartmentId
	RETURN @AccountName

END
GO
PRINT N'Creating [dbo].[fxGetAssetSubLocationExcessQty]...';


GO
CREATE FUNCTION [dbo].[fxGetAssetSubLocationExcessQty]
	(
		@DId int,
		@AssetId int,
		@LocationId int
	)
RETURNS int
AS
	BEGIN
		DECLARE @LocId int, @LocExcessQuantity int, @SumQty int, @IsChildLocs bit, @CurQty int
		SET @SumQty = 0
		SET @IsChildLocs = 0
		SET @CurQty = NULL
	
		DECLARE LocCursor CURSOR FOR
			SELECT L.Id, ISNULL(al.ExcessQuantity, 0) AS ExcessQuantity
			FROM
				Locations L
					LEFT OUTER JOIN AssetBulkLocation al ON al.DId = L.DId AND al.LocationId = L.Id 
						AND al.AuditDate = (SELECT TOP 1 AuditDate FROM AssetBulkLocation abl WHERE abl.DId = al.DId AND abl.AssetBulkId = al.AssetBulkId AND abl.LocationId = al.LocationId  ORDER BY abl.AuditDate DESC)		
						AND al.AssetBulkId = @AssetId
			WHERE
				L.DId = @DId AND ISNULL(L.ParentId, 0) = @LocationId AND L.Inactive = 0	
				
		OPEN LocCursor
		
		FETCH NEXT FROM LocCursor INTO @LocId, @LocExcessQuantity
		WHILE  @@FETCH_STATUS = 0
		BEGIN		
			SET @CurQty = dbo.fxGetAssetSubLocationExcessQty(@DId, @AssetId, @LocId)
			IF (@CurQty IS NOT NULL)
			BEGIN			
				SET @SumQty = @SumQty + @CurQty
				SET @IsChildLocs = 1
			END			
			IF (@LocExcessQuantity IS NOT NULL)
			BEGIN			
				SET @SumQty = @SumQty + @LocExcessQuantity
				SET @IsChildLocs = 1
			END
			FETCH NEXT FROM LocCursor INTO @LocId, @LocExcessQuantity
		END
		CLOSE LocCursor
		DEALLOCATE LocCursor
		
		RETURN @SumQty
	END
GO
PRINT N'Creating [dbo].[fxGetAssetSubLocationQty]...';


GO
CREATE FUNCTION [dbo].[fxGetAssetSubLocationQty]
	(
		@DId int,
		@AssetId int,
		@LocationId int
	)
RETURNS int
AS
	BEGIN
		DECLARE @LocId int, @LocQuantity int, @SumQty int, @IsChildLocs bit, @CurQty int
		SET @SumQty = 0
		SET @IsChildLocs = 0
		SET @CurQty = NULL
	
		DECLARE LocCursor CURSOR FOR
			SELECT L.Id, ISNULL(al.Quantity, 0) AS Quantity
			FROM
				Locations L
					LEFT OUTER JOIN AssetBulkLocation al ON al.DId = L.DId AND al.LocationId = L.Id 
						AND al.AuditDate = (SELECT TOP 1 AuditDate FROM AssetBulkLocation abl WHERE abl.DId = al.DId AND abl.AssetBulkId = al.AssetBulkId AND abl.LocationId = al.LocationId  ORDER BY abl.AuditDate DESC)		
						AND al.AssetBulkId = @AssetId
			WHERE
				L.DId = @DId AND ISNULL(L.ParentId, 0) = @LocationId AND L.Inactive = 0	
				
		OPEN LocCursor
		
		FETCH NEXT FROM LocCursor INTO @LocId, @LocQuantity
		WHILE  @@FETCH_STATUS = 0
		BEGIN		
			SET @CurQty = dbo.fxGetAssetSubLocationQty(@DId, @AssetId, @LocId)
			IF (@CurQty IS NOT NULL)
			BEGIN			
				SET @SumQty = @SumQty + @CurQty
				SET @IsChildLocs = 1
			END			
			IF (@LocQuantity IS NOT NULL)
			BEGIN			
				SET @SumQty = @SumQty + @LocQuantity
				SET @IsChildLocs = 1
			END
			FETCH NEXT FROM LocCursor INTO @LocId, @LocQuantity
		END
		CLOSE LocCursor
		DEALLOCATE LocCursor
		
		RETURN @SumQty
	END
GO
PRINT N'Creating [dbo].[fxGetBillingMethodID]...';


GO
CREATE FUNCTION dbo.fxGetBillingMethodID 
(
		@CompanyID int,
		@AccountID int,
		@ProjectID int
)  
RETURNS 
	int
AS
BEGIN
	
	DECLARE @ParentId int,
		@BillingMethodID int
		
	SET @BillingMethodID = NULL
		
	IF @ProjectID IS NULL
	 BEGIN
		SELECT 
			@BillingMethodID = BillingMethodID
		FROM 
			AccountRate
		WHERE
			CompanyID = @CompanyID
			AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))
			
		RETURN @BillingMethodID
	 END
	
	SELECT 
		@ParentId = ParentId, 
		@BillingMethodID = BillingMethodID,
		@AccountID = AccountID
	FROM 
		Project 
	WHERE 
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID


	WHILE (NOT @ParentId IS NULL) AND (@BillingMethodID IS NULL)
	 BEGIN
		SELECT 
			@ParentId = ParentId, 
			@BillingMethodID = BillingMethodID 
		FROM 
			Project 
		WHERE 
			CompanyID = @CompanyID
			AND
			ProjectID = @ParentId
	 END

	IF @BillingMethodID IS NULL
	 BEGIN
		SELECT 
			@BillingMethodID = BillingMethodID
		FROM 
			AccountRate
		WHERE
			CompanyID = @CompanyID
			AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))
	 END

	RETURN @BillingMethodID
END
GO
PRINT N'Creating [dbo].[fxGetConfigValueStr]...';


GO
CREATE FUNCTION [dbo].[fxGetConfigValueStr]
(
	@DId int,
	@ValueName nvarchar(255)
)
RETURNS
	nvarchar(max)
AS
BEGIN

	DECLARE @ResultValue nvarchar(max)
	DECLARE @DefaultValue nvarchar(max)
	DECLARE @SettingId uniqueidentifier
	IF @ValueName='btCfgSentEmailsToCheckedOutTechs'
	BEGIN
		SET @SettingId='5D9FB583-CF2E-42C4-AA3D-F70B4AB95D3F'
		SET @DefaultValue='true'
	END
	ELSE IF @ValueName='btCfgAcctMngr'
	BEGIN
		SET @SettingId='2B1D048F-DF61-4D89-9B1A-8170A905EF35'
		SET @DefaultValue='true'
	END	
	ELSE IF @ValueName='configLocationTracking'
	BEGIN
		SET @SettingId='3BDD7F5E-3471-42A7-9334-57393ED37BB5'
		SET @DefaultValue='true'
	END	
	ELSE IF @ValueName='configClassTracking'
	BEGIN
		SET @SettingId='C9E91276-7943-43A6-B021-9B8273F775CD'
		SET @DefaultValue='true'
	END
	ELSE IF @ValueName='configPriorities'
	BEGIN
		SET @SettingId='57A2B533-4F52-4C7B-8CBC-9BD0CD0C8271'
		SET @DefaultValue='true'
	END
	ELSE IF @ValueName='configLVL'
	BEGIN
		SET @SettingId='5B25A480-09AF-4984-8FAD-48B5C136F155'
		SET @DefaultValue='true'
	END
	ELSE IF @ValueName='btCfgESG'
	BEGIN
		SET @SettingId='E59D1305-3160-4872-9046-5BE391AB01AA'
		SET @DefaultValue='false'
	END
	ELSE IF @ValueName='ConfigUAQ'
	BEGIN
		SET @SettingId='2FDFABFF-4D3C-495B-8D1C-608E6C9F8027'
		SET @DefaultValue='true'
	END
	ELSE IF @ValueName='configTechCheckin'
	BEGIN
		SET @SettingId='C8DFA668-C4C3-458A-8530-C7797BC28DD9'
		SET @DefaultValue='true'
	END	
	ELSE IF @ValueName='tinyBusHourStart'
	BEGIN
		SET @SettingId='491BAF4A-0BF7-4CFB-AE38-B61F85555C8C'
		SET @DefaultValue='9'
	END
	ELSE IF @ValueName='tinyBusMinStart'
	BEGIN
		SET @SettingId='E4A9C6B3-BA5B-4EE3-9D75-07AF08898C33'
		SET @DefaultValue='0'
	END
	ELSE IF @ValueName='tinyBusHourStop'
	BEGIN
		SET @SettingId='90FE1A18-B46B-42A2-AABC-B1F201BE3813'
		SET @DefaultValue='18'
	END
	ELSE IF @ValueName='tinyBusMinStop'
	BEGIN
		SET @SettingId='4DF11F47-4D9F-4B5A-A3B3-958EF07DB760'
		SET @DefaultValue='0'
	END
	ELSE IF @ValueName='configHourlyRate'
	BEGIN
		SET @SettingId='F6A40946-3829-40E9-A967-BD18E29FC963'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='configHourlyBillableRate'
	BEGIN
		SET @SettingId='97FAB01B-B6D2-4E54-9F4A-7193CF28C566'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='CfgInternalQBAccount'
	BEGIN
		SET @SettingId='79A149A8-36A9-47CA-A3B8-EB8843456CFB'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='emailSuffixes'
	BEGIN
		SET @SettingId='9F96260D-251B-4E15-9119-57D4B63E856C'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='printFontSize'
	BEGIN
		SET @SettingId='E8131EC6-FA7F-4D6A-933F-D25CF09219CB'
		SET @DefaultValue='8'
	END
	ELSE IF @ValueName='configHourlyBillableRate'
	BEGIN
		SET @SettingId='97FAB01B-B6D2-4E54-9F4A-7193CF28C566'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='configAssetTracking'
	BEGIN
		SET @SettingId='6B0D2310-C415-4797-9A96-4EFBB55F9615'
		SET @DefaultValue='true'
	END
	ELSE IF @ValueName='AssetsUnique1Caption'
	BEGIN
		SET @SettingId='82382B38-B3E1-4743-8295-E347FA09F909'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='AssetsUnique2Caption'
	BEGIN
		SET @SettingId='CAF5A0ED-BEE2-47E9-AF59-EDC99E008BB5'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='AssetsUnique3Caption'
	BEGIN
		SET @SettingId='3901D5CB-B7C0-4C51-8D98-C0127BE9CADC'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='AssetsUnique4Caption'
	BEGIN
		SET @SettingId='BE0FAA99-ED3D-4583-A981-027CAADF2D9A'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='AssetsUnique5Caption'
	BEGIN
		SET @SettingId='FFF9A170-C278-4E23-9934-126A48155D77'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='AssetsUnique6Caption'
	BEGIN
		SET @SettingId='1579780D-B956-4F62-ADDD-87D3861C788C'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='AssetsUnique7Caption'
	BEGIN
		SET @SettingId='3EB23281-7BA0-4A18-9419-05DCF99A5370'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='FBClientId'
	BEGIN
		SET @SettingId='B2D0C6BF-C93F-491C-91B4-701D8470E3B6'
		SET @DefaultValue='0'
	END
	ELSE IF @ValueName='tintTicketTimer'
	BEGIN
		SET @SettingId='063FB1E1-A7C9-4F3A-89AC-C4422B488469'
		SET @DefaultValue='1'
	END
	ELSE IF @ValueName='CfgQBAccount'
	BEGIN
		SET @SettingId='9D097775-E325-4D67-B63A-D46CD2E0F334'
		SET @DefaultValue=''
	END
	ELSE IF @ValueName='tintCfgEParserV2'
	BEGIN
		SET @SettingId='137CE910-9062-4A75-8676-B7D812E09832'
		SET @DefaultValue='2'
	END
	ELSE IF @ValueName='configAllowEmailNewAcct'
	BEGIN
		SET @SettingId='AB0FD480-06A2-4ED4-810A-F1DFB38BE759'
		SET @DefaultValue='false'
	END
	ELSE IF @ValueName='btCfgLimitNewUsersToMatchingDomainSuffixes'
	BEGIN
		SET @SettingId='1EA5F807-23C1-4E9E-A1D2-7440CC597354'
		SET @DefaultValue='true'
	END
	ELSE IF @ValueName='AccLevelTimeTracking'
	BEGIN
		SET @SettingId='11A5198D-8BC4-44E8-9D3D-CCF52D5DF87B'
		SET @DefaultValue='true'
	END
	ELSE IF @ValueName='tintAcctRtOvrRouteType'
	BEGIN
		SET @SettingId='E7D559C3-D799-44CD-8942-7242A531DDAD'
		SET @DefaultValue='0'
	END
	ELSE IF @ValueName='btAcctRtOvr'
	BEGIN
		SET @SettingId='325AD270-B63B-4F4B-A07B-4E36F4EB347A'
		SET @DefaultValue='true'
	END
	ELSE IF @ValueName='tintAcctRtOvrLevel'
	BEGIN
		SET @SettingId='980EC158-29FF-404B-AE1C-C550951E7E25'
		SET @DefaultValue='1'
	END
	ELSE IF @ValueName='tintAcctRtOvrOption'
	BEGIN
		SET @SettingId='A8DA34B6-532C-4C85-9611-DEF6B39FBA3E'
		SET @DefaultValue='0'
	END
	ELSE IF @ValueName='tintRoutingOrder'
	BEGIN
		SET @SettingId='745FB5EB-BAF2-4F79-95C0-4FAA709505E8'
		SET @DefaultValue='0'
	END
	ELSE IF @ValueName='btAllowSUserToChooseAnyLogin'
	BEGIN
		SET @SettingId='C46A0CD9-45A8-4AA0-853A-D786F2CDFC13'
		SET @DefaultValue='false'
	END
	ELSE IF @ValueName='btTimeEntriesOnTktLog'
	BEGIN
		SET @SettingId='8438CEF8-1DBA-4D50-9127-D21FAD72F452'
		SET @DefaultValue='false'
	END
	ELSE IF @ValueName='btCfgCON'
	BEGIN
		SET @SettingId='79CC9585-71F4-4058-8D1A-6B00C4551E8F'
		SET @DefaultValue='false'
	END
	ELSE IF @ValueName='LastTicketNumber'
	BEGIN
		SET @SettingId='9EE89FE5-1D0F-408E-AB8C-B859180E1F5F'
		SET @DefaultValue='0'
	END
	ELSE IF @ValueName='ConfigSerialNumber'
	BEGIN
		SET @SettingId='4036FDCE-8BD8-4FC3-92B3-15C5A1652C86'
		SET @DefaultValue='false'
	END
	ELSE IF @ValueName='btCfgBilling'
	BEGIN
		SET @SettingId='249B258A-0BEE-4347-ADCF-CF06CB81AD95'
		SET @DefaultValue='true'
	END
	ELSE IF @ValueName='btCfgProject'
	BEGIN
		SET @SettingId='324D9F3D-E782-414B-81FE-57DBC97EB691'
		SET @DefaultValue='true'
	END
	ELSE IF @ValueName='btCfgToDo'
	BEGIN
		SET @SettingId='859D1305-3160-4872-9046-5BE391AB0155'
		SET @DefaultValue='false'
	END
	ELSE IF @ValueName='CUWClassID'
	BEGIN
		SET @SettingId='127525B9-2380-4B8F-BE5D-7BF6A3A1597C'
		SET @DefaultValue='0'
	END
	ELSE IF @ValueName='FBDefaultProjectId'
	BEGIN
		SET @SettingId='B450C6BF-CA3F-491C-91B4-40145470E3B6'
		SET @DefaultValue='0'
	END
--	ELSE
--	BEGIN
--		RAISERROR('Cant find defined setting with ShortName=',16,1)
--		RETURN ''
--	END

	SELECT @ResultValue = sv.Value 
		FROM Mc_SettingsValues sv 
		INNER JOIN tbl_company c 
			ON sv.InstanceId = c.company_guid 
		WHERE c.company_id = @DId AND 
		sv.SettingId = @SettingId

	IF @ResultValue IS NULL
		SELECT @ResultValue = @DefaultValue 

	RETURN @ResultValue
	
END
GO
PRINT N'Creating [dbo].[fxGetCountActiveChildProjects]...';


GO
CREATE FUNCTION dbo.fxGetCountActiveChildProjects 
	(
		@ProjectID int
	)  
RETURNS 
	int
AS  
BEGIN 
	DECLARE @CountActiveChildProjects int
	SET @CountActiveChildProjects = 0

	DECLARE @ProjectTree TABLE(
  	ProjectID int,
  	ParentID int,
	Active bit,
	lvl int
	)
	
	DECLARE @lvl int
	SET @lvl = 0

	INSERT
		@ProjectTree
	SELECT
		ProjectID, 
		ParentID, 
		Active,
		@lvl
	FROM 
		Project
	WHERE
		ProjectID = @ProjectID

	DECLARE @insertCount int 
	SET @insertCount = 1
	WHILE @insertCount > 0
	  BEGIN
		SET @lvl = @lvl + 1
		INSERT
			@ProjectTree
		SELECT
			Project.ProjectID, 
			Project.ParentID, 
			Project.Active,
			@lvl
		FROM	
			@ProjectTree tree
		INNER JOIN 
			Project ON tree.ProjectID = Project.ParentID
		WHERE 
			lvl = @lvl - 1

		SET @insertCount = @@rowcount

	  END

	SELECT
		@CountActiveChildProjects = COUNT(ProjectID)
	FROM         
		@ProjectTree
	WHERE     
		Active = 1

	
	RETURN @CountActiveChildProjects
END
GO
PRINT N'Creating [dbo].[fxGetCountInActiveChildProjects]...';


GO
CREATE FUNCTION [dbo].[fxGetCountInActiveChildProjects] 
	(
		@ProjectID int
	)  
RETURNS 
	int
AS  
BEGIN 
	DECLARE @CountInActiveChildProjects int
	SET @CountInActiveChildProjects = 0

	DECLARE @ProjectTree TABLE(
  	ProjectID int,
  	ParentID int,
	Active bit,
	lvl int
	)
	
	DECLARE @lvl int
	SET @lvl = 0

	INSERT
		@ProjectTree
	SELECT
		ProjectID, 
		ParentID, 
		Active,
		@lvl
	FROM 
		Project
	WHERE
		ProjectID = @ProjectID

	DECLARE @insertCount int 
	SET @insertCount = 1
	WHILE @insertCount > 0
	  BEGIN
		SET @lvl = @lvl + 1
		INSERT
			@ProjectTree
		SELECT
			Project.ProjectID, 
			Project.ParentID, 
			Project.Active,
			@lvl
		FROM	
			@ProjectTree tree
		INNER JOIN 
			Project ON tree.ProjectID = Project.ParentID
		WHERE 
			lvl = @lvl - 1

		SET @insertCount = @@rowcount

	  END

	SELECT
		@CountInActiveChildProjects = COUNT(ProjectID)
	FROM         
		@ProjectTree
	WHERE     
		Active = 0

	
	RETURN @CountInActiveChildProjects
END
GO
PRINT N'Creating [dbo].[fxGetCountOpenTicketsByAccountID]...';


GO
CREATE FUNCTION dbo.fxGetCountOpenTicketsByAccountID 
(
		@CompanyID int,
		@AccountID int = NULL
)  
RETURNS 
	int
AS  
BEGIN 
	
	DECLARE @CountOpenTickets int
	SET @CountOpenTickets = 0
	
	SELECT 
		@CountOpenTickets = COUNT(Id) 
	FROM 
		tbl_ticket 
	WHERE 
		company_id = @CompanyID
		AND
		(intAcctId = @AccountID OR (@AccountID IS NULL AND intAcctId IS NULL))
		AND
		tbl_ticket.Status <> 'Closed'
	
	RETURN @CountOpenTickets
	
END
GO
PRINT N'Creating [dbo].[fxGetCustomerName]...';


GO
CREATE FUNCTION dbo.fxGetCustomerName 
(
		@CompanyID int,
		@AccountID int,
		@ProjectID int,
		@btCfgAcctMngr nvarchar(255),
		@btCfgProject bit
	)  
RETURNS 
	varchar(1000)
AS  
BEGIN 
	
	DECLARE @ProjectName nvarchar(max),
		@ParentId int

	SET @ProjectName = ''

	IF (@ProjectID IS NOT NULL AND @btCfgProject = 1)
	BEGIN	
		SELECT 
			@ParentId=ParentId, 
			@ProjectName=[Name]
		FROM 
			Project 
		WHERE 
			CompanyID = @CompanyID
			AND
			ProjectID = @ProjectID


		WHILE NOT @ParentId IS NULL
		 BEGIN
			SELECT 
				@ParentId=ParentId, 
				@ProjectName=[Name]+':'+@ProjectName 
			FROM 
				Project 
			WHERE 
				CompanyID = @CompanyID
				AND
				ProjectID=@ParentId
		 END
	END
	
	IF (@AccountID IS NULL)	
		BEGIN
		IF @btCfgAcctMngr = 'true' OR @ProjectName = ''
		 BEGIN
			IF ( NOT @ProjectName = '') SET @ProjectName = ':' + @ProjectName
			SET @ProjectName = (SELECT company_name FROM tbl_company WHERE company_id = @CompanyID) + ' (Internal)' + @ProjectName
		 END
		END
	ELSE 
		BEGIN
			IF ( NOT @ProjectName = '') SET @ProjectName = ':' + @ProjectName
			SET @ProjectName = (SELECT vchName FROM Accounts WHERE DId = @CompanyID AND Id = @AccountID) + '' + @ProjectName
		END
	
	RETURN @ProjectName 

END
GO
PRINT N'Creating [dbo].[fxGetFullClassName]...';


GO

CREATE FUNCTION [dbo].[fxGetFullClassName]
	(
		@DId int,
		@ClassId int
	)
RETURNS nvarchar(max) 
AS
BEGIN
	DECLARE @ClassName nvarchar(max)
	DECLARE @ParentId int
		
	SELECT @ParentId=ParentId, @ClassName=Name+CASE WHEN btInactive=1 THEN '(INACTIVE)' ELSE '' END FROM tbl_class WHERE company_id=@DId AND Id=@ClassId
	WHILE NOT @ParentId IS NULL
		SELECT @ParentId=ParentId, @ClassName=Name+' > '+@ClassName FROM tbl_class WHERE company_id=@DId AND Id=@ParentId
	RETURN @ClassName
END
GO
PRINT N'Creating [dbo].[fxGetFullFolderName]...';


GO
CREATE FUNCTION dbo.fxGetFullFolderName 
	(
		@DId int,
		@FolderID int
	)  
RETURNS 
	nvarchar(max)
AS  
BEGIN 
	
	DECLARE @FolderName nvarchar(max),
		@ParentId int

	SET @FolderName = ''
	
	SELECT 
		@ParentId = ISNULL(ParentId, 0), 
		@FolderName = vchName 
	FROM 
		Folders 
	WHERE 
		DId = @DId
		AND
		id = @FolderID


	WHILE @ParentId <> 0
	 BEGIN
		SELECT 
			@ParentId = ISNULL(ParentId, 0), 
			@FolderName = vchName + '  >  ' + @FolderName 
		FROM 
			Folders 
		WHERE 
			DId = @DId
			AND
			id = @ParentId
	 END

	RETURN @FolderName
	
END
GO
PRINT N'Creating [dbo].[fxGetFullProjectName]...';


GO
CREATE FUNCTION dbo.fxGetFullProjectName 
	(
		@CompanyID int,
		@ProjectID int
	)  
RETURNS 
	nvarchar(max)
AS  
BEGIN 
	
	DECLARE @ProjectName nvarchar(max),
		@ParentId int

	SET @ProjectName = ''
	
	SELECT 
		@ParentId=ParentId, 
		@ProjectName=Name 
	FROM 
		Project 
	WHERE 
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID


	WHILE NOT @ParentId IS NULL
	 BEGIN
		SELECT 
			@ParentId=ParentId, 
			@ProjectName=Name+'  >  '+@ProjectName 
		FROM 
			Project 
		WHERE 
			CompanyID = @CompanyID
			AND
			ProjectID=@ParentId
	 END

	RETURN @ProjectName
	
END
GO
PRINT N'Creating [dbo].[fxGetFullUserName]...';


GO
CREATE FUNCTION dbo.fxGetFullUserName 
(
	@FirstName nvarchar(50),
	@LastName nvarchar(50),
	@Email nvarchar(50)
)
RETURNS nvarchar(155)
AS
BEGIN
	
	IF RTRIM(@FirstName) <> '' AND RTRIM(@LastName) <> ''
		RETURN @LastName + ', ' + @FirstName + ' - ' + @Email
	
	IF RTRIM(@FirstName) <> ''
		RETURN @FirstName + ' - ' + @Email
	
	IF RTRIM(@LastName) <> ''
		RETURN @LastName + ' - ' + @Email
	
	RETURN @Email

END
GO
PRINT N'Creating [dbo].[fxGetInoperationalMinutes]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[fxGetInoperationalMinutes] 
(
	@StartDate datetime,
	@EndDate datetime,
	@WorkDays char(7) = '1111100',
	@StartBusinnessTime int = 0,
	@EndBusinnessTime int = 1440
)
RETURNS int
AS
	BEGIN

	SET @StartDate = DATEADD(ss, -DATEPART(ss, @StartDate), @StartDate)
	SET @StartDate = DATEADD(ms, -DATEPART(ms, @StartDate), @StartDate)

	SET @EndDate = DATEADD(ss, -DATEPART(ss, @EndDate), @EndDate)
	SET @EndDate = DATEADD(ms, -DATEPART(ms, @EndDate), @EndDate)

	DECLARE @StartTime int
	SET @StartTime = DATEPART(hour, @StartDate)*60 + DATEPART(minute, @StartDate);
	
	DECLARE @EndTime int
	SET @EndTime = DATEPART(hour, @EndDate)*60 + DATEPART(minute, @EndDate);
	
	IF LEN(@WorkDays) = 7
	BEGIN
		SET @WorkDays = SUBSTRING(@WorkDays, 7, 1) + SUBSTRING(@WorkDays, 1, 6)
	END
	
	DECLARE @TotalInoperationalTime int
	DECLARE @Correction int

	SET @TotalInoperationalTime = 0

	-- Correcting StartDate to start from 00:00:00 NEXT day
	SET @Correction = 0
	IF SUBSTRING(@WorkDays, DATEPART(weekday, @StartDate), 1) = '0'
		BEGIN
			IF DATEDIFF(day, @StartDate, @EndDate) > 0
				BEGIN
					SET @Correction = 1440 - @StartTime
				END
			ELSE
				BEGIN
					SET @Correction = @Correction + DATEDIFF(mi, @StartDate, @EndDate)
				END	
			
			SET @StartDate = DATEADD(mi, @Correction, @StartDate)
			SET @StartTime = DATEPART(hour, @StartDate)*60 + DATEPART(minute, @StartDate);
		END
	ELSE
		BEGIN
			IF DATEDIFF(day, @StartDate, @EndDate) > 0
				BEGIN
					-- Different days
					IF @StartTime < @StartBusinnessTime
						SET @Correction = @Correction + (@StartBusinnessTime - @StartTime) + (1440 - @EndBusinnessTime)
					ELSE IF @StartTime BETWEEN @StartBusinnessTime AND @EndBusinnessTime
						SET @Correction = @Correction + (1440 - @EndBusinnessTime)
					ELSE
						SET @Correction = @Correction + (1440 - @StartTime)
					
					SET @StartDate = DATEADD(mi, (1440 - @StartTime), @StartDate)
					SET @StartTime = DATEPART(hour, @StartDate)*60 + DATEPART(minute, @StartDate);
				END
			ELSE
				BEGIN
					-- Same day
					IF @StartTime < @StartBusinnessTime AND @EndTime < @StartBusinnessTime
						SET @Correction = @Correction + @EndTime - @StartTime
					ELSE IF @StartTime < @StartBusinnessTime AND @EndTime BETWEEN @StartBusinnessTime AND @EndBusinnessTime
						SET @Correction = @Correction + @StartBusinnessTime - @StartTime
					ELSE IF @StartTime < @StartBusinnessTime AND @EndTime > @EndBusinnessTime
						SET @Correction = @Correction + @StartBusinnessTime - @StartTime + @EndTime - @EndBusinnessTime
					IF @StartTime BETWEEN @StartBusinnessTime AND @EndBusinnessTime AND @EndTime > @EndBusinnessTime
						SET @Correction = @Correction + @EndTime - @EndBusinnessTime
					IF @StartTime > @EndBusinnessTime AND @EndTime > @EndBusinnessTime
						SET @Correction = @Correction + @EndTime - @StartTime
						
					SET @StartDate = @EndDate
					SET @StartTime = DATEPART(hour, @StartDate)*60 + DATEPART(minute, @StartDate);
				END
		END
	SET @TotalInoperationalTime = @TotalInoperationalTime + @Correction
	
	SET @Correction = 0
	IF SUBSTRING(@WorkDays, DATEPART(weekday, @EndDate), 1) = '0'
		BEGIN
			IF DATEDIFF(day, @StartDate, @EndDate) > 0
				BEGIN
					-- Correcting EndDate to start from 00:00:00 CURRENT day
					SET @Correction = @EndTime
				END
			ELSE
				BEGIN
					SET @Correction = @Correction + DATEDIFF(mi, @StartDate, @EndDate)
				END
			
			SET @EndDate = DATEADD(mi, -@Correction, @EndDate)
			SET @EndTime = DATEPART(hour, @EndDate)*60 + DATEPART(minute, @EndDate);
		END
	ELSE
		BEGIN
			IF DATEDIFF(day, @StartDate, @EndDate) > 0
				BEGIN
					-- Different days
					IF @EndTime < @StartBusinnessTime
						SET @Correction = @Correction + @EndTime
					ELSE IF @EndTime BETWEEN @StartBusinnessTime AND @EndBusinnessTime
						SET @Correction = @StartBusinnessTime
					ELSE
						SET @Correction = @Correction + @EndTime - (@EndBusinnessTime - @StartBusinnessTime)
					SET @EndDate = DATEADD(mi, -@EndTime, @EndDate)
					SET @EndTime = DATEPART(hour, @EndDate)*60 + DATEPART(minute, @EndDate);
				END
			ELSE
				BEGIN
					IF @StartTime < @StartBusinnessTime AND @EndTime < @StartBusinnessTime
						SET @Correction = @Correction + @EndTime - @StartTime
					ELSE IF @StartTime < @StartBusinnessTime AND @EndTime BETWEEN @StartBusinnessTime AND @EndBusinnessTime
						SET @Correction = @Correction + @StartBusinnessTime - @StartTime
					ELSE IF @StartTime < @StartBusinnessTime AND @EndTime > @EndBusinnessTime
						SET @Correction = @Correction + @StartBusinnessTime - @StartTime + @EndTime - @EndBusinnessTime
					IF @StartTime BETWEEN @StartBusinnessTime AND @EndBusinnessTime AND @EndTime > @EndBusinnessTime
						SET @Correction = @Correction + @EndTime - @EndBusinnessTime
					IF @StartTime > @EndBusinnessTime AND @EndTime > @EndBusinnessTime
						SET @Correction = @Correction + @EndTime - @StartTime
						
					SET @EndDate = @StartDate
					SET @EndTime = DATEPART(hour, @EndDate)*60 + DATEPART(minute, @EndDate);
				END
		END
	SET @TotalInoperationalTime = @TotalInoperationalTime + @Correction
	
	-- Correcting StartDate to make the difference (EndDate-StartDate)/7 to be natural (adding days to StartDay)
	DECLARE @DaysCorrection int
	SET @DaysCorrection = DATEDIFF(day,@StartDate,@EndDate)%7
	WHILE @DaysCorrection != 0
		BEGIN
			IF SUBSTRING(@WorkDays, DATEPART(weekday, @StartDate), 1) = '0'
				SET @TotalInoperationalTime = @TotalInoperationalTime + 1440
			ELSE
				SET @TotalInoperationalTime = @TotalInoperationalTime + 1440 - (@EndBusinnessTime - @StartBusinnessTime)
			SET @StartDate = DATEADD(day, 1, @StartDate)
			SET @DaysCorrection = @DaysCorrection - 1
		END
		
	DECLARE @WorkDaysCount tinyint
	SET @WorkDaysCount = LEN(REPLACE(@WorkDays,'0',''))
	
	SET @TotalInoperationalTime = @TotalInoperationalTime + DATEDIFF(week,@StartDate,@EndDate)*(7-@WorkDaysCount)*1440
	SET @TotalInoperationalTime = @TotalInoperationalTime + DATEDIFF(week,@StartDate,@EndDate)*@WorkDaysCount*(1440 - (@EndBusinnessTime - @StartBusinnessTime))

	RETURN @TotalInoperationalTime
END
GO
PRINT N'Creating [dbo].[fxGetLocationAliasesAsString]...';


GO
CREATE FUNCTION [dbo].[fxGetLocationAliasesAsString]
	(
		@DId int,
		@LocationId int
	)
RETURNS nvarchar(max)
AS
	BEGIN
		DECLARE @LocId int, @LocAlias nvarchar(50), @SumAlias nvarchar(max)
		
		SET @SumAlias = ''
		
		DECLARE LocCursor CURSOR FOR
			SELECT LocationAliasName
			FROM
				LocationAliases
			WHERE
				DId = @DId AND LocationId = @LocationId
				
		OPEN LocCursor
		DECLARE @IsFirst bit
		SET @IsFirst = 0
		FETCH NEXT FROM LocCursor INTO @LocAlias
		WHILE  @@FETCH_STATUS = 0
		BEGIN	
			IF @IsFirst = 1
				SET @SumAlias = @SumAlias + ', '
			SET @SumAlias = @SumAlias + @LocAlias
			SET @IsFirst = 1
			FETCH NEXT FROM LocCursor INTO @LocAlias
		END
		CLOSE LocCursor
		DEALLOCATE LocCursor
		
				
		RETURN @SumAlias
	END
GO
PRINT N'Creating [dbo].[fxGetLocationAuditDueDays]...';


GO
CREATE FUNCTION [dbo].[fxGetLocationAuditDueDays]
	(
		@DId int,		
		@LocationId int
	)
RETURNS int
AS
	BEGIN
	
		DECLARE @DueDays int
		DECLARE @AuditPeriodDays int
		DECLARE @LastCompletedDate datetime, @FutDate datetime
		
		SET @DueDays = 0
		
		SELECT  @AuditPeriodDays = ISNULL(L.AuditPeriodDays, 0), @LastCompletedDate = lahC.AuditDate
		FROM Locations L
				--LEFT OUTER JOIN LocationAuditHistory lah ON L.DId = lah.DId AND L.Id = lah.LocationId AND
				--lah.AuditDate = (SELECT TOP 1 al.AuditDate FROM LocationAuditHistory al WHERE al.DId = @DId AND al.LocationId = L.Id ORDER BY AuditDate DESC)
				LEFT OUTER JOIN LocationAuditHistory lahC ON L.DId = lahC.DId AND L.Id = lahC.LocationId AND
				lahC.AuditDate = (SELECT TOP 1 al1.AuditDate FROM LocationAuditHistory al1 WHERE al1.DId = @DId AND al1.LocationId = L.Id AND al1.Completed = 1 ORDER BY AuditDate DESC)						
		WHERE
			L.DId = @DId			
			AND
			L.Id = @LocationId
			AND
			L.CfgEnableAudit = 1		
			
		
		IF (@LastCompletedDate IS NOT NULL)
		BEGIN		
			SET @FutDate = DATEADD(d, @AuditPeriodDays, @LastCompletedDate)
			SET @DueDays = DATEDIFF(d, getutcdate(), @FutDate)
		END
							
		RETURN @DueDays
	END
GO
PRINT N'Creating [dbo].[fxGetLocationIdByFullName]...';


GO

CREATE FUNCTION dbo.fxGetLocationIdByFullName
	(
		@DId int,
		@AccountId int,
		@FullName nvarchar(1000)
	)
RETURNS int 
AS
BEGIN
	IF @FullName IS NULL OR LEN(@FullName)=0
		RETURN NULL
	DECLARE @Name nvarchar(1000)
	DECLARE @LocationId int
	DECLARE @chrIndex int
	DECLARE @chrStart int
	SET @chrStart=1
	IF CHARINDEX('/',@FullName,LEN(@FullName))=0
		SET @FullName=@FullName+'/'
	SET @chrIndex=CHARINDEX('/',@FullName,@chrStart)
	WHILE @chrIndex>@chrStart 
	BEGIN
		SET @Name=LTRIM(RTRIM(SUBSTRING(@FullName, @chrStart, @chrIndex-@chrStart)))
		SET @chrStart=@chrIndex+1
		SELECT @LocationId=Id FROM Locations WHERE DId=@DId AND ISNULL(AccountId,0)=ISNULL(@AccountId,0) AND ISNULL(ParentId,0)=ISNULL(@LocationId,0) AND Name=@Name
		SET @chrIndex=CHARINDEX('/',@FullName,@chrStart)
	END		
	RETURN @LocationId
END
GO
PRINT N'Creating [dbo].[fxGetLocationName]...';


GO
CREATE FUNCTION [dbo].[fxGetLocationName]
	(
		@DId int,
		@LocationId int
	)
RETURNS nvarchar(max) 
AS
BEGIN
	DECLARE @LocationName nvarchar(max)
	DECLARE @ParentId int
		
	SELECT @ParentId=ParentId, @LocationName=Name FROM Locations WHERE DId=@DId AND Id=@LocationId
	WHILE NOT @ParentId IS NULL
		SELECT @ParentId=ParentId, @LocationName=Name+' > '+@LocationName FROM Locations WHERE DId=@DId AND Id=@ParentId
	RETURN @LocationName
END
GO
PRINT N'Creating [dbo].[fxGetLocationShortName]...';


GO
CREATE FUNCTION [dbo].[fxGetLocationShortName]
	(
		@DId int,
		@GeneralLocationId int,
		@LocationId int
	)
RETURNS nvarchar(max) 
AS
BEGIN
	DECLARE @LocationName nvarchar(max)
	DECLARE @ParentId int
		
	SELECT @ParentId=ParentId, @LocationName=Name FROM Locations WHERE DId=@DId AND Id=@LocationId AND (Id <> @GeneralLocationId)
	
	WHILE ((NOT @ParentId IS NULL) AND (@ParentId <> @GeneralLocationId))
		SELECT @ParentId=ParentId, @LocationName=Name+' > '+@LocationName
		FROM Locations WHERE DId=@DId AND Id=@ParentId
		
	RETURN @LocationName
END
GO
PRINT N'Creating [dbo].[fxGetLocationTicketCount]...';


GO
CREATE FUNCTION [dbo].[fxGetLocationTicketCount]
	(
		@DId int,		
		@LocationId int
	)
RETURNS int
AS
	BEGIN
		DECLARE @TktCount int
		
		SELECT @TktCount = COUNT(*)
		FROM tbl_ticket t
		WHERE
			t.company_id=@DId
			AND 
			t.AccountLocationId = @LocationId
			AND
			t.[Status]<>'Closed'							
		RETURN @TktCount
	END
GO
PRINT N'Creating [dbo].[fxGetParentBMProject]...';


GO
CREATE FUNCTION [dbo].[fxGetParentBMProject] 
(
		@CompanyID int,
		@AccountID int,
		@ProjectID int
)  
RETURNS 
	int
AS  
BEGIN
	
	DECLARE	@ParentId int,
			@BillingMethodID int,
			@ActualProjectID int
			

	SET @ParentId = NULL
	SET @BillingMethodID = NULL
	SET @ActualProjectID = NULL
	
	SELECT 
		@ParentId = ParentID, 
		@BillingMethodID = BillingMethodID,
		@AccountID = AccountID,
		@ActualProjectID = ProjectID
	FROM 
		Project 
	WHERE 
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID


	WHILE (NOT @ParentId IS NULL) AND (@BillingMethodID IS NULL)
	 BEGIN
		SELECT 
			@ParentId = ParentID, 
			@BillingMethodID = BillingMethodID,
			@ActualProjectID = ProjectID
		FROM 
			Project 
		WHERE 
			CompanyID = @CompanyID
			AND
			ProjectID = @ParentId
	 END

	IF @BillingMethodID IS NULL
	 BEGIN
		SET @ActualProjectID = NULL
		SELECT 
			@BillingMethodID = BillingMethodID
		FROM 
			AccountRate
		WHERE
			CompanyID = @CompanyID
			AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))
		IF (@BillingMethodID IS NULL)
			SET @ActualProjectID = NULL
		ELSE
			SET @ActualProjectID = (-1*ISNULL(@AccountID, 0))
	 END	 
	RETURN @ActualProjectID	
END
GO
PRINT N'Creating [dbo].[fxGetProjectBillingMethod]...';


GO
CREATE FUNCTION dbo.fxGetProjectBillingMethod 
(
		@CompanyID int,
		@ProjectID int
)  
RETURNS 
	nvarchar(50)
AS  
BEGIN 
	
	DECLARE @BillingMethod nvarchar(50),
		@ParentId int,
		@BillingMethodID int,
		@AccountID int

	SET @BillingMethod = 'No'
	SET @BillingMethodID = NULL
	
	SELECT 
		@ParentId = ParentId, 
		@BillingMethodID = BillingMethodID,
		@AccountID = AccountID
	FROM 
		Project 
	WHERE 
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID


	WHILE (NOT @ParentId IS NULL) AND (@BillingMethodID IS NULL)
	 BEGIN
		SELECT 
			@ParentId = ParentId, 
			@BillingMethodID = BillingMethodID 
		FROM 
			Project 
		WHERE 
			CompanyID = @CompanyID
			AND
			ProjectID = @ParentId
	 END

	IF @BillingMethodID IS NULL
	 BEGIN
		SELECT 
			@BillingMethodID = BillingMethodID
		FROM 
			AccountRate
		WHERE
			CompanyID = @CompanyID
			AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))
	 END

	IF @BillingMethodID IS NOT NULL
	 BEGIN
		SELECT 
			@BillingMethod = [Name]
		FROM 
			BillingMethod
		WHERE
			BillingMethodID = @BillingMethodID
	 END

	RETURN @BillingMethod
	
END
GO
PRINT N'Creating [dbo].[fxGetProjectBlendedRate]...';


GO
CREATE FUNCTION [dbo].[fxGetProjectBlendedRate] 
(
		@DId int,
		@ProjectID int
)  
RETURNS 
	money
AS  
BEGIN 
	
	DECLARE @BillMethodID int
	DECLARE @AccountID int
	DECLARE @ParentID int
	DECLARE @BlendedRate money

	SELECT @BillMethodID = Project.BillingMethodID, @BlendedRate = Project.HourlyBlendedRate, @ParentID = Project.ParentID, @AccountID = Project.AccountID
	FROM Project 
	WHERE 
	Project.CompanyID = @DId
	AND
	Project.ProjectID = @ProjectID

	
	IF (@BillMethodID IS NULL)
	BEGIN		
		WHILE ((@ParentID IS NOT NULL) AND (@BillMethodID IS NULL))
		BEGIN
			SELECT @BillMethodID = Project.BillingMethodID, @BlendedRate = Project.HourlyBlendedRate, @ParentID = Project.ParentID, @AccountID = Project.AccountID
			FROM Project 
			WHERE Project.CompanyID = @DId AND Project.ProjectID = @ParentID
		END
		
		IF (@BillMethodID IS NULL)
		BEGIN
			SELECT @BillMethodID = AccountRate.BillingMethodID, @BlendedRate = AccountRate.HourlyBlendedRate
			FROM AccountRate 
			WHERE AccountRate.CompanyID = @DId 
				AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))
		END
	END
	IF ((NOT (@BillMethodID = 3)) OR (@BillMethodID IS NULL)) SET @BlendedRate = NULL
	IF (@BlendedRate IS NULL) SET @BlendedRate = 0	

	RETURN @BlendedRate
	
END
GO
PRINT N'Creating [dbo].[fxGetProjectFlatFee]...';


GO
CREATE FUNCTION [dbo].[fxGetProjectFlatFee] 
(
		@DId int,
		@ProjectID int
)  
RETURNS 
	money
AS  
BEGIN 
	
	DECLARE @BillMethodID int
	DECLARE @AccountID int
	DECLARE @ParentID int
	DECLARE @FlatFee money

	SELECT @BillMethodID = Project.BillingMethodID, @FlatFee = Project.FlatFee, @ParentID = Project.ParentID, @AccountID = Project.AccountID
	FROM Project 
	WHERE 
		Project.CompanyID = @DId
		AND
		Project.ProjectID = @ProjectID

	
	IF (@BillMethodID IS NULL)
	BEGIN		
		WHILE ((@ParentID IS NOT NULL) AND (@BillMethodID IS NULL))
		BEGIN
			SELECT @BillMethodID = Project.BillingMethodID, @FlatFee = Project.FlatFee, @ParentID = Project.ParentID, @AccountID = Project.AccountID
			FROM Project 
			WHERE Project.CompanyID = @DId
				AND Project.ProjectID = @ParentID
		END
		
		IF (@BillMethodID IS NULL)
		BEGIN
			SELECT @BillMethodID = AccountRate.BillingMethodID, @FlatFee = AccountRate.FlatFee
			FROM AccountRate 
			WHERE AccountRate.CompanyID = @DId 
				AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))
		END
	END
	IF ((NOT (@BillMethodID = 1)) OR (@BillMethodID IS NULL)) SET @FlatFee = NULL
	IF @FlatFee IS NULL
		SET @FlatFee = 0
	RETURN @FlatFee
	
END
GO
PRINT N'Creating [dbo].[fxGetProjectHourlyRate]...';


GO
CREATE FUNCTION dbo.fxGetProjectHourlyRate 
(
		@CompanyID int,
		@ProjectID int,
		@TaskTypeID int,
		@RatePlanID int = NULL
)  
RETURNS 
	smallmoney
AS  
BEGIN 
	
	DECLARE @HourlyRate smallmoney,
		@ParentId int,
		@AccountID int,
		@IsBillable bit

	SET @HourlyRate = NULL
	SET @IsBillable = 0
	
	SELECT 
		@ParentId = ParentId,
		@AccountID = AccountID
	FROM 
		Project 
	WHERE 
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID


	WHILE (NOT @ParentId IS NULL) AND (@HourlyRate IS NULL)
	 BEGIN
		SELECT TOP 1
			@ParentId = Project.ParentId, 
			@HourlyRate = ProjectTaskTypeRate.HourlyRate 
		FROM 
			Project 
		LEFT OUTER JOIN
            ProjectTaskTypeRate ON Project.ProjectID = ProjectTaskTypeRate.ProjectID
			AND
			ProjectTaskTypeRate.TaskTypeID = @TaskTypeID
		WHERE 
			Project.CompanyID = @CompanyID
			AND
			Project.ProjectID = @ParentId

		IF @HourlyRate = -1
		 BEGIN
			SET @IsBillable = 1
			SET @HourlyRate = NULL
		 END
	
		IF @IsBillable = 1 AND @HourlyRate = 0
		 BEGIN
			SET @HourlyRate = NULL
		 END
	 END

	IF @HourlyRate IS NULL
	 BEGIN
		SELECT     
			@HourlyRate = CASE  
			WHEN (AccountTaskTypeRate.HourlyRate IS NULL 
					OR (AccountTaskTypeRate.HourlyRate = 0 AND @IsBillable = 1)
					OR AccountTaskTypeRate.HourlyRate = -1)
				THEN CASE  
						WHEN (RatePlanRates.HourlyRate IS NULL 
							OR (RatePlanRates.HourlyRate = 0 AND @IsBillable = 1)
							OR RatePlanRates.HourlyRate = -1)
							THEN ISNULL(TaskType.HourlyRate , 0)
						ELSE RatePlanRates.HourlyRate END
			ELSE AccountTaskTypeRate.HourlyRate END
		FROM         
			TaskType 
		LEFT OUTER JOIN
			RatePlanRates ON TaskType.TaskTypeId = RatePlanRates.TaskTypeId 
			AND TaskType.DepartmentID = RatePlanRates.DepartmentId 
			AND RatePlanRates.RatePlanId = @RatePlanID
			AND RatePlanRates.DepartmentId = @CompanyID
		LEFT OUTER JOIN
			AccountTaskTypeRate ON TaskType.TaskTypeID = AccountTaskTypeRate.TaskTypeID 
			AND (AccountTaskTypeRate.AccountID = @AccountID OR (AccountTaskTypeRate.AccountID IS NULL AND @AccountID IS NULL))
			AND TaskType.DepartmentID = AccountTaskTypeRate.CompanyID
		WHERE
			TaskType.TaskTypeID = @TaskTypeID
			AND
			TaskType.DepartmentID = @CompanyID
	 END

	

	RETURN @HourlyRate
	
END
GO
PRINT N'Creating [dbo].[fxGetProjectLoggedHours]...';


GO
CREATE FUNCTION dbo.fxGetProjectLoggedHours 
(
		@DId int,
		@AccountID int,
		@ProjectID int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime,
		@TechID int = NULL
)  
RETURNS 
	decimal(14, 2)
AS  
BEGIN 	
	DECLARE @TotalHours decimal(14, 2)
	DECLARE @AccountHours decimal(14, 2)
	DECLARE @ProjectHours decimal(14, 2)
	SET @TotalHours = NULL
	SET @AccountHours = NULL
	SET @ProjectHours = NULL

	SELECT
		@AccountHours = SUM(tt.Hours)			
	FROM 
		TicketTime tt
			LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id				
	WHERE 
		tt.DepartmentId = @DId 
		AND tt.InvoiceId IS NULL
		AND tt.Deleted = 0
		AND tt.Date >= @BeginDate
		AND tt.Date <= @EndDate
		AND ISNULL(t.intAcctId, -1) = ISNULL(@AccountID, -1)
		AND
		CASE 
			WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, t.ProjectID) > 0)
			THEN 
				CASE 
					WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, t.ProjectID) = @ProjectID)
					THEN 1 ELSE 0
				END
			ELSE 
				CASE
					WHEN @ProjectID IS NULL
					THEN 1 ELSE 0
				END
		END = 1
		AND (tt.UserId = @TechID OR @TechID IS NULL)

	SELECT		
		@ProjectHours = SUM(pt.Hours)
	FROM 
		ProjectTime pt
			LEFT OUTER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID				
	WHERE 
		pt.DepartmentId = @DId
		AND pt.InvoiceId IS NULL
		AND pt.Deleted = 0
		AND pt.Date >= @BeginDate
		AND pt.Date <= @EndDate		
		AND
		ISNULL(ISNULL(p.AccountID, pt.AccountID), -1) = ISNULL(@AccountID, -1)
		AND
		CASE 
			WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, p.ProjectID) > 0)
			THEN 
				CASE 
					WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, p.ProjectID) = @ProjectID)
					THEN 1 ELSE 0
				END
			ELSE CASE
					WHEN @ProjectID IS NULL
					THEN 1 ELSE 0
				END
		END = 1
		AND (pt.UserId = @TechID OR @TechID IS NULL)


	SET @TotalHours = ISNULL(@AccountHours, 0) + ISNUll(@ProjectHours, 0)
	RETURN @TotalHours
	
END
GO
PRINT N'Creating [dbo].[fxGetProjectRatePlan]...';


GO
CREATE FUNCTION [dbo].[fxGetProjectRatePlan] 
(
		@CompanyID int,
		@ProjectID int
)  
RETURNS 
	int
AS  
BEGIN 
	
	DECLARE @ParentId int,
		@BillingMethodID int,
		@RatePlanID int,
		@AccountID int

	
	SET @BillingMethodID = NULL
	SET @RatePlanID = NULL
	
	SELECT 
		@ParentId = ParentId, 
		@BillingMethodID = BillingMethodID,
		@RatePlanID = RatePlanID,
		@AccountID = AccountID
	FROM 
		Project 
	WHERE 
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID


	WHILE (NOT @ParentId IS NULL) AND (@BillingMethodID IS NULL)
	 BEGIN
		SELECT 
			@ParentId = ParentId, 
			@BillingMethodID = BillingMethodID,
			@RatePlanID = RatePlanID
		FROM 
			Project 
		WHERE 
			CompanyID = @CompanyID
			AND
			ProjectID = @ParentId
	 END

	IF @BillingMethodID IS NULL
	 BEGIN
		SELECT 
			@BillingMethodID = BillingMethodID,
			@RatePlanID = RatePlanID
		FROM 
			AccountRate
		WHERE
			AccountRate.CompanyID = @CompanyID			
			AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))
	 END

	IF @BillingMethodID IS NULL
	 BEGIN
		SET @RatePlanID = NULL
	 END

	RETURN @RatePlanID
	
END
GO
PRINT N'Creating [dbo].[fxGetProjectTimeLogsCount]...';


GO
CREATE FUNCTION dbo.fxGetProjectTimeLogsCount 
(
		@DId int,
		@AccountID int,
		@ProjectID int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime,
		@TechID int = NULL
)  
RETURNS 
	int
AS  
BEGIN 	
	DECLARE @TotalCount int
	DECLARE @AccountCount int
	DECLARE @ProjectCount int
	SET @TotalCount = NULL
	SET @AccountCount = NULL
	SET @ProjectCount = NULL

	SELECT
		@AccountCount = COUNT(tt.Id)			
	FROM 
		TicketTime tt
			LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id				
	WHERE 
		tt.DepartmentId = @DId 
		AND tt.InvoiceId IS NULL
		AND tt.Deleted = 0
		AND tt.Date >= @BeginDate
		AND tt.Date <= @EndDate
		AND ISNULL(t.intAcctId, -1) = ISNULL(@AccountID, -1)
		AND
		CASE 
			WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, t.ProjectID) > 0)
			THEN 
				CASE 
					WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, t.ProjectID) = @ProjectID)
					THEN 1 ELSE 1
				END
			ELSE 
				CASE
					WHEN @ProjectID IS NULL
					THEN 1 ELSE 0
				END
		END = 1
		AND (tt.UserId = @TechID OR @TechID IS NULL)

	SELECT		
		@ProjectCount = COUNT(pt.Id)
	FROM 
		ProjectTime pt
			LEFT OUTER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID				
	WHERE 
		pt.DepartmentId = @DId
		AND pt.InvoiceId IS NULL
		AND pt.Deleted = 0
		AND pt.Date >= @BeginDate
		AND pt.Date <= @EndDate		
		AND
		ISNULL(ISNULL(p.AccountID, pt.AccountID), -1) = ISNULL(@AccountID, -1)
		AND
		CASE 
			WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, p.ProjectID) > 0)
			THEN 
				CASE 
					WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, p.ProjectID) = @ProjectID)
					THEN 1 ELSE 0
				END
			ELSE CASE
					WHEN @ProjectID IS NULL
					THEN 1 ELSE 0
				END
		END = 1
		AND (pt.UserId = @TechID OR @TechID IS NULL)


	SET @TotalCount = ISNULL(@AccountCount, 0) + ISNUll(@ProjectCount, 0)
	RETURN @TotalCount
	
END
GO
PRINT N'Creating [dbo].[fxGetQBCustomerName]...';


GO
CREATE FUNCTION [dbo].[fxGetQBCustomerName] 
	(
		@CompanyID int,
		@AccountID int,
		@ProjectID int
	)  
RETURNS 
	nvarchar(1000)
AS  
BEGIN 
	
	DECLARE @ProjectName nvarchar(max),
		@ParentId int

	SET @ProjectName = ''

	IF (@ProjectID IS NOT NULL)
	BEGIN	
		SELECT 
			@ParentId=ParentId, 
			@ProjectName=[Name]
		FROM 
			Project 
		WHERE 
			CompanyID = @CompanyID
			AND
			ProjectID = @ProjectID


		WHILE NOT @ParentId IS NULL
		 BEGIN
			SELECT 
				@ParentId=ParentId, 
				@ProjectName=[Name]+':'+@ProjectName 
			FROM 
				Project 
			WHERE 
				CompanyID = @CompanyID
				AND
				ProjectID=@ParentId
		 END
	END
	
	IF ( NOT @ProjectName = '') SET @ProjectName = ':' + @ProjectName
	IF (@AccountID IS NULL)
	BEGIN	
		DECLARE @InternalQBAccount nvarchar(max)
		SELECT @InternalQBAccount=dbo.fxGetConfigValueStr(@CompanyID, 'CfgInternalQBAccount')
		SET @ProjectName = (SELECT CASE WHEN @InternalQBAccount = '' THEN company_name  + ' (Internal)' ELSE @InternalQBAccount END FROM tbl_company WHERE company_id = @CompanyID) + @ProjectName
	END	
	ELSE SET @ProjectName = (SELECT vchName FROM Accounts WHERE DId = @CompanyID AND Id = @AccountID) + '' + @ProjectName
	
	RETURN @ProjectName 

END
GO
PRINT N'Creating [dbo].[fxGetRealWorkTime]...';


GO
CREATE FUNCTION dbo.fxGetRealWorkTime
(
		@DepartmentId int,
		@StartDate datetime,
		@EndDate datetime,
		@WorkHourStart int,
		@WorkMinStart int,
		@WorkHourEnd int,
		@WorkMinEnd int,
		@WorkDayLength int,
		@WorkMode int /* 1: [@start_date; @start_middle_date] 2: [@end_middle_date; @end_date] 3: [@start_date; @end_date] 4: holidays*/
	)
RETURNS int
AS
Begin
	
	Declare @TotalWorkLength int
	Select @TotalWorkLength=0

	Declare @TotalStart int
	Declare @TotalEnd int

	Select @TotalStart=0
	Select @TotalEnd=0

	Declare @DeltaMin int
	Select @DeltaMin=0

	/* Work days */
	Declare @DBWDays char(7)
	Declare @TotalDaysPerWeek int

	Select @TotalDaysPerWeek=7
	Select @DBWDays='1111100'

	Select @DBWDays = I.WorkingDays 
	from tbl_company C 
		inner join Mc_Instance I on I.InstanceId = C.company_guid 
	where C.company_id=@DepartmentId

	If @@RowCount=0 
		Select @DBWDays='1111100'
		
	IF LEN(@DBWDays) = 7
	BEGIN
		SET @DBWDays = SUBSTRING(@DBWDays, 7, 1) + SUBSTRING(@DBWDays, 1, 6)
	END

	If @EndDate>@StartDate 
	Begin
		Declare @BeginDate datetime	
		Declare @FinishDate datetime	
		Declare @CurrentBeginDate datetime	

		Select @BeginDate=@StartDate
		Select @FinishDate=@EndDate

		Select @BeginDate=DateAdd(hh, -DATEPART(hh, @StartDate), @BeginDate)
		Select @BeginDate=DateAdd(mi, -DATEPART(mi, @StartDate), @BeginDate)
		Select @BeginDate=DateAdd(ss, -DATEPART(ss, @StartDate), @BeginDate)
		Select @BeginDate=DateAdd(ms, -DATEPART(ms, @StartDate), @BeginDate)
		Select @CurrentBeginDate=@BeginDate
		Select @BeginDate=DateAdd(dd, 1, @BeginDate)

		Select @FinishDate=DateAdd(hh, -DATEPART(hh, @EndDate), @FinishDate)
		Select @FinishDate=DateAdd(mi, -DATEPART(mi, @EndDate), @FinishDate)
		Select @FinishDate=DateAdd(ss, -DATEPART(ss, @EndDate), @FinishDate)
		Select @FinishDate=DateAdd(ms, -DATEPART(ms, @EndDate), @FinishDate)

		Select @DeltaMin=DateDiff(mi, @StartDate, @EndDate)

		Declare @CountDays int
		Select @CountDays=DateDiff(dd, @StartDate, @EndDate)
	
		Declare @DatePart int

		If @WorkMode=4 
		Begin 
			Select @DatePart=(DateDiff(dd, '19000101', @CurrentBeginDate)%7)+1   -- Ignore @@DateFirst
			
			If @DatePart>0 And @DatePart<=@TotalDaysPerWeek 
			Begin
				IF SUBSTRING(@DBWDays, DATEPART(weekday, @CurrentBeginDate), 1) <> '0'
				Begin 
					Declare @StartFirstDay datetime
					Declare @EndFirstDay datetime

					Select @StartFirstDay=@CurrentBeginDate
					Select @StartFirstDay=DateAdd(hh, @WorkHourStart, @StartFirstDay)
					Select @StartFirstDay=DateAdd(mi, @WorkMinStart, @StartFirstDay)
	
					Select @EndFirstDay=@CurrentBeginDate
					Select @EndFirstDay=DateAdd(hh, @WorkHourEnd, @EndFirstDay)
					Select @EndFirstDay=DateAdd(mi, @WorkMinEnd, @EndFirstDay)

					If @StartDate>=@StartFirstDay and @StartDate<=@EndFirstDay 
					Begin		
						If DateDiff(mi, @StartDate, @EndFirstDay)<@DeltaMin
							Select @TotalStart=@TotalStart+DateDiff(mi, @StartDate, @EndFirstDay)
						Else
							Select @TotalStart=@TotalStart+@DeltaMin
					End
					Else
					Begin 
						If @StartDate<@StartFirstDay 
						Begin
							If @EndDate>=@StartFirstDay AND @EndDate<=@EndFirstDay
								Select @TotalStart=@TotalStart+DateDiff(mi, @StartFirstDay, @EndDate)		
							Else
								If @EndDate>@EndFirstDay
									Select @TotalStart=@TotalStart+@WorkDayLength
						End
					End
				End
			End
		End

		if @WorkMode=4 
		Begin 
			If @CurrentBeginDate<>@FinishDate
			Begin
				Select @DatePart=(DateDiff(dd, '19000101', @FinishDate)%7)+1 -- Ignore @@DateFirst
			
				If @DatePart>0 And @DatePart<=@TotalDaysPerWeek 
				Begin
					IF SUBSTRING(@DBWDays, DATEPART(weekday, @FinishDate), 1) <> '0'
					Begin 
						Declare @StartLastDay datetime
						Declare @EndLastDay datetime

						Select @StartLastDay=@FinishDate
						Select @StartLastDay=DateAdd(hh, @WorkHourStart, @StartLastDay)
						Select @StartLastDay=DateAdd(mi, @WorkMinStart, @StartLastDay)

						Select @EndLastDay=@FinishDate
						Select @EndLastDay=DateAdd(hh, @WorkHourEnd, @EndLastDay)
						Select @EndLastDay=DateAdd(mi, @WorkMinEnd, @EndLastDay)
				
						If @EndDate>=@StartLastDay and @EndDate<=@EndLastDay 
						Begin		
							If DateDiff(mi, @StartLastDay, @EndDate)<@DeltaMin
								Select @TotalEnd=@TotalEnd+DateDiff(mi, @StartLastDay, @EndDate)
							Else
								Select @TotalEnd=@TotalEnd+@DeltaMin
						End
						Else
						Begin 
							If @EndDate>@EndLastDay 
							Begin
								If @StartDate>=@StartLastDay AND @StartDate<=@EndLastDay
									Select @TotalEnd=@TotalEnd+DateDiff(mi, @StartDate, @EndLastDay)		
								Else
									If @StartDate<@StartLastDay
										Select @TotalEnd=@TotalEnd+@WorkDayLength
							End
						End
					End
				End
			End
		End

		If @CountDays<=4*@TotalDaysPerWeek and @WorkMode<>4
		Begin	
			Declare @IndexDate datetime

			if @WorkMode=1 OR @WorkMode=3
				Select @IndexDate=@BeginDate
			Else
				Select @IndexDate=@CurrentBeginDate
/*
			SET @TotalWorkLength=(datediff(d, @IndexDate, @FinishDate)/7)*@WorkDayLength
			DECLARE @index int
			SET @index=Datepart(dw, @IndexDate)
			while @index<=@TotalDaysPerWeek
			begin
				If Cast(SubString(@DBWDays, @DatePart, 1) as int)<>0
					SET @TotalWorkLength=@TotalWorkLength+@WorkDayLength	
				SET @index=@index+1
			end
			SET @index=Datepart(dw, @FinishDate)
			while @index>=1
			begin
				If Cast(SubString(@DBWDays, @DatePart, 1) as int)<>0
					SET @TotalWorkLength=@TotalWorkLength+@WorkDayLength	
				SET @index=@index-1
			end
*/
			While @IndexDate<@FinishDate
			Begin
				Select @DatePart=(DateDiff(dd, '19000101', @IndexDate)%7)+1 -- Ignore @@DateFirst
			
				If @DatePart>0 And @DatePart<=@TotalDaysPerWeek 
				Begin
					IF SUBSTRING(@DBWDays, DATEPART(weekday, @IndexDate), 1) <> '0'
					Begin 
						Select @TotalWorkLength=@TotalWorkLength+@WorkDayLength
					End
				End
				
				Select @IndexDate=DateAdd(dd, 1, @IndexDate)
			End
		End	
	End

	If @WorkMode=4 
	Begin
		Declare @start_date smalldatetime, @end_date smalldatetime
		Declare @start_holiday datetime, @end_holiday datetime 

		Declare holiday_cursor cursor local for
		Select dtStart, dtStop from Holidays
		where 
		DId=@DepartmentId 
		and
		((dtStart>=@StartDate and dtStart<=@EndDate) or (dtStop>=@StartDate and dtStop<=@EndDate))		

		Open holiday_cursor

		Fetch next from holiday_cursor
		Into @start_date, @end_date

		While @@FETCH_STATUS = 0
		Begin
			If @end_date>@start_date
			Begin
				If @StartDate>=@start_date and @StartDate<=@end_date
					Select @TotalStart=0

				If  @EndDate>=@start_date and @EndDate<=@end_date
					Select @TotalEnd=0
	
				If @start_date>=@BeginDate and @start_date<=@FinishDate 
				Begin
					Select @start_holiday=@start_date
				
					If @end_date>@FinishDate 
						Select @end_holiday=@FinishDate 
					Else
						Select @end_holiday=@end_date
				End

				If @end_date>=@BeginDate and @end_date<=@FinishDate 
				Begin
					Select @end_holiday=@end_date
								
					If @start_date<@BeginDate 
						Select @start_holiday=@BeginDate
					Else
						Select @start_holiday=@start_date
				End

				If @start_date<@BeginDate and @end_date>@FinishDate 
				Begin
					Select @start_holiday=@BeginDate
					Select @end_holiday=@FinishDate
				End

				If @end_holiday>@start_holiday 
				Begin
					While @start_holiday<@end_holiday
					Begin
						Select @DatePart=(DateDiff(dd, '19000101', @start_holiday)%7)+1 -- Ignore @@DateFirst
			
						If @DatePart>0 And @DatePart<=@TotalDaysPerWeek 
						Begin
							IF SUBSTRING(@DBWDays, DATEPART(weekday, @start_holiday), 1) <> '0'
							Begin 
								Select @TotalWorkLength=@TotalWorkLength-@WorkDayLength
							End
						End
				
						Select @start_holiday=DateAdd(dd, 1, @start_holiday)
					End				
				End
			End 
	
			Fetch next from holiday_cursor
			Into @start_date, @end_date
		End

		Close holiday_cursor
		Deallocate holiday_cursor

		Select @TotalWorkLength=@TotalWorkLength+@TotalStart
		Select @TotalWorkLength=@TotalWorkLength+@TotalEnd
	End

	Return @TotalWorkLength
End
GO
PRINT N'Creating [dbo].[fxGetRetainerAmount]...';


GO
CREATE FUNCTION [dbo].[fxGetRetainerAmount] 
(
		@CompanyID int,
		@AccountID int,
		@ProjectID int,		
		@TechID int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime
)  
RETURNS 
	money
AS
BEGIN
	
	DECLARE @BillingMethodID int,			
			@NextDate smalldatetime,
			@Mode int
	
	SET	@BillingMethodID = NULL	
	SET @NextDate = NULL
	SET @Mode = NULL

	DECLARE @IsProjectLevel bit

	IF (@ProjectID IS NOT NULL)
	BEGIN
		SET @IsProjectLevel = 1
		SELECT			
			@BillingMethodID = BillingMethodID,
			@NextDate = FlatFeeNextDate,
			@Mode = FlatFeeMode	
		FROM 
			Project
		WHERE 
			CompanyID = @CompanyID
			AND
			ProjectID = @ProjectID
	END
	ELSE
	BEGIN
		SET @IsProjectLevel = 0
		SELECT 
			@BillingMethodID = BillingMethodID,
			@NextDate = FlatFeeNextDate,
			@Mode = FlatFeeMode	
		FROM 
			AccountRate
		WHERE
			CompanyID = @CompanyID
			AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))		
	END

	DECLARE	@Amount money
	DECLARE	@TechStart smalldatetime
	DECLARE	@TechEnd smalldatetime
	SET @Amount = NULL
	SET @TechStart = NULL
	SET @TechEnd = NULL	
	
	IF ((@BillingMethodID = 4) AND (@NextDate IS NOT NULL) AND (@Mode IS NOT NULL))
	BEGIN
		IF (@IsProjectLevel = 1)
		BEGIN
			SELECT @Amount = Amount, @TechStart = StartDate, @TechEnd = EndDate
			FROM
				ProjectRetainer pr					
			WHERE 
				pr.DId = @CompanyID
				AND 
				pr.ProjectId = @ProjectID
				AND
				pr.TechId = @TechID				
		END
		ELSE
		BEGIN
			SELECT @Amount = Amount, @TechStart = StartDate, @TechEnd = EndDate
			FROM
				AccountRetainer ar
			WHERE 
				ar.DId = @CompanyID
				AND				
				(ar.AccountId = @AccountID OR (ar.AccountId IS NULL AND @AccountID IS NULL))
				AND
				ar.TechId = @TechID				
		END
		IF (@Amount IS NOT NULL) AND (@TechStart IS NOT NULL)
		BEGIN			
			DECLARE @FirstDate smalldatetime, @LastDate smalldatetime
			IF (@TechStart > @BeginDate)
				SET @FirstDate = @TechStart
			ELSE
				SET @FirstDate = @BeginDate

			IF (@TechEnd IS NULL) SET @LastDate = @EndDate
			ELSE
				IF (@TechEnd > @EndDate)
					SET @LastDate = @EndDate
				ELSE
					SET @LastDate = @TechEnd
			IF (@FirstDate < @LastDate)
			BEGIN
				DECLARE @InvoicePeriod int, @PaidPeriod int
				SET @InvoicePeriod = DATEDIFF(dd, @BeginDate, @EndDate)+1
				SET @PaidPeriod = DATEDIFF(dd, @FirstDate, @LastDate)+1
				SET @Amount = (@PaidPeriod*@Amount)/@InvoicePeriod
			END
		END
		ELSE SET @Amount = -1
	END
	ELSE SET @Amount = -1


	RETURN @Amount
END
GO
PRINT N'Creating [dbo].[fxGetTicketMiscAmount]...';


GO
CREATE FUNCTION dbo.fxGetTicketMiscAmount 
(
		@TicketId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime
)  
RETURNS 
	money
AS
BEGIN
	
	DECLARE @Amount money
	
	SET @Amount = 0
	
	SELECT 
		@Amount = SUM(ISNULL(Amount, 0)) 
	FROM 
		TicketMiscCosts 
	WHERE 
		TicketId = @TicketId 
		AND 
		dtDate BETWEEN @BeginDate AND @EndDate 
	GROUP BY TicketId


	RETURN @Amount
END
GO
PRINT N'Creating [dbo].[fxGetTicketTicketPartsCost]...';


GO
CREATE FUNCTION dbo.fxGetTicketTicketPartsCost 
(
		@TicketId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime
)  
RETURNS 
	money
AS
BEGIN
	
	DECLARE @Cost money
	
	SET @Cost = 0
	
	SELECT 
		@Cost = SUM(ISNULL(Cost, 0) * ISNULL(Qty4Tkt, 0)) 
	FROM 
		tbl_part 
	WHERE 
		ticket_id = @TicketId 
		AND 
		ExpectedArrivalDate BETWEEN @BeginDate AND @EndDate 
	GROUP BY ticket_id


	RETURN @Cost
END
GO
PRINT N'Creating [dbo].[fxGetTicketTicketTravelCost]...';


GO
CREATE FUNCTION dbo.fxGetTicketTicketTravelCost 
(
		@TicketId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime
)  
RETURNS 
	money
AS
BEGIN
	
	DECLARE @Cost money
	
	SET @Cost = 0
	
	SELECT 
		@Cost = SUM(Total) 
	FROM 
		TicketTravelCosts 
	WHERE 
		TicketId = @TicketId 
		AND 
		Date BETWEEN @BeginDate AND @EndDate 
	GROUP BY TicketId


	RETURN @Cost
END
GO
PRINT N'Creating [dbo].[fxGetTimeLogHourlyRate]...';


GO
CREATE FUNCTION dbo.fxGetTimeLogHourlyRate 
(
		@DId int,
		@UId int,
		@TaskTypeID int
)  
RETURNS 
	smallmoney
AS
BEGIN
	
	DECLARE @HourlyRate smallmoney
	SET @HourlyRate = 0
	
	DECLARE @DefineCostCount int
	SET @DefineCostCount = 0

	SELECT
		@DefineCostCount = COUNT(Id)
	FROM
		TaskTypeTechCost
	WHERE
		DId = @DId
		AND
		TaskTypeId = @TaskTypeID
		AND
		TechId = @UId

	IF (@DefineCostCount > 0)
	BEGIN
		SELECT
			@HourlyRate = Cost
		FROM
			TaskTypeTechCost
		WHERE
			DId = @DId
			AND
			TaskTypeId = @TaskTypeID
			AND
			TechId = @UId
	END
	ELSE
	BEGIN
		SELECT
			@HourlyRate = EstimatedCost
		FROM
			TaskType
		WHERE
			DepartmentID = @DId
			AND
			TaskTypeId = @TaskTypeID
		IF (@HourlyRate IS NULL)
		BEGIN
			SELECT @HourlyRate = ISNULL(configHourlyRate, 0) FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@UId	
			IF @HourlyRate = 0
				SELECT @HourlyRate = CAST(dbo.fxGetConfigValueStr(@DId, 'configHourlyRate') AS smallmoney)
		END
	END	
		
	RETURN @HourlyRate
END
GO
PRINT N'Creating [dbo].[fxGetUserAccountName]...';


GO
CREATE FUNCTION dbo.fxGetUserAccountName
	(
		@DId int,
		@UId int,
		@FilterString nvarchar(2000)
	)
RETURNS nvarchar(max) 
AS
BEGIN
	DECLARE @AccountList nvarchar(max),
		@vchName nvarchar(170)
	DECLARE @FilerTable TABLE (id int NOT NULL)

	DECLARE @pos int,
		@textpos  int,
        @chunklen smallint,
        @str nvarchar(2000),
        @tmpstr nvarchar(2000),
        @leftover nvarchar(2000)
              
    SET @textpos = 1
      SET @leftover = ''
      WHILE @textpos <= datalength(@FilterString) / 2
      BEGIN
         SET @chunklen = 2000 - datalength(@leftover) / 2
         SET @tmpstr = ltrim(@leftover + substring(@FilterString, @textpos, @chunklen))
         SET @textpos = @textpos + @chunklen

         SET @pos = charindex(',', @tmpstr)
         WHILE @pos > 0
         BEGIN
            SET @str = substring(@tmpstr, 1, @pos - 1)
            INSERT @FilerTable (id) VALUES(convert(int, @str))
            SET @tmpstr = ltrim(substring(@tmpstr, @pos + 1, len(@tmpstr)))
            SET @pos = charindex(',', @tmpstr)
         END

         SET @leftover = @tmpstr
      END

      IF ltrim(rtrim(@leftover)) <> ''
         INSERT @FilerTable (id) VALUES(convert(int, @leftover))

	SET @AccountList = ''
	
	DECLARE UserAccounts_crsr CURSOR
   	FOR
   	SELECT     
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END AS vchName
	FROM         
		UserAccounts 
	LEFT OUTER JOIN
        Accounts ON UserAccounts.DepartmentId = Accounts.DId AND UserAccounts.AccountId = Accounts.Id
	INNER JOIN 
		tbl_company ON UserAccounts.DepartmentId = tbl_company.company_id
	WHERE   
		UserAccounts.DepartmentId = @DId
		AND  
		UserAccounts.UserId = @UId
		AND
		(Accounts.btActive = 1 OR UserAccounts.AccountId IS NULL)
		AND 
		(@FilterString = '' OR ISNULL(UserAccounts.AccountId, -1) IN (SELECT ID FROM @FilerTable))
	ORDER BY
		vchName
		

	OPEN UserAccounts_crsr

	FETCH NEXT FROM UserAccounts_crsr INTO @vchName
	   WHILE @@Fetch_Status = 0
	     BEGIN

		SET @AccountList = @AccountList + @vchName + '<br>'

		FETCH NEXT FROM UserAccounts_crsr INTO @vchName
	     END

	CLOSE UserAccounts_crsr
	DEALLOCATE UserAccounts_crsr

	IF LEN(@AccountList) > 0
	 BEGIN
		SET @AccountList = SUBSTRING(@AccountList,0,LEN(@AccountList)-3)
	 END


	RETURN @AccountList
END
GO
PRINT N'Creating [dbo].[fxGetUserFolderName]...';


GO
CREATE FUNCTION dbo.fxGetUserFolderName
	(
		@DId int,
		@FolderId int
	)
RETURNS nvarchar(max) 
AS
BEGIN
	DECLARE @FolderName nvarchar(max)
	DECLARE @ParentId int
		
	SELECT @ParentId=ParentId, @FolderName=vchName FROM Folders WHERE DId=@DId AND Id=@FolderId
	WHILE ((NOT @ParentId IS NULL) AND (@ParentId!=0))
		SELECT @ParentId=ParentId, @FolderName=vchName+' / '+@FolderName FROM Folders WHERE DId=@DId AND Id=@ParentId
	RETURN @FolderName
END
GO
PRINT N'Creating [dbo].[fxGetUserLocationName]...';


GO

CREATE FUNCTION dbo.fxGetUserLocationName
	(
		@DId int,
		@LocationId int
	)
RETURNS nvarchar(max) 
AS
BEGIN
	DECLARE @LocationName nvarchar(max)
	DECLARE @ParentId int
		
	SELECT @ParentId=ParentId, @LocationName=Name FROM Locations WHERE DId=@DId AND Id=@LocationId
	WHILE NOT @ParentId IS NULL
		SELECT @ParentId=ParentId, @LocationName=Name+' / '+@LocationName FROM Locations WHERE DId=@DId AND Id=@ParentId
	RETURN @LocationName
END
GO
PRINT N'Creating [dbo].[fxGetUserName]...';


GO
CREATE FUNCTION [dbo].[fxGetUserName] 
(
	@FirstName nvarchar(50),
	@LastName nvarchar(50),
	@Email nvarchar(50)
)
RETURNS nvarchar(105)
AS
BEGIN
	
	IF RTRIM(@FirstName) <> '' AND RTRIM(@LastName) <> ''
		RETURN @LastName + ', ' + @FirstName
	
	IF RTRIM(@FirstName) <> ''
		RETURN @FirstName
	
	IF RTRIM(@LastName) <> ''
		RETURN @LastName
	
	RETURN @Email

END
GO
PRINT N'Creating [dbo].[fxGetUserName2]...';


GO
CREATE FUNCTION [dbo].[fxGetUserName2]
(
	@FirstName nvarchar(50),
	@LastName nvarchar(50),
	@Email nvarchar(50)
)
RETURNS nvarchar(105)
AS
BEGIN
	
	IF RTRIM(@FirstName) <> '' AND RTRIM(@LastName) <> ''
		RETURN @FirstName + ' ' + @LastName
	
	IF RTRIM(@FirstName) <> ''
		RETURN @FirstName
	
	IF RTRIM(@LastName) <> ''
		RETURN @LastName
	
	RETURN @Email

END
GO
PRINT N'Creating [dbo].[fxIsChildClass]...';


GO
CREATE FUNCTION dbo.fxIsChildClass 
(
	@DepartmentId int,
	@ClassID int,
	@CurrClassID int
)  
RETURNS 
	bit
AS  
BEGIN 
	
	IF @ClassID <= 0 OR @CurrClassID <= 0
	BEGIN
		RETURN 0
	END
	
	DECLARE @ParentId int
	
	SET @ParentId = @ClassID

	WHILE NOT @ParentId IS NULL
	 BEGIN

		IF @ParentId = @CurrClassID
		 BEGIN
			RETURN 1
		 END
	
		SELECT 
			@ParentId=ParentId
		FROM 
			tbl_class 
		WHERE
			company_id = @DepartmentId
			AND
			id=@ParentId
	 END

	RETURN 0
	
END
GO
PRINT N'Creating [dbo].[fxIsChildProject]...';


GO
CREATE FUNCTION dbo.fxIsChildProject 
(
		@ProjectID int,
		@CurrProjectID int
)  
RETURNS 
	bit
AS  
BEGIN 
	
	DECLARE @ParentId int
	
	SET @ParentId = @ProjectID

	WHILE NOT @ParentId IS NULL
	 BEGIN

		IF @ParentId = @CurrProjectID
		 BEGIN
			RETURN 1
		 END
	
		SELECT 
			@ParentId=ParentId
		FROM 
			Project 
		WHERE 
			ProjectID=@ParentId
	 END

	RETURN 0
	
END
GO
PRINT N'Creating [dbo].[fxIsTechAssignedToProject]...';


GO
CREATE FUNCTION dbo.fxIsTechAssignedToProject 
(
		@CompanyID int,
		@AccountID int,
		@ProjectID int,
		@TechID int,
		@btCfgEnableSupportGroup bit
)  
RETURNS 
	bit
AS  
BEGIN 
	
	IF (@TechID = 0) RETURN 1
	DECLARE @ProjectAssignedTechs int
	SET @ProjectAssignedTechs = 0
	
	DECLARE @NProjectID int, @ParentId int, @NAccountID int, @ActiveStatus bit,
		@SupGroupId int		

	SET @ParentId = NULL
	SET @NAccountID = NULL
	SET @ActiveStatus = NULL
	SET @SupGroupId = NULL

	SELECT @NProjectID = ProjectID, @ParentId = ParentId, @NAccountID = AccountID, @SupGroupId = SupGroupId
	FROM Project 
	WHERE CompanyID = @CompanyID AND ProjectID = @ProjectID

	IF @btCfgEnableSupportGroup = 1 AND @SupGroupId IS NOT NULL
	 BEGIN
		SELECT 
			@ProjectAssignedTechs = COUNT([id])
		FROM 
			tbl_LoginCompanyJunc
		WHERE
			[company_id] = @CompanyID
			AND
			[SupGroupId] = @SupGroupId
			AND
			[id] = @TechID
		
		IF (@ProjectAssignedTechs > 0)
		 BEGIN
			RETURN 1
		 END
	 END
	
	SELECT @ProjectAssignedTechs = COUNT(ISNULL(ProjectTech.TechID, 0))
	FROM ProjectTech
	WHERE ProjectTech.CompanyID = @CompanyID AND ProjectTech.ProjectID = @ProjectID

	IF (@ProjectAssignedTechs > 0)
	BEGIN
		SET @ProjectAssignedTechs = 0
		SELECT @ProjectAssignedTechs = COUNT(ISNULL(ProjectTech.TechID, 0))
		FROM ProjectTech
		WHERE ProjectTech.CompanyID = @CompanyID AND ProjectTech.ProjectID = @ProjectID AND (ProjectTech.TechID = @TechID OR ProjectTech.TechID IS NULL)
		IF (@ProjectAssignedTechs > 0) RETURN 1 ELSE RETURN 0
	END

	WHILE (@ParentId IS NOT NULL)
	BEGIN

		SELECT @NProjectID = ProjectID, @ParentId = ParentId, @NAccountID = AccountID, @ActiveStatus = Active
		FROM Project 
		WHERE CompanyID = @CompanyID AND ProjectID = @ParentId		

		IF (@ActiveStatus = 1)
		BEGIN
			SET @ProjectAssignedTechs = 0
			SELECT @ProjectAssignedTechs = COUNT(ISNULL(ProjectTech.TechID, 0))
			FROM ProjectTech
			WHERE ProjectTech.CompanyID = @CompanyID AND ProjectTech.ProjectID = @NProjectID
			IF (@ProjectAssignedTechs > 0)
			BEGIN
				SET @ProjectAssignedTechs = 0
				SELECT @ProjectAssignedTechs = COUNT(ISNULL(ProjectTech.TechID, 0))
				FROM ProjectTech
				WHERE ProjectTech.CompanyID = @CompanyID AND ProjectTech.ProjectID = @NProjectID AND (ProjectTech.TechID = @TechID OR ProjectTech.TechID IS NULL)
				IF (@ProjectAssignedTechs > 0) RETURN 1 ELSE RETURN 0
			END
		END
	END
	
	
	SELECT @ProjectAssignedTechs = COUNT(ISNULL(UserProjects.UserId, 0))
	FROM UserProjects
	WHERE 
		UserProjects.DepartmentId = @CompanyID 
		AND 
		UserProjects.ProjectID = @ProjectID
		AND
		UserProjects.UserId = @TechID
		
	IF (@ProjectAssignedTechs > 0) 
	 BEGIN
		RETURN 1
	 END

	SELECT @ActiveStatus = CASE WHEN @NAccountID IS NULL THEN 1 ELSE Accounts.btActive END
	FROM Accounts
	WHERE (Accounts.DId = @CompanyID) AND (@NAccountID = Accounts.Id OR @NAccountID IS NULL)

	IF (@ActiveStatus = 1)
	BEGIN
		SET @ProjectAssignedTechs = 0
		SELECT @ProjectAssignedTechs = COUNT(ISNULL(AccountTech.TechID, 0))
		FROM AccountTech
		WHERE AccountTech.CompanyID = @CompanyID AND (AccountTech.AccountID = @NAccountID OR (@NAccountID IS NULL AND AccountTech.AccountID IS NULL))
		IF (@ProjectAssignedTechs > 0)
		BEGIN
			SET @ProjectAssignedTechs = 0
			SELECT @ProjectAssignedTechs = COUNT(ISNULL(AccountTech.TechID, 0))
			FROM AccountTech
			WHERE AccountTech.CompanyID = @CompanyID AND (AccountTech.AccountID = @NAccountID OR (@NAccountID IS NULL AND AccountTech.AccountID IS NULL)) AND (AccountTech.TechID = @TechID OR AccountTech.TechID IS NULL)
			IF (@ProjectAssignedTechs > 0) RETURN 1 ELSE RETURN 0
		END
		
		SET @ProjectAssignedTechs = 0
		SELECT @ProjectAssignedTechs = COUNT(ISNULL(UserAccounts.UserId, 0))
		FROM 
			UserAccounts
		INNER JOIN 
			tbl_LoginCompanyJunc lj ON lj.company_id = UserAccounts.DepartmentId AND lj.Id = UserAccounts.UserId
		INNER JOIN 
			tbl_UserType ut ON ut.id=lj.UserType_id
		WHERE 
			UserAccounts.DepartmentId = @CompanyID 
			AND 
			(UserAccounts.AccountID = @NAccountID OR (@NAccountID IS NULL AND UserAccounts.AccountID IS NULL))
			AND
			UserAccounts.UserId = @TechID
			AND
			lj.btUserInactive = 0
			AND
			ut.Name IN ('Technician', 'Administrator')

		IF (@ProjectAssignedTechs > 0) RETURN 1 ELSE RETURN 0

	END
	
	RETURN 0
	
END
GO
PRINT N'Creating [dbo].[fxRecurseFolders]...';


GO
CREATE FUNCTION dbo.fxRecurseFolders
	(
		@DId int,
		@FolderId int,
		@tintCount tinyint,
		@vchFolderPath nvarchar(175)
	)
RETURNS nvarchar(175) 
AS
	BEGIN
		
		DECLARE @ParentId int
		DECLARE @vchName nvarchar(50)
		SELECT @ParentId=ParentId, @vchName=vchName FROM Folders WHERE DId=@DId AND id=@FolderId
		IF @ParentId = 0 
			BEGIN
				SET @vchFolderPath=@vchName
			END
		ELSE
			BEGIN
				IF @tintCount>=3
					BEGIN
						SET @vchFolderPath='...'+@vchFolderPath
					END
				ELSE
					BEGIN
						SET @tintCount=@tintCount+1
						SET @vchFolderPath=dbo.fxRecurseFolders(@DId, @ParentId, @tintCount, @vchFolderPath)+' > '+@vchName
					END
			END

		
		
		RETURN @vchFolderPath
	END
GO
PRINT N'Creating [dbo].[fxSelectClosureNote]...';


GO
CREATE FUNCTION [dbo].[fxSelectClosureNote]
	(
		@DId int,
		@TId int
	)
RETURNS nvarchar(max)
AS
	BEGIN
		
	RETURN (SELECT TOP 1 vchNote FROM TicketLogs WHERE DId=@DId AND TId=@TId ORDER BY dtDate DESC, Id DESC)
	END
GO
PRINT N'Creating [dbo].[fxSelectInitialPost]...';


GO


CREATE FUNCTION dbo.fxSelectInitialPost
	(
		@DId int,
		@TId int
	)
RETURNS nvarchar(max)
AS
	BEGIN
		
	RETURN (SELECT TOP 1 vchNote FROM TicketLogs WHERE DId=@DId AND TId=@TId AND vchType='Initial Post')
	END
GO
PRINT N'Creating [dbo].[fxShowClass]...';


GO
CREATE FUNCTION dbo.fxShowClass 
(
	@DepartmentId int,
	@ClassID int,
	@ClassInactive bit,
	@btInactive bit
)  
RETURNS 
	bit
AS  
BEGIN 
	
	IF @btInactive IS NULL 
	BEGIN
		RETURN 1
	END
	
	IF @ClassInactive = @btInactive
	 BEGIN
		RETURN 1
	 END 
	
	IF @btInactive = 0
	 BEGIN
		IF @ClassInactive = 0
			RETURN 1
		ELSE
			RETURN 0
	 END
	
	DECLARE @ClassTree TABLE(
  	ClassID int,
  	ParentID int,
	ClassInactive bit,
	lvl int
	)
	DECLARE @lvl int
	SET @lvl = 0

	INSERT
		@ClassTree
	SELECT
		Id, 
		ParentID, 
		btInactive, 
		@lvl
	FROM 
		tbl_class
	WHERE
		Id = @ClassID
		
		
	DECLARE @insertCount int 
	SET @insertCount = 1
	WHILE @insertCount > 0
	  BEGIN
		SET @lvl = @lvl + 1
		INSERT
			@ClassTree
		SELECT
			tbl_class.Id,
			tbl_class.ParentID,
			tbl_class.btInactive, 
			@lvl
		FROM	
			@ClassTree tree
		INNER JOIN 
			tbl_class ON tree.ClassID = tbl_class.ParentID
		WHERE 
			tree.lvl = @lvl - 1

		SET @insertCount = @@rowcount

	  END

	DECLARE @CountClass int
	SET @CountClass = 0
	
	SELECT @CountClass = COUNT(ClassID) FROM @ClassTree WHERE ClassInactive = @btInactive

	IF @CountClass > 0
	 BEGIN
		RETURN 1
	 END

	RETURN 0
	
END
GO
PRINT N'Creating [dbo].[fxGetConfigValueBit]...';


GO
CREATE FUNCTION [dbo].[fxGetConfigValueBit]
(
	@DId int,
	@ValueName nvarchar(255)
)
RETURNS
	bit
AS
BEGIN

	DECLARE @ResultValue bit
	
	SELECT @ResultValue =  CAST(dbo.fxGetConfigValueStr(@DId, @ValueName) as bit) 

	RETURN @ResultValue
	
END
GO
PRINT N'Creating [dbo].[fxGetHolidayMinutes]...';


GO
CREATE FUNCTION [dbo].[fxGetHolidayMinutes] 
(
	@DepartmentId int,
	@StartDate datetime,
	@EndDate datetime,
	@WorkDays char(7),
	@StartBusinnessTime int,
	@EndBusinnessTime int
)
RETURNS int
AS
BEGIN
	DECLARE @ReturnValue int
	SELECT @ReturnValue = ISNULL(SUM(
		CASE WHEN (dtStart BETWEEN @StartDate AND @EndDate) AND (dtStop BETWEEN @StartDate AND @EndDate) THEN DATEDIFF(mi,dtStart,dtStop) - dbo.fxGetInoperationalMinutes(dtStart,dtStop, @WorkDays, @StartBusinnessTime, @EndBusinnessTime)
		WHEN (dtStart BETWEEN @StartDate AND @EndDate) THEN DATEDIFF(mi,dtStart,@EndDate) - dbo.fxGetInoperationalMinutes(dtStart,@EndDate, @WorkDays, @StartBusinnessTime, @EndBusinnessTime)
		WHEN (dtStop BETWEEN @StartDate AND @EndDate) THEN DATEDIFF(mi,@StartDate,dtStop) - dbo.fxGetInoperationalMinutes(@StartDate,dtStop, @WorkDays, @StartBusinnessTime, @EndBusinnessTime)
		ELSE 0 END),0)
		FROM Holidays
		WHERE DId = @DepartmentId AND ((dtStart BETWEEN @StartDate AND @EndDate) OR (dtStop BETWEEN @StartDate AND @EndDate))
	RETURN @ReturnValue
END
GO
PRINT N'Creating [dbo].[fxGetIsTimeLogBillable]...';


GO
CREATE FUNCTION dbo.fxGetIsTimeLogBillable 
(
		@CompanyID int,
		@AccountID int,
		@ProjectID int,
		@TaskTypeID int,
		@TechID int,
		@ReturnFlatFee bit = 0,
		@AllowNulBillingMethod bit = 0,
		@ReturnRetainers bit = 0
)  
RETURNS 
	bit
AS
BEGIN
	IF @TaskTypeID IS NULL RETURN 0
	
	DECLARE @EntityID int,
			@IsProjectLevel bit,
			@BillingMethodID int,
			@pProjectID int,
			@RatePlanID int,
			@Active bit

	SET @EntityID = dbo.fxGetParentBMProject(@CompanyID, @AccountID, @ProjectID)
	
	IF (@EntityID > 0)
	BEGIN
		SET @pProjectID = @EntityID
		SET @IsProjectLevel = 1
	END
	ELSE
		IF (@EntityID <= 0)
			SET @IsProjectLevel = 0		
		ELSE 
			BEGIN
				IF @AllowNulBillingMethod = 0
					RETURN 0
			END
	
	SET	@BillingMethodID = NULL	
	SET @RatePlanID = NULL

	IF (@IsProjectLevel = 1)
	BEGIN
		SELECT
			@BillingMethodID = Project.BillingMethodID,
			@RatePlanID = Project.RatePlanID,
			@Active = CASE WHEN ISNULL(Accounts.btActive, 1) = 0 THEN 0 ELSE Project.Active END
		FROM 
			Project
			LEFT OUTER JOIN Accounts ON Accounts.DId = @CompanyID AND Project.AccountID = Accounts.Id
		WHERE 
			Project.CompanyID = @CompanyID
			AND
			Project.ProjectID = @pProjectID
	END
	ELSE
	BEGIN
		SELECT 
			@BillingMethodID = AccountRate.BillingMethodID,
			@RatePlanID = AccountRate.RatePlanID,
			@Active = ISNULL(Accounts.btActive, 1)
		FROM 
			AccountRate
		LEFT OUTER JOIN
            Accounts ON AccountRate.CompanyID = Accounts.DId AND AccountRate.AccountID = Accounts.Id
		WHERE
			AccountRate.CompanyID = @CompanyID
			AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))
	END
	
	IF @Active = 0 OR @BillingMethodID = 5
		RETURN 0

	IF @BillingMethodID IS NULL AND @AllowNulBillingMethod = 1
		RETURN 1
		
	IF ((@BillingMethodID = 1 AND @ReturnFlatFee = 0) OR @BillingMethodID IS NULL)
		RETURN 0

	IF (@BillingMethodID = 4) -- check for retainer
	BEGIN
		DECLARE @ARId int, @Amount money				
		IF (@IsProjectLevel = 1)
		BEGIN
			SELECT @ARId = Id, @Amount = Amount
			FROM
				ProjectRetainer pr					
			WHERE 
				pr.DId = @CompanyID
				AND 
				pr.ProjectId = @pProjectID
				AND
				pr.TechId = @TechID				
		END
		ELSE
		BEGIN
			SELECT @ARId = Id, @Amount = Amount
			FROM
				AccountRetainer ar
			WHERE 
				ar.DId = @CompanyID
				AND 
				ISNULL(ar.AccountId, -1) = ISNULL(@AccountID, -1)
				AND
				ar.TechId = @TechID				
		END
		IF (@ARId IS NOT NULL) AND (@Amount IS NOT NULL)
		 BEGIN
		  IF @ReturnRetainers = 0
			RETURN 0
		  ELSE
			RETURN 1
		 END
	END

	-------------------------
	DECLARE	@HourlyRate smallmoney, @IsBillable bit, @ParentId int

	SET @HourlyRate = NULL
	SET @ParentId = NULL
	SET @IsBillable = 0
			
	IF (@BillingMethodID = 2)
	BEGIN-- hourly staff rate		
		SELECT
			@HourlyRate = CASE WHEN TaskTypeTechBillableRate.HourlyRate IS NOT NULL 
					THEN TaskTypeTechBillableRate.HourlyRate ELSE 
				CASE 
				WHEN L.configHourlyBillableRate IS NULL 
				THEN CAST(dbo.fxGetConfigValueStr(@CompanyID, 'configHourlyBillableRate') as smallmoney) 
				ELSE L.configHourlyBillableRate 
			END END	
		FROM 
			tbl_LoginCompanyJunc L
		INNER JOIN 
			tbl_Logins LO ON L.login_id = LO.id
		INNER JOIN 
			tbl_company CO ON L.company_id=CO.company_id
		LEFT OUTER JOIN
            TaskTypeTechBillableRate ON L.company_id = TaskTypeTechBillableRate.DId 
			AND 
            L.id = TaskTypeTechBillableRate.TechId
			AND
			TaskTypeTechBillableRate.TaskTypeId = @TaskTypeID
		WHERE 
			L.company_id = @CompanyID AND L.id = @TechID
	END
	ELSE
		IF (@BillingMethodID = 3)
		BEGIN
			IF (@IsProjectLevel = 0) 
			BEGIN
				SELECT 
					@HourlyRate = ISNULL(HourlyBlendedRate, 0)
				FROM
					AccountRate
				WHERE CompanyID = @CompanyID AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))					
			END
			ELSE
			BEGIN
				SELECT 
					@HourlyRate = ISNULL(HourlyBlendedRate, 0)
				FROM
					Project
				WHERE CompanyID = @CompanyID AND ProjectID = @pProjectID
			END
		END
		ELSE
			IF (@BillingMethodID = 4)		
			BEGIN

	IF (@IsProjectLevel = 1)
	BEGIN
		SELECT TOP 1
			@ParentId = Project.ParentID, 
			@HourlyRate = ProjectTaskTypeRate.HourlyRate 
		FROM 
			Project LEFT OUTER JOIN ProjectTaskTypeRate
				ON	Project.CompanyID = ProjectTaskTypeRate.CompanyID
					AND Project.ProjectID = ProjectTaskTypeRate.ProjectID
					AND ProjectTaskTypeRate.TaskTypeID = @TaskTypeID
		WHERE 
			Project.CompanyID = @CompanyID
			AND
			Project.ProjectID = @pProjectID

		IF @HourlyRate = -1
		 BEGIN
			SET @IsBillable = 1
			SET @HourlyRate = NULL
		 END
	
		IF @IsBillable = 1 AND @HourlyRate = 0
		 BEGIN
			SET @HourlyRate = NULL
		 END

		WHILE (NOT @ParentId IS NULL) AND (@HourlyRate IS NULL)
		 BEGIN
			SELECT TOP 1
				@ParentId = Project.ParentID, 
				@HourlyRate = ProjectTaskTypeRate.HourlyRate 
			FROM 
				Project LEFT OUTER JOIN ProjectTaskTypeRate
					ON  Project.CompanyID = ProjectTaskTypeRate.CompanyID
						AND Project.ProjectID = ProjectTaskTypeRate.ProjectID
						AND ProjectTaskTypeRate.TaskTypeID = @TaskTypeID
			WHERE 
				Project.CompanyID = @CompanyID
				AND
				Project.ProjectID = @ParentId			

			IF @HourlyRate = -1
			 BEGIN
				SET @IsBillable = 1
				SET @HourlyRate = NULL
			 END
		
			IF @IsBillable = 1 AND @HourlyRate = 0
			 BEGIN
				SET @HourlyRate = NULL
			 END
		 END
	END

	IF @HourlyRate IS NULL
	 BEGIN
		SELECT     
			@HourlyRate = CASE  
			WHEN (AccountTaskTypeRate.HourlyRate IS NULL
					OR (AccountTaskTypeRate.HourlyRate = 0 AND @IsBillable = 1)
					OR AccountTaskTypeRate.HourlyRate = -1)
				THEN CASE  
						WHEN (RatePlanRates.HourlyRate IS NULL
							OR (RatePlanRates.HourlyRate = 0 AND @IsBillable = 1)
							OR RatePlanRates.HourlyRate = -1)
							THEN ISNULL(TaskType.HourlyRate, 0) 
						ELSE RatePlanRates.HourlyRate END
			ELSE AccountTaskTypeRate.HourlyRate END
		FROM         
			TaskType 
		LEFT OUTER JOIN
			RatePlanRates ON TaskType.TaskTypeId = RatePlanRates.TaskTypeId 
			AND TaskType.DepartmentID = RatePlanRates.DepartmentId 
			AND RatePlanRates.RatePlanId = @RatePlanID
			AND RatePlanRates.DepartmentId = @CompanyID
		LEFT OUTER JOIN
			AccountTaskTypeRate ON TaskType.TaskTypeID = AccountTaskTypeRate.TaskTypeID 
			AND (AccountTaskTypeRate.AccountID = @AccountID OR (AccountTaskTypeRate.AccountID IS NULL AND @AccountID IS NULL))
			AND TaskType.DepartmentID = AccountTaskTypeRate.CompanyID
		WHERE
			TaskType.TaskTypeID = @TaskTypeID
			AND
			TaskType.DepartmentID = @CompanyID
	 END
			
		END

	IF (@HourlyRate IS NULL OR @HourlyRate = 0) SET @IsBillable = 0	ELSE SET @IsBillable = 1
	
	IF @IsBillable = 0 AND @BillingMethodID = 1 AND @ReturnFlatFee = 1 SET @IsBillable = 1

	RETURN @IsBillable
END
GO
PRINT N'Creating [dbo].[fxGetOperationalMinutes]...';


GO
CREATE FUNCTION [dbo].[fxGetOperationalMinutes] 
(
	@DepartmentId int,
	@StartDate datetime,
	@EndDate datetime,
	@WorkDays char(7),
	@StartBusinnessTime int,
	@EndBusinnessTime int
)
RETURNS int
AS
BEGIN
	RETURN DATEDIFF(minute, @StartDate, @EndDate) - dbo.fxGetHolidayMinutes(@DepartmentId, @StartDate, @EndDate, @WorkDays, @StartBusinnessTime, @EndBusinnessTime)-dbo.fxGetInoperationalMinutes(@StartDate, @EndDate, @WorkDays, @StartBusinnessTime, @EndBusinnessTime)
END
GO
PRINT N'Creating [dbo].[fxGetRealTicketTime]...';


GO
CREATE FUNCTION dbo.fxGetRealTicketTime
	(
		@DepartmentId int,
		@StartDate datetime,
		@EndDate datetime,
		@WorkHourStart int,
		@WorkMinStart int,
		@WorkHourEnd int,
		@WorkMinEnd int
	)
RETURNS int
AS
Begin
	Declare @TotalMinutes int

	Select @TotalMinutes=0

	Declare @WorkDayLength int

	Select @WorkDayLength=0

	Declare @TotalDaysPerWeek int
	Select @TotalDaysPerWeek=7

	Declare @DBWDays char(7)

	SELECT @DBWDays=I.WorkingDays 
	FROM tbl_company C 
		INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid 
	WHERE C.company_id = @DepartmentId
	
	if @@RowCount=0 
		Select @DBWDays='1111100'

	If @WorkHourStart is null or @WorkMinStart is null or @WorkHourEnd is null or @WorkMinEnd is null 
	Begin
		Select @WorkHourStart=0
		Select @WorkMinStart=0
		Select @WorkHourEnd=23
		Select @WorkMinEnd=59
		Select @WorkDayLength=1440
	End
	Else
	Begin
		Declare @current_date datetime
		Declare @start_work datetime
		Declare @end_work datetime

		Select @current_date=@StartDate

		Select @current_date=DateAdd(hh, -DATEPART(hh, @current_date), @current_date)
		Select @current_date=DateAdd(mi, -DATEPART(mi, @current_date), @current_date)
		Select @current_date=DateAdd(ss, -DATEPART(ss, @current_date), @current_date)
		Select @current_date=DateAdd(ms, -DATEPART(ms, @current_date), @current_date)

		Select @start_work=@current_date	
		Select @end_work=@current_date	
	
		Select @start_work=DateAdd(hh, @WorkHourStart, @start_work)
		Select @start_work=DateAdd(mi, @WorkMinStart, @start_work)

		Select @end_work=DateAdd(hh, @WorkHourEnd, @end_work)
		Select @end_work=DateAdd(mi, @WorkMinEnd, @end_work)

		Select @WorkDayLength=DateDiff(mi, @start_work, @end_work)
	End

	Declare @WorkDays int
	Select @WorkDays=0

	If @EndDate>@StartDate 
	Begin
		SET @WorkDays=LEN(REPLACE(@DBWDays,'0',''))
		/*
		Declare @Index int
		Select @Index=1

		While @Index<=@TotalDaysPerWeek
		Begin
			If CAST(SubString(@WDays, @Index, 1) as int)<>0 
				Select @WorkDays=@WorkDays+1			
	
			Select @Index=@Index+1
		End
		*/

		Declare @CountWeeks int
		Select @CountWeeks=DateDiff(ww, @StartDate, @EndDate)

		If @CountWeeks>=2 
		Begin 
			Declare @CountMiddleWeeks int
			Declare @MiddleStartDate datetime
			Declare @MiddleEndDate datetime		

			If ((DateDiff(dd, '19000101', @StartDate)%7)+1)<>1
				Select @MiddleStartDate=DateAdd(dd, @TotalDaysPerWeek-((DateDiff(dd, '19000101', @StartDate)%7)+1)+1, @StartDate)
			Else
				Select @MiddleStartDate=@StartDate

			If ((DateDiff(dd, '19000101', @EndDate)%7)+1)<>1
				Select @MiddleEndDate=DateAdd(dd, -(((DateDiff(dd, '19000101', @EndDate)%7) +1)-1), @EndDate)
			Else
				Select @MiddleEndDate=@EndDate

			Select @CountMiddleWeeks=DateDiff(ww, @MiddleStartDate, @MiddleEndDate)

			If @CountMiddleWeeks>0
			Begin
				Select @TotalMinutes=@TotalMinutes+@CountMiddleWeeks*@WorkDays*@WorkDayLength							
				Select @TotalMinutes=@TotalMinutes+dbo.fxGetRealWorkTime(@DepartmentId, @StartDate, @MiddleStartDate, @WorkHourStart, @WorkMinStart, @WorkHourEnd, @WorkMinEnd, @WorkDayLength, 1)
				Select @TotalMinutes=@TotalMinutes+dbo.fxGetRealWorkTime(@DepartmentId, @MiddleEndDate, @EndDate, @WorkHourStart, @WorkMinStart, @WorkHourEnd, @WorkMinEnd, @WorkDayLength, 2)
				Select @TotalMinutes=@TotalMinutes+dbo.fxGetRealWorkTime(@DepartmentId, @StartDate, @EndDate, @WorkHourStart, @WorkMinStart, @WorkHourEnd, @WorkMinEnd, @WorkDayLength, 4)
			End
			Else
			Begin
				Select @TotalMinutes=@TotalMinutes+dbo.fxGetRealWorkTime(@DepartmentId, @StartDate, @EndDate, @WorkHourStart, @WorkMinStart, @WorkHourEnd, @WorkMinEnd, @WorkDayLength, 3)
				Select @TotalMinutes=@TotalMinutes+dbo.fxGetRealWorkTime(@DepartmentId, @StartDate, @EndDate, @WorkHourStart, @WorkMinStart, @WorkHourEnd, @WorkMinEnd, @WorkDayLength, 4)
			End
		End
		Else
		Begin
			Select @TotalMinutes=@TotalMinutes+dbo.fxGetRealWorkTime(@DepartmentId, @StartDate, @EndDate, @WorkHourStart, @WorkMinStart, @WorkHourEnd, @WorkMinEnd, @WorkDayLength, 3)
			Select @TotalMinutes=@TotalMinutes+dbo.fxGetRealWorkTime(@DepartmentId, @StartDate, @EndDate, @WorkHourStart, @WorkMinStart, @WorkHourEnd, @WorkMinEnd, @WorkDayLength, 4)						
		End
	End

	Return @TotalMinutes
END
GO
PRINT N'Creating [dbo].[fxGetTimeLogBillableRate]...';


GO
CREATE FUNCTION dbo.fxGetTimeLogBillableRate 
(
		@CompanyID int,
		@AccountID int,
		@ProjectID int,
		@TaskTypeID int,
		@TechID int
)  
RETURNS 
	smallmoney
AS
BEGIN
	
	IF (dbo.fxGetIsTimeLogBillable(@CompanyID, @AccountID, @ProjectID, @TaskTypeID, @TechID, 0, 0, 0) = 0) RETURN 0

	DECLARE @EntityID int,
			@IsProjectLevel bit,
			@BillingMethodID int,
			@pProjectID int,
			@RatePlanID int

	SET @EntityID = dbo.fxGetParentBMProject(@CompanyID, @AccountID, @ProjectID)
	
	IF (@EntityID > 0)
	BEGIN
		SET @pProjectID = @EntityID
		SET @IsProjectLevel = 1
	END
	ELSE
		IF (@EntityID <= 0)
			SET @IsProjectLevel = 0		
		ELSE 
			RETURN 0
	
	SET	@BillingMethodID = NULL	
	SET @RatePlanID = NULL

	IF (@IsProjectLevel = 1)
	BEGIN
		SELECT
			@BillingMethodID = BillingMethodID,
			@RatePlanID = RatePlanID
		FROM 
			Project
		WHERE 
			CompanyID = @CompanyID
			AND
			ProjectID = @pProjectID
	END
	ELSE
	BEGIN
		SELECT 
			@BillingMethodID = BillingMethodID,
			@RatePlanID = RatePlanID
		FROM 
			AccountRate
		WHERE
			CompanyID = @CompanyID
			AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))
	END

	IF ((NOT @BillingMethodID IN (2, 3, 4)) OR @BillingMethodID IS NULL) 
		RETURN 0

	----------------

	DECLARE	@HourlyRate smallmoney, @IsBillable bit, @ParentId int

	SET @HourlyRate = NULL
	SET @IsBillable = 0
	SET @ParentId = NULL
	
	IF (@BillingMethodID = 2)
	BEGIN-- hourly staff rate		
		SELECT
			@HourlyRate = CASE WHEN TaskTypeTechBillableRate.HourlyRate IS NOT NULL 
					THEN TaskTypeTechBillableRate.HourlyRate ELSE 
				CASE 
				WHEN L.configHourlyBillableRate IS NULL 
				THEN dbo.fxGetConfigValueStr(@CompanyID, 'configHourlyBillableRate') 
				ELSE L.configHourlyBillableRate 
			END END	
		FROM 
			tbl_LoginCompanyJunc L
		INNER JOIN 
			tbl_Logins LO ON L.login_id = LO.id
		INNER JOIN 
			tbl_company CO ON L.company_id=CO.company_id
		LEFT OUTER JOIN
            TaskTypeTechBillableRate ON L.company_id = TaskTypeTechBillableRate.DId 
			AND 
            L.id = TaskTypeTechBillableRate.TechId
			AND
			TaskTypeTechBillableRate.TaskTypeId = @TaskTypeID
		WHERE 
			L.company_id = @CompanyID AND L.id = @TechID
	END
	ELSE
		IF (@BillingMethodID = 3)
		BEGIN
			IF (@IsProjectLevel = 0) 
			BEGIN
				SELECT 
					@HourlyRate = ISNULL(HourlyBlendedRate, 0)
				FROM
					AccountRate
				WHERE CompanyID = @CompanyID AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))					
			END
			ELSE
			BEGIN
				SELECT 
					@HourlyRate = ISNULL(HourlyBlendedRate, 0)
				FROM
					Project
				WHERE CompanyID = @CompanyID AND ProjectID = @pProjectID
			END
		END
		ELSE
			IF (@BillingMethodID = 4)		
			BEGIN
				IF (@IsProjectLevel = 1)
				BEGIN
					SELECT TOP 1
						@ParentId = Project.ParentID, 
						@HourlyRate = ProjectTaskTypeRate.HourlyRate 
					FROM 
						Project LEFT OUTER JOIN ProjectTaskTypeRate
							ON	Project.CompanyID = ProjectTaskTypeRate.CompanyID
								AND Project.ProjectID = ProjectTaskTypeRate.ProjectID
								AND ProjectTaskTypeRate.TaskTypeID = @TaskTypeID
					WHERE 
						Project.CompanyID = @CompanyID
						AND
						Project.ProjectID = @pProjectID


					IF @HourlyRate = -1
						 BEGIN
							SET @IsBillable = 1
							SET @HourlyRate = NULL
						 END
					
					IF @IsBillable = 1 AND @HourlyRate = 0
						 BEGIN
							SET @HourlyRate = NULL
						 END

					WHILE (NOT @ParentId IS NULL) AND (@HourlyRate IS NULL)
					 BEGIN
						SELECT TOP 1
							@ParentId = Project.ParentID, 
							@HourlyRate = ProjectTaskTypeRate.HourlyRate 
						FROM 
							Project LEFT OUTER JOIN ProjectTaskTypeRate
								ON  Project.CompanyID = ProjectTaskTypeRate.CompanyID
									AND Project.ProjectID = ProjectTaskTypeRate.ProjectID
									AND ProjectTaskTypeRate.TaskTypeID = @TaskTypeID
						WHERE 
							Project.CompanyID = @CompanyID
							AND
							Project.ProjectID = @ParentId

						IF @HourlyRate = -1
						 BEGIN
							SET @IsBillable = 1
							SET @HourlyRate = NULL
						 END
					
						IF @IsBillable = 1 AND @HourlyRate = 0
						 BEGIN
							SET @HourlyRate = NULL
						 END
					 END
				END

				IF @HourlyRate IS NULL
				 BEGIN
					SELECT     
						@HourlyRate = CASE  
						WHEN (AccountTaskTypeRate.HourlyRate IS NULL 
								OR (AccountTaskTypeRate.HourlyRate = 0 AND @IsBillable = 1)
								OR AccountTaskTypeRate.HourlyRate = -1)
							THEN CASE  
									WHEN (RatePlanRates.HourlyRate IS NULL 
										OR (RatePlanRates.HourlyRate = 0 AND @IsBillable = 1)
										OR RatePlanRates.HourlyRate = -1)
										THEN ISNULL(TaskType.HourlyRate , 0)
									ELSE RatePlanRates.HourlyRate END
						ELSE AccountTaskTypeRate.HourlyRate END
					FROM         
						TaskType 
					LEFT OUTER JOIN
						RatePlanRates ON TaskType.TaskTypeId = RatePlanRates.TaskTypeId 
						AND TaskType.DepartmentID = RatePlanRates.DepartmentId 
						AND RatePlanRates.RatePlanId = @RatePlanID
						AND RatePlanRates.DepartmentId = @CompanyID
					LEFT OUTER JOIN
						AccountTaskTypeRate ON TaskType.TaskTypeID = AccountTaskTypeRate.TaskTypeID 
						AND (AccountTaskTypeRate.AccountID = @AccountID OR (AccountTaskTypeRate.AccountID IS NULL AND @AccountID IS NULL))
						AND TaskType.DepartmentID = AccountTaskTypeRate.CompanyID
					WHERE
						TaskType.TaskTypeID = @TaskTypeID
						AND
						TaskType.DepartmentID = @CompanyID
				 END
			END
			ELSE SET @HourlyRate = 0		
	RETURN @HourlyRate
END
GO
PRINT N'Creating [dbo].[fxCalculateTicketRemainingHours]...';


GO
CREATE FUNCTION dbo.fxCalculateTicketRemainingHours 
(
		@DepartmentID int,
		@TicketID int
)  
RETURNS 
	decimal(10,4)
AS
BEGIN
	
	DECLARE @RemainingHours decimal(10,4),
		@EstimatedTime decimal(10,4),
		@TktStatus nvarchar(15),
		@btCfgToDo bit
		
	SET @RemainingHours = NULL
	SET @EstimatedTime = NULL
	
	SELECT @EstimatedTime = EstimatedTime, @TktStatus = tbl_ticket.Status FROM tbl_ticket WHERE (Id = @TicketID) AND (company_id = @DepartmentID)
	
	IF @TktStatus = 'Closed'
	 BEGIN
		RETURN 0
	 END
	 
	IF @EstimatedTime IS NOT NULL
	 BEGIN
		DECLARE @CountHoursRemaining int
		SET @CountHoursRemaining = 0
		SELECT @CountHoursRemaining = COUNT(Id) FROM TicketTime 
		WHERE 
			(DepartmentId = @DepartmentID)
			AND
			(TicketId = @TicketID) 
			AND 
			Deleted = 0
			AND
			HoursRemaining IS NOT NULL
		IF @CountHoursRemaining = 0 
		 BEGIN
			DECLARE @TotalHours decimal(10,4)
			SELECT @TotalHours = SUM(Hours) FROM TicketTime WHERE (TicketId = @TicketID) AND (DepartmentId = @DepartmentID) AND Deleted = 0
			SET @RemainingHours = @EstimatedTime - ISNULL(@TotalHours, 0)
		 END
	 END
	IF @RemainingHours IS NULL
	 BEGIN
		SELECT TOP 1
			@RemainingHours = HoursRemaining
		FROM 
			TicketTime 
		WHERE 
			(DepartmentId = @DepartmentID)
			AND
			(TicketId = @TicketID) 
			AND 
			Deleted = 0
			AND
			HoursRemaining IS NOT NULL
		ORDER BY
			Date DESC, Id DESC
	 END
	
	SET @btCfgToDo = dbo.fxGetConfigValueBit(@DepartmentID, 'btCfgToDo')
	IF @btCfgToDo = 1
	 BEGIN
		DECLARE @ToDoHoursEstimatedRemaining decimal(10,4)
		SELECT 
			@ToDoHoursEstimatedRemaining = ISNULL(SUM(ISNULL([ToDoItem].[HoursEstimatedRemaining], 0)),0)
		FROM [ToDoItem]
		INNER JOIN
			ToDoList ON ToDoItem.DId = ToDoList.DId AND ToDoItem.ToDoListId = ToDoList.Id
		WHERE
			[ToDoItem].[DId] = @DepartmentID
			AND
			ToDoList.[TicketId] = @TicketID
			AND
			[ToDoItem].[Completed] = 0
			
		IF ISNULL(@ToDoHoursEstimatedRemaining, 0) <> 0
		BEGIN
			SET @RemainingHours = ISNULL(@RemainingHours, 0) + @ToDoHoursEstimatedRemaining
		END
	 END
		
	RETURN @RemainingHours
END
GO
PRINT N'Creating [dbo].[fxGetAllChildClasses]...';


GO
CREATE FUNCTION dbo.fxGetAllChildClasses
	(
		@DId int,
		@ClassId int,
		@btInactive bit
	)  
RETURNS @retChildClasses TABLE (Id int, Level tinyint, IsLastChild bit, InactiveCalculated bit) 
AS  
BEGIN
	DECLARE @Level tinyint,
		@ClassInactive bit 
	SET @Level=1
	IF NOT @ClassId IS NULL
	BEGIN	
		DECLARE @ParentId int	
		SELECT @ParentId=ParentId, @ClassInactive = btInactive FROM tbl_class WHERE company_id=@DId AND Id=@ClassId
		WHILE NOT @ParentId IS NULL
		BEGIN
			SET @Level=@Level+1
			SELECT @ParentId=ParentId FROM tbl_class WHERE company_id=@DId AND Id=@ParentId
		END
		IF dbo.fxShowClass(@DId, @ClassId, @ClassInactive, @btInactive) = '1'
		 BEGIN
			INSERT @retChildClasses (Id, Level, IsLastChild, InactiveCalculated) VALUES (@ClassId, @Level-1, 0, NULL)
		 END
	END
	ELSE
		SET @Level=0
	DECLARE @Id int
	DECLARE l_cursor CURSOR FOR SELECT Id, btInactive FROM tbl_class WHERE company_id=@DId AND ISNULL(ParentId, 0)=ISNULL(@ClassId,0) ORDER BY Name
	OPEN l_cursor
	FETCH NEXT FROM l_cursor INTO @Id, @ClassInactive
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT * FROM tbl_class WHERE company_id=@DId AND ParentId=@Id)
			INSERT @retChildClasses SELECT Id, Level, IsLastChild, CASE WHEN @ClassInactive = 1 THEN @ClassInactive ELSE NULL END FROM dbo.fxGetAllChildClasses(@DId, @Id, @btInactive)
		ELSE
			IF dbo.fxShowClass(@DId, @Id, @ClassInactive, @btInactive) = '1'
			 BEGIN
				INSERT @retChildClasses (Id, Level, IsLastChild) VALUES (@Id, @Level, 1)
			 END
		FETCH NEXT FROM l_cursor INTO @Id, @ClassInactive
	END
	CLOSE l_cursor
	DEALLOCATE l_cursor
	IF NOT @ClassId IS NULL
	BEGIN
		DECLARE @rowCount int
		SELECT @rowCount=COUNT(*) FROM @retChildClasses
		IF @rowCount<2 
			UPDATE @retChildClasses SET IsLastChild=1 WHERE Id=@ClassId
	END
	IF @btInactive = 0
	 BEGIN
		DELETE @retChildClasses WHERE InactiveCalculated = 1
	 END
	RETURN
END
GO
PRINT N'Creating [dbo].[fxGetAllChildClassesFromList]...';


GO


CREATE FUNCTION [dbo].[fxGetAllChildClassesFromList]
	(
		@DId int,
		@Classes nvarchar(max)
	)  
RETURNS @retChildClasses TABLE (Id int PRIMARY KEY)
AS  
BEGIN
	IF @Classes IS NULL OR LEN(@Classes)=0
		RETURN
	DECLARE @ClassId int
	DECLARE @chrIndex int
	DECLARE @chrStart int
	SET @chrStart=1
	IF CHARINDEX(',',@Classes,LEN(@Classes))=0
		SET @Classes=@Classes+','
	SET @chrIndex=CHARINDEX(',',@Classes,@chrStart)
	WHILE @chrIndex>@chrStart 
	BEGIN
		SET @ClassId=CAST(LTRIM(RTRIM(SUBSTRING(@Classes, @chrStart, @chrIndex-@chrStart))) AS int)
		SET @chrStart=@chrIndex+1
		IF @ClassId<>0
			INSERT @retChildClasses SELECT Id FROM dbo.fxGetAllChildClasses(@DId, @ClassId, NULL) WHERE NOT Id IN (SELECT Id FROM @retChildClasses) 
		SET @chrIndex=CHARINDEX(',',@Classes,@chrStart)
	END
	RETURN
END
GO
PRINT N'Creating [dbo].[fxGetAllChildLocations]...';


GO

CREATE FUNCTION dbo.fxGetAllChildLocations 
	(
		@DId int,
		@LocationId int
	)  
RETURNS @retChildLocations TABLE (Id int PRIMARY KEY) 
AS  
BEGIN 
	INSERT @retChildLocations (Id) VALUES (@LocationId)
	DECLARE @Id int
	DECLARE l_cursor CURSOR FOR SELECT Id FROM Locations WHERE DId=@DId AND ParentId=@LocationId
	OPEN l_cursor
	FETCH NEXT FROM l_cursor INTO @Id
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT * FROM Locations WHERE DId=@DId AND ParentId=@Id)
			INSERT @retChildLocations SELECT Id FROM dbo.fxGetAllChildLocations(@DId, @Id)
		ELSE
			INSERT @retChildLocations (Id) VALUES (@Id)
		FETCH NEXT FROM l_cursor INTO @Id
	END
	CLOSE l_cursor
	DEALLOCATE l_cursor
	RETURN
END
GO
PRINT N'Creating [dbo].[fxGetAllChildLocationsForAudit]...';


GO
CREATE FUNCTION [dbo].[fxGetAllChildLocationsForAudit] 
	(
		@DId int,
		@LocationId int
	)  
RETURNS @retChildLocations TABLE (Id int PRIMARY KEY)
AS  
BEGIN 	
	
	INSERT INTO @retChildLocations
	SELECT Id
	FROM Locations 
	WHERE DId=@DId AND Id=@LocationId AND CfgEnableAudit = 0
	
	DECLARE @Id int
	DECLARE l_cursor CURSOR FOR SELECT Id FROM Locations WHERE DId=@DId AND ParentId=@LocationId AND CfgEnableAudit = 0
	OPEN l_cursor
	FETCH NEXT FROM l_cursor INTO @Id
	WHILE @@FETCH_STATUS = 0
	BEGIN		
		INSERT @retChildLocations SELECT Id FROM dbo.fxGetAllChildLocationsForAudit(@DId, @Id)		
		FETCH NEXT FROM l_cursor INTO @Id
	END
	CLOSE l_cursor
	DEALLOCATE l_cursor
	RETURN
END
GO
PRINT N'Creating [dbo].[fxGetAllChildLocationsFromList]...';


GO


CREATE FUNCTION dbo.fxGetAllChildLocationsFromList
	(
		@DId int,
		@Locations nvarchar(max)
	)  
RETURNS @retChildLocations TABLE (Id int PRIMARY KEY)
AS  
BEGIN
	IF @Locations IS NULL OR LEN(@Locations)=0
		RETURN
	DECLARE @LocationId int
	DECLARE @chrIndex int
	DECLARE @chrStart int
	SET @chrStart=1
	IF CHARINDEX(',',@Locations,LEN(@Locations))=0
		SET @Locations=@Locations+','
	SET @chrIndex=CHARINDEX(',',@Locations,@chrStart)
	WHILE @chrIndex>@chrStart 
	BEGIN
		SET @LocationId=CAST(LTRIM(RTRIM(SUBSTRING(@Locations, @chrStart, @chrIndex-@chrStart))) AS int)
		SET @chrStart=@chrIndex+1
		INSERT @retChildLocations SELECT Id FROM dbo.fxGetAllChildLocations(@DId, @LocationId) WHERE NOT Id IN (SELECT Id FROM @retChildLocations) 
		SET @chrIndex=CHARINDEX(',',@Locations,@chrStart)
	END
	RETURN
END
GO
PRINT N'Creating [dbo].[fxGetAllChildProjects]...';


GO
CREATE FUNCTION [dbo].[fxGetAllChildProjects]
	(
		@CompanyID int,
		@ProjectID int,
		@Active bit
	)  
RETURNS @retChildProjects TABLE (Id int, Level tinyint, IsLastChild bit) 
AS  
BEGIN
	DECLARE @Level tinyint 
	SET @Level=1
	IF NOT @ProjectID IS NULL
	BEGIN	
		DECLARE @ParentId int		
		SELECT @ParentId=ParentID FROM Project WHERE CompanyID=@CompanyID AND ProjectID=@ProjectID
		WHILE NOT @ParentId IS NULL
		BEGIN
			SET @Level=@Level+1
			SELECT @ParentId=ParentId FROM Project WHERE CompanyID=@CompanyID AND ProjectID=@ParentId
		END
		INSERT @retChildProjects (Id, Level, IsLastChild) VALUES (@ProjectID, @Level-1, 0)
	END
	ELSE
		SET @Level=0
	DECLARE @Id int
	DECLARE l_cursor CURSOR FOR SELECT ProjectID FROM Project WHERE CompanyID=@CompanyID AND ISNULL(ParentID, 0)=ISNULL(@ProjectID,0) AND ISNULL(Active, 1)=@Active ORDER BY Name
	OPEN l_cursor
	FETCH NEXT FROM l_cursor INTO @Id
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT * FROM Project WHERE CompanyID=@CompanyID AND ParentID=@Id)
			INSERT @retChildProjects SELECT Id, Level, IsLastChild FROM dbo.fxGetAllChildProjects(@CompanyID, @Id, @Active)
		ELSE
			INSERT @retChildProjects (Id, Level, IsLastChild) VALUES (@Id, @Level, 1)
		FETCH NEXT FROM l_cursor INTO @Id
	END
	CLOSE l_cursor
	DEALLOCATE l_cursor
	IF NOT @ProjectID IS NULL
	BEGIN
		DECLARE @rowCount int
		SELECT @rowCount=COUNT(*) FROM @retChildProjects
		IF @rowCount<2 
			UPDATE @retChildProjects SET IsLastChild=1 WHERE Id=@ProjectID
	END
	RETURN
END
GO
PRINT N'Creating [dbo].[fxGetAllParentClasses]...';


GO
CREATE FUNCTION [dbo].[fxGetAllParentClasses]
	(
		@DId int,
		@ClassId int
	)  
RETURNS @retParentClasses TABLE (Id int PRIMARY KEY, Level tinyint, IsLastChild bit) 
AS  
BEGIN 
	IF @ClassId IS NULL OR @ClassId=0
		RETURN

	DECLARE @ParentId int
	DECLARE @IsLastChild bit
	SELECT @IsLastChild=CASE WHEN EXISTS(SELECT * FROM tbl_class WHERE company_id=@DId AND ParentId=@ClassId) THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END
	DECLARE @Level tinyint
	SET @Level=0
	SELECT @ParentId=ParentId FROM tbl_class WHERE company_id=@DId AND Id=@ClassId
	WHILE NOT @ParentId IS NULL
	BEGIN
		SET @Level=@Level+1
		SELECT @ParentId=ParentId FROM tbl_class WHERE company_id=@DId AND Id=@ParentId
	END
	INSERT @retParentClasses (Id, Level, IsLastChild) VALUES (@ClassId, @Level, @IsLastChild)
	SELECT @ParentId=ParentId FROM tbl_class WHERE company_id=@DId AND Id=@ClassId
	WHILE NOT @ParentId IS NULL
	BEGIN
		SET @Level=@Level-1
		INSERT @retParentClasses (Id, Level, IsLastChild) VALUES (@ParentId, @Level, 0)
		SELECT @ParentId=ParentId FROM tbl_class WHERE company_id=@DId AND Id=@ParentId
	END
	RETURN
END
GO
PRINT N'Creating [dbo].[fxGetAllParentLocations]...';


GO

CREATE FUNCTION dbo.fxGetAllParentLocations 
	(
		@DId int,
		@LocationId int
	)  
RETURNS @retParentLocations TABLE (Id int PRIMARY KEY) 
AS  
BEGIN 
	IF @LocationId IS NULL OR @LocationId=0
		RETURN

	DECLARE @ParentId int
	SELECT @ParentId=ParentId FROM Locations WHERE DId=@DId AND Id=@LocationId
	INSERT @retParentLocations (Id) VALUES (@LocationId)
	WHILE NOT @ParentId IS NULL
	BEGIN
		INSERT @retParentLocations (Id) VALUES (@ParentId)
		SELECT @ParentId=ParentId FROM Locations WHERE DId=@DId AND Id=@ParentId
	END
	RETURN
END
GO
PRINT N'Creating [dbo].[fxGetAllParentProjects]...';


GO
CREATE FUNCTION [dbo].[fxGetAllParentProjects]
	(
		@DId int,
		@ProjectId int
	)  
RETURNS @retParentProjects TABLE (Id int PRIMARY KEY, Level tinyint, IsLastChild bit) 
AS  
BEGIN 
	IF @ProjectId IS NULL OR @ProjectId=0
		RETURN

	DECLARE @ParentId int
	DECLARE @IsLastChild bit


	SELECT @IsLastChild=CASE WHEN EXISTS(SELECT * FROM Project WHERE CompanyID=@DId AND ParentID=@ProjectId) THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END


	DECLARE @Level tinyint
	SET @Level=0


	SELECT @ParentId=ParentID FROM Project WHERE CompanyID=@DId AND ProjectID=@ProjectId


	WHILE NOT @ParentId IS NULL
	BEGIN
		SET @Level=@Level+1
		SELECT @ParentId=ParentID FROM Project WHERE CompanyID=@DId AND ProjectID=@ParentId
	END


	INSERT @retParentProjects (Id, Level, IsLastChild) VALUES (@ProjectId, @Level, @IsLastChild)
	SELECT @ParentId=ParentID FROM Project WHERE CompanyID=@DId AND ProjectID=@ProjectId
	WHILE NOT @ParentId IS NULL
	BEGIN
		SET @Level=@Level-1
		INSERT @retParentProjects (Id, Level, IsLastChild) VALUES (@ParentId, @Level, 0)
		SELECT @ParentId=ParentID FROM Project WHERE CompanyID=@DId AND ProjectID=@ParentId
	END
	RETURN
END
GO
PRINT N'Creating [dbo].[fxGetRepeatableTechTaskTypes]...';


GO
CREATE FUNCTION [dbo].[fxGetRepeatableTechTaskTypes]
	(
		@DId int
	)
RETURNS @DisTask TABLE( TaskTypeID int )
AS
BEGIN	
	DECLARE @TaskTypeID int
	DECLARE TTTCursor CURSOR LOCAL FOR
	SELECT DISTINCT ttt.TaskTypeID
	FROM
		TaskTypeTech ttt
	WHERE
		ttt.CompanyID = @DId
	
	OPEN TTTCursor

	FETCH NEXT FROM TTTCursor INTO @TaskTypeID

	DECLARE @AllTechCount int
	DECLARE @TechCount int

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SET @AllTechCount = NULL
		SET @TechCount = NULL

		SELECT @AllTechCount=COUNT(ttt.TaskTypeTechID) FROM TaskTypeTech ttt WHERE ttt.CompanyID = @DId AND ttt.TaskTypeID = @TaskTypeID AND (ttt.TechID IS NULL)
		SELECT @TechCount=COUNT(ttt.TaskTypeTechID) FROM TaskTypeTech ttt WHERE ttt.CompanyID = @DId AND ttt.TaskTypeID = @TaskTypeID AND (ttt.TechID IS NOT NULL)
		IF ((@AllTechCount IS NOT NULL) AND (@TechCount IS NOT NULL))
		BEGIN
			IF ((@AllTechCount = 1) AND (@TechCount > 0))
			BEGIN
				INSERT INTO @DisTask
				SELECT @TaskTypeID				
			END
		END
		
			FETCH NEXT FROM TTTCursor INTO @TaskTypeID
		
	END

	CLOSE TTTCursor	
	RETURN
END
GO
PRINT N'Creating [dbo].[fxMapClassesByLevel]...';


GO

CREATE FUNCTION [dbo].[fxMapClassesByLevel] 
	(
		@DId int,
		@ClassLevel tinyint
	)  
RETURNS @retMapClasses TABLE (Id int PRIMARY KEY, GroupId int, Name nvarchar(max)) 
AS  
BEGIN 
	DECLARE @ClassId int
	DECLARE @Level tinyint
	DECLARE @IsLastChild bit
	DECLARE @GroupId int
	DECLARE @GroupName nvarchar(max)
	DECLARE c_cursor CURSOR FOR SELECT Id, Level, IsLastChild FROM dbo.fxGetAllChildClasses(@DId, NULL, NULL)
	OPEN c_cursor
	FETCH NEXT FROM c_cursor INTO @ClassId, @Level, @IsLastChild
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Level<=@ClassLevel 
		BEGIN
			IF @Level<@ClassLevel
				SET @GroupId=-@ClassId
			ELSE
				SET @GroupId=@ClassId
			SET @GroupName=dbo.fxGetFullClassName(@DId, @ClassId)
		END
		INSERT @retMapClasses (Id, GroupId, Name) VALUES (@ClassId, @GroupId, @GroupName)
		FETCH NEXT FROM c_cursor INTO @ClassId, @Level, @IsLastChild
	END
	CLOSE c_cursor
	DEALLOCATE c_cursor
	RETURN
END
GO
PRINT N'Creating [dbo].[fxMapLocationsByType]...';


GO

CREATE FUNCTION dbo.fxMapLocationsByType 
	(
		@DId int,
		@AccountId int,
		@LocationId int,
		@LocationTypeId int,
		@GroupId int
	)  
RETURNS @retMapLocations TABLE (Id int PRIMARY KEY, GroupId int, Name nvarchar(max)) 
AS  
BEGIN 
--	DECLARE @NamePrefix nvarchar(max)
--	SELECT @NamePrefix=dbo.fxGetUserLocationName(@DId, @LocationId)
--	IF LEN(@NamePrefix)>0
--		SET @NamePrefix=@NamePrefix+' / '
--	ELSE
--		SET @NamePrefix=''
	DECLARE @Id int
	DECLARE @Name nvarchar(50)
	DECLARE @TypeId int
	DECLARE @TempGroupId int
	SET @TempGroupId=@GroupId
	IF @AccountId IS NULL
		DECLARE l_cursor CURSOR FOR SELECT Id, Name, LocationTypeId FROM Locations WHERE DId=@DId AND ISNULL(ParentId, 0) = ISNULL(@LocationId, 0) AND AccountId IS NULL
	ELSE
		DECLARE l_cursor CURSOR FOR SELECT Id, Name, LocationTypeId FROM Locations WHERE DId=@DId AND ISNULL(ParentId, 0) = ISNULL(@LocationId, 0) AND AccountId=@AccountId
	OPEN l_cursor
	FETCH NEXT FROM l_cursor INTO @Id, @Name, @TypeId
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @TempGroupId IS NULL AND @LocationTypeId=@TypeId
			SET @GroupId=@Id
		ELSE
			SET @GroupId=@TempGroupId
--		INSERT @retMapLocations (Id, GroupId, Name) VALUES (@Id, @GroupId, CASE WHEN @GroupId IS NULL THEN '(Assigned To Another Types)' ELSE @NamePrefix+@Name END)
		INSERT @retMapLocations (Id, GroupId, Name) VALUES (@Id, @GroupId, CASE WHEN @GroupId IS NULL THEN NULL ELSE dbo.fxGetUserLocationName(@DId, @GroupId) END)
		IF EXISTS(SELECT * FROM Locations WHERE DId=@DId AND ParentId=@Id)
			INSERT @retMapLocations SELECT Id, GroupId, Name FROM dbo.fxMapLocationsByType(@DId, @AccountId, @Id, @LocationTypeId, @GroupId)
		FETCH NEXT FROM l_cursor INTO @Id, @Name, @TypeId
	END
	CLOSE l_cursor
	DEALLOCATE l_cursor
	RETURN
END
GO
PRINT N'Creating [dbo].[fxRoutingOrder]...';


GO
CREATE FUNCTION dbo.fxRoutingOrder
	(
		@DId int,
		@btClass bit,
		@btLocation bit,
		@btLevel bit,
		@btAccount bit
	)
RETURNS @ReturnTable TABLE (tintOrder tinyint, tintRoute tinyint)
AS
	/* Routes 
	1=class
	2=loccation
	3=Level
	4=Account
	*/
	BEGIN
		IF @btClass IS NULL 
			SET @btClass=0
		
		IF @btLocation IS NULL
			SET @btLocation=0
		
		IF @btLevel IS NULL
			SET @btLevel=0
		
		IF @btAccount IS NULL
			SET @btAccount=0
		
		IF EXISTS(SELECT 'true' FROM RoutingOrder WHERE DId=@DId)
			INSERT INTO @ReturnTable SELECT tintOrder, tintRoute FROM RoutingOrder WHERE DId=@DId
		ELSE
			BEGIN
				IF @btClass=1
					BEGIN
						IF @btLocation=1
							BEGIN
								IF @btLevel=1
									BEGIN
										IF @btAccount=1
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,4)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (2,1)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (3,2)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (4,3)
											END
										ELSE /*@btAccount=0*/
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,1)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (2,2)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (3,3)
											END
									END
								ELSE /*@btLevel=0*/
									BEGIN
										IF @btAccount=1
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,4)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (2,1)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (3,2)
											END
										ELSE /*@btAccount=0*/
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,1)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (2,2)
											END
									END
							END
						ELSE /*@btLocation=0*/
							BEGIN
								IF @btLevel=1
									BEGIN
										IF @btAccount=1
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,4)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (2,1)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (3,3)
											END
										ELSE /*@btAccount=0*/
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,1)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (2,3)
											END
									END
								ELSE /*@btLevel=0*/
									BEGIN
										IF @btAccount=1
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,4)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (2,1)
											END
										ELSE /*@btAccount=0*/
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,1)
											END
									END
							END
					END
				ELSE /*btClass=0*/
					BEGIN
						IF @btLocation=1
							BEGIN
								IF @btLevel=1
									BEGIN
										IF @btAccount=1
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,4)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (2,2)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (3,3)
											END
										ELSE /*@btAccount=0*/
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,2)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (2,3)
											END
									END
								ELSE /*@btLevel=0*/
									BEGIN
										IF @btAccount=1
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,4)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (2,2)
											END
										ELSE /*@btAccount=0*/
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,2)
											END
									END
							END
						ELSE /*@btLocation=0*/
							BEGIN
								IF @btLevel=1
									BEGIN
										IF @btAccount=1
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,4)
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (2,3)
											END
										ELSE /*@btAccount=0*/
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,3)
											END
									END
								ELSE /*@btLevel=0*/
									BEGIN
										IF @btAccount=1
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,4)
											END
										/*ELSE @btAccount=0
											BEGIN
												INSERT INTO @ReturnTable (tintOrder,tintRoute) VALUES (1,0)
											END			
										*/			
									END
							END
					
					END
				
				
				
			END
	RETURN
	END
GO
PRINT N'Creating [dbo].[fxSelectAssignedTaskTypes]...';


GO
CREATE FUNCTION dbo.fxSelectAssignedTaskTypes
(
		@DepartmentID int,
		@TechID int,
		@ProjectID int = NULL,
		@TicketID int = NULL,
		@AcctID int = NULL
	)  
RETURNS @TaskTypesList TABLE (
	id int,
	ttID int,
	TaskTypeName nvarchar(50),
	cTaskTypeID nvarchar(50),
	SelectLevel nvarchar(150)
)
AS  
BEGIN
	DECLARE @EntityTaskTypes TABLE(	TaskTypeID int )


DECLARE @BillingMethodID int
DECLARE @ActualProjectID int
DECLARE @ParentID int
DECLARE @AccountID int
DECLARE @IsGoupCompleted bit
SET @BillingMethodID = NULL
SET @ParentID = NULL
SET @AccountID = NULL
SET @ActualProjectID = NULL
SET @IsGoupCompleted = 0

IF (@TicketID IS NOT NULL)
BEGIN
	SELECT @ActualProjectID = T.ProjectID, @AccountID = T.intAcctId, @ParentID = P.ParentID, @BillingMethodID = P.BillingMethodID
	FROM tbl_ticket T LEFT OUTER JOIN Project P ON T.ProjectID = P.ProjectID AND T.company_id = P.CompanyID
	WHERE T.Id = @TicketID AND T.company_id = @DepartmentID
END
ELSE
BEGIN
	IF (@ProjectID IS NOT NULL)
	BEGIN
		SELECT @ActualProjectID = P.ProjectID, @AccountID = P.AccountID, @ParentID = P.ParentID, @BillingMethodID = P.BillingMethodID
		FROM Project P
		WHERE P.ProjectID = @ProjectID AND P.CompanyID = @DepartmentID
	END	
END

IF (@AcctID IS NULL)
BEGIN

	IF (@BillingMethodID IS NULL)
	BEGIN
		WHILE ((@BillingMethodID IS NULL) AND (@ParentID IS NOT NULL))
		BEGIN
			SELECT @ActualProjectID = P.ProjectID, @AccountID = P.AccountID, @ParentID = P.ParentID, @BillingMethodID = P.BillingMethodID
			FROM Project P
			WHERE P.ProjectID = @ParentID AND P.CompanyID = @DepartmentID
		END
	END

	IF (@BillingMethodID IS NOT NULL)
	BEGIN
		INSERT INTO @EntityTaskTypes
		SELECT TaskTypeID
		FROM ProjectTaskTypeRate PTTR
		WHERE PTTR.ProjectID = @ActualProjectID AND PTTR.CompanyID = @DepartmentID
	END
	ELSE
	BEGIN
		SELECT @BillingMethodID = AR.BillingMethodID
		FROM AccountRate AR
		WHERE (AR.AccountID = @AccountID OR (AR.AccountID IS NULL AND @AccountID IS NULL)) AND AR.CompanyID = @DepartmentID
		IF (@BillingMethodID IS NOT NULL) 
		BEGIN
			INSERT INTO @EntityTaskTypes
			SELECT TaskTypeID
			FROM AccountTaskTypeRate ATTR
			WHERE (ATTR.AccountID = @AccountID OR (ATTR.AccountID IS NULL AND @AccountID IS NULL)) AND ATTR.CompanyID = @DepartmentID
		END
	END
END
ELSE
BEGIN
		SELECT @BillingMethodID = AR.BillingMethodID
		FROM AccountRate AR
		WHERE (AR.AccountID = @AcctID OR (AR.AccountID IS NULL AND @AcctID = -1)) AND AR.CompanyID = @DepartmentID
		IF (@BillingMethodID IS NOT NULL) 
		BEGIN
			INSERT INTO @EntityTaskTypes
			SELECT TaskTypeID
			FROM AccountTaskTypeRate ATTR
			WHERE (ATTR.AccountID = @AcctID OR (ATTR.AccountID IS NULL AND @AcctID = -1)) AND ATTR.CompanyID = @DepartmentID
		END
END
--SELECT * FROM @EntityTaskTypes

DECLARE @TaskTypesCount int
SET @TaskTypesCount = 0

DECLARE @cTechID int

DECLARE TechCursor CURSOR LOCAL FOR
	SELECT tlj.id 
	FROM
		tbl_LoginCompanyJunc tlj JOIN tbl_Logins lo ON lo.id=tlj.login_id
	WHERE
		tlj.company_id=@DepartmentID AND (tlj.id=@TechID OR @TechID = 0) AND (tlj.UserType_Id=2 OR tlj.UserType_Id=3 OR tlj.UserType_Id=4) AND tlj.btUserInactive=0

OPEN TechCursor

FETCH NEXT FROM TechCursor INTO @cTechID

WHILE @@FETCH_STATUS = 0
BEGIN

	INSERT INTO @TaskTypesList
	SELECT @cTechID, TaskTypeTech.TaskTypeId, TaskType.TaskTypeName, 
		(CAST(@cTechID AS nvarchar(15)) + '|' + CAST(TaskType.TaskTypeId AS nvarchar(15))) AS cTaskTypeID, '1 - Tech''s and Entity''s tasks intersection'
	FROM TaskTypeTech INNER JOIN @EntityTaskTypes ETT ON ETT.TaskTypeID = TaskTypeTech.TaskTypeID AND TaskTypeTech.CompanyID = @DepartmentID
		INNER JOIN TaskType ON TaskTypeTech.TaskTypeID = TaskType.TaskTypeId AND TaskTypeTech.CompanyID = TaskType.DepartmentID  
	WHERE TaskTypeTech.CompanyID=@DepartmentID AND (TaskTypeTech.TechID = @cTechID OR TaskTypeTech.TechID IS NULL) AND TaskType.Active = 1 
			AND 
				((TaskType.AppliesToTickets = 1 AND @TicketID IS NOT NULL) 
					OR 
				(TaskType.AppliesToProjects = 1 AND @ProjectID IS NOT NULL)
					OR
				((TaskType.AppliesToProjects = 1 OR TaskType.AppliesToTickets = 1) AND @AcctID IS NOT NULL))

	IF (@@ROWCOUNT = 0)
	BEGIN
		INSERT INTO @TaskTypesList
		SELECT @cTechID, TaskType.TaskTypeId, TaskType.TaskTypeName, 
			(CAST(@cTechID AS nvarchar(15)) + '|' + CAST(TaskType.TaskTypeId AS nvarchar(15))) AS cTaskTypeID, '2 - Tasks that can be applied to selected Account or Project'
		FROM @EntityTaskTypes ETT INNER JOIN TaskType ON ETT.TaskTypeID = TaskType.TaskTypeID AND TaskType.DepartmentID = @DepartmentID
		WHERE TaskType.DepartmentID=@DepartmentID AND TaskType.Active = 1  
			AND 
				((TaskType.AppliesToTickets = 1 AND @TicketID IS NOT NULL) 
					OR 
				(TaskType.AppliesToProjects = 1 AND @ProjectID IS NOT NULL)
					OR
				((TaskType.AppliesToProjects = 1 OR TaskType.AppliesToTickets = 1) AND @AcctID IS NOT NULL))		
		

		IF (@@ROWCOUNT = 0)
		BEGIN
			INSERT INTO @TaskTypesList
			SELECT @cTechID, TaskTypeTech.TaskTypeId, TaskType.TaskTypeName, 
				(CAST(@cTechID AS nvarchar(15)) + '|' + CAST(TaskType.TaskTypeId AS nvarchar(15))) AS cTaskTypeID, '3 - All Tech''s tasks'
			FROM
				TaskTypeTech INNER JOIN TaskType ON TaskTypeTech.TaskTypeID = TaskType.TaskTypeId AND TaskTypeTech.CompanyID = TaskType.DepartmentID 
			WHERE TaskTypeTech.CompanyID=@DepartmentID AND (TaskTypeTech.TechID = @cTechID OR TaskTypeTech.TechID IS NULL) AND TaskType.Active = 1 
				AND 
					((TaskType.AppliesToTickets = 1 AND @TicketID IS NOT NULL) 
						OR 
					(TaskType.AppliesToProjects = 1 AND @ProjectID IS NOT NULL)
						OR
					((TaskType.AppliesToProjects = 1 OR TaskType.AppliesToTickets = 1) AND @AcctID IS NOT NULL))
			
			IF (@@ROWCOUNT = 0)
			BEGIN
				INSERT INTO @TaskTypesList
				SELECT @cTechID, TaskType.TaskTypeId, TaskType.TaskTypeName, 
					(CAST(@cTechID AS nvarchar(15)) + '|' + CAST(TaskType.TaskTypeId AS nvarchar(15))) AS cTaskTypeID, '4 - All active tasks'
				FROM TaskType
				WHERE TaskType.DepartmentID=@DepartmentID AND TaskType.Active = 1 
					AND 
					((TaskType.AppliesToTickets = 1 AND @TicketID IS NOT NULL) 
						OR 
					(TaskType.AppliesToProjects = 1 AND @ProjectID IS NOT NULL)
						OR
					((TaskType.AppliesToProjects = 1 OR TaskType.AppliesToTickets = 1) AND @AcctID IS NOT NULL))
				IF (@@ROWCOUNT = 0)
				BEGIN					
						INSERT INTO @TaskTypesList
						VALUES (@cTechID, 2147483647, 'Default', CAST(@cTechID AS nvarchar(15)) + '|2147483647', '5 - Default task')					
				END
			END
		END
	END

	FETCH NEXT FROM TechCursor INTO @cTechID
END

CLOSE TechCursor

RETURN
END
GO
PRINT N'Creating [dbo].[fxSelectPriorities]...';


GO
CREATE FUNCTION dbo.fxSelectPriorities
(@DId AS int)
RETURNS @PrioritiesCalc TABLE 
(
	DId int,
	id int,
	tintPriority tinyint,
	Name nvarchar(70),
	SLAMinCompleteGoal int,
	SLAPercentage tinyint NULL,
	SLAMinResponseGoal int,
	SLAResponsePercentage tinyint NULL
)
AS
BEGIN
DECLARE @tinyBusHourStart tinyint,
	@tinyBusMinStart tinyint,
	@tinyBusHourStop tinyint,
	@tinyBusMinStop tinyint
SET @tinyBusHourStart = CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusHourStart') AS tinyint)
SET @tinyBusMinStart = CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusMinStart') AS tinyint)
SET @tinyBusHourStop = CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusHourStop') AS tinyint)
SET @tinyBusMinStop = CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusMinStop') AS tinyint)

INSERT INTO @PrioritiesCalc(DId, id, tintPriority, Name, SLAMinCompleteGoal, SLAPercentage, SLAMinResponseGoal, SLAResponsePercentage) 
	(SELECT p.DId, p.id, p.tintPriority, Name=CAST(p.tintPriority as nvarchar(5))+' '+p.Name,
	SLAMinCompleteGoal=CASE p.btUseBusHours
		WHEN 1 THEN CASE WHEN @tinyBusHourStart IS NOT NULL THEN p.SLADays*(DATEDIFF(n,'1/1/2003 '+CONVERT(varchar(2),@tinyBusHourStart)+':'+CONVERT(varchar(2), @tinyBusMinStart), '1/1/2003 '+CONVERT(varchar(2), @tinyBusHourStop)+':'+CONVERT(varchar(2), @tinyBusMinStop))) + (p.SLAHours*60)+(p.SLAMinutes) ELSE (p.SLADays*1440)+(p.SLAHours*60)+(p.SLAMinutes) END
		WHEN 0 THEN (p.SLADays*1440)+(p.SLAHours*60)+(p.SLAMinutes)
	END,
	SLAPercentage,
	SLAMinResponseGoal=CASE p.btResponseUseBusHours
		WHEN 1 THEN CASE WHEN @tinyBusHourStart IS NOT NULL THEN p.SLAResponseDays*(DATEDIFF(n,'1/1/2003 '+CONVERT(varchar(2), @tinyBusHourStart)+':'+CONVERT(varchar(2), @tinyBusMinStart), '1/1/2003 '+CONVERT(varchar(2), @tinyBusHourStop)+':'+CONVERT(varchar(2), @tinyBusMinStop))) + (p.SLAResponseHours*60)+(p.SLAResponseMinutes) ELSE (p.SLAResponseDays*1440)+(p.SLAResponseHours*60)+(p.SLAResponseMinutes) END
		WHEN 0 THEN (p.SLAResponseDays*1440)+(p.SLAResponseHours*60)+(p.SLAResponseMinutes)
	END,
	SLAResponsePercentage
	FROM Priorities p LEFT OUTER JOIN tbl_company c ON c.company_id=@DId WHERE p.DId=@DId)

RETURN
	
END
GO
PRINT N'Creating [dbo].[Split]...';


GO
CREATE FUNCTION dbo.Split(@String nvarchar(max), @Delimiter char(1))       
    returns @temptable TABLE (strn nvarchar(max))       
    as       
    begin       
        declare @idx int       
        declare @slice nvarchar(max)       
          
        select @idx = 1       
            if len(@String)<1 or @String is null  return       
          
        while @idx!= 0       
        begin       
            set @idx = charindex(@Delimiter,@String)       
            if @idx!=0       
                set @slice = left(@String,@idx - 1)       
            else       
                set @slice = @String       
              
            if(len(@slice)>0)  
                insert into @temptable(strn) values(@slice)       
      
            set @String = right(@String,len(@String) - @idx)       
            if len(@String) = 0 break       
        end   
    return       
    end
GO
PRINT N'Creating [dbo].[fxGetRootLocation]...';


GO
CREATE FUNCTION [dbo].[fxGetRootLocation]
	(
		@DId int,
		@LocationId int
	)
RETURNS int 
AS
BEGIN
	DECLARE @RootLocationId int
	SELECT @RootLocationId = l.Id FROM dbo.fxGetAllParentLocations(@DId, @LocationId) AS pl INNER JOIN Locations as l ON l.Id=pl.Id WHERE l.ParentId IS NULL
	RETURN @RootLocationId
END
GO
PRINT N'Creating [dbo].[fxGetSubLocationsTicketCount]...';


GO
CREATE FUNCTION [dbo].[fxGetSubLocationsTicketCount]
	(
		@DId int,		
		@LocationId int
	)
RETURNS int
AS
	BEGIN
	
		DECLARE @TktCount int
		SELECT @TktCount = SUM(ISNULL(dbo.fxGetLocationTicketCount(@DId, cl.Id), 0))
		FROM dbo.fxGetAllChildLocations(@DId, @LocationId) cl
			INNER JOIN Locations L ON L.DId = @DId AND L.Id = cl.Id
		WHERE L.Inactive = 0 AND  L.Id <> @LocationId								
		
		RETURN @TktCount
	END
GO
PRINT N'Creating [dbo].[fxGetAllParentLocationsWithNames]...';


GO
CREATE FUNCTION [dbo].[fxGetAllParentLocationsWithNames]
(	
	@DId int,
	@LocationId int
)
RETURNS TABLE
AS
	RETURN SELECT L.Id, L.[Name] FROM dbo.fxGetAllParentLocations(@DId, @LocationId) AS LIDs
	INNER JOIN Locations AS L ON L.DId = @DId AND L.Id = LIDs.Id
GO
PRINT N'Creating [dbo].[fxSelectTktSLA]...';


GO


CREATE FUNCTION dbo.fxSelectTktSLA
(@DId as int)
RETURNS TABLE
AS
RETURN
	(SELECT Distinct t.company_id, t.id, t.TicketNumber, t.PriorityId, t.ClosedTime, t.LocationId, t.AccountLocationId, t.class_id, t.CreationCatsId, t.Technician_id, t.intAcctId,
	t.intSLACompleteUsed, 
	t.intSLAResponseUsed,
	t.User_id,
	t.tintLevel,
	SLACompleteOnTime=CASE WHEN p.SLAMinCompleteGoal = 0 THEN null WHEN p.SLAMinCompleteGoal-t.intSLACompleteUsed>=0 THEN 1 ELSE 0 END,
	SLAResponseOnTime=CASE WHEN p.SLAMinResponseGoal = 0 THEN null WHEN p.SLAMinResponseGoal-t.intSLAResponseUsed>=0 THEN 1 ELSE 0 END,
	p.SLAMinCompleteGoal,
	p.SLAMinResponseGoal,
	p.SLAPercentage,
	p.SLAResponsePercentage,
	tlj.SupGroupID as SupportGroupID	
	FROM tbl_ticket t 
	JOIN fxSelectPriorities(@DId) p ON P.DId=@DId AND t.PriorityId=p.id 
	JOIN tbl_LoginCompanyJunc tlj ON t.company_id=tlj.company_id and t.user_id=tlj.id
	WHERE t.company_id=@DId AND status='Closed')
GO
PRINT N'Creating [dbo].[Account]...';


GO
CREATE VIEW dbo.Account
AS
SELECT     a.DId, a.Id, a.intBWDAcctNum AS BWDAccountNumber, a.btOrgAcct AS IsOrgAccount, a.vchAcctNum AS AccountNumber, a.vchRef1Num AS Ref1Number, 
                      a.vchRef2Num AS Ref2Number, sg.vchName AS SupportGroupName, a.txtNote AS Note, a.vchCust1 AS CustomField1, a.vchCust2 AS CustomField2, 
                      a.vchCust3 AS CustomField3, a.vchCust4 AS CustomField4, a.dtCust1 AS CustomFieldDate1, a.dtCust2 AS CustomFieldDate2, a.dtUpdated AS UpdatedDateTime, 
                      l1.Email AS UpdatedByEmail, l1.LastName + ', ' + l1.FirstName AS UpdatedByFullName, a.btActive AS IsActive, a.vchName AS AccountName, 
                      l2.Email AS ReportTechnicianEmail, l2.LastName + ', ' + l2.FirstName AS ReportTechnicianFullName, a.vchEmailSuffix AS EmailSuffix, a.vchCust5 AS CustomField5, 
                      a.vchCust6 AS CustomField6, a.vchCust7 AS CustomField7, a.vchCust8 AS CustomField8, dbo.fxGetUserLocationName(a.DId, a.LocationId) AS LocationFullName, 
                      a.vchCust10 AS CustomField10, a.vchCust11 AS CustomField11, a.vchCust12 AS CustomField12, a.vchCust13 AS CustomField13, a.vchCust14 AS CustomField14, 
                      a.vchCust15 AS CustomField15, a.vchCust9 AS CustomField9, a.Guid, a.AccLevelTimeTracking AS IsTimeTracking, a.FBClientId
FROM         dbo.Accounts AS a LEFT OUTER JOIN
                      dbo.SupportGroups AS sg ON a.DId = sg.DId AND a.SupGroupId = sg.Id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj1 ON a.DId = lcj1.company_id AND a.UpdatedId = lcj1.id LEFT OUTER JOIN
                      dbo.tbl_Logins AS l1 ON lcj1.login_id = l1.id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj2 ON a.DId = lcj2.company_id AND a.AcctRepId = lcj2.id LEFT OUTER JOIN
                      dbo.tbl_Logins AS l2 ON lcj2.login_id = l2.id
GO
PRINT N'Creating [dbo].[Asset]...';


GO
CREATE VIEW dbo.Asset
AS
SELECT     a.DepartmentId AS DId, a.Id, l1.Email AS OwnerEmail, l1.LastName + ', ' + l1.FirstName AS OwnerFullName, l2.Email AS CheckedOutEmail, 
                      l2.LastName + ', ' + l2.FirstName AS CheckedOutFullName, at.Name AS TypeName, am.Make AS MakeName, amd.Model AS ModelName, 
                      dbo.fxGetUserLocationName(a.DepartmentId, a.LocationId) AS LocationFullName, v1.name AS VendorName, v2.name AS WarrantyVendorName, 
                      a.Name AS AssetName, a.SerialNumber, a.Description, a.Value, a.DateAquired, a.LaborWarrantyLength, a.PartsWarrantyLength, a.Notes, a.PONumber, 
                      a.Active AS IsActive, a.FundingCode, ac.Name, ast.vchStatus AS Status, a.AssetSort, a.DatePurchased, a.DateDeployed, a.DateOutOfService, a.DateEntered, 
                      a.DateReceived, a.DateDisposed, a.ValueCurrent, a.ValueReplacement, a.ValueDepreciated, a.ValueSalvage, a.DisposalCost, a.FundingSource, 
                      a.dtUpdated AS UpdatedDateTime, l3.Email AS UpdatedByEmail, l3.LastName + ', ' + l3.FirstName AS UpdatedByFullName, acc.vchName AS AccountName, 
                      acc.vchAcctNum AS AccountNumber, a.AssetNumber, a.AssetGUID, a.Unique1, a.Unique2, a.Unique3, a.Unique4, a.Unique5, a.Unique6, a.Unique7, 
                      acomp.RegisteredUser AS ComputerRegisteredUser, acomp.OperatingSystem AS ComputerOperationSystem, acomp.OSSerial AS ComputerOSSerial, 
                      acomp.RamMbytes AS ComputerRamMbytes, acomp.VideoDescription AS ComputerVideoDescription, acomp.VideoMemoryMbytes AS ComputerVideoMemoryMbytes, 
                      acomp.VideoHResolution AS ComputerVideoHResolution, acomp.VideoVResolution AS ComputerVideoVResolution, acomp.NetworkName AS ComputerNetworkName, 
                      acomp.NetworkDomain AS ComputerNetworkDomain, acomp.NetworkCard1IP AS ComputerNetworkCard1IP, acomp.NetworkCard1Mask AS ComputerNetworkCard1Mask,
                       acomp.NetworkCard1Gate AS ComputerNetworkCard1Gate, acomp.NetworkCard1Address AS ComputerNetworkCard1Address, 
                      acomp.NetworkCard1Description AS ComputerNetworkCard1Description, acomp.BiosSerial AS ComputerBiosSerial, 
                      acomp.MotherboardSerial AS ComputerMotherboardSerial, acld.DeviceID AS LogicalDriveDeviceID, acld.FileSystem AS LogicalDriveFileSystem, 
                      acld.SizeGB AS LogicalDriveSizeGB, acld.FreeSpaceGB AS LogicalDriveFreeSpaceGB, acld.Description AS LogicalDriveDescription, 
                      acld.VolumeName AS LogicalDriveVolumeName, acld.VolumeSerial AS LogicalDriveVolumeSerial, acld.Compressed AS LogicalDriveCompressed, 
                      acld.DriveType AS LogicalDriveType, acp.PrinterName, acp.PrinterDriver, acp.PrinterPort, acs.SoftwareName, acs.SoftwarePublisher, acs.SoftwareVersion, 
                      acpu.CPUType, acpu.CPUSerial, acpu.CPUVendor, acpu.CPUSpeedMHz, acpu.CPUClass, acpu.CurrentClockSpeed AS CPUCurrentClockSpeed, 
                      acpu.UniqueId AS CPUUniqueId, acpu.Description AS CPUDescription, acpu.Version AS CPUVersion, acpu.L2CachSize AS CPUL2CachSize, 
                      acpu.ExtClock AS CPUExtClock, acpu.CurrentVoltage AS CPUCurrentVoltage, acpu.DeviceID AS CPUDeviceID
FROM         dbo.Assets AS a LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj1 ON a.DepartmentId = lcj1.company_id AND a.OwnerId = lcj1.id LEFT OUTER JOIN
                      dbo.tbl_Logins AS l1 ON lcj1.login_id = l1.id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj2 ON a.DepartmentId = lcj2.company_id AND a.CheckedOutId = lcj2.id LEFT OUTER JOIN
                      dbo.tbl_Logins AS l2 ON lcj2.login_id = l2.id LEFT OUTER JOIN
                      dbo.AssetCategories AS ac ON a.DepartmentId = ac.DepartmentId AND a.CategoryId = ac.id LEFT OUTER JOIN
                      dbo.AssetTypes AS at ON a.DepartmentId = at.DepartmentId AND a.TypeId = at.id LEFT OUTER JOIN
                      dbo.AssetMakes AS am ON a.DepartmentId = am.DepartmentId AND a.MakeId = am.id LEFT OUTER JOIN
                      dbo.AssetModels AS amd ON a.DepartmentId = amd.DepartmentId AND a.ModelId = amd.id LEFT OUTER JOIN
                      dbo.tbl_vendors AS v1 ON a.DepartmentId = v1.company_id AND a.VendorId = v1.id LEFT OUTER JOIN
                      dbo.tbl_vendors AS v2 ON a.DepartmentId = v2.company_id AND a.WarrantyVendor = v2.id INNER JOIN
                      dbo.AssetStatus AS ast ON a.StatusId = ast.id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj3 ON a.DepartmentId = lcj3.company_id AND a.intUpdatedBy = lcj3.id LEFT OUTER JOIN
                      dbo.tbl_Logins AS l3 ON lcj3.login_id = l3.id LEFT OUTER JOIN
                      dbo.Accounts AS acc ON a.DepartmentId = acc.DId AND a.AccountId = acc.Id LEFT OUTER JOIN
                      dbo.AssetComputerLogicalDrives AS acld ON a.DepartmentId = acld.DepartmentId AND a.Id = acld.AssetId LEFT OUTER JOIN
                      dbo.AssetComputerPrinters AS acp ON a.DepartmentId = acp.DepartmentId AND a.Id = acp.AssetId LEFT OUTER JOIN
                      dbo.AssetComputerProcessors AS acpu ON a.DepartmentId = acpu.DepartmentId AND a.Id = acpu.AssetId LEFT OUTER JOIN
                      dbo.AssetComputers AS acomp ON a.DepartmentId = acomp.DepartmentId AND a.Id = acomp.AssetId LEFT OUTER JOIN
                      dbo.AssetComputerSoftwares AS acs ON a.DepartmentId = acs.DepartmentId AND a.Id = acs.AssetId
GO
PRINT N'Creating [dbo].[LoginView]...';


GO
CREATE VIEW [dbo].[LoginView]
AS
SELECT     TOP 100 PERCENT LJ.company_id, LJ.btUserInactive AS Inactive, L.Email AS Login, L.Password
FROM       dbo.tbl_LoginCompanyJunc AS LJ INNER JOIN
           dbo.tbl_Logins AS L ON L.id = LJ.login_id
WHERE     (LJ.UserType_Id = 3)
ORDER BY LJ.company_id
GO
PRINT N'Creating [dbo].[rpt_Accounts]...';


GO
CREATE VIEW dbo.rpt_Accounts
AS
SELECT     DId, Id, intBWDAcctNum AS BWDAccountNumber, btOrgAcct AS IsOrganizationAccount, vchAcctNum AS AccountNumber, vchRef1Num, vchRef2Num, SupGroupId, 
                      txtNote AS Note, vchCust1 AS StrCustField1, vchCust2 AS StrCustField2, vchCust3 AS StrCustField3, vchCust4 AS StrCustField4, dtCust1 AS DateTimeCustField1, 
                      dtCust2 AS DateTimeCustField2, btActive AS IsActive, vchName AS AccountName, AcctRepId AS AccountReportTechId, vchEmailSuffix AS AccountEmailSuffix, 
                      vchCust5 AS StrCustField5, vchCust6 AS StrCustField6, vchCust7 AS StrCustField7, vchCust8 AS StrCustField8, vchCust11 AS StrCustField11, 
                      vchCust12 AS StrCustField12, vchCust13 AS StrCustField13, vchCust14 AS StrCustField14, vchCust15 AS StrCustField15, vchCust9 AS StrCustField9, 
                      vchCust10 AS StrCustField10, AccLevelTimeTracking AS IsTimeTracking, Guid
FROM         dbo.Accounts
GO
PRINT N'Creating [dbo].[rpt_Classes]...';


GO
CREATE VIEW dbo.rpt_Classes
AS
SELECT     company_id AS DId, id, ParentId, Name AS ClassName, dbo.fxGetFullClassName(company_id, id) AS ClassFullName, LastResortTechId, tintClassType AS ClassType, 
                      txtDesc AS Description, bitAllowEmailParsing AS IsAllowEmailParsing, intPriorityId AS PriorityId, tintLevelOverride AS LevelOverride, btInactive AS IsInactive
FROM         dbo.tbl_class
GO
PRINT N'Creating [dbo].[rpt_CreationCategories]...';


GO
CREATE VIEW dbo.rpt_CreationCategories
AS
SELECT     DId, Id, btInactive AS IsInactive, vchName AS CreationCategoryName
FROM         dbo.CreationCats
GO
PRINT N'Creating [dbo].[rpt_Folders]...';


GO
CREATE VIEW dbo.rpt_Folders
AS
SELECT     DId, id, ParentId, vchName AS FolderName, dbo.fxGetUserFolderName(DId, id) AS FolderFullName
FROM         dbo.Folders
GO
PRINT N'Creating [dbo].[rpt_Knowledgebase]...';


GO
CREATE VIEW dbo.rpt_Knowledgebase
AS
SELECT     dbo.tbl_Knowledgebase.id, dbo.tbl_Knowledgebase.DepartmentId AS DId, dbo.tbl_Knowledgebase.fullname, dbo.tbl_Knowledgebase.subject, 
                      dbo.tbl_Knowledgebase.symptom, dbo.tbl_Knowledgebase.cause, dbo.tbl_Knowledgebase.resolution, dbo.tbl_Knowledgebase.dtDate, 
                      dbo.tbl_Knowledgebase.globalknowledgebase, dbo.tbl_Knowledgebase.LoginCompanyJunc_id AS UId, dbo.tbl_Logins.Email AS CreatedByEmail, 
                      dbo.tbl_Logins.FirstName AS CreatedByFirstName, dbo.tbl_Logins.LastName AS CreatedByLastName
FROM         dbo.tbl_Knowledgebase INNER JOIN
                      dbo.tbl_LoginCompanyJunc ON dbo.tbl_Knowledgebase.DepartmentId = dbo.tbl_LoginCompanyJunc.company_id AND 
                      dbo.tbl_Knowledgebase.LoginCompanyJunc_id = dbo.tbl_LoginCompanyJunc.id INNER JOIN
                      dbo.tbl_Logins ON dbo.tbl_LoginCompanyJunc.login_id = dbo.tbl_Logins.id
GO
PRINT N'Creating [dbo].[rpt_KnowledgebaseResponses]...';


GO
CREATE VIEW dbo.rpt_KnowledgebaseResponses
AS
SELECT     dbo.tbl_KnowledgebaseResponses.id, dbo.tbl_KnowledgebaseResponses.DepartmentId AS DId, 
                      dbo.tbl_KnowledgebaseResponses.Knowledgebase_Id AS KnowledgebaseId, dbo.tbl_KnowledgebaseResponses.dtDate AS ResponseDate, 
                      dbo.tbl_KnowledgebaseResponses.Comment, dbo.tbl_KnowledgebaseResponses.vchPostedBy AS PostedBy, 
                      dbo.tbl_KnowledgebaseResponses.LoginCompanyJunc_Id AS UId, dbo.tbl_Logins.Email AS PostedByEmail, dbo.tbl_Logins.FirstName AS PostedByFirstName, 
                      dbo.tbl_Logins.LastName AS PostedByLastName
FROM         dbo.tbl_KnowledgebaseResponses LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc ON dbo.tbl_KnowledgebaseResponses.DepartmentId = dbo.tbl_LoginCompanyJunc.company_id AND 
                      dbo.tbl_KnowledgebaseResponses.LoginCompanyJunc_Id = dbo.tbl_LoginCompanyJunc.id INNER JOIN
                      dbo.tbl_Logins ON dbo.tbl_LoginCompanyJunc.login_id = dbo.tbl_Logins.id
GO
PRINT N'Creating [dbo].[rpt_Levels]...';


GO
CREATE VIEW dbo.rpt_Levels
AS
SELECT     DId, tintLevel AS Id, tintLevel AS LevelNumber, Description, LevelName
FROM         dbo.TktLevels
GO
PRINT N'Creating [dbo].[rpt_Locations]...';


GO
CREATE VIEW dbo.rpt_Locations
AS
SELECT
	dbo.Locations.DId,
	dbo.Locations.Id,
	dbo.Locations.ParentId, 
	dbo.Locations.AccountId, 
	dbo.LocationTypes.Name AS TypeName, 
	dbo.LocationTypes.HierarchyLevel AS TypeHierarchyLevel, 
	dbo.Locations.Name AS LocationName, 
	dbo.fxGetUserLocationName(dbo.Locations.DId, dbo.Locations.Id) AS LocationFullName, 
	dbo.Locations.Inactive AS IsInactive, 
	dbo.Locations.Description, 
	dbo.Locations.IsDefault
FROM         dbo.Locations left JOIN
                      dbo.LocationTypes ON dbo.Locations.LocationTypeId = dbo.LocationTypes.Id
GO
PRINT N'Creating [dbo].[rpt_Priorities]...';


GO
CREATE VIEW dbo.rpt_Priorities
AS
SELECT     DId, Id, tintPriority AS PriorityNumber, Name AS PriorityName, Description
FROM         dbo.Priorities
GO
PRINT N'Creating [dbo].[rpt_Projects]...';


GO
CREATE VIEW dbo.rpt_Projects
AS
SELECT     CompanyID AS DId, ProjectID AS Id, AccountID, ParentID, Name, Description, InternalPMID, ClientPMID, Active AS IsActive, HourlyBlendedRate, FlatFee, 
                      BillingMethodID
FROM         dbo.Project
GO
PRINT N'Creating [dbo].[rpt_ResolutionCategories]...';


GO
CREATE VIEW dbo.rpt_ResolutionCategories
AS
SELECT     DId, Id, btInactive AS IsInactive, vchName AS ResolutionCategoryName, ParentId, btResolved AS IsResolved
FROM         dbo.ResolutionCats
GO
PRINT N'Creating [dbo].[rpt_SupportGroups]...';


GO
CREATE VIEW dbo.rpt_SupportGroups
AS
SELECT     DId, Id, vchName AS SupportGroupName
FROM         dbo.SupportGroups
GO
PRINT N'Creating [dbo].[rpt_TicketLog]...';


GO
CREATE VIEW dbo.rpt_TicketLog
AS
SELECT     DId, Id, TId AS TicketId, UId AS UserId, dtDate AS LogDateTime, vchType AS LogType, vchNote AS LogNote
FROM         dbo.TicketLogs
GO
PRINT N'Creating [dbo].[rpt_Tickets]...';


GO
CREATE VIEW dbo.rpt_Tickets
AS
SELECT     dbo.tbl_ticket.company_id AS DId, dbo.tbl_ticket.Id, dbo.tbl_ticket.User_id AS UserId, dbo.tbl_ticket.Technician_id AS TechId, dbo.tbl_ticket.Created_id AS CreatedById, 
                      dbo.tbl_ticket.Closed_id AS ClosedById, dbo.tbl_ticket.LocationId, dbo.tbl_ticket.AccountLocationId, dbo.tbl_ticket.class_id AS ClassId, dbo.tbl_ticket.Status, 
                      dbo.tbl_ticket.Subject, dbo.tbl_ticket.CreateTime, dbo.tbl_ticket.Note, dbo.tbl_ticket.ClosedTime, dbo.tbl_ticket.SerialNumber, dbo.tbl_ticket.folder_id AS FolderId, 
                      dbo.tbl_ticket.CreationCatsId AS CreationCategoryId, dbo.tbl_ticket.TicketNumber, dbo.tbl_ticket.CustomXML, dbo.tbl_ticket.PartsCost, dbo.tbl_ticket.LaborCost, 
                      dbo.tbl_ticket.TravelCost, dbo.tbl_ticket.MiscCost, dbo.tbl_ticket.PriorityId, dbo.tbl_ticket.dtSLAComplete AS SLACompleteDateTime, 
                      dbo.tbl_ticket.dtSLAResponse AS SLAResponseDateTime, dbo.tbl_ticket.dtSLAStart AS SLAStartDateTime, dbo.tbl_ticket.dtReqComp AS RequestCompletionDateTime, 
                      dbo.tbl_ticket.ReqCompNote AS RequestCompletionNote, dbo.tbl_ticket.dtFollowUp AS FollowUpDateTime, dbo.tbl_ticket.FollowUpNote, 
                      dbo.tbl_ticket.tintLevel AS LevelId, dbo.tbl_ticket.btViaEmailParser AS IsCreatedViaEmailParser, dbo.tbl_ticket.intAcctId AS AccountId, dbo.tbl_ticket.ClosureNote, 
                      dbo.tbl_ticket.btResolved AS IsResolved, dbo.tbl_ticket.ResolutionCatsId AS ResolutionCategoryId, dbo.tbl_ticket.btConfirmed AS IsConfirmed, 
                      dbo.tbl_ticket.intConfirmedBy AS ConfirmedById, dbo.tbl_ticket.dtConfirmed AS ConfirmedDateTime, dbo.tbl_ticket.vchConfirmedNote AS ConfirmedNote, 
                      dbo.tbl_ticket.vchIdMethod AS IDMethod, dbo.tbl_ticket.btHandledByCC AS IsHandledByCallCenter, 
                      dbo.SubmissionCategories.vchName AS SubmissionCategoryName, dbo.tbl_ticket.EmailCC, dbo.tbl_ticket.TicketNumberPrefix, dbo.tbl_ticket.RemainingHours, 
                      dbo.tbl_ticket.TotalHours, dbo.tbl_ticket.ProjectID, dbo.tbl_ticket.NextStep
FROM         dbo.tbl_ticket LEFT OUTER JOIN
                      dbo.SubmissionCategories ON dbo.tbl_ticket.intSubmissionCatId = dbo.SubmissionCategories.Id
GO
PRINT N'Creating [dbo].[rpt_Users]...';


GO
CREATE VIEW dbo.rpt_Users
AS
SELECT     dbo.tbl_LoginCompanyJunc.id AS UId, dbo.tbl_LoginCompanyJunc.company_id AS DId, dbo.tbl_Logins.Email, dbo.tbl_Logins.FirstName, dbo.tbl_Logins.LastName, 
                      dbo.tbl_Logins.Title, dbo.tbl_Logins.Phone, dbo.tbl_Logins.MobilePhone, dbo.tbl_Logins.sintHourOffset AS HoursOffset, dbo.tbl_UserType.Name AS UserType, dbo.tbl_LoginCompanyJunc.Notes, 
                      dbo.tbl_LoginCompanyJunc.CheckinStatus, dbo.tbl_LoginCompanyJunc.btUserInactive AS IsInactive
FROM         dbo.tbl_LoginCompanyJunc INNER JOIN
                      dbo.tbl_Logins ON dbo.tbl_LoginCompanyJunc.login_id = dbo.tbl_Logins.id INNER JOIN
                      dbo.tbl_UserType ON dbo.tbl_LoginCompanyJunc.UserType_Id = dbo.tbl_UserType.id
GO
PRINT N'Creating [dbo].[Ticket]...';


GO
CREATE VIEW dbo.Ticket
AS
SELECT     t.company_id AS DId, t.Id, l1.Email AS UserEmail, l1.LastName + ', ' + l1.FirstName AS UserFullName, l2.Email AS TechnicianEmail, 
                      l2.LastName + ', ' + l2.FirstName AS TechnicianFullName, l3.Email AS CreatedUserEmail, l3.LastName + ', ' + l3.FirstName AS CreatedUserFullName, 
                      l4.Email AS ClosedUserEmail, l4.LastName + ', ' + l4.FirstName AS ClosedUserFullName, l5.Email AS ConfirmedUserEmail, 
                      l5.LastName + ', ' + l5.FirstName AS ConfirmedUserFullName, dbo.fxGetUserLocationName(t.company_id, t.LocationId) AS LocationFullName, 
                      dbo.fxGetUserLocationName(t.company_id, t.AccountLocationId) AS AccountLocationFullName, dbo.fxGetFullClassName(t.company_id, t.class_id) AS ClassFullName, 
                      dbo.fxGetUserFolderName(t.company_id, t.folder_id) AS FolderFullName, t.CreateTime, t.ClosedTime, t.dtConfirmed AS ConfirmedDateTime, t.EstimatedTime, t.Status, 
                      t.Subject, t.TicketNumber, t.TicketNumberPrefix, t.ClosureNote, t.vchConfirmedNote AS ConfirmedNote, t.EmailCC, cc.vchName AS CreationCategoryName, t.PartsCost, 
                      t.LaborCost, t.TravelCost, t.MiscCost, STR(p.tintPriority) + ' - ' + p.Name AS Priority, STR(tl.tintLevel) + ' - ' + tl.LevelName AS TicketLevel, 
                      t.dtSLAComplete AS SLACompleteDateTime, t.dtSLAResponse AS SLAResponseDateTime, t.dtSLAStart AS SLAStartDateTime, 
                      t.dtReqComp AS RequestCompletionDateTime, t.ReqCompNote AS RequestCompletionNote, t.dtFollowUp AS FollowUpDateTime, t.FollowUpNote, 
                      t.btViaEmailParser AS IsCreatedViaEmailParser, a.vchName AS AccountName, a.vchAcctNum AS AccountNumber, t.btResolved AS IsResolved, 
                      rc.vchName AS ResolutionCategoryName, t.btConfirmed AS IsConfirmed, t.vchIdMethod AS IdMethod, t.btHandledByCC AS IsHandledByCallCenter, 
                      sc.vchName AS SubmissionCategoryName, t.RemainingHours, t.TotalHours, t.NextStep, t.btPreventive AS IsPreventive, pr.Name AS ProjectName
FROM         dbo.tbl_ticket AS t INNER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj1 ON t.company_id = lcj1.company_id AND t.User_id = lcj1.id INNER JOIN
                      dbo.tbl_Logins AS l1 ON lcj1.login_id = l1.id INNER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj2 ON t.company_id = lcj2.company_id AND t.Technician_id = lcj2.id INNER JOIN
                      dbo.tbl_Logins AS l2 ON lcj2.login_id = l2.id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj3 ON t.company_id = lcj3.company_id AND t.Created_id = lcj3.id LEFT OUTER JOIN
                      dbo.tbl_Logins AS l3 ON lcj3.login_id = l3.id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj4 ON t.company_id = lcj4.company_id AND t.Closed_id = lcj4.id LEFT OUTER JOIN
                      dbo.tbl_Logins AS l4 ON lcj4.login_id = l4.id LEFT OUTER JOIN
                      dbo.CreationCats AS cc ON t.company_id = cc.DId AND t.CreationCatsId = cc.Id LEFT OUTER JOIN
                      dbo.Priorities AS p ON t.company_id = p.DId AND t.PriorityId = p.Id LEFT OUTER JOIN
                      dbo.TktLevels AS tl ON t.company_id = tl.DId AND t.tintLevel = tl.tintLevel LEFT OUTER JOIN
                      dbo.Accounts AS a ON t.company_id = a.DId AND t.intAcctId = a.Id LEFT OUTER JOIN
                      dbo.ResolutionCats AS rc ON t.company_id = rc.DId AND t.ResolutionCatsId = rc.Id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj5 ON t.company_id = lcj5.company_id AND t.intConfirmedBy = lcj5.id LEFT OUTER JOIN
                      dbo.tbl_Logins AS l5 ON lcj5.login_id = l5.id LEFT OUTER JOIN
                      dbo.SubmissionCategories AS sc ON t.intSubmissionCatId = sc.Id LEFT OUTER JOIN
                      dbo.Project AS pr ON t.company_id = pr.CompanyID AND t.ProjectID = pr.ProjectID
GO
PRINT N'Creating [dbo].[TimeLog]...';


GO
CREATE VIEW dbo.TimeLog
AS
SELECT     tt.DepartmentId AS DId, tt.Id, t.TicketNumber, t.Subject AS TicketSubject, l1.Email AS UserEmail, l1.LastName + ', ' + l1.FirstName AS UserFullName, tt.Date, tt.Hours, 
                      tt.Note, tt.HourlyRate, tt.StartTime, tt.StopTime, tt.Downloaded AS IsDownloaded, ttp.TaskTypeName, tt.HoursRemaining, tt.UTCOffset, tt.CreatedTime, 
                      l2.Email AS CreatedByEmail, l2.LastName + ', ' + l2.FirstName AS CreatedByFullName, tt.UpdatedTime, l3.Email AS UpdatedByEmail, 
                      l3.LastName + ', ' + l3.FirstName AS UpdatedByFullName, tt.Deleted AS IsDeleted, tb.Date AS BillDate, tb.BeginDate AS BillBeginDate, tb.EndDate AS BillEnadDate, 
                      tb.Exported AS IsBillExported, tt.BillRate, i.Date AS InvoiceDate, i.BeginDate AS InvoiceBeginDate, i.EndDate AS InvoiceEndDate, 
                      a2.vchAcctNum AS InvoiceAccountNumber, a2.vchName AS InvoiceAccountName, p.Name AS InvoiceProjectName, i.Amount AS InvoiceAmount, 
                      i.TotalHours AS InvoiceTotalHours, i.TravelCost AS InvoiceTravelCost, tb.TotalHours AS BillTotalHours, tb.Amount AS BillAmount
FROM         dbo.TicketTime AS tt INNER JOIN
                      dbo.tbl_ticket AS t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj1 ON tt.DepartmentId = lcj1.company_id AND tt.UserId = lcj1.id LEFT OUTER JOIN
                      dbo.tbl_Logins AS l1 ON lcj1.login_id = l1.id LEFT OUTER JOIN
                      dbo.TaskType AS ttp ON tt.DepartmentId = ttp.DepartmentID AND tt.TaskTypeId = ttp.TaskTypeId LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj2 ON tt.DepartmentId = lcj2.company_id AND tt.CreatedBy = lcj2.id LEFT OUTER JOIN
                      dbo.tbl_Logins AS l2 ON lcj2.login_id = l2.id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS lcj3 ON tt.DepartmentId = lcj3.company_id AND tt.UpdatedBy = lcj3.id LEFT OUTER JOIN
                      dbo.tbl_Logins AS l3 ON lcj3.login_id = l3.id LEFT OUTER JOIN
                      dbo.TimeBill AS tb ON tt.DepartmentId = tb.DId AND tt.BillId = tb.Id LEFT OUTER JOIN
                      dbo.Invoice AS i ON tt.DepartmentId = i.DId AND tt.InvoiceId = i.Id LEFT OUTER JOIN
                      dbo.Accounts AS a2 ON i.DId = a2.DId AND i.AccountId = a2.Id LEFT OUTER JOIN
                      dbo.Project AS p ON i.DId = p.CompanyID AND i.ProjectId = p.ProjectID
GO
PRINT N'Creating [dbo].[vw_Asset]...';


GO
CREATE VIEW dbo.vw_Asset
AS
SELECT     A.Id, A.Name, A.CategoryId, A.SerialNumber, A.Unique1, A.Unique2, A.Unique3, A.Unique4, A.Unique5, A.Unique6, A.Unique7, A.Room, 
                      dbo.AssetModels.Model AS AssetModelName, dbo.AssetMakes.Make AS AssetMakeName, dbo.fxGetUserLocationName(A.DepartmentId, A.LocationId) AS AssetLocationName, 
                      lo1.LastName + ', ' + lo1.FirstName AS CheckedOutName, A.Active, A.DepartmentId, A.OwnerId, A.CheckedOutId, 
                      A.TypeId, A.MakeId, A.ModelId, A.LocationId, A.StatusId, ST.vchStatus
FROM         dbo.Assets AS A LEFT OUTER JOIN
                      dbo.AssetModels ON A.DepartmentId = dbo.AssetModels.DepartmentId AND A.ModelId = dbo.AssetModels.id LEFT OUTER JOIN
                      dbo.AssetMakes ON A.DepartmentId = dbo.AssetMakes.DepartmentId AND A.MakeId = dbo.AssetMakes.id LEFT OUTER JOIN
--                      dbo.tbl_Locations ON A.DepartmentId = dbo.tbl_Locations.DId AND A.LocationId = dbo.tbl_Locations.id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc tlj ON tlj.company_id = A.DepartmentId AND tlj.id = A.CheckedOutId LEFT OUTER JOIN
                      dbo.tbl_Logins lo1 ON lo1.id = tlj.login_id LEFT OUTER JOIN
                      dbo.AssetStatus ST ON ST.id = A.StatusId
GO
PRINT N'Creating [dbo].[vw_AssetDetail]...';


GO
CREATE VIEW dbo.vw_AssetDetail
AS
SELECT     dbo.AssetModels.Model AS AssetModelName, dbo.AssetMakes.Make AS AssetMakeName, dbo.AssetTypes.Name AS AssetTypeName, 
                      dbo.fxGetUserLocationName(dbo.Assets.DepartmentId, dbo.Assets.LocationId) AS AssetLocationName, lo1.LastName + ', ' + lo1.FirstName AS OwnerName, 
                      lo2.LastName + ', ' + lo2.FirstName AS CheckedOutName, dbo.Assets.*, dbo.AssetCategories.Name AS AssetCategoryName, 
                      dbo.AssetTypes.configCustFields AS configCustFields, ST.vchStatus
FROM         dbo.Assets LEFT OUTER JOIN
                      dbo.AssetCategories ON dbo.AssetCategories.DepartmentId = dbo.Assets.DepartmentId AND 
                      dbo.AssetCategories.id = dbo.Assets.CategoryId LEFT OUTER JOIN
                      dbo.AssetTypes ON dbo.AssetTypes.DepartmentId = dbo.Assets.DepartmentId AND dbo.AssetTypes.id = dbo.Assets.TypeId LEFT OUTER JOIN
                      dbo.AssetModels ON dbo.AssetModels.DepartmentId = dbo.Assets.DepartmentId AND dbo.AssetModels.id = dbo.Assets.ModelId LEFT OUTER JOIN
                      dbo.AssetMakes ON dbo.AssetMakes.DepartmentId = dbo.Assets.DepartmentId AND dbo.AssetMakes.id = dbo.Assets.MakeId LEFT OUTER JOIN
--                      dbo.tbl_Locations ON dbo.tbl_Locations.DId = dbo.Assets.DepartmentId AND dbo.tbl_Locations.id = dbo.Assets.LocationId LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc tlj1 ON tlj1.company_id = dbo.Assets.DepartmentId AND tlj1.id = dbo.Assets.OwnerId LEFT OUTER JOIN
                      dbo.tbl_Logins lo1 ON lo1.id = tlj1.login_id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc tlj2 ON tlj2.company_id = dbo.Assets.DepartmentId AND tlj2.id = dbo.Assets.CheckedOutId LEFT OUTER JOIN
                      dbo.tbl_Logins lo2 ON lo2.id = tlj2.login_id LEFT OUTER JOIN
                      dbo.AssetStatus ST ON ST.id = dbo.Assets.StatusId
GO
PRINT N'Creating [dbo].[vw_Logins]...';


GO
CREATE VIEW dbo.vw_Logins
AS
SELECT     TOP (100) PERCENT dbo.tbl_LoginCompanyJunc.company_id AS DId, dbo.tbl_LoginCompanyJunc.id, dbo.fxGetUserName(dbo.tbl_Logins.FirstName, 
                      dbo.tbl_Logins.LastName, dbo.tbl_Logins.Email) AS vchFullName, dbo.tbl_Logins.Email AS vchEmail, dbo.tbl_LoginCompanyJunc.login_id AS intLoginId, 
                      dbo.tbl_Logins.FirstName AS vchFirstName, dbo.tbl_Logins.LastName AS vchLastName, dbo.fxGetUserLocationName(dbo.tbl_LoginCompanyJunc.company_id, 
                      dbo.tbl_LoginCompanyJunc.LocationId) AS vchLocationName, dbo.tbl_LoginCompanyJunc.LocationId AS intLocationId, dbo.tbl_Logins.Title AS vchTitle, 
                      dbo.tbl_Logins.Phone AS vchPhone, dbo.tbl_Logins.sintHourOffset, dbo.tbl_LoginCompanyJunc.UserType_Id AS UserTypeId, 
                      dbo.tbl_Logins.MobilePhone AS vchMobilePhone, dbo.tbl_LoginCompanyJunc.btUserInactive, dbo.tbl_LoginCompanyJunc.intAccountId, 
                      dbo.tbl_LoginCompanyJunc.AccountLocationId, dbo.fxGetUserLocationName(dbo.tbl_LoginCompanyJunc.company_id, dbo.tbl_LoginCompanyJunc.AccountLocationId) 
                      AS vchAccLocationName
FROM         dbo.tbl_LoginCompanyJunc INNER JOIN
                      dbo.tbl_Logins ON dbo.tbl_Logins.id = dbo.tbl_LoginCompanyJunc.login_id
WHERE     (dbo.tbl_LoginCompanyJunc.UserType_Id <> 4)
ORDER BY vchLastName, vchFirstName
GO
PRINT N'Creating [dbo].[vw_Logins2]...';


GO
CREATE VIEW dbo.vw_Logins2
AS
SELECT     TOP (100) PERCENT dbo.tbl_LoginCompanyJunc.company_id AS DId, dbo.tbl_LoginCompanyJunc.id, dbo.fxGetUserName(dbo.tbl_Logins.FirstName, 
                      dbo.tbl_Logins.LastName, dbo.tbl_Logins.Email) AS vchFullName, dbo.tbl_Logins.Email AS vchEmail, dbo.tbl_LoginCompanyJunc.login_id AS intLoginId, 
                      dbo.tbl_Logins.FirstName AS vchFirstName, dbo.tbl_Logins.LastName AS vchLastName, dbo.tbl_Logins.Title AS vchTitle, dbo.tbl_Logins.Phone AS vchPhone, 
                      dbo.tbl_Logins.sintHourOffset, dbo.tbl_LoginCompanyJunc.UserType_Id AS UserTypeId, dbo.tbl_Logins.MobilePhone AS vchMobilePhone
FROM         dbo.tbl_LoginCompanyJunc LEFT OUTER JOIN
                      dbo.tbl_Logins ON dbo.tbl_Logins.id = dbo.tbl_LoginCompanyJunc.login_id
ORDER BY vchLastName, vchFirstName
GO
PRINT N'Creating [dbo].[vw_Logins3]...';


GO
CREATE VIEW dbo.vw_Logins3
AS
SELECT     TOP (100) PERCENT dbo.tbl_LoginCompanyJunc.id, dbo.fxGetUserName(dbo.tbl_Logins.FirstName, dbo.tbl_Logins.LastName, dbo.tbl_Logins.Email) AS vchFullName, 
                      dbo.tbl_Logins.Email AS vchEmail, dbo.tbl_Logins.FirstName AS vchFirstName, dbo.tbl_Logins.LastName AS vchLastName, 
                      dbo.tbl_LoginCompanyJunc.company_id AS DId
FROM         dbo.tbl_LoginCompanyJunc LEFT OUTER JOIN
                      dbo.tbl_Logins ON dbo.tbl_Logins.id = dbo.tbl_LoginCompanyJunc.login_id
ORDER BY vchLastName, vchFirstName
GO
PRINT N'Creating [dbo].[vw_worklist]...';


GO


CREATE VIEW dbo.vw_worklist
AS
SELECT     dbo.tbl_Locations.Name AS location_name, lot.FirstName AS technician_firstname, lot.LastName AS technician_lastname, 
                      lou.FirstName AS vchFirstName, lou.LastName AS vchLastName, dbo.tbl_class.Name AS class_name, dbo.tbl_ticket.Id, dbo.tbl_ticket.Status, 
                      dbo.tbl_ticket.Subject, dbo.tbl_ticket.CreateTime, dbo.tbl_ticket.NewUserPost, dbo.tbl_ticket.NewTechPost, dbo.tbl_ticket.company_id, 
                      dbo.tbl_ticket.Technician_id, dbo.tbl_ticket.location_id, dbo.tbl_ticket.class_id, dbo.tbl_ticket.User_id, dbo.tbl_ticket.Note, 
                      dbo.tbl_ticket.ClosedTime, dbo.tbl_ticket.Created_id, dbo.tbl_ticket.SerialNumber, dbo.tbl_ticket.Room, dbo.tbl_ticket.TicketNumber, 
                      dbo.tbl_ticket.CreationCatsId, dbo.Priorities.tintPriority, dbo.tbl_ticket.dtFollowUp, dbo.tbl_ticket.tintLevel, dbo.tbl_ticket.folder_id, 
                      dbo.tbl_ticket.intAcctId, dbo.tbl_ticket.intAcctLocationId, dbo.Accounts.vchName AS vchAcctName
FROM         dbo.tbl_ticket LEFT OUTER JOIN
                      dbo.Accounts ON dbo.tbl_ticket.company_id = dbo.Accounts.DId AND dbo.tbl_ticket.intAcctId = dbo.Accounts.Id LEFT OUTER JOIN
                      dbo.Priorities ON dbo.tbl_ticket.company_id = dbo.Priorities.DId AND dbo.tbl_ticket.PriorityId = dbo.Priorities.Id LEFT OUTER JOIN
                      dbo.tbl_class ON dbo.tbl_ticket.company_id = dbo.tbl_class.company_id AND dbo.tbl_ticket.class_id = dbo.tbl_class.id LEFT OUTER JOIN
                      dbo.tbl_Locations ON dbo.tbl_ticket.company_id = dbo.tbl_Locations.DId AND dbo.tbl_ticket.location_id = dbo.tbl_Locations.id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc tljt ON tljt.company_id = dbo.tbl_ticket.company_id AND tljt.id = dbo.tbl_ticket.Technician_id INNER JOIN
                      dbo.tbl_Logins lot ON lot.id = tljt.login_id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc tlju ON tlju.company_id = dbo.tbl_ticket.company_id AND tlju.id = dbo.tbl_ticket.User_id INNER JOIN
                      dbo.tbl_Logins lou ON lou.id = tlju.login_id
GO
PRINT N'Creating [dbo].[vw_XMLTktExport]...';


GO
CREATE VIEW dbo.vw_XMLTktExport
AS
SELECT     t.company_id AS DepartmentId, t.Id AS TicketId, t.TicketNumber, t.TicketNumberPrefix, t.Status, t.Subject, dbo.fxSelectInitialPost(t.company_id, t.Id) AS InitialPost,
                      t.CreateTime, t.ClosedTime, t.UpdatedTime, t.Note, t.SerialNumber, t.Room, lo1.FirstName AS UserFirstName, lo1.LastName AS UserLastName, lo2.FirstName AS TechFirstName, 
                      lo2.LastName AS TechLastName, lo3.FirstName AS EnteredByFirstName, lo3.LastName AS EnteredByLastName, lo4.FirstName AS ClosedByFirstName, 
                      lo4.LastName AS ClosedByLastName, t.LocationId, t.AccountLocationId, t.class_id AS ClassId, crcat.vchName AS CreationCategoryName, 
                      rescat.vchName AS ResolutionCategoryName, t.PartsCost, t.LaborCost, t.TravelCost, t.MiscCost, p.tintPriority, t.intSLACompleteUsed, t.intSLAResponseUsed, 
                      t.dtReqComp, t.dtFollowUp, t.FollowUpNote, t.ReqCompNote, t.btPreventive, t.intTktTimeMin AS TicketTimeMin, t.btHandledByCC AS HandledByCallCenter, 
                      t.folder_id AS FolderId, acc.vchName AS AccountName, subcat.vchName AS SubmissionCategoryName, t.CustomXML, t.tintLevel, dbo.fxSelectClosureNote(t.company_id, t.Id) AS ClosureNote
FROM         dbo.tbl_ticket AS t INNER JOIN
                      dbo.tbl_LoginCompanyJunc AS tlj1 ON tlj1.company_id = t.company_id AND tlj1.id = t.User_id INNER JOIN
                      dbo.tbl_Logins AS lo1 ON lo1.id = tlj1.login_id INNER JOIN
                      dbo.tbl_LoginCompanyJunc AS tlj2 ON tlj2.company_id = t.company_id AND tlj2.id = t.Technician_id INNER JOIN
                      dbo.tbl_Logins AS lo2 ON lo2.id = tlj2.login_id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS tlj3 ON tlj3.company_id = t.company_id AND tlj3.id = t.Created_id LEFT OUTER JOIN
                      dbo.tbl_Logins AS lo3 ON lo3.id = tlj3.login_id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc AS tlj4 ON tlj4.company_id = t.company_id AND tlj4.id = t.Closed_id LEFT OUTER JOIN
                      dbo.tbl_Logins AS lo4 ON lo4.id = tlj4.login_id LEFT OUTER JOIN
                      dbo.SubmissionCategories AS subcat ON t.intSubmissionCatId = subcat.Id LEFT OUTER JOIN
                      dbo.CreationCats AS crcat ON crcat.Id = t.CreationCatsId LEFT OUTER JOIN
                      dbo.ResolutionCats AS rescat ON rescat.Id = t.ResolutionCatsId LEFT OUTER JOIN
                      dbo.Priorities AS p ON t.company_id = p.DId AND p.Id = t.PriorityId LEFT OUTER JOIN
                      dbo.Accounts AS acc ON acc.Id = t.intAcctId
GO
PRINT N'Creating [dbo].[AddCreationCats]...';


GO

CREATE PROCEDURE [AddCreationCats]
(
	@DId int,
	@Id int = NULL OUTPUT,
	@btInactive bit,
	@intCreated int,
	@dtCreated datetime,
	@intUpdatedBy int = NULL,
	@dtUpdated datetime = NULL,
	@vchName nvarchar(50)
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[CreationCats]
	(
		[DId],
		[btInactive],
		[intCreated],
		[dtCreated],
		[intUpdatedBy],
		[dtUpdated],
		[vchName]
	)
	VALUES
	(
		@DId,
		@btInactive,
		@intCreated,
		@dtCreated,
		@intUpdatedBy,
		@dtUpdated,
		@vchName
	)

	SET @Err = @@Error
	SELECT @Id = SCOPE_IDENTITY()

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[AddDeploymentLogger]...';


GO
CREATE PROCEDURE [dbo].[AddDeploymentLogger]
(
	@ID int = NULL,
	@companyID int,
	@DLOrganizationID int,
	@DLDepartmentID int,
	@Enabled bit
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[DeploymentLogger]
	(
		[companyID],
		[DLOrganizationID],
		[DLDepartmentID],
		[Enabled]
	)
	VALUES
	(
		@companyID,
		@DLOrganizationID,
		@DLDepartmentID,
		@Enabled
	)

	SET @Err = @@Error
	SELECT @ID = SCOPE_IDENTITY()

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[AddDeploymentLoggerUser]...';


GO
CREATE PROCEDURE [dbo].[AddDeploymentLoggerUser]
(
	@ID int = NULL OUTPUT,
	@LoginID int,
	@DLUserID int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[DeploymentLoggerUser]
	(
		[LoginID],
		[DLUserID]
	)
	VALUES
	(
		@LoginID,
		@DLUserID
	)

	SET @Err = @@Error
	SELECT @ID = SCOPE_IDENTITY()

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[AddLocationRouteLevels]...';


GO
CREATE PROCEDURE [dbo].[AddLocationRouteLevels]
(
	@Id int = NULL OUTPUT,
	@DId int,
	@LocationId int,
	@TicketLevel tinyint,
	@TechPoolType int,
	@RoutingMethod int,
	@LastResortTechId int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[LocationRouteLevels]
	(
		[DId],
		[LocationId],
		[TicketLevel],
		[TechPoolType],
		[RoutingMethod],
		[LastResortTechId]
	)
	VALUES
	(
		@DId,
		@LocationId,
		@TicketLevel,
		@TechPoolType,
		@RoutingMethod,
		@LastResortTechId
	)

	SET @Err = @@Error
	SELECT @Id = SCOPE_IDENTITY()

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[AddLocations]...';


GO
CREATE PROCEDURE [dbo].[AddLocations]
(
	@Id int = NULL OUTPUT,
	@DId int,
	@ParentId int = NULL,
	@AccountId int = NULL,
	@LocationTypeId int,
	@Name nvarchar(50),
	@Inactive bit,
	@Description nvarchar(512) = NULL,
	@IsDefault bit
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[Locations]
	(
		[DId],
		[ParentId],
		[AccountId],
		[LocationTypeId],
		[Name],
		[Status],
		[Description],
		[IsDefault]
	)
	VALUES
	(
		@DId,
		@ParentId,
		@AccountId,
		@LocationTypeId,
		@Name,
		case when @Inactive=0 then 1 else null end,
		@Description,
		@IsDefault
	)

	SET @Err = @@Error
	SELECT @Id = SCOPE_IDENTITY()

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[AddPriorities]...';


GO

CREATE PROCEDURE [AddPriorities]
(
	@DId int,
	@Id int = NULL OUTPUT,
	@tintPriority tinyint,
	@Name nvarchar(50),
	@Description ntext = NULL,
	@SLAPercentage tinyint = NULL,
	@SLADays tinyint,
	@SLAHours tinyint,
	@SLAMinutes tinyint,
	@bitDefault bit = NULL,
	@btSkipSaturday bit,
	@btSkipSunday bit,
	@btSkipHolidays bit,
	@btUseBusHours bit,
	@SLAResponsePercentage tinyint = NULL,
	@SLAResponseDays tinyint,
	@SLAResponseHours tinyint,
	@SLAResponseMinutes tinyint,
	@btResponseSkipSaturday bit,
	@btResponseSkipSunday bit,
	@btResponseSkipHolidays bit,
	@btResponseUseBusHours bit,
	@btRstrctUsr bit
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[Priorities]
	(
		[DId],
		[tintPriority],
		[Name],
		[Description],
		[SLAPercentage],
		[SLADays],
		[SLAHours],
		[SLAMinutes],
		[bitDefault],
		[btSkipSaturday],
		[btSkipSunday],
		[btSkipHolidays],
		[btUseBusHours],
		[SLAResponsePercentage],
		[SLAResponseDays],
		[SLAResponseHours],
		[SLAResponseMinutes],
		[btResponseSkipSaturday],
		[btResponseSkipSunday],
		[btResponseSkipHolidays],
		[btResponseUseBusHours],
		[btRstrctUsr]
	)
	VALUES
	(
		@DId,
		@tintPriority,
		@Name,
		@Description,
		@SLAPercentage,
		@SLADays,
		@SLAHours,
		@SLAMinutes,
		@bitDefault,
		@btSkipSaturday,
		@btSkipSunday,
		@btSkipHolidays,
		@btUseBusHours,
		@SLAResponsePercentage,
		@SLAResponseDays,
		@SLAResponseHours,
		@SLAResponseMinutes,
		@btResponseSkipSaturday,
		@btResponseSkipSunday,
		@btResponseSkipHolidays,
		@btResponseUseBusHours,
		@btRstrctUsr
	)

	SET @Err = @@Error
	SELECT @Id = SCOPE_IDENTITY()

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[AddResolutionCats]...';


GO

CREATE PROCEDURE [AddResolutionCats]
(
	@Id int = NULL OUTPUT,
	@DId int,
	@btInactive bit,
	@intCreated int,
	@dtCreated datetime,
	@intUpdatedBy int = NULL,
	@dtUpdated datetime = NULL,
	@vchName nvarchar(50),
	@ParentId int = NULL,
	@btResolved bit
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[ResolutionCats]
	(
		[DId],
		[btInactive],
		[intCreated],
		[dtCreated],
		[intUpdatedBy],
		[dtUpdated],
		[vchName],
		[ParentId],
		[btResolved]
	)
	VALUES
	(
		@DId,
		@btInactive,
		@intCreated,
		@dtCreated,
		@intUpdatedBy,
		@dtUpdated,
		@vchName,
		@ParentId,
		@btResolved
	)

	SET @Err = @@Error
	SELECT @Id = SCOPE_IDENTITY()

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[AddRoutingOrder]...';


GO
CREATE PROCEDURE [dbo].[AddRoutingOrder]
(
	@DId int,
	@tintOrder tinyint,
	@tintRoute tinyint
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[RoutingOrder]
	(
		[DId],
		[tintOrder],
		[tintRoute]
	)
	VALUES
	(
		@DId,
		@tintOrder,
		@tintRoute
	)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Addtbl_class]...';


GO
CREATE PROCEDURE [dbo].[Addtbl_class]
(
	@id int = NULL OUTPUT,
	@company_id int,
	@Name nvarchar(50),
	@LastResortTechId int,
	@ConfigDistributedRouting tinyint,
	@tintClassType tinyint,
	@bitRestrictToTechs bit,
	@txtDesc ntext = NULL,
	@bitAllowEmailParsing bit,
	@intPriorityId int = NULL,
	@tintLevelOverride tinyint = NULL,
	@btInactive bit,
	@ParentId int = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[tbl_class]
	(
		[company_id],
		[Name],
		[LastResortTechId],
		[ConfigDistributedRouting],
		[tintClassType],
		[bitRestrictToTechs],
		[txtDesc],
		[bitAllowEmailParsing],
		[intPriorityId],
		[tintLevelOverride],
		[btInactive],
		[ParentId]
	)
	VALUES
	(
		@company_id,
		@Name,
		@LastResortTechId,
		@ConfigDistributedRouting,
		@tintClassType,
		@bitRestrictToTechs,
		@txtDesc,
		@bitAllowEmailParsing,
		@intPriorityId,
		@tintLevelOverride,
		@btInactive,
		@ParentId
	)

	SET @Err = @@Error
	SELECT @id = SCOPE_IDENTITY()

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Addtbl_ClassTechnicianJctn]...';


GO
CREATE PROCEDURE [dbo].[Addtbl_ClassTechnicianJctn]
(
	@id int = NULL OUTPUT,
	@class_id int = NULL,
	@LoginCompanyJunc_id int = NULL,
	@locations_id int = NULL,
	@LocationId int = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[tbl_ClassTechnicianJctn]
	(
		[class_id],
		[LoginCompanyJunc_id],
		[locations_id],
		[LocationId]
	)
	VALUES
	(
		@class_id,
		@LoginCompanyJunc_id,
		@locations_id,
		@LocationId
	)

	SET @Err = @@Error
	SELECT @id = SCOPE_IDENTITY()

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Addtbl_company]...';


GO
CREATE PROCEDURE [dbo].[Addtbl_company]
(
	@company_id int = NULL OUTPUT,
	@company_name nvarchar(150) = NULL,
	@company_guid uniqueidentifier
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[tbl_company]
	(
		[company_name],
		[company_guid]
	)
	VALUES
	(
		@company_name,
		@company_guid
	)

	SET @Err = @@Error
	SELECT @company_id = SCOPE_IDENTITY()
	
	
	-- Insert necessary Location Types and Properties for new epartment
	-- Added by Yuriy Dzoba 2011/01/13
	
	if @Err<>0 RETURN @Err
	
	-- Insert Building Location type
	
	insert into [dbo].[LocationTypes]
	(DId,Name,HierarchyLevel,Deleted)
	values(@company_id,'Building',2,0)
	
	declare @BuildingTypeId int	
	select @BuildingTypeId = SCOPE_IDENTITY()
	
	insert into LocationTypePropertiesGroup
	(DId, Name, Deleted, LocationTypeId)
	values(@company_id,'Address Information',0,@BuildingTypeId)
	
	declare @GroupId int
	select @GroupId=SCOPE_IDENTITY()
	
	insert into LocationTypeProperties (DId, LocationTypeId, Name, DataType, GroupId)
	values (@company_id, @BuildingTypeId, 'Country', 0, @GroupId)
	
	insert into LocationTypeProperties (DId, LocationTypeId, Name, DataType, GroupId)
	values (@company_id, @BuildingTypeId, 'State', 0, @GroupId)
	
	insert into LocationTypeProperties (DId, LocationTypeId, Name, DataType, GroupId)
	values (@company_id, @BuildingTypeId, 'City', 0, @GroupId)
	
	insert into LocationTypeProperties (DId, LocationTypeId, Name, DataType, GroupId)
	values (@company_id, @BuildingTypeId, 'Address1', 0, @GroupId)
	
	insert into LocationTypeProperties (DId, LocationTypeId, Name, DataType, GroupId)
	values (@company_id, @BuildingTypeId, 'Address2', 0, @GroupId)	

	insert into LocationTypeProperties (DId, LocationTypeId, Name, DataType, GroupId)
	values (@company_id, @BuildingTypeId, 'Zip Code', 0, @GroupId)
	
	insert into LocationTypeProperties (DId, LocationTypeId, Name, DataType, GroupId)
	values (@company_id, @BuildingTypeId, 'Phone1', 0, @GroupId)
	
	insert into LocationTypeProperties (DId, LocationTypeId, Name, DataType, GroupId)
	values (@company_id, @BuildingTypeId, 'Phone2', 0, @GroupId)
	
	
	
	
	-- Insert Room Location type
	
	insert into [dbo].[LocationTypes]
	(DId,Name,HierarchyLevel,Deleted)
	values(@company_id,'Room',2,0)
	
	declare @RoomTypeId int
	select @RoomTypeId = SCOPE_IDENTITY()
	
	insert into LocationTypePropertiesGroup
	(DId, Name, Deleted, LocationTypeId)
	values(@company_id,'Room Information',0,@RoomTypeId)
	
	select @GroupId=SCOPE_IDENTITY()
	
	insert into LocationTypeProperties (DId, LocationTypeId, Name, DataType, GroupId)
	values (@company_id, @RoomTypeId, 'Room Number', 0, @GroupId)
	
	insert into LocationTypeProperties (DId, LocationTypeId, Name, DataType, GroupId)
	values (@company_id, @RoomTypeId, 'Work Places', 0, @GroupId)
	
	insert into LocationTypeProperties (DId, LocationTypeId, Name, DataType, GroupId)
	values (@company_id, @RoomTypeId, 'Size(sq.f)', 0, @GroupId)


	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Addtbl_LoginCompanyJunc]...';


GO
CREATE PROCEDURE [dbo].[Addtbl_LoginCompanyJunc]
(
	@id int = NULL OUTPUT,
	@login_id int,
	@company_id int,
	@location_id int = NULL,
	@UserType_Id int,
	@Room nvarchar(30) = NULL,
	@CheckinStatus bit,
	@Notes ntext = NULL,
	@QueEmailAddress nvarchar(255) = NULL,
	@dtLastLogin smalldatetime = NULL,
	@configHourlyRate smallmoney,
	@configPartialSetup bit,
	@configEmailNewTicket bit,
	@configEmailTicketResponse bit,
	@configEmailUserTicketResponse bit,
	@configEmailUserNewTicket bit,
	@bitAllowQueEmailParsing bit,
	@Token bigint = NULL,
	@tintLevel tinyint = NULL,
	@SupGroupId int = NULL,
	@intAccountId int = NULL,
	@intAcctLocationId int = NULL,
	@btCfgCCRep bit,
	@vchOrganization nvarchar(50) = NULL,
	@btGlobalFilterEnabled bit,
	@btLimitToAssignedTkts bit,
	@btDisabledReports bit,
	@btUserInactive bit,
	@printFontSize tinyint = NULL,
	@AccountLocationId int = NULL,
	@CreationCatId int = NULL,
	@LocationId int = NULL,
	@tintTicketTimer tinyint = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[tbl_LoginCompanyJunc]
	(
		[login_id],
		[company_id],
		[location_id],
		[UserType_Id],
		[Room],
		[CheckinStatus],
		[Notes],
		[QueEmailAddress],
		[dtLastLogin],
		[configHourlyRate],
		[configPartialSetup],
		[configEmailNewTicket],
		[configEmailTicketResponse],
		[configEmailUserTicketResponse],
		[configEmailUserNewTicket],
		[bitAllowQueEmailParsing],
		[Token],
		[tintLevel],
		[SupGroupId],
		[intAccountId],
		[intAcctLocationId],
		[btCfgCCRep],
		[vchOrganization],
		[btGlobalFilterEnabled],
		[btLimitToAssignedTkts],
		[btDisabledReports],
		[btUserInactive],
		[printFontSize],
		[AccountLocationId],
		[CreationCatId],
		[LocationId],
		[tintTicketTimer]
	)
	VALUES
	(
		@login_id,
		@company_id,
		@location_id,
		@UserType_Id,
		@Room,
		@CheckinStatus,
		@Notes,
		@QueEmailAddress,
		@dtLastLogin,
		@configHourlyRate,
		@configPartialSetup,
		@configEmailNewTicket,
		@configEmailTicketResponse,
		@configEmailUserTicketResponse,
		@configEmailUserNewTicket,
		@bitAllowQueEmailParsing,
		@Token,
		@tintLevel,
		@SupGroupId,
		@intAccountId,
		@intAcctLocationId,
		@btCfgCCRep,
		@vchOrganization,
		@btGlobalFilterEnabled,
		@btLimitToAssignedTkts,
		@btDisabledReports,
		@btUserInactive,
		@printFontSize,
		@AccountLocationId,
		@CreationCatId,
		@LocationId,
		@tintTicketTimer
	)

	SET @Err = @@Error
	SELECT @id = SCOPE_IDENTITY()

	RETURN @Err
END





SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[Addtbl_Logins]...';


GO
CREATE PROCEDURE [dbo].[Addtbl_Logins]
(
	@id int = NULL OUTPUT,
	@Email nvarchar(50),
	@FirstName nvarchar(50),
	@LastName nvarchar(50),
	@Password nvarchar(50),
	@ConfigUnassignedQue bit,
	@Title nvarchar(30) = NULL,
	@Phone nvarchar(20) = NULL,
	@MobilePhone nvarchar(20) = NULL,
	@sintHourOffset smallint = NULL,
	@tintDateFormat tinyint = NULL,
	@Guid uniqueidentifier = NULL,
	@dtUTCUpdated smalldatetime = NULL,
	@LdapUserSID nvarchar(255) = NULL,
	@LdapUserAccount nvarchar(255) = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[tbl_Logins]
	(
		[Email],
		[FirstName],
		[LastName],
		[Password],
		[ConfigUnassignedQue],
		[Title],
		[Phone],
		[MobilePhone],
		[sintHourOffset],
		[tintDateFormat],
		[Guid],
		[dtUTCUpdated],
		[LdapUserSID],
		[LdapUserAccount]
	)
	VALUES
	(
		@Email,
		@FirstName,
		@LastName,
		@Password,
		@ConfigUnassignedQue,
		@Title,
		@Phone,
		@MobilePhone,
		@sintHourOffset,
		@tintDateFormat,
		@Guid,
		@dtUTCUpdated,
		@LdapUserSID,
		@LdapUserAccount
	)

	SET @Err = @@Error
	SELECT @id = SCOPE_IDENTITY()

	RETURN @Err
END






SET ANSI_NULLS ON




SET QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[Addtbl_ticket]...';


GO
CREATE PROCEDURE [dbo].[Addtbl_ticket]
(
	@Id int = NULL OUTPUT,
	@company_id int,
	@User_id int,
	@Technician_id int,
	@Created_id int = NULL,
	@location_id int = NULL,
	@class_id int = NULL,
	@Status varchar(15),
	@Subject nvarchar(100) = NULL,
	@CreateTime smalldatetime,
	@Note ntext = NULL,
	@NewUserPost bit = NULL,
	@NewTechPost bit = NULL,
	@ClosedTime smalldatetime = NULL,
	@btPreventive bit,
	@SerialNumber nvarchar(50) = NULL,
	@folder_id int = NULL,
	@Room nvarchar(30) = NULL,
	@TicketNumber int,
	@CustomXML ntext = NULL,
	@PartsCost smallmoney,
	@LaborCost smallmoney,
	@TravelCost smallmoney,
	@MiscCost smallmoney,
	@PriorityId int = NULL,
	@dtSLAComplete smalldatetime = NULL,
	@dtSLAResponse smalldatetime = NULL,
	@dtSLAStart smalldatetime = NULL,
	@intSLACompleteUsed int,
	@intSLAResponseUsed int,
	@btInitResponse bit,
	@dtReqComp smalldatetime = NULL,
	@ReqCompNote nvarchar(50) = NULL,
	@dtFollowUp smalldatetime = NULL,
	@FollowUpNote nvarchar(50) = NULL,
	@tintLevel tinyint = NULL,
	@intTktTimeMin int,
	@btViaEmailParser bit,
	@intAcctId int = NULL,
	@intAcctLocationId int = NULL,
	@ClosureNote nvarchar(50) = NULL,
	@btResolved bit = NULL,
	@ResolutionCatsId int = NULL,
	@btConfirmed bit = NULL,
	@intConfirmedBy int = NULL,
	@dtConfirmed datetime = NULL,
	@vchConfirmedNote nvarchar(254) = NULL,
	@CreationCatsId int = NULL,
	@vchIdMethod nvarchar(255) = NULL,
	@btHandledByCC bit,
	@intSubmissionCatId int = NULL,
	@EmailCC nvarchar(255) = NULL,
	@AccountLocationId int = NULL,
	@LocationId int = NULL,
	@Closed_id int = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[tbl_ticket]
	(
		[company_id],
		[User_id],
		[Technician_id],
		[Created_id],
		[location_id],
		[class_id],
		[Status],
		[Subject],
		[CreateTime],
		[Note],
		[NewUserPost],
		[NewTechPost],
		[ClosedTime],
		[btPreventive],
		[SerialNumber],
		[folder_id],
		[Room],
		[TicketNumber],
		[CustomXML],
		[PartsCost],
		[LaborCost],
		[TravelCost],
		[MiscCost],
		[PriorityId],
		[dtSLAComplete],
		[dtSLAResponse],
		[dtSLAStart],
		[intSLACompleteUsed],
		[intSLAResponseUsed],
		[btInitResponse],
		[dtReqComp],
		[ReqCompNote],
		[dtFollowUp],
		[FollowUpNote],
		[tintLevel],
		[intTktTimeMin],
		[btViaEmailParser],
		[intAcctId],
		[intAcctLocationId],
		[ClosureNote],
		[btResolved],
		[ResolutionCatsId],
		[btConfirmed],
		[intConfirmedBy],
		[dtConfirmed],
		[vchConfirmedNote],
		[CreationCatsId],
		[vchIdMethod],
		[btHandledByCC],
		[intSubmissionCatId],
		[EmailCC],
		[AccountLocationId],
		[LocationId],
		[Closed_id]
	)
	VALUES
	(
		@company_id,
		@User_id,
		@Technician_id,
		@Created_id,
		@location_id,
		@class_id,
		@Status,
		@Subject,
		@CreateTime,
		@Note,
		@NewUserPost,
		@NewTechPost,
		@ClosedTime,
		@btPreventive,
		@SerialNumber,
		@folder_id,
		@Room,
		@TicketNumber,
		@CustomXML,
		@PartsCost,
		@LaborCost,
		@TravelCost,
		@MiscCost,
		@PriorityId,
		@dtSLAComplete,
		@dtSLAResponse,
		@dtSLAStart,
		@intSLACompleteUsed,
		@intSLAResponseUsed,
		@btInitResponse,
		@dtReqComp,
		@ReqCompNote,
		@dtFollowUp,
		@FollowUpNote,
		@tintLevel,
		@intTktTimeMin,
		@btViaEmailParser,
		@intAcctId,
		@intAcctLocationId,
		@ClosureNote,
		@btResolved,
		@ResolutionCatsId,
		@btConfirmed,
		@intConfirmedBy,
		@dtConfirmed,
		@vchConfirmedNote,
		@CreationCatsId,
		@vchIdMethod,
		@btHandledByCC,
		@intSubmissionCatId,
		@EmailCC,
		@AccountLocationId,
		@LocationId,
		@Closed_id
	)

	SET @Err = @@Error
	SELECT @Id = SCOPE_IDENTITY()

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Addtbl_UserType]...';


GO

CREATE PROCEDURE [Addtbl_UserType]
(
	@id int = NULL OUTPUT,
	@Name varchar(50)
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[tbl_UserType]
	(
		[Name]
	)
	VALUES
	(
		@Name
	)

	SET @Err = @@Error
	SELECT @id = SCOPE_IDENTITY()

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[AddTktLevels]...';


GO
CREATE PROCEDURE [dbo].[AddTktLevels]
(
	@DId int,
	@tintLevel tinyint,
	@Description nvarchar(2000) = NULL,
	@bitDefault bit = NULL,
	@intLastResortId int,
	@tintRoutingType tinyint,
	@LevelName nvarchar(50) = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	INSERT
	INTO [dbo].[TktLevels]
	(
		[DId],
		[tintLevel],
		[Description],
		[bitDefault],
		[intLastResortId],
		[tintRoutingType],
		[LevelName]
	)
	VALUES
	(
		@DId,
		@tintLevel,
		@Description,
		@bitDefault,
		@intLastResortId,
		@tintRoutingType,
		@LevelName
	)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[DeleteCreationCats]...';


GO

CREATE PROCEDURE [DeleteCreationCats]
(
	@DId int,
	@Id int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[CreationCats]
	WHERE
		[DId] = @DId AND
		[Id] = @Id
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[DeleteDeploymentLogger]...';


GO
CREATE PROCEDURE [dbo].[DeleteDeploymentLogger]
(
	@ID int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[DeploymentLogger]
	WHERE
		[ID] = @ID
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[DeleteDeploymentLoggerUser]...';


GO
CREATE PROCEDURE [dbo].[DeleteDeploymentLoggerUser]
(
	@ID int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[DeploymentLoggerUser]
	WHERE
		[ID] = @ID
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[DeleteLocationRouteLevels]...';


GO
CREATE PROCEDURE [dbo].[DeleteLocationRouteLevels]
(
	@Id int,
	@DId int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[LocationRouteLevels]
	WHERE
		[Id] = @Id AND
		[DId] = @DId
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[DeleteLocations]...';


GO
CREATE PROCEDURE [dbo].[DeleteLocations]
(
	@Id int,
	@DId int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	Update Locations set Status=0 where [Id] = @Id AND [DId] = @DId		
		
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[DeletePriorities]...';


GO

CREATE PROCEDURE [DeletePriorities]
(
	@DId int,
	@Id int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[Priorities]
	WHERE
		[DId] = @DId AND
		[Id] = @Id
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[DeleteResolutionCats]...';


GO

CREATE PROCEDURE [DeleteResolutionCats]
(
	@Id int,
	@DId int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[ResolutionCats]
	WHERE
		[Id] = @Id AND
		[DId] = @DId
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Deletetbl_class]...';


GO
CREATE PROCEDURE [dbo].[Deletetbl_class]
(
	@id int,
	@company_id int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[tbl_class]
	WHERE
		[id] = @id AND
		[company_id] = @company_id
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Deletetbl_ClassTechnicianJctn]...';


GO
CREATE PROCEDURE [dbo].[Deletetbl_ClassTechnicianJctn]
(
	@id int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[tbl_ClassTechnicianJctn]
	WHERE
		[id] = @id
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Deletetbl_company]...';


GO
CREATE PROCEDURE [dbo].[Deletetbl_company]
(
	@company_id int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[tbl_company]
	WHERE
		[company_id] = @company_id
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Deletetbl_LoginCompanyJunc]...';


GO
CREATE PROCEDURE [dbo].[Deletetbl_LoginCompanyJunc]
(
	@id int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[tbl_LoginCompanyJunc]
	WHERE
		[id] = @id
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Deletetbl_Logins]...';


GO
CREATE PROCEDURE [dbo].[Deletetbl_Logins]
(
	@id int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[tbl_Logins]
	WHERE
		[id] = @id
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Deletetbl_ticket]...';


GO

CREATE PROCEDURE [Deletetbl_ticket]
(
	@Id int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[tbl_ticket]
	WHERE
		[Id] = @Id
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Deletetbl_UserType]...';


GO

CREATE PROCEDURE [Deletetbl_UserType]
(
	@id int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[tbl_UserType]
	WHERE
		[id] = @id
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[DeleteTktLevels]...';


GO
CREATE PROCEDURE [dbo].[DeleteTktLevels]
(
	@DId int,
	@tintLevel tinyint
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	DELETE
	FROM [dbo].[TktLevels]
	WHERE
		[DId] = @DId AND
		[tintLevel] = @tintLevel
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAllCreationCats]...';


GO

CREATE PROCEDURE [GetAllCreationCats]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[DId],
		[Id],
		[btInactive],
		[intCreated],
		[dtCreated],
		[intUpdatedBy],
		[dtUpdated],
		[vchName]
	FROM [dbo].[CreationCats]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAllDeploymentLogger]...';


GO
CREATE PROCEDURE [dbo].[GetAllDeploymentLogger]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[ID],
		[companyID],
		[DLOrganizationID],
		[DLDepartmentID],
		[Enabled]
	FROM [dbo].[DeploymentLogger]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAllDeploymentLoggerUser]...';


GO
CREATE PROCEDURE [dbo].[GetAllDeploymentLoggerUser]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[ID],
		[LoginID],
		[DLUserID]
	FROM [dbo].[DeploymentLoggerUser]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAllLocationRouteLevels]...';


GO
CREATE PROCEDURE [dbo].[GetAllLocationRouteLevels]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[Id],
		[DId],
		[LocationId],
		[TicketLevel],
		[TechPoolType],
		[RoutingMethod],
		[LastResortTechId]
	FROM [dbo].[LocationRouteLevels]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAllLocations]...';


GO
CREATE PROCEDURE [dbo].[GetAllLocations]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT *
	FROM [dbo].[Locations]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAllPriorities]...';


GO

CREATE PROCEDURE [GetAllPriorities]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[DId],
		[Id],
		[tintPriority],
		[Name],
		[Description],
		[SLAPercentage],
		[SLADays],
		[SLAHours],
		[SLAMinutes],
		[bitDefault],
		[btSkipSaturday],
		[btSkipSunday],
		[btSkipHolidays],
		[btUseBusHours],
		[SLAResponsePercentage],
		[SLAResponseDays],
		[SLAResponseHours],
		[SLAResponseMinutes],
		[btResponseSkipSaturday],
		[btResponseSkipSunday],
		[btResponseSkipHolidays],
		[btResponseUseBusHours],
		[btRstrctUsr]
	FROM [dbo].[Priorities]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAllResolutionCats]...';


GO

CREATE PROCEDURE [GetAllResolutionCats]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[Id],
		[DId],
		[btInactive],
		[intCreated],
		[dtCreated],
		[intUpdatedBy],
		[dtUpdated],
		[vchName],
		[ParentId],
		[btResolved]
	FROM [dbo].[ResolutionCats]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAllRoutingOrder]...';


GO
CREATE PROCEDURE [dbo].[GetAllRoutingOrder]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[DId],
		[tintOrder],
		[tintRoute]
	FROM [dbo].[RoutingOrder]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAlltbl_class]...';


GO
CREATE PROCEDURE [dbo].[GetAlltbl_class]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[id],
		[company_id],
		[Name],
		[LastResortTechId],
		[ConfigDistributedRouting],
		[tintClassType],
		[bitRestrictToTechs],
		[txtDesc],
		[bitAllowEmailParsing],
		[intPriorityId],
		[tintLevelOverride],
		[btInactive],
		[ParentId]
	FROM [dbo].[tbl_class]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAlltbl_ClassTechnicianJctn]...';


GO
CREATE PROCEDURE [dbo].[GetAlltbl_ClassTechnicianJctn]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[id],
		[class_id],
		[LoginCompanyJunc_id],
		[locations_id],
		[LocationId]
	FROM [dbo].[tbl_ClassTechnicianJctn]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAlltbl_company]...';


GO
CREATE PROCEDURE [dbo].[GetAlltbl_company]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		C.[company_id],
		C.[company_name],
		I.CreatedTime as dtAccountCreated,
		I.Active as ActiveStatus,
		I.CanceledTime as dtCancelled,
		I.WorkingDays as charWDays,
		I.ExternalId as BWADepartmentId,
		C.[company_guid]
	FROM [dbo].[tbl_company] C 
		INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid 

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAlltbl_LoginCompanyJunc]...';


GO
CREATE PROCEDURE [dbo].[GetAlltbl_LoginCompanyJunc]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[id],
		[login_id],
		[company_id],
		[location_id],
		[UserType_Id],
		[Room],
		[CheckinStatus],
		[Notes],
		[QueEmailAddress],
		[dtLastLogin],
		[configHourlyRate],
		[configPartialSetup],
		[configEmailNewTicket],
		[configEmailTicketResponse],
		[configEmailUserTicketResponse],
		[configEmailUserNewTicket],
		[bitAllowQueEmailParsing],
		[Token],
		[tintLevel],
		[SupGroupId],
		[intAccountId],
		[intAcctLocationId],
		[btCfgCCRep],
		[vchOrganization],
		[btGlobalFilterEnabled],
		[btLimitToAssignedTkts],
		[btDisabledReports],
		[btUserInactive],
		[printFontSize],
		[AccountLocationId],
		[CreationCatId],
		[LocationId],
		[tintTicketTimer]
	FROM [dbo].[tbl_LoginCompanyJunc]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAlltbl_Logins]...';


GO
CREATE PROCEDURE [dbo].[GetAlltbl_Logins]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[id],
		[Email],
		[FirstName],
		[LastName],
		[Password],
		[ConfigUnassignedQue],
		[Title],
		[Phone],
		[MobilePhone],
		[sintHourOffset],
		[tintDateFormat],
		[Guid],
		[dtUTCUpdated],
		[LdapUserSID],
		[LdapUserAccount]
	FROM [dbo].[tbl_Logins]

	SET @Err = @@Error

	RETURN @Err
END




SET ANSI_NULLS ON



SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[GetAlltbl_ticket]...';


GO
CREATE PROCEDURE [dbo].[GetAlltbl_ticket]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[Id],
		[company_id],
		[User_id],
		[Technician_id],
		[Created_id],
		[location_id],
		[class_id],
		[Status],
		[Subject],
		[CreateTime],
		[Note],
		[NewUserPost],
		[NewTechPost],
		[ClosedTime],
		[btPreventive],
		[SerialNumber],
		[folder_id],
		[Room],
		[TicketNumber],
		[CustomXML],
		[PartsCost],
		[LaborCost],
		[TravelCost],
		[MiscCost],
		[PriorityId],
		[dtSLAComplete],
		[dtSLAResponse],
		[dtSLAStart],
		[intSLACompleteUsed],
		[intSLAResponseUsed],
		[btInitResponse],
		[dtReqComp],
		[ReqCompNote],
		[dtFollowUp],
		[FollowUpNote],
		[tintLevel],
		[intTktTimeMin],
		[btViaEmailParser],
		[intAcctId],
		[intAcctLocationId],
		[ClosureNote],
		[btResolved],
		[ResolutionCatsId],
		[btConfirmed],
		[intConfirmedBy],
		[dtConfirmed],
		[vchConfirmedNote],
		[CreationCatsId],
		[vchIdMethod],
		[btHandledByCC],
		[intSubmissionCatId],
		[EmailCC],
		[AccountLocationId],
		[LocationId],
		[Closed_id]
	FROM [dbo].[tbl_ticket]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAlltbl_UserType]...';


GO

CREATE PROCEDURE [GetAlltbl_UserType]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[id],
		[Name]
	FROM [dbo].[tbl_UserType]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetAllTktLevels]...';


GO
CREATE PROCEDURE [dbo].[GetAllTktLevels]
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[DId],
		[tintLevel],
		[Description],
		[bitDefault],
		[intLastResortId],
		[tintRoutingType],
		[LevelName]
	FROM [dbo].[TktLevels]

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetCreationCats]...';


GO

CREATE PROCEDURE [GetCreationCats]
(
	@DId int,
	@Id int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[DId],
		[Id],
		[btInactive],
		[intCreated],
		[dtCreated],
		[intUpdatedBy],
		[dtUpdated],
		[vchName]
	FROM [dbo].[CreationCats]
	WHERE
		([DId] = @DId) AND
		([Id] = @Id)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetDeploymentLogger]...';


GO
CREATE PROCEDURE [dbo].[GetDeploymentLogger]
(
	@ID int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[ID],
		[companyID],
		[DLOrganizationID],
		[DLDepartmentID],
		[Enabled]
	FROM [dbo].[DeploymentLogger]
	WHERE
		([ID] = @ID)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetDeploymentLoggerUser]...';


GO
CREATE PROCEDURE [dbo].[GetDeploymentLoggerUser]
(
	@ID int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[ID],
		[LoginID],
		[DLUserID]
	FROM [dbo].[DeploymentLoggerUser]
	WHERE
		([ID] = @ID)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetLocationRouteLevels]...';


GO
CREATE PROCEDURE [dbo].[GetLocationRouteLevels]
(
	@Id int,
	@DId int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[Id],
		[DId],
		[LocationId],
		[TicketLevel],
		[TechPoolType],
		[RoutingMethod],
		[LastResortTechId]
	FROM [dbo].[LocationRouteLevels]
	WHERE
		([Id] = @Id) AND
		([DId] = @DId)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetLocations]...';


GO
CREATE PROCEDURE [dbo].[GetLocations]
(
	@Id int,
	@DId int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT *
	FROM [dbo].[Locations]
	WHERE
		([Id] = @Id) AND
		([DId] = @DId)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetLoginList]...';


GO
CREATE PROCEDURE dbo.GetLoginList
AS
BEGIN
	SET NOCOUNT ON;

    SELECT C.company_name AS OrgName, UT.Name AS UserType, 
	L.LastName + ', ' + L.FirstName AS LFName, L.FirstName + ' ' + L.LastName AS FullName, L.Email, ISNULL(L.Phone, '') AS Phone 
	FROM tbl_Logins L 
	INNER JOIN tbl_LoginCompanyJunc LJ ON L.id = LJ.login_id 
	INNER JOIN tbl_company C ON LJ.company_id = C.company_id
	INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid
	INNER JOIN tbl_UserType UT ON LJ.UserType_Id = UT.id 
	WHERE (I.Active = 1) AND (LJ.btUserInactive = 0) AND
		  (LJ.UserType_Id = 2 OR LJ.UserType_Id = 3) 
	ORDER BY C.company_name, UT.Name, LFName
END
GO
PRINT N'Creating [dbo].[GetPriorities]...';


GO

CREATE PROCEDURE [GetPriorities]
(
	@DId int,
	@Id int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[DId],
		[Id],
		[tintPriority],
		[Name],
		[Description],
		[SLAPercentage],
		[SLADays],
		[SLAHours],
		[SLAMinutes],
		[bitDefault],
		[btSkipSaturday],
		[btSkipSunday],
		[btSkipHolidays],
		[btUseBusHours],
		[SLAResponsePercentage],
		[SLAResponseDays],
		[SLAResponseHours],
		[SLAResponseMinutes],
		[btResponseSkipSaturday],
		[btResponseSkipSunday],
		[btResponseSkipHolidays],
		[btResponseUseBusHours],
		[btRstrctUsr]
	FROM [dbo].[Priorities]
	WHERE
		([DId] = @DId) AND
		([Id] = @Id)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetResolutionCats]...';


GO

CREATE PROCEDURE [GetResolutionCats]
(
	@Id int,
	@DId int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[Id],
		[DId],
		[btInactive],
		[intCreated],
		[dtCreated],
		[intUpdatedBy],
		[dtUpdated],
		[vchName],
		[ParentId],
		[btResolved]
	FROM [dbo].[ResolutionCats]
	WHERE
		([Id] = @Id) AND
		([DId] = @DId)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Gettbl_class]...';


GO
CREATE PROCEDURE [dbo].[Gettbl_class]
(
	@id int,
	@company_id int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[id],
		[company_id],
		[Name],
		[LastResortTechId],
		[ConfigDistributedRouting],
		[tintClassType],
		[bitRestrictToTechs],
		[txtDesc],
		[bitAllowEmailParsing],
		[intPriorityId],
		[tintLevelOverride],
		[btInactive],
		[ParentId]
	FROM [dbo].[tbl_class]
	WHERE
		([id] = @id) AND
		([company_id] = @company_id)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Gettbl_ClassTechnicianJctn]...';


GO
CREATE PROCEDURE [dbo].[Gettbl_ClassTechnicianJctn]
(
	@id int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[id],
		[class_id],
		[LoginCompanyJunc_id],
		[locations_id],
		[LocationId]
	FROM [dbo].[tbl_ClassTechnicianJctn]
	WHERE
		([id] = @id)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Gettbl_company]...';


GO
CREATE PROCEDURE [dbo].[Gettbl_company]
(
	@company_id int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		C.[company_id],
		C.[company_name],
		I.CreatedTime as dtAccountCreated,
		I.Active as ActiveStatus,
		I.CanceledTime as dtCancelled,
		I.WorkingDays as charWDays,
		I.ExternalId as BWADepartmentId,
		C.[company_guid]
	FROM [dbo].[tbl_company] C 
		INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid 
	WHERE
		([company_id] = @company_id)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Gettbl_LoginCompanyJunc]...';


GO
CREATE PROCEDURE [dbo].[Gettbl_LoginCompanyJunc]
(
	@id int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[id],
		[login_id],
		[company_id],
		[location_id],
		[UserType_Id],
		[Room],
		[CheckinStatus],
		[Notes],
		[QueEmailAddress],
		[dtLastLogin],
		[configHourlyRate],
		[configPartialSetup],
		[configEmailNewTicket],
		[configEmailTicketResponse],
		[configEmailUserTicketResponse],
		[configEmailUserNewTicket],
		[bitAllowQueEmailParsing],
		[Token],
		[tintLevel],
		[SupGroupId],
		[intAccountId],
		[intAcctLocationId],
		[btCfgCCRep],
		[vchOrganization],
		[btGlobalFilterEnabled],
		[btLimitToAssignedTkts],
		[btDisabledReports],
		[btUserInactive],
		[printFontSize],
		[AccountLocationId],
		[CreationCatId],
		[LocationId],
		[tintTicketTimer]
	FROM [dbo].[tbl_LoginCompanyJunc]
	WHERE
		([id] = @id)

	SET @Err = @@Error

	RETURN @Err
END



SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[Gettbl_Logins]...';


GO
CREATE PROCEDURE [dbo].[Gettbl_Logins]
(
	@id int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[id],
		[Email],
		[FirstName],
		[LastName],
		[Password],
		[ConfigUnassignedQue],
		[Title],
		[Phone],
		[MobilePhone],
		[sintHourOffset],
		[tintDateFormat],
		[Guid],
		[dtUTCUpdated],
		[LdapUserSID],
		[LdapUserAccount]
	FROM [dbo].[tbl_Logins]
	WHERE
		([id] = @id)

	SET @Err = @@Error

	RETURN @Err
END





SET QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[Gettbl_ticket]...';


GO
CREATE PROCEDURE [dbo].[Gettbl_ticket]
(
	@Id int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[Id],
		[company_id],
		[User_id],
		[Technician_id],
		[Created_id],
		[location_id],
		[class_id],
		[Status],
		[Subject],
		[CreateTime],
		[Note],
		[NewUserPost],
		[NewTechPost],
		[ClosedTime],
		[btPreventive],
		[SerialNumber],
		[folder_id],
		[Room],
		[TicketNumber],
		[CustomXML],
		[PartsCost],
		[LaborCost],
		[TravelCost],
		[MiscCost],
		[PriorityId],
		[dtSLAComplete],
		[dtSLAResponse],
		[dtSLAStart],
		[intSLACompleteUsed],
		[intSLAResponseUsed],
		[btInitResponse],
		[dtReqComp],
		[ReqCompNote],
		[dtFollowUp],
		[FollowUpNote],
		[tintLevel],
		[intTktTimeMin],
		[btViaEmailParser],
		[intAcctId],
		[intAcctLocationId],
		[ClosureNote],
		[btResolved],
		[ResolutionCatsId],
		[btConfirmed],
		[intConfirmedBy],
		[dtConfirmed],
		[vchConfirmedNote],
		[CreationCatsId],
		[vchIdMethod],
		[btHandledByCC],
		[intSubmissionCatId],
		[EmailCC],
		[AccountLocationId],
		[LocationId],
		[Closed_id]
	FROM [dbo].[tbl_ticket]
	WHERE
		([Id] = @Id)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Gettbl_UserType]...';


GO

CREATE PROCEDURE [Gettbl_UserType]
(
	@id int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[id],
		[Name]
	FROM [dbo].[tbl_UserType]
	WHERE
		([id] = @id)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[GetTktLevels]...';


GO
CREATE PROCEDURE [dbo].[GetTktLevels]
(
	@DId int,
	@tintLevel tinyint
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
		[DId],
		[tintLevel],
		[Description],
		[bitDefault],
		[intLastResortId],
		[tintRoutingType],
		[LevelName]
	FROM [dbo].[TktLevels]
	WHERE
		([DId] = @DId) AND
		([tintLevel] = @tintLevel)

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Mc_DeleteEntityField]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteEntityField]
(
	@EntityFieldId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	DELETE FROM [dbo].[Mc_EntityField]
	WHERE (EntityFieldId = @EntityFieldId);
END
GO
PRINT N'Creating [dbo].[Mc_DeleteEntityFieldListValue]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteEntityFieldListValue]
(
	@EntityFieldListValueId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	DELETE FROM [dbo].[Mc_EntityFieldListsValues]
	WHERE (EntityFieldListValueId = @EntityFieldListValueId);
END
GO
PRINT N'Creating [dbo].[Mc_DeleteEntityFieldValue]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteEntityFieldValue]
(
	@EntityFieldValueId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	DELETE FROM [dbo].[Mc_EntityFieldsValues]
	WHERE (EntityFieldValueId = @EntityFieldValueId);
END
GO
PRINT N'Creating [dbo].[Mc_DeleteEntityNodesRelatedEntityNodes]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteEntityNodesRelatedEntityNodes]
(
	@EntityNodesRelatedEntityNodesId uniqueidentifier
)
AS
BEGIN

	SET NOCOUNT OFF
	DECLARE @Err int

	DELETE
	FROM [Mc_EntityNodesRelatedEntityNodes]
	WHERE
		[EntityNodesRelatedEntityNodesId] = @EntityNodesRelatedEntityNodesId
	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Mc_DeleteGroupInstanceAction]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteGroupInstanceAction]
(
	@GroupId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@ActionId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	DELETE FROM dbo.Mc_GroupsInstancesActions 
	WHERE (GroupId = @GroupId) AND (InstanceId = @InstanceId) AND (ActionId = @ActionId);
END
GO
PRINT N'Creating [dbo].[Mc_DeleteGroupInstanceRoles]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteGroupInstanceRoles]
(
	@GroupId uniqueidentifier,
	@InstanceId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	DELETE FROM dbo.Mc_GroupsInstancesRoles 
	WHERE (GroupId = @GroupId) AND (InstanceId = @InstanceId);
END
GO
PRINT N'Creating [dbo].[Mc_DeleteOrganizationUser]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteOrganizationUser]
(
	@OrganizationId uniqueidentifier,
	@UserId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	DELETE FROM dbo.Mc_OrganizationsUsers 
	WHERE (OrganizationId = @OrganizationId) AND (UserId = @UserId);
END
GO
PRINT N'Creating [dbo].[Mc_DeleteRecurringSchedule]...';


GO
create procedure [dbo].[Mc_DeleteRecurringSchedule]
(
	@RecurringScheduleId uniqueidentifier
)
as
begin
	set nocount off;

	delete from [dbo].[Mc_RecurringSchedule]
	where RecurringScheduleId = @RecurringScheduleId;
END
GO
PRINT N'Creating [dbo].[Mc_DeleteRule]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteRule]
(
	@RuleId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF

	DELETE FROM [Mc_Rule]
	WHERE [RuleId] = @RuleId
END
GO
PRINT N'Creating [dbo].[Mc_DeleteRuleParameter]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteRuleParameter]
(
	@RuleParameterId uniqueidentifier
)
AS
BEGIN

	SET NOCOUNT OFF

	DELETE
	FROM [Mc_RuleParameters]
	WHERE
		[RuleParameterId] = @RuleParameterId
END
GO
PRINT N'Creating [dbo].[Mc_DeleteSettingValue]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteSettingValue]
(
	@SettingValueId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	DELETE FROM dbo.Mc_SettingsValues 
	WHERE (SettingValueId = @SettingValueId);
END
GO
PRINT N'Creating [dbo].[Mc_DeleteUserGroup]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteUserGroup]
(
	@UserId uniqueidentifier,
	@GroupId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	DELETE FROM dbo.Mc_UsersGroups 
	WHERE (UserId = @UserId) AND (GroupId = @GroupId);
END
GO
PRINT N'Creating [dbo].[Mc_DeleteUserInstance]...';


GO
CREATE PROCEDURE [dbo].[Mc_DeleteUserInstance]
(
	@UserId uniqueidentifier,
	@InstanceId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	DELETE FROM dbo.Mc_UsersInstances 
	WHERE (UserId = @UserId) AND (InstanceId = @InstanceId);
END
GO
PRINT N'Creating [dbo].[Mc_GetAllEntityNodesRelatedEntityNodes]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetAllEntityNodesRelatedEntityNodes]
	@EntityNodeId uniqueidentifier,
	@EntityId uniqueidentifier,
	@OrganizationId uniqueidentifier
AS
BEGIN

	SET NOCOUNT OFF
	DECLARE @Err int

	SELECT
		[EntityNodesRelatedEntityNodesId],
		enren.[EntityNodeId],
		[RelatedEntityNodeId],
		enren.[EntityId],
		[RelationType]
	FROM [Mc_EntityNodesRelatedEntityNodes] as enren
	LEFT JOIN Mc_EntityNode as en ON en.EntityNodeId = enren.RelatedEntityNodeId
	WHERE enren.EntityNodeId = @EntityNodeId
		AND enren.EntityId = @EntityId AND (en.Deleted = 0 OR RelatedEntityNodeId = '00000000-0000-0000-0000-000000000000')

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Mc_GetAllRuleParameters]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetAllRuleParameters]
(
	@RuleId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT
		[RuleParameterId],
		[RuleId],
		[EntityNodeTypeId],
		[IsInputParameter],
		[IsEntity],
		[FieldName],
		[FullName],
		[TypeName],
		[Term],
		[Value]
	FROM [Mc_RuleParameters]
	WHERE [RuleId] = @RuleId
	ORDER BY [FieldName] ASC;
END
GO
PRINT N'Creating [dbo].[Mc_GetAllRules]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetAllRules]
	@RuleEngineId uniqueidentifier,
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier = NULL
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT [RuleId], [RuleEngineId], [OrganizationId], [InstanceId], [Name], [DisplayName], [UsedQty], [LastUsedUser], [LastUsedDate], [CreatedBy], [CreatedDate], [OrderNumber], [Active]
	FROM [dbo].[Mc_Rule]
	WHERE [RuleEngineId] = @RuleEngineId
		AND [OrganizationId] = @OrganizationId
		AND (	(@InstanceId IS NULL AND [InstanceId] IS NULL)
				OR ([InstanceId] = @InstanceId))
	ORDER BY [OrderNumber] ASC;
END
GO
PRINT N'Creating [dbo].[Mc_GetAnotherAdministrator]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetAnotherAdministrator]
(
	@UserId uniqueidentifier,
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT TOP 1 u.UserId, u.Email, u.FirstName, u.LastName, u.MiddleName
		, u.Phone, u.MobilePhone, u.Fax, u.Title, u.Department, u.Street, u.Street2, u.City, u.[State], u.PostalCode, u.Country
		, u.LastLoginDate, u.Deleted, u.TimeZoneId, u.TimeFormat, uo.OrganizationAdministrator, uo.Active
	FROM dbo.Mc_User AS u
	INNER JOIN dbo.Mc_OrganizationsUsers AS uo
		ON (u.UserId <> uo.UserId) AND (u.Deleted = 0) AND (uo.OrganizationId = @OrganizationId) AND (uo.OrganizationAdministrator = 1);
END
GO
PRINT N'Creating [dbo].[Mc_GetEntityField]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetEntityField]
(
	@EntityFieldId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT [EntityFieldId], [EntityFieldTypeId], [Name], [Description], [DataTypeId], [DefaultValue], [AllowDBNull], [Unique], [MaxLength], [MinValue], [MaxValue], [DecimalDigits], [OrderNumber], [EntityId], [OrganizationId], [InstanceId], [Active]
	FROM dbo.Mc_EntityField
	WHERE (EntityFieldId = @EntityFieldId);
END
GO
PRINT N'Creating [dbo].[Mc_GetEntityFieldListValue]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetEntityFieldListValue]
(
	@EntityFieldListValueId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT [EntityFieldListValueId], [EntityFieldId], [Name], [Value], [Default], [Active]
	FROM [dbo].[Mc_EntityFieldListsValues]
	WHERE (EntityFieldListValueId = @EntityFieldListValueId);
END
GO
PRINT N'Creating [dbo].[Mc_GetEntityFieldListValues]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetEntityFieldListValues]
(
	@EntityFieldId uniqueidentifier,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT [EntityFieldListValueId], [EntityFieldId], [Name], [Value], [Default], [Active]
	FROM [dbo].[Mc_EntityFieldListsValues]
	WHERE (EntityFieldId = @EntityFieldId) AND ((@Active IS NULL) OR (Active = @Active));
END
GO
PRINT N'Creating [dbo].[Mc_GetEntityFields]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetEntityFields]
(
	@EntityId uniqueidentifier,
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT [EntityFieldId], [EntityFieldTypeId], [Name], [Description], [DataTypeId], [DefaultValue], [AllowDBNull], [Unique], [MaxLength], [MinValue], [MaxValue], [DecimalDigits], [OrderNumber], [EntityId], [OrganizationId], [InstanceId], [Active]
	FROM dbo.Mc_EntityField
	WHERE ([EntityId] = @EntityId) 
		AND (OrganizationId = @OrganizationId) 
		AND ((@InstanceId IS NULL AND InstanceId IS NULL) OR (InstanceId = @InstanceId))
		AND ((@Active IS NULL) OR (Active = @Active));
END
GO
PRINT N'Creating [dbo].[Mc_GetEntityFieldsValues]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetEntityFieldsValues]
(
	@EntityId uniqueidentifier,
	@LocalEntityId nvarchar(255)
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT v.[EntityFieldValueId], v.[EntityFieldId], v.[LocalEntityId], v.[Value]
	FROM [dbo].[Mc_EntityFieldsValues] AS v
	INNER JOIN dbo.Mc_EntityField AS f
		ON	v.EntityFieldId = f.EntityFieldId
	WHERE (f.EntityId = @EntityId) AND (v.LocalEntityId = @LocalEntityId) AND (f.Active = 1);
END
GO
PRINT N'Creating [dbo].[Mc_GetEntityFieldValues]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetEntityFieldValues]
(
	@EntityFieldId uniqueidentifier,
	@LocalEntityId nvarchar(255)
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT v.[EntityFieldValueId], v.[EntityFieldId], v.[LocalEntityId], v.[Value]
	FROM [dbo].[Mc_EntityFieldsValues] AS v
	INNER JOIN dbo.Mc_EntityField AS f
		ON	v.EntityFieldId = f.EntityFieldId
	WHERE (f.EntityFieldId = @EntityFieldId) AND (v.LocalEntityId = @LocalEntityId) AND (f.Active = 1);
END
GO
PRINT N'Creating [dbo].[Mc_GetEntityNodes]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetEntityNodes]
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT EntityNodeId, ParentEntityNodeId, [Name], OrderNumber, OrganizationId, InstanceId, EntityId, EntityNodeTypeId, SubEntityId, SubEntityLocalId, FullPath, Deleted
	FROM [dbo].[Mc_EntityNode]
	WHERE (Deleted = 0)
	ORDER BY [Name]
END
GO
PRINT N'Creating [dbo].[Mc_GetEntityNodesRelatedEntityNodes]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetEntityNodesRelatedEntityNodes]
	@EntityNodesRelatedEntityNodesId uniqueidentifier	
AS
BEGIN
	SET NOCOUNT OFF;
	DECLARE @Err int

	SELECT
		[EntityNodesRelatedEntityNodesId],
		[EntityNodeId],
		[EntityId],
		[RelatedEntityNodeId],
		[RelationType]
	FROM [Mc_EntityNodesRelatedEntityNodes]
	WHERE [EntityNodesRelatedEntityNodesId] = @EntityNodesRelatedEntityNodesId

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Mc_GetEntityNodeTypes]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetEntityNodeTypes]
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT EntityNodeTypeId, EntityId, [Name], OrderNumber, OrganizationId, InstanceId, Deleted
	FROM [dbo].[Mc_EntityNodeType]
	WHERE (Deleted = 0);
END
GO
PRINT N'Creating [dbo].[Mc_GetGroups]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetGroups]
(
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT GroupId, OrganizationId, [Name], [Description], BuiltIn, Deleted 
	FROM dbo.Mc_Group 
	WHERE (Deleted = 0) AND (OrganizationId = @OrganizationId);
END
GO
PRINT N'Creating [dbo].[Mc_GetGroupsInstancesActions]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetGroupsInstancesActions]
(
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT gda.GroupId, gda.InstanceId, gda.ActionId, gda.[Enabled]
	FROM dbo.Mc_GroupsInstancesActions AS gda
	INNER JOIN dbo.Mc_Group AS g
		ON	(gda.GroupId = g.GroupId) AND (g.Deleted = 0) AND (g.OrganizationId = @OrganizationId)
	INNER JOIN dbo.Mc_Instance AS d
		ON	(gda.InstanceId = d.InstanceId) AND (d.Deleted = 0) AND (d.OrganizationId = @OrganizationId);
END
GO
PRINT N'Creating [dbo].[Mc_GetGroupsInstancesRoles]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetGroupsInstancesRoles]
(
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;
	
	SELECT gdr.GroupId, gdr.InstanceId, gdr.RoleId
	FROM dbo.Mc_GroupsInstancesRoles AS gdr
	INNER JOIN dbo.Mc_Group AS g
		ON	(gdr.GroupId = g.GroupId) AND (g.Deleted = 0) AND (g.OrganizationId = @OrganizationId)
	INNER JOIN dbo.Mc_Instance AS d
		ON	(gdr.InstanceId = d.InstanceId) AND (d.Deleted = 0) AND (d.OrganizationId = @OrganizationId);
END
GO
PRINT N'Creating [dbo].[Mc_GetInstances]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetInstances]
(
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT InstanceId, PseudoId, OrganizationId, [Name], [Description], EnableSignUpUser, 
		ExternalId, WorkingDays, Active, CanceledTime, Trial, Beta, Deleted, CreatedTime, TimeZoneId, TimeFormat, [DateFormat], BillingPlan, CreditCardStatus
	FROM dbo.Mc_Instance 
	WHERE (OrganizationId = @OrganizationId) AND (Deleted = 0);
END
GO
PRINT N'Creating [dbo].[Mc_GetMessages]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetMessages]
(
	@LocalObjectType nvarchar(50),
	@LocalObjectId nvarchar(255)
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT MessageId, ParentMessageId, LocalObjectType, LocalObjectId, FromUserId, ToUserId, [Subject], [Text], CreatedTime
	FROM dbo.Mc_Message
	WHERE (LocalObjectType = @LocalObjectType) AND (LocalObjectId = @LocalObjectId)
	ORDER BY CreatedTime;
END
GO
PRINT N'Creating [dbo].[Mc_GetRecurringScheduleByEntityId]...';


GO
CREATE procedure [dbo].[Mc_GetRecurringScheduleByEntityId]
(
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier=null,
	@LocalEntityType nvarchar(50),
	@LocalEntityId  nvarchar(255)
)
as
begin
	set NOCOUNT OFF;

	select [RecurringScheduleId]
		  ,[OrganizationId]
		  ,[InstanceId]
		  ,[LocalEntityType]
		  ,[LocalEntityId]
		  ,[Name]
		  ,[StartDate]
		  ,[EndDate]
		  ,[RecurrenceRule]
		  ,[UpdatedTime]
		  ,[UpdatedBy]
		  ,[Deleted]
	from [Mc_RecurringSchedule] as RS
	where RS.OrganizationId = @OrganizationId
	and RS.Deleted = 0
	and (	@InstanceId is null 
			or RS.InstanceId is null 
			or RS.InstanceId = @InstanceId)
	and RS.LocalEntityType = @LocalEntityType
	and RS.LocalEntityId = @LocalEntityId;
	
END
GO
PRINT N'Creating [dbo].[Mc_GetRecurringScheduleByEntityType]...';


GO
CREATE procedure [dbo].[Mc_GetRecurringScheduleByEntityType]
(
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier=null,
	@LocalEntityType nvarchar(50)
)
as
begin
	set NOCOUNT OFF;

	select [RecurringScheduleId]
		  ,[OrganizationId]
		  ,[InstanceId]
		  ,[LocalEntityType]
		  ,[LocalEntityId]
		  ,[StartDate]
		  ,[EndDate]
		  ,[RecurrenceRule]
		  ,[UpdatedTime]
		  ,[UpdatedBy]
		  ,[Deleted]
	from [Mc_RecurringSchedule] as RS
	where RS.OrganizationId = @OrganizationId
	and RS.Deleted = 0
	and (	@InstanceId is null 
			or RS.InstanceId is null 
			or RS.InstanceId = @InstanceId)
	and RS.LocalEntityType = @LocalEntityType;
	
END
GO
PRINT N'Creating [dbo].[Mc_GetRecurringScheduleById]...';


GO
CREATE procedure [dbo].[Mc_GetRecurringScheduleById]
(
	@RecurringScheduleId uniqueidentifier
)
as
begin
	set NOCOUNT OFF;

	select [RecurringScheduleId]
		  ,[OrganizationId]
		  ,[InstanceId]
		  ,[LocalEntityType]
		  ,[LocalEntityId]
		  ,[Name]
		  ,[StartDate]
		  ,[EndDate]
		  ,[RecurrenceRule]
		  ,[UpdatedTime]
		  ,[UpdatedBy]
		  ,[Deleted]
	from [Mc_RecurringSchedule] as RS
	where RS.RecurringScheduleId = @RecurringScheduleId
	and RS.Deleted = 0;
	
END
GO
PRINT N'Creating [dbo].[Mc_GetRecurringScheduleByName]...';


GO
CREATE procedure [dbo].[Mc_GetRecurringScheduleByName]
(
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier=null,
	@Name nvarchar(255)
)
as
begin
	set NOCOUNT OFF;

	select [RecurringScheduleId]
		  ,[OrganizationId]
		  ,[InstanceId]
		  ,[LocalEntityType]
		  ,[LocalEntityId]
		  ,[Name]
		  ,[StartDate]
		  ,[EndDate]
		  ,[RecurrenceRule]
		  ,[UpdatedTime]
		  ,[UpdatedBy]
		  ,[Deleted]
	from [Mc_RecurringSchedule] as RS
	where RS.OrganizationId = @OrganizationId
	and RS.Deleted = 0
	and (	@InstanceId is null 
			or RS.InstanceId is null 
			or RS.InstanceId = @InstanceId)
	and RS.[Name] = @Name;
	
END
GO
PRINT N'Creating [dbo].[Mc_GetRecurringScheduleByRecurrenceRule]...';


GO
CREATE procedure [dbo].[Mc_GetRecurringScheduleByRecurrenceRule]
(
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier=null,
	@RecurrenceRule nvarchar(1024)
)
as
begin
	set NOCOUNT OFF;

	select [RecurringScheduleId]
		  ,[OrganizationId]
		  ,[InstanceId]
		  ,[LocalEntityType]
		  ,[LocalEntityId]
		  ,[Name]
		  ,[StartDate]
		  ,[EndDate]
		  ,[RecurrenceRule]
		  ,[UpdatedTime]
		  ,[UpdatedBy]
		  ,[Deleted]
	from [Mc_RecurringSchedule] as RS
	where RS.OrganizationId = @OrganizationId
	and RS.Deleted = 0
	and (	@InstanceId is null 
			or RS.InstanceId is null 
			or RS.InstanceId = @InstanceId)
	and RS.[RecurrenceRule] = @RecurrenceRule;
	
END
GO
PRINT N'Creating [dbo].[Mc_GetRecurringScheduleEntityTypes]...';


GO
CREATE procedure [dbo].[Mc_GetRecurringScheduleEntityTypes]
(
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier=null
)
as
begin
	set NOCOUNT OFF;

	select distinct [LocalEntityType]
	from [Mc_RecurringSchedule] as RS
	where RS.OrganizationId = @OrganizationId
	and RS.Deleted = 0
	and (	@InstanceId is null 
			or RS.InstanceId is null 
			or RS.InstanceId = @InstanceId)
	order by [LocalEntityType] asc;
	
END
GO
PRINT N'Creating [dbo].[Mc_GetRecurringSchedules]...';


GO
CREATE procedure [dbo].[Mc_GetRecurringSchedules]
(
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier=null
)
as
begin
	set NOCOUNT OFF;

	select [RecurringScheduleId]
		  ,[OrganizationId]
		  ,[InstanceId]
		  ,[LocalEntityType]
		  ,[LocalEntityId]
		  ,[Name]
		  ,[StartDate]
		  ,[EndDate]
		  ,[RecurrenceRule]
		  ,[UpdatedTime]
		  ,[UpdatedBy]
		  ,[Deleted]
	from [Mc_RecurringSchedule] as RS
	where RS.OrganizationId = @OrganizationId
	and RS.Deleted = 0
	and (	@InstanceId is null 
			or RS.InstanceId is null 
			or RS.InstanceId = @InstanceId);
	
END
GO
PRINT N'Creating [dbo].[Mc_GetRule]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetRule]
(
	@RuleId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT
		[RuleId]
	  ,[RuleEngineId]
	  ,[OrganizationId]
	  ,[InstanceId]
	  ,[Name]
	  ,[DisplayName]
	  ,[UsedQty]
	  ,[LastUsedUser]
	  ,[LastUsedDate]
	  ,[CreatedBy]
	  ,[CreatedDate]
	  ,[OrderNumber]
	  ,[Active]
	FROM [Mc_Rule]
	WHERE
		([RuleId] = @RuleId)
END
GO
PRINT N'Creating [dbo].[Mc_GetRuleByName]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetRuleByName]
(
	@Name nvarchar(255),
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT
		[RuleId]
	  ,[RuleEngineId]
	  ,[OrganizationId]
	  ,[InstanceId]
	  ,[Name]
	  ,[DisplayName]
	  ,[UsedQty]
	  ,[LastUsedUser]
	  ,[LastUsedDate]
	  ,[CreatedBy]
	  ,[CreatedDate]
	  ,[OrderNumber]
	  ,[Active]
	FROM [Mc_Rule]
	WHERE [Name] = @Name
	AND [OrganizationId] = @OrganizationId;
	
END
GO
PRINT N'Creating [dbo].[Mc_GetRuleParameter]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetRuleParameter]
(
	@RuleParameterId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF

	SELECT
		[RuleParameterId],
		[RuleId],
		[EntityNodeTypeId],
		[IsInputParameter],
		[IsEntity],
		[FieldName],
		[FullName],
		[TypeName],
		[Term],
		[Value]
	FROM [Mc_RuleParameters]
	WHERE
		([RuleParameterId] = @RuleParameterId)
END
GO
PRINT N'Creating [dbo].[Mc_GetSettingsValues]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetSettingsValues]
(
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT SettingValueId, SettingId, [Value], OrganizationId, InstanceId, GroupId
	FROM dbo.Mc_SettingsValues 
	WHERE (OrganizationId IS NULL) OR (OrganizationId = @OrganizationId);
END
GO
PRINT N'Creating [dbo].[Mc_GetUser]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetUser]
(
	@UserId uniqueidentifier,
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT TOP 1 u.UserId, u.Email, u.FirstName, u.LastName, u.MiddleName
		, u.Phone, u.MobilePhone, u.Fax, u.Title, u.Department, u.Street, u.Street2, u.City, u.[State], u.PostalCode, u.Country
		, u.LastLoginDate, u.Deleted, u.TimeZoneId, u.TimeFormat, u.[DateFormat], uo.OrganizationId, uo.OrganizationAdministrator, uo.Active
	FROM dbo.Mc_User AS u
	LEFT JOIN dbo.Mc_OrganizationsUsers AS uo
		ON (u.UserId = uo.UserId)
	WHERE (u.UserId = @UserId) AND (@OrganizationId IS NULL OR uo.OrganizationId = @OrganizationId);
END
GO
PRINT N'Creating [dbo].[Mc_GetUserByEmail]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetUserByEmail]
(
	@Email nvarchar(255),
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;
	
	SELECT u.UserId, u.Email, u.FirstName, u.LastName, u.MiddleName
		, u.Phone, u.MobilePhone, u.Fax, u.Title, u.Department, u.Street, u.Street2, u.City, u.[State], u.PostalCode, u.Country
		, u.LastLoginDate, u.Deleted, u.TimeZoneId, u.TimeFormat, u.[DateFormat], uo.OrganizationId, uo.OrganizationAdministrator, uo.Active
	FROM dbo.Mc_User AS u
	LEFT JOIN dbo.Mc_OrganizationsUsers AS uo
		ON (u.UserId = uo.UserId)
	WHERE (u.Email = @Email) AND (@OrganizationId IS NULL OR uo.OrganizationId = @OrganizationId);
END
GO
PRINT N'Creating [dbo].[Mc_GetUsers]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetUsers]
(
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT u.UserId, u.Email, u.FirstName, u.LastName, u.MiddleName
		, u.Phone, u.MobilePhone, u.Fax, u.Title, u.Department, u.Street, u.Street2, u.City, u.[State], u.PostalCode, u.Country
		, u.LastLoginDate, u.Deleted, u.TimeZoneId, u.TimeFormat, u.[DateFormat], uo.OrganizationId, uo.OrganizationAdministrator, uo.Active
	FROM dbo.Mc_User AS u
	INNER JOIN dbo.Mc_OrganizationsUsers AS uo
		ON (u.UserId = uo.UserId) AND (u.Deleted = 0) AND (uo.OrganizationId = @OrganizationId);
END
GO
PRINT N'Creating [dbo].[Mc_GetUsersByRoles]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetUsersByRoles]
(
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@OrganizationAdministrator bit,
	@Active bit,
	@InRoles varchar(1024),
	@NotInRoles varchar(1024)
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT DISTINCT 
		u.UserId, u.Email, u.FirstName, u.LastName, u.MiddleName
		, u.Phone, u.MobilePhone, u.Fax, u.Title, u.Department, u.Street, u.Street2, u.City, u.[State], u.PostalCode, u.Country
		, u.LastLoginDate, u.Deleted, u.TimeZoneId, u.TimeFormat, u.[DateFormat], uo.OrganizationId, uo.OrganizationAdministrator
		, CASE WHEN ((@InstanceId IS NOT NULL) AND (uo.Active = 1) AND (ISNULL(ui.Active, 1) = 1))
			OR ((@InstanceId IS NULL) AND (uo.Active = 1)) THEN 1 ELSE 0 END AS Active
	FROM dbo.Mc_User AS u
	INNER JOIN dbo.Mc_OrganizationsUsers AS uo
		ON	(u.UserId = uo.UserId) 
			AND (u.Deleted = 0) 
			AND (uo.OrganizationId = @OrganizationId) 
			AND ((@OrganizationAdministrator IS NULL) OR (uo.OrganizationAdministrator = @OrganizationAdministrator))
	LEFT JOIN dbo.Mc_UsersInstances AS ui
		ON	(u.UserId = ui.UserId) 
			AND ((@InstanceId IS NULL) OR (ui.InstanceId = @InstanceId))
	WHERE
		((@Active IS NULL) 
			OR (CASE WHEN ((@InstanceId IS NOT NULL) AND (uo.Active = 1) AND (ISNULL(ui.Active, 1) = 1))
				OR ((@InstanceId IS NULL) AND (uo.Active = 1)) THEN 1 ELSE 0 END) = @Active
		)
		AND ((uo.OrganizationAdministrator = 1) OR ((uo.OrganizationAdministrator = 0) AND EXISTS (SELECT 0 FROM dbo.Mc_UsersGroups WHERE UserId = u.UserId)))
		AND ((@InRoles IS NULL) OR EXISTS (
			SELECT 0 
			FROM dbo.Mc_UsersGroups AS ug1
			INNER JOIN dbo.Mc_Group AS g1
				ON	(ug1.GroupId = g1.GroupId) 
					AND (g1.Deleted = 0) 
					AND (g1.OrganizationId = @OrganizationId)
					AND (ug1.UserId = u.UserId) 
			INNER JOIN dbo.Mc_GroupsInstancesRoles AS gir1
				ON	(g1.GroupId = gir1.GroupId) 
					AND ((@InstanceId IS NULL) OR (gir1.InstanceId = @InstanceId))
			WHERE (',' + @InRoles + ',' LIKE '%,' + CAST(gir1.RoleId as varchar(50)) + ',%'))
		)
		AND ((@NotInRoles IS NULL) OR NOT EXISTS (
			SELECT 0 
			FROM dbo.Mc_UsersGroups AS ug2
			INNER JOIN dbo.Mc_Group AS g2
				ON	(ug2.GroupId = g2.GroupId) 
					AND (g2.Deleted = 0) 
					AND (g2.OrganizationId = @OrganizationId)
					AND (ug2.UserId = u.UserId) 
			INNER JOIN dbo.Mc_GroupsInstancesRoles AS gir2
				ON	(g2.GroupId = gir2.GroupId) 
					AND ((@InstanceId IS NULL) OR (gir2.InstanceId = @InstanceId))
			WHERE (',' + @NotInRoles + ',' LIKE '%,' + CAST(gir2.RoleId as varchar(50)) + ',%'))
		);
END
GO
PRINT N'Creating [dbo].[Mc_GetUsersGroups]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetUsersGroups]
(
	@UserId uniqueidentifier,
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT ug.UserId, ug.GroupId 
	FROM dbo.Mc_UsersGroups AS ug
	INNER JOIN dbo.Mc_Group AS g
		ON	(ug.GroupId = g.GroupId) AND (g.Deleted = 0) AND (g.OrganizationId = @OrganizationId)
	INNER JOIN dbo.Mc_User AS u
		ON	(ug.UserId = u.UserId) AND (u.UserId = @UserId);
END
GO
PRINT N'Creating [dbo].[Mc_GetUsersInstances]...';


GO
CREATE PROCEDURE [dbo].[Mc_GetUsersInstances]
(
	@UserId uniqueidentifier,
	@OrganizationId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT ui.UserId, ui.InstanceId, ui.Active 
	FROM dbo.Mc_UsersInstances AS ui
	INNER JOIN dbo.Mc_Instance AS i
		ON	(ui.InstanceId = i.InstanceId) AND (i.Deleted = 0) AND (i.OrganizationId = @OrganizationId)
	INNER JOIN dbo.Mc_User AS u
		ON	(ui.UserId = u.UserId) AND (u.UserId = @UserId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertEntityField]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertEntityField]
(
	@EntityFieldId uniqueidentifier,
	@EntityFieldTypeId int,
	@Name nvarchar(255),
	@Description nvarchar(255),
	@DataTypeId int,
	@DefaultValue nvarchar(512),
	@AllowDBNull bit,
	@Unique bit,
	@MaxLength int,
	@MinValue nvarchar(512),
	@MaxValue nvarchar(512),
	@DecimalDigits int,
	@OrderNumber int,
	@EntityId uniqueidentifier,
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO [dbo].[Mc_EntityField] ([EntityFieldId], [EntityFieldTypeId], [Name], [Description], [DataTypeId], [DefaultValue], [AllowDBNull], [Unique], [MaxLength], [MinValue], [MaxValue], [DecimalDigits], [OrderNumber], [EntityId], [OrganizationId], [InstanceId], [Active])
	VALUES (@EntityFieldId, @EntityFieldTypeId, @Name, @Description, @DataTypeId, @DefaultValue, @AllowDBNull, @Unique, @MaxLength, @MinValue, @MaxValue, @DecimalDigits, @OrderNumber, @EntityId, @OrganizationId, @InstanceId, @Active);
	
	SELECT [EntityFieldId], [EntityFieldTypeId], [Name], [Description], [DataTypeId], [DefaultValue], [AllowDBNull], [Unique], [MaxLength], [MinValue], [MaxValue], [DecimalDigits], [OrderNumber], [EntityId], [OrganizationId], [InstanceId], [Active]
	FROM dbo.Mc_EntityField
	WHERE (EntityFieldId = @EntityFieldId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertEntityFieldListValue]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertEntityFieldListValue]
(
	@EntityFieldListValueId uniqueidentifier,
	@EntityFieldId uniqueidentifier,
	@Name nvarchar(255),
	@Value nvarchar(512),
	@Default bit,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO [dbo].[Mc_EntityFieldListsValues] ([EntityFieldListValueId], [EntityFieldId], [Name], [Value], [Default], [Active])
	VALUES (@EntityFieldListValueId, @EntityFieldId, @Name, @Value, @Default, @Active);

	IF @Default = 1
	BEGIN
		DECLARE @EntityFieldTypeId int;
		
		SELECT @EntityFieldTypeId = [EntityFieldTypeId]
		FROM [dbo].[Mc_EntityField]
		WHERE [EntityFieldId] = @EntityFieldId;

		IF @EntityFieldTypeId = 2
			UPDATE [dbo].[Mc_EntityFieldListsValues]
			SET [Default] = 0
			WHERE ([EntityFieldId] = @EntityFieldId) AND ([EntityFieldListValueId] <> @EntityFieldListValueId);
	END

	SELECT [EntityFieldListValueId], [EntityFieldId], [Name], [Value], [Default], [Active]
	FROM [dbo].[Mc_EntityFieldListsValues]
	WHERE (EntityFieldListValueId = @EntityFieldListValueId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertEntityFieldValue]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertEntityFieldValue]
(
	@EntityFieldValueId uniqueidentifier,
	@EntityFieldId uniqueidentifier,
	@LocalEntityId nvarchar(255),
	@Value nvarchar(MAX)
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO [dbo].[Mc_EntityFieldsValues] ([EntityFieldValueId], [EntityFieldId], [LocalEntityId], [Value])
	VALUES (@EntityFieldValueId, @EntityFieldId, @LocalEntityId, @Value);

	SELECT [EntityFieldValueId], [EntityFieldId], [LocalEntityId], [Value]
	FROM [dbo].[Mc_EntityFieldsValues]
	WHERE (EntityFieldValueId = @EntityFieldValueId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertEntityNode]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertEntityNode]
(
	@EntityNodeId uniqueidentifier,
	@ParentEntityNodeId uniqueidentifier,
	@Name nvarchar(255),
	@OrderNumber int,
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@EntityId uniqueidentifier,
	@EntityNodeTypeId uniqueidentifier,
	@SubEntityId uniqueidentifier,
	@SubEntityLocalId nvarchar(255),
	@FullPath nvarchar(1024),
	@Deleted bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO [dbo].[Mc_EntityNode] (EntityNodeId, ParentEntityNodeId, [Name], OrderNumber, OrganizationId, InstanceId, EntityId, EntityNodeTypeId, SubEntityId, SubEntityLocalId, FullPath, Deleted)
	VALUES (@EntityNodeId, @ParentEntityNodeId, @Name, @OrderNumber, @OrganizationId, @InstanceId, @EntityId, @EntityNodeTypeId, @SubEntityId, @SubEntityLocalId, @FullPath, @Deleted);
	
	SELECT EntityNodeId, ParentEntityNodeId, [Name], OrderNumber, OrganizationId, InstanceId, EntityId, EntityNodeTypeId, SubEntityId, SubEntityLocalId, FullPath, Deleted
	FROM [dbo].[Mc_EntityNode]
	WHERE (EntityNodeId = @EntityNodeId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertEntityNodesRelatedEntityNodes]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertEntityNodesRelatedEntityNodes]
(
	@EntityNodesRelatedEntityNodesId uniqueidentifier,
	@EntityNodeId uniqueidentifier,	
	@RelatedEntityNodeId uniqueidentifier,
	@EntityId uniqueidentifier,
	@RelationType int
)
AS
BEGIN

	SET NOCOUNT OFF
	DECLARE @Err int
	IF @EntityNodesRelatedEntityNodesId IS NULL
		 SET @EntityNodesRelatedEntityNodesId = NEWID()

	SET @Err = @@Error

	IF (@Err <> 0)
	    RETURN @Err


	INSERT
	INTO [Mc_EntityNodesRelatedEntityNodes]
	(
		[EntityNodesRelatedEntityNodesId],
		[EntityNodeId],
		[RelatedEntityNodeId],
		[EntityId],
		[RelationType]
	)
	VALUES
	(
		@EntityNodesRelatedEntityNodesId,
		@EntityNodeId,
		@RelatedEntityNodeId,
		@EntityId,
		@RelationType
	)

	SET @Err = @@Error


	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Mc_InsertEntityNodeType]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertEntityNodeType]
(
	@EntityNodeTypeId uniqueidentifier,
	@EntityId uniqueidentifier,
	@Name nvarchar(255),
	@OrderNumber int,
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@Deleted bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO [dbo].[Mc_EntityNodeType] (EntityNodeTypeId, EntityId, [Name], OrderNumber, OrganizationId, InstanceId, Deleted)
	VALUES (@EntityNodeTypeId, @EntityId, @Name, @OrderNumber, @OrganizationId, @InstanceId, @Deleted);
	
	SELECT EntityNodeTypeId, EntityId, [Name], OrderNumber, OrganizationId, InstanceId, Deleted
	FROM [dbo].[Mc_EntityNodeType]
	WHERE (EntityNodeTypeId = @EntityNodeTypeId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertGroup]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertGroup]
(
	@GroupId uniqueidentifier,
	@OrganizationId uniqueidentifier,
	@Name nvarchar(255),
	@Description nvarchar(1024),
	@BuiltIn bit,
	@Deleted bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO dbo.Mc_Group (GroupId, OrganizationId, [Name], [Description], BuiltIn, Deleted) 
	VALUES (@GroupId, @OrganizationId, @Name, @Description, @BuiltIn, @Deleted);
	
	SELECT GroupId, OrganizationId, [Name], [Description], BuiltIn, Deleted 
	FROM dbo.Mc_Group 
	WHERE (GroupId = @GroupId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertGroupInstanceAction]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertGroupInstanceAction]
(
	@GroupId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@ActionId uniqueidentifier,
	@Enabled bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO dbo.Mc_GroupsInstancesActions (GroupId, InstanceId, ActionId, [Enabled]) 
	VALUES (@GroupId, @InstanceId, @ActionId, @Enabled);
	
	SELECT GroupId, InstanceId, ActionId, [Enabled] 
	FROM dbo.Mc_GroupsInstancesActions 
	WHERE (ActionId = @ActionId) AND (InstanceId = @InstanceId) AND (GroupId = @GroupId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertGroupInstanceRole]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertGroupInstanceRole]
(
	@GroupId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@RoleId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO dbo.Mc_GroupsInstancesRoles (GroupId, InstanceId, RoleId) 
	VALUES (@GroupId, @InstanceId, @RoleId);
	
	SELECT GroupId, InstanceId, RoleId 
	FROM dbo.Mc_GroupsInstancesRoles 
	WHERE (InstanceId = @InstanceId) AND (GroupId = @GroupId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertInstance]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertInstance]
(
	@InstanceId uniqueidentifier,
	@PseudoId varchar(6),
	@OrganizationId uniqueidentifier,
	@Name nvarchar(255),
	@Description nvarchar(1024),
	@EnableSignUpUser bit,
	@ExternalId nvarchar(255),
	@WorkingDays char(7),
	@Active bit,
	@CanceledTime datetime,
	@Trial bit,
	@Beta bit,
	@Deleted bit,
	@TimeZoneId nvarchar(255),
	@TimeFormat int,
	@DateFormat int,
	@BillingPlan tinyint,
	@CreditCardStatus tinyint
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO dbo.Mc_Instance (InstanceId, PseudoId, OrganizationId, [Name], [Description], EnableSignUpUser, ExternalId, WorkingDays, Active, CanceledTime, Trial, Beta, Deleted, CreatedTime, TimeZoneId, TimeFormat, [DateFormat], BillingPlan, CreditCardStatus) 
	VALUES (@InstanceId, @PseudoId, @OrganizationId, @Name, @Description, @EnableSignUpUser, @ExternalId, @WorkingDays, @Active, @CanceledTime, @Trial, @Beta, @Deleted, GETUTCDATE(), @TimeZoneId, @TimeFormat, @DateFormat, @BillingPlan, @CreditCardStatus);
	
	SELECT InstanceId, PseudoId, OrganizationId, [Name], [Description], EnableSignUpUser, ExternalId, WorkingDays, Active, CanceledTime, Trial, Beta, Deleted, CreatedTime, TimeZoneId, TimeFormat, [DateFormat], BillingPlan, CreditCardStatus
	FROM dbo.Mc_Instance 
	WHERE (InstanceId = @InstanceId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertMessage]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertMessage]
(
	@MessageId uniqueidentifier,
	@ParentMessageId uniqueidentifier,
	@LocalObjectType nvarchar(50),
	@LocalObjectId nvarchar(255),
	@FromUserId uniqueidentifier,
	@ToUserId uniqueidentifier,
	@Subject nvarchar(255),
	@Text nvarchar(max),
	@CreatedTime datetime
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO dbo.Mc_Message (MessageId, ParentMessageId, LocalObjectType, LocalObjectId, FromUserId, ToUserId, [Subject], [Text], CreatedTime) 
	VALUES (@MessageId, @ParentMessageId, @LocalObjectType, @LocalObjectId, @FromUserId, @ToUserId,@Subject, @Text, @CreatedTime);
	
	SELECT MessageId, ParentMessageId, LocalObjectType, LocalObjectId, FromUserId, ToUserId, [Subject], [Text], CreatedTime
	FROM dbo.Mc_Message
	WHERE MessageId = @MessageId;
END
GO
PRINT N'Creating [dbo].[Mc_InsertOrganizationUser]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertOrganizationUser]
(
	@OrganizationId uniqueidentifier,
	@UserId uniqueidentifier,
	@OrganizationAdministrator bit,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO dbo.Mc_OrganizationsUsers (OrganizationId, UserId, OrganizationAdministrator, Active) 
	VALUES (@OrganizationId, @UserId, @OrganizationAdministrator, @Active);
	
	SELECT OrganizationId, UserId, OrganizationAdministrator, Active
	FROM dbo.Mc_OrganizationsUsers
	WHERE (OrganizationId = @OrganizationId) AND (UserId = @UserId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertRule]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertRule]
(
	@RuleId uniqueidentifier,
	@RuleEngineId uniqueidentifier,
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier = NULL,
	@Name nvarchar(255),
	@DisplayName nvarchar(255),
	@UsedQty int,
	@LastUsedUser uniqueidentifier,
	@LastUsedDate datetime,
	@CreatedBy uniqueidentifier,
	@CreatedDate datetime,
	@OrderNumber int,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	IF @RuleId IS NULL
		 SET @RuleId = NEWID()

	INSERT INTO [Mc_Rule]
	(
		[RuleId]
	  ,[RuleEngineId]
	  ,[OrganizationId]
	  ,[InstanceId]
	  ,[Name]
	  ,[DisplayName]
	  ,[UsedQty]
	  ,[LastUsedUser]
	  ,[LastUsedDate]
	  ,[CreatedDate]
	  ,[CreatedBy]
	  ,[OrderNumber]
	  ,[Active]
	)
	VALUES
	(
		@RuleId,
		@RuleEngineId,
		@OrganizationId,
		@InstanceId,
		@Name,
		@DisplayName,
		@UsedQty,
		@LastUsedUser,
		@LastUsedDate,
		@CreatedDate,
		@CreatedBy,
		@OrderNumber,
		@Active
	);
	
	SELECT
		[RuleId]
	  ,[RuleEngineId]
	  ,[OrganizationId]
	  ,[InstanceId]
	  ,[Name]
	  ,[DisplayName]
	  ,[UsedQty]
	  ,[LastUsedUser]
	  ,[LastUsedDate]
	  ,[CreatedDate]
	  ,[CreatedBy]
	  ,[OrderNumber]
	  ,[Active]
	FROM [Mc_Rule]
	WHERE
		([RuleId] = @RuleId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertRuleParameter]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertRuleParameter]
(
	@RuleParameterId uniqueidentifier,
	@RuleId uniqueidentifier,
	@EntityNodeTypeId uniqueidentifier = NULL,
	@IsInputParameter bit,
	@IsEntity bit,
	@FieldName nvarchar(255),
	@FullName nvarchar(512),
	@TypeName nvarchar(255) = NULL,
	@Term nvarchar(50),
	@Value sql_variant
)
AS
BEGIN
	SET NOCOUNT OFF;

	IF @RuleParameterId IS NULL
		 SET @RuleParameterId = NEWID()

	INSERT
	INTO [Mc_RuleParameters]
	(
		[RuleParameterId],
		[RuleId],
		[EntityNodeTypeId],
		[IsInputParameter],
		[IsEntity],
		[FieldName],
		[FullName],
		[TypeName],
		[Term],
		[Value]
	)
	VALUES
	(
		@RuleParameterId,
		@RuleId,
		@EntityNodeTypeId,
		@IsInputParameter,
		@IsEntity,
		@FieldName,
		@FullName,
		@TypeName,
		@Term,
		@Value
	)

	SELECT
		[RuleParameterId],
		[RuleId],
		[EntityNodeTypeId],
		[IsInputParameter],
		[IsEntity],
		[FieldName],
		[FullName],
		[TypeName],
		[Term],
		[Value]
	FROM [Mc_RuleParameters]
	WHERE
		([RuleParameterId] = @RuleParameterId)
END
GO
PRINT N'Creating [dbo].[Mc_InsertSettingValue]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertSettingValue]
(
	@SettingValueId uniqueidentifier,
	@SettingId uniqueidentifier,
	@Value nvarchar(max),
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@GroupId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO dbo.Mc_SettingsValues (SettingValueId, SettingId, Value, OrganizationId, InstanceId, GroupId) 
	VALUES (@SettingValueId, @SettingId, @Value, @OrganizationId, @InstanceId, @GroupId);
	
	SELECT SettingValueId, SettingId, Value, OrganizationId, InstanceId, GroupId 
	FROM dbo.Mc_SettingsValues
	WHERE (SettingValueId = @SettingValueId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertUser]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertUser]
(
	@UserId uniqueidentifier,
	@Email nvarchar(255),
	@FirstName nvarchar(255),
	@LastName nvarchar(255),
	@MiddleName nvarchar(255),
    @Phone nvarchar(20),
    @MobilePhone nvarchar(20),
    @Fax nvarchar(20),
	@Title nvarchar(30),
	@Department nvarchar(255),
	@Street nvarchar(255),
	@Street2 nvarchar(255),
	@City nvarchar(255),
	@State nvarchar(255),
	@PostalCode nvarchar(20),
	@Country nvarchar(255),
	@LastLoginDate datetime,
	@Deleted bit,
	@TimeZoneId nvarchar(100),
	@TimeFormat int,
	@DateFormat int
)
AS
BEGIN
	SET NOCOUNT OFF;

	IF NOT EXISTS(SELECT 0 FROM dbo.Mc_User WHERE UserId = @UserId)
		INSERT INTO dbo.Mc_User (UserId, Email, FirstName, LastName, MiddleName, Phone, MobilePhone, Fax, Title, Department, Street, Street2, City, [State], PostalCode, Country, LastLoginDate, Deleted, TimeZoneId, TimeFormat, [DateFormat]) 
		VALUES (@UserId, @Email, @FirstName, @LastName, @MiddleName, @Phone, @MobilePhone, @Fax, @Title, @Department, @Street, @Street2, @City, @State, @PostalCode, @Country, @LastLoginDate, @Deleted, @TimeZoneId, @TimeFormat, @DateFormat);
	
	SELECT UserId, Email, FirstName, LastName, MiddleName, Phone, MobilePhone, Fax, Title, Department, Street, Street2, City, [State], PostalCode, Country, LastLoginDate, Deleted, TimeZoneId, TimeFormat, [DateFormat]
	FROM dbo.Mc_User 
	WHERE (UserId = @UserId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertUserGroup]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertUserGroup]
(
	@UserId uniqueidentifier,
	@GroupId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO dbo.Mc_UsersGroups (UserId, GroupId) 
	VALUES (@UserId, @GroupId);
	
	SELECT UserId, GroupId 
	FROM dbo.Mc_UsersGroups 
	WHERE (GroupId = @GroupId) AND (UserId = @UserId);
END
GO
PRINT N'Creating [dbo].[Mc_InsertUserInstance]...';


GO
CREATE PROCEDURE [dbo].[Mc_InsertUserInstance]
(
	@UserId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	INSERT INTO dbo.Mc_UsersInstances (UserId, InstanceId, Active) 
	VALUES (@UserId, @InstanceId, @Active);
	
	SELECT UserId, InstanceId, Active 
	FROM dbo.Mc_UsersInstances 
	WHERE (UserId = @UserId) AND (InstanceId = @InstanceId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateEntityField]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateEntityField]
(
	@EntityFieldId uniqueidentifier,
	@EntityFieldTypeId int,
	@Name nvarchar(255),
	@Description nvarchar(255),
	@DataTypeId int,
	@DefaultValue nvarchar(512),
	@AllowDBNull bit,
	@Unique bit,
	@MaxLength int,
	@MinValue nvarchar(512),
	@MaxValue nvarchar(512),
	@DecimalDigits int,
	@OrderNumber int,
	@EntityId uniqueidentifier,
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE [dbo].[Mc_EntityField]
	SET [EntityFieldTypeId] = @EntityFieldTypeId, [Name] = @Name, [Description] = @Description, [DataTypeId] = @DataTypeId, [DefaultValue] = @DefaultValue
		, [AllowDBNull] = @AllowDBNull, [Unique] = @Unique, [MaxLength] = @MaxLength, [MinValue] = @MinValue, [MaxValue] = @MaxValue, [DecimalDigits] = @DecimalDigits
		, [OrderNumber] = @OrderNumber, [EntityId] = @EntityId, [OrganizationId] = @OrganizationId, [InstanceId] = @InstanceId, [Active] = @Active
	WHERE (EntityFieldId = @EntityFieldId);
	
	SELECT [EntityFieldId], [EntityFieldTypeId], [Name], [Description], [DataTypeId], [DefaultValue], [AllowDBNull], [Unique], [MaxLength], [MinValue], [MaxValue], [DecimalDigits], [OrderNumber], [EntityId], [OrganizationId], [InstanceId], [Active]
	FROM dbo.Mc_EntityField
	WHERE (EntityFieldId = @EntityFieldId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateEntityFieldListValue]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateEntityFieldListValue]
(
	@EntityFieldListValueId uniqueidentifier,
	@EntityFieldId uniqueidentifier,
	@Name nvarchar(255),
	@Value nvarchar(512),
	@Default bit,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE [dbo].[Mc_EntityFieldListsValues]
	SET [EntityFieldId] = @EntityFieldId, [Name] = @Name, [Value] = @Value, [Default] = @Default, [Active] = @Active
	WHERE (EntityFieldListValueId = @EntityFieldListValueId);
	
	IF @Default = 1
	BEGIN
		DECLARE @EntityFieldTypeId int;
		
		SELECT @EntityFieldTypeId = [EntityFieldTypeId]
		FROM [dbo].[Mc_EntityField]
		WHERE [EntityFieldId] = @EntityFieldId;

		IF @EntityFieldTypeId = 2
			UPDATE [dbo].[Mc_EntityFieldListsValues]
			SET [Default] = 0
			WHERE ([EntityFieldId] = @EntityFieldId) AND ([EntityFieldListValueId] <> @EntityFieldListValueId);
	END

	SELECT EntityFieldListValueId, [EntityFieldId], [Name], [Value], [Default], [Active]
	FROM [dbo].[Mc_EntityFieldListsValues]
	WHERE (EntityFieldListValueId = @EntityFieldListValueId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateEntityFieldValue]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateEntityFieldValue]
(
	@EntityFieldValueId uniqueidentifier,
	@EntityFieldId uniqueidentifier,
	@LocalEntityId nvarchar(255),
	@Value nvarchar(MAX)
)
AS
BEGIN
	SET NOCOUNT OFF;
	
	UPDATE [dbo].[Mc_EntityFieldsValues]
	SET [EntityFieldId] = @EntityFieldId, [LocalEntityId] = @LocalEntityId, [Value] = @Value
	WHERE (EntityFieldValueId = @EntityFieldValueId);

	SELECT [EntityFieldValueId], [EntityFieldId], [LocalEntityId], [Value]
	FROM [dbo].[Mc_EntityFieldsValues]
	WHERE (EntityFieldValueId = @EntityFieldValueId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateEntityNode]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateEntityNode]
	(
		@EntityNodeId uniqueidentifier,
		@ParentEntityNodeId uniqueidentifier,
		@Name nvarchar(255),
		@OrderNumber int,
		@OrganizationId uniqueidentifier,
		@InstanceId uniqueidentifier,
		@EntityId uniqueidentifier,
		@EntityNodeTypeId uniqueidentifier,
		@SubEntityId uniqueidentifier,
		@SubEntityLocalId nvarchar(255),
		@FullPath nvarchar(1024),
		@Deleted bit
	)
	AS
	BEGIN
		SET NOCOUNT OFF;

		UPDATE [dbo].[Mc_EntityNode]
		SET ParentEntityNodeId = @ParentEntityNodeId, [Name] = @Name, OrderNumber = @OrderNumber, OrganizationId = @OrganizationId, InstanceId = @InstanceId, EntityId = @EntityId, EntityNodeTypeId = @EntityNodeTypeId, SubEntityId = @SubEntityId, FullPath = @FullPath, Deleted = @Deleted
		WHERE (EntityNodeId = @EntityNodeId);

		
		SELECT EntityNodeId, ParentEntityNodeId, [Name], OrderNumber, OrganizationId, InstanceId, EntityId, EntityNodeTypeId, SubEntityId, SubEntityLocalId, FullPath, Deleted
		FROM [dbo].[Mc_EntityNode]
		WHERE (EntityNodeId = @EntityNodeId);
	END
GO
PRINT N'Creating [dbo].[Mc_UpdateEntityNodesRelatedEntityNodes]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateEntityNodesRelatedEntityNodes]
(
	@EntityNodesRelatedEntityNodesId uniqueidentifier,
	@EntityNodeId uniqueidentifier,
	@RelatedEntityNodeId uniqueidentifier,
	@EntityId uniqueidentifier,
	@RelationType int
)
AS
BEGIN
	SET NOCOUNT OFF;
	DECLARE @Err int

	UPDATE [Mc_EntityNodesRelatedEntityNodes]
	SET
		[EntityNodeId] = @EntityNodeId,
		[RelatedEntityNodeId] = @RelatedEntityNodeId,
		[EntityId] = @EntityId,
		[RelationType] = @RelationType
	WHERE
		[EntityNodesRelatedEntityNodesId] = @EntityNodesRelatedEntityNodesId

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Mc_UpdateEntityNodeType]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateEntityNodeType]
(
	@EntityNodeTypeId uniqueidentifier,
	@EntityId uniqueidentifier,
	@Name nvarchar(255),
	@OrderNumber int,
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@Deleted bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE [dbo].[Mc_EntityNodeType]
	SET [Name] = @Name,  EntityId = @EntityId, OrderNumber = @OrderNumber, OrganizationId = @OrganizationId, InstanceId = @InstanceId, Deleted = @Deleted
	WHERE (EntityNodeTypeId = @EntityNodeTypeId);

	SELECT EntityNodeTypeId, EntityId, [Name], OrderNumber, OrganizationId, InstanceId, Deleted
	FROM [dbo].[Mc_EntityNodeType]
	WHERE (EntityNodeTypeId = @EntityNodeTypeId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateGroup]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateGroup]
(
	@GroupId uniqueidentifier,
	@OrganizationId uniqueidentifier,
	@Name nvarchar(255),
	@Description nvarchar(1024),
	@BuiltIn bit,
	@Deleted bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE dbo.Mc_Group 
	SET OrganizationId = @OrganizationId, [Name] = @Name, [Description] = @Description, BuiltIn = @BuiltIn, Deleted = @Deleted 
	WHERE (GroupId = @GroupId);
	
	SELECT GroupId, OrganizationId, [Name], [Description], BuiltIn, Deleted 
	FROM dbo.Mc_Group 
	WHERE (GroupId = @GroupId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateGroupInstanceAction]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateGroupInstanceAction]
(
	@GroupId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@ActionId uniqueidentifier,
	@Enabled bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE dbo.Mc_GroupsInstancesActions 
	SET [Enabled] = @Enabled 
	WHERE (ActionId = @ActionId) AND (InstanceId = @InstanceId) AND (GroupId = @GroupId);
	
	SELECT GroupId, InstanceId, ActionId, [Enabled] 
	FROM dbo.Mc_GroupsInstancesActions 
	WHERE (ActionId = @ActionId) AND (InstanceId = @InstanceId) AND (GroupId = @GroupId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateGroupInstanceRole]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateGroupInstanceRole]
(
	@GroupId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@RoleId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE dbo.Mc_GroupsInstancesRoles 
	SET GroupId = @GroupId, InstanceId = @InstanceId, RoleId = @RoleId 
	WHERE (GroupId = @GroupId) AND (InstanceId = @InstanceId);
	
	SELECT GroupId, InstanceId, RoleId 
	FROM dbo.Mc_GroupsInstancesRoles 
	WHERE (InstanceId = @InstanceId) AND (GroupId = @GroupId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateInstance]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateInstance]
(
	@InstanceId uniqueidentifier,
	@PseudoId varchar(6),
	@OrganizationId uniqueidentifier,
	@Name nvarchar(255),
	@Description nvarchar(1024),
	@EnableSignUpUser bit,
	@ExternalId nvarchar(255),
	@WorkingDays char(7),
	@Active bit,
	@CanceledTime datetime,
	@Trial bit,
	@Beta bit,
	@Deleted bit,
	@TimeZoneId nvarchar(255),
	@TimeFormat int,
	@DateFormat int,
	@BillingPlan tinyint,
	@CreditCardStatus tinyint
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE dbo.Mc_Instance 
	SET PseudoId  = @PseudoId, OrganizationId = @OrganizationId, [Name] = @Name, [Description] = @Description, EnableSignUpUser = @EnableSignUpUser, ExternalId = @ExternalId, WorkingDays = @WorkingDays, Active = @Active, CanceledTime = @CanceledTime, Trial = @Trial, Beta = @Beta, Deleted = @Deleted, TimeZoneId = @TimeZoneId, TimeFormat = @TimeFormat, [DateFormat] = @DateFormat, BillingPlan = @BillingPlan, CreditCardStatus=@CreditCardStatus
	WHERE (InstanceId = @InstanceId);
	
	SELECT InstanceId, PseudoId, OrganizationId, [Name], [Description], EnableSignUpUser, ExternalId, WorkingDays, Active, CanceledTime, Trial, Beta, Deleted, CreatedTime, TimeZoneId, TimeFormat, [DateFormat], BillingPlan, CreditCardStatus
	FROM dbo.Mc_Instance 
	WHERE (InstanceId = @InstanceId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateOrganizationUser]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateOrganizationUser]
(
	@OrganizationId uniqueidentifier,
	@UserId uniqueidentifier,
	@OrganizationAdministrator bit,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE dbo.Mc_OrganizationsUsers 
	SET OrganizationAdministrator = (CASE WHEN @OrganizationAdministrator IS NULL THEN OrganizationAdministrator ELSE @OrganizationAdministrator END)
		, Active = (CASE WHEN @Active IS NULL THEN Active ELSE @Active END)
	WHERE (OrganizationId = @OrganizationId) AND (UserId = @UserId);

	SELECT OrganizationId, UserId, OrganizationAdministrator, Active
	FROM dbo.Mc_OrganizationsUsers
	WHERE (OrganizationId = @OrganizationId) AND (UserId = @UserId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateRecurringSchedule]...';


GO
CREATE procedure [dbo].[Mc_UpdateRecurringSchedule]
(
	@RecurringScheduleId uniqueidentifier,
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier=null,
	@LocalEntityType nvarchar(50),
	@LocalEntityId nvarchar(255),
	@Name nvarchar(255),
	@StartDate datetime,
	@EndDate datetime,
	@RecurrenceRule nvarchar(1024),
	@UpdatedTime datetime,
	@UpdatedBy uniqueidentifier,
	@Deleted bit
)
as
begin
	set nocount off;

	if exists(select 'true' 
		from [dbo].[Mc_RecurringSchedule]
		where RecurringScheduleId = @RecurringScheduleId)
	begin
		update [dbo].[Mc_RecurringSchedule]
		set		[LocalEntityType] = @LocalEntityType
				,[LocalEntityId] = @LocalEntityId
				,[Name] = @Name
				,[StartDate] = @StartDate
				,[EndDate] = @EndDate
				,[RecurrenceRule] = @RecurrenceRule
				,[UpdatedTime] = @UpdatedTime
				,[UpdatedBy] = @UpdatedBy
				,[Deleted] = @Deleted
		where	[RecurringScheduleId] = @RecurringScheduleId;
	end
	else 
	begin
		insert into [dbo].[Mc_RecurringSchedule]
			   ([RecurringScheduleId]
			   ,[OrganizationId]
			   ,[InstanceId]
			   ,[LocalEntityType]
			   ,[LocalEntityId]
			   ,[Name]
			   ,[StartDate]
			   ,[EndDate]
			   ,[RecurrenceRule]
			   ,[UpdatedTime]
			   ,[UpdatedBy]
			   ,[Deleted])
		 values
			   (@RecurringScheduleId
			   ,@OrganizationId
			   ,@InstanceId
			   ,@LocalEntityType
			   ,@LocalEntityId
			   ,@Name
			   ,@StartDate
			   ,@EndDate
			   ,@RecurrenceRule
			   ,@UpdatedTime
			   ,@UpdatedBy
			   ,@Deleted);
	end

	select [RecurringScheduleId]
		  ,[OrganizationId]
		  ,[InstanceId]
		  ,[LocalEntityType]
		  ,[LocalEntityId]
		  ,[Name]
		  ,[StartDate]
		  ,[EndDate]
		  ,[RecurrenceRule]
		  ,[UpdatedTime]
		  ,[UpdatedBy]
		  ,[Deleted]
	from [Mc_RecurringSchedule] as RS
	where RS.RecurringScheduleId = @RecurringScheduleId;
END
GO
PRINT N'Creating [dbo].[Mc_UpdateRule]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateRule]
(
	@RuleId uniqueidentifier,
	@RuleEngineId uniqueidentifier,
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier = NULL,
	@Name nvarchar(255),
	@DisplayName nvarchar(255),
	@UsedQty int,
	@LastUsedUser uniqueidentifier,
	@LastUsedDate datetime,
	@CreatedBy uniqueidentifier,
	@CreatedDate datetime,
	@OrderNumber int,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE [Mc_Rule]
	SET
		[RuleEngineId] = @RuleEngineId,
		[OrganizationId] = @OrganizationId,
		[InstanceId] = @InstanceId,
		[Name] = @Name,
		[DisplayName] = @DisplayName,
		[UsedQty] = @UsedQty,
		[LastUsedUser] = @LastUsedUser,
		[LastUsedDate] = @LastUsedDate,
		[CreatedDate] = @CreatedDate,
		[CreatedBy] = @CreatedBy,
		[OrderNumber] = @OrderNumber,
		[Active] = @Active
	WHERE
		[RuleId] = @RuleId;

	SELECT
		[RuleId]
	  ,[RuleEngineId]
	  ,[OrganizationId]
	  ,[InstanceId]
	  ,[Name]
	  ,[DisplayName]
	  ,[UsedQty]
	  ,[LastUsedUser]
	  ,[LastUsedDate]
	  ,[CreatedDate]
	  ,[CreatedBy]
	  ,[OrderNumber]
	  ,[Active]
	FROM [Mc_Rule]
	WHERE
		([RuleId] = @RuleId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateRuleOrder]...';


GO
CREATE procedure [dbo].[Mc_UpdateRuleOrder]
(
	@RuleId uniqueidentifier,
	@OrderNumber int
)
as
begin

	set NOCOUNT OFF

	UPDATE [Mc_Rule]
	SET [OrderNumber] = @OrderNumber
	WHERE [RuleId] = @RuleId;
	
end
GO
PRINT N'Creating [dbo].[Mc_UpdateRuleParameter]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateRuleParameter]
(
	@RuleParameterId uniqueidentifier,
	@RuleId uniqueidentifier,
	@EntityNodeTypeId uniqueidentifier = NULL,
	@IsInputParameter bit,
	@IsEntity bit,
	@FieldName nvarchar(255),
	@FullName nvarchar(512),
	@TypeName nvarchar(255) = NULL,
	@Term nvarchar(50),
	@Value sql_variant
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE [Mc_RuleParameters]
	SET
		[RuleId] = @RuleId,
		[EntityNodeTypeId] = @EntityNodeTypeId,
		[IsInputParameter] = @IsInputParameter,
		[IsEntity] = @IsEntity,
		[FieldName] = @FieldName,
		[FullName] = @FullName,
		[TypeName] = @TypeName,
		[Term] = @Term,
		[Value] = @Value
	WHERE
		[RuleParameterId] = @RuleParameterId

	SELECT
		[RuleParameterId],
		[RuleId],
		[EntityNodeTypeId],
		[IsInputParameter],
		[IsEntity],
		[FieldName],
		[FullName],
		[TypeName],
		[Term],
		[Value]
	FROM [Mc_RuleParameters]
	WHERE
		([RuleParameterId] = @RuleParameterId)
END
GO
PRINT N'Creating [dbo].[Mc_UpdateRuleUses]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateRuleUses]
(
	@RuleId uniqueidentifier,
	@LastUsedUser uniqueidentifier,
	@LastUsedDate datetime
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE [Mc_Rule]
	SET
		[UsedQty] = [UsedQty] + 1,
		[LastUsedUser] = @LastUsedUser,
		[LastUsedDate] = @LastUsedDate
	WHERE
		[RuleId] = @RuleId;

	SELECT
		[RuleId]
	  ,[OrganizationId]
	  ,[InstanceId]
	  ,[Name]
	  ,[DisplayName]
	  ,[UsedQty]
	  ,[LastUsedUser]
	  ,[LastUsedDate]
	  ,[CreatedDate]
	  ,[CreatedBy]
	  ,[Active]
	FROM [Mc_Rule]
	WHERE
		([RuleId] = @RuleId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateSettingValue]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateSettingValue]
(
	@SettingValueId uniqueidentifier,
	@SettingId uniqueidentifier,
	@Value nvarchar(max),
	@OrganizationId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@GroupId uniqueidentifier
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE dbo.Mc_SettingsValues 
	SET SettingId = @SettingId, Value = @Value, OrganizationId = @OrganizationId, InstanceId = @InstanceId, GroupId = @GroupId 
	WHERE (SettingValueId = @SettingValueId);
	
	SELECT SettingValueId, SettingId, Value, OrganizationId, InstanceId, GroupId 
	FROM dbo.Mc_SettingsValues 
	WHERE (SettingValueId = @SettingValueId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateUser]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateUser]
(
	@UserId uniqueidentifier,
	@Email nvarchar(255),
	@FirstName nvarchar(255),
	@LastName nvarchar(255),
	@MiddleName nvarchar(255),
	@Phone nvarchar(20),
    @MobilePhone nvarchar(20),
    @Fax nvarchar(20),
	@Title nvarchar(30),
	@Department nvarchar(255),
	@Street nvarchar(255),
	@Street2 nvarchar(255),
	@City nvarchar(255),
	@State nvarchar(255),
	@PostalCode nvarchar(20),
	@Country nvarchar(255),
	@LastLoginDate datetime,
	@Deleted bit,
	@TimeZoneId nvarchar(100),
	@TimeFormat int,
	@DateFormat int
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE dbo.Mc_User 
	SET UserId = @UserId, Email = ISNULL(@Email, Email), FirstName = ISNULL(@FirstName, FirstName), LastName = ISNULL(@LastName, LastName), MiddleName = ISNULL(@MiddleName, MiddleName)
		, Phone = ISNULL(@Phone, Phone), MobilePhone = ISNULL(@MobilePhone, MobilePhone), Fax = ISNULL(@Fax, Fax), Title = ISNULL(@Title, Title), Department = ISNULL(@Department, Department)
		, Street = ISNULL(@Street, Street), Street2 = ISNULL(@Street2, Street2), City = ISNULL(@City, City), [State] = ISNULL(@State, [State])
		, PostalCode = ISNULL(@PostalCode, PostalCode), Country = ISNULL(@Country, Country)
		, LastLoginDate = ISNULL(@LastLoginDate, LastLoginDate), Deleted = ISNULL(@Deleted, Deleted)
		, TimeZoneId = @TimeZoneId, TimeFormat = @TimeFormat, [DateFormat] = @DateFormat
	WHERE (UserId = @UserId);
	
	SELECT UserId, Email, FirstName, LastName, MiddleName, Phone, MobilePhone, Fax, Title, Department, Street, Street2, City, [State], PostalCode, Country, LastLoginDate, Deleted, TimeZoneId, TimeFormat, [DateFormat]
	FROM dbo.Mc_User 
	WHERE (UserId = @UserId);
END
GO
PRINT N'Creating [dbo].[Mc_UpdateUserInstance]...';


GO
CREATE PROCEDURE [dbo].[Mc_UpdateUserInstance]
(
	@UserId uniqueidentifier,
	@InstanceId uniqueidentifier,
	@Active bit
)
AS
BEGIN
	SET NOCOUNT OFF;

	UPDATE dbo.Mc_UsersInstances 
	SET Active = @Active
	WHERE (UserId = @UserId) AND (InstanceId = @InstanceId);
	
	SELECT UserId, InstanceId, Active 
	FROM dbo.Mc_UsersInstances 
	WHERE (UserId = @UserId) AND (InstanceId = @InstanceId);
END
GO
PRINT N'Creating [dbo].[sp_alluserlist]...';


GO
CREATE Procedure dbo.sp_alluserlist
	(
		@DId int
	)

As
--VGOOZ 23-SEP-2005: tkt #2951 - Inactive users functionality	
	SELECT tlj.id, lo.LastName, lo.FirstName, lo.LastName + ', ' + lo.FirstName AS vchFullName
	FROM tbl_LoginCompanyJunc tlj
	JOIN tbl_Logins lo ON lo.id=tlj.login_id
	WHERE tlj.company_id=@DId AND tlj.btUserInactive=0
	ORDER BY lo.LastName, lo.FirstName
	return
GO
PRINT N'Creating [dbo].[sp_BusinessDayAdd]...';


GO
CREATE PROCEDURE dbo.sp_BusinessDayAdd
	@DId int,
	@PriorityId int,
    @dInputDate smalldatetime,
    @iDayInterval int,
    @dOutputDate smalldatetime OUTPUT

AS
    DECLARE @iCounter        int
    DECLARE @dTempDate       datetime
    DECLARE @iIsBusDay       int
    DECLARE @iMoveDirrection int
    DECLARE @btSkipSaturday bit
    DECLARE @btSkipSunday bit
    DECLARE @btSkipHolidays bit
    
    SELECT @btSkipSaturday=btSkipSaturday, @btSkipSunday=btSkipSunday, @btSkipHolidays=btSkipHolidays FROM Priorities WHERE DId=@DId AND Id=@PriorityId
    
    SELECT @dTempDate = @dInputDate
    SELECT @iCounter  = 1

    IF  (@iDayInterval < 0)
        SELECT @iMoveDirrection = -1
    ELSE
        SELECT @iMoveDirrection = 1
      
      
	IF @iDayInterval = 0
		BEGIN
			Counter:
			
			SET @iIsBusDay = 1
			
			IF @btSkipSaturday=1 AND datepart(DW, @dTempDate)=7
				SET @iIsBusDay = 0
				
			IF @btSkipSunday=1 AND datepart(DW, @dTempDate)=1
				SET @iIsBusDay = 0
			
			
			/*Check for Holiday Span*/
			if @iIsBusDay = 1 AND @btSkipHolidays = 1
				begin
				select @iIsBusDay = 0 where exists (Select 1 from Holidays WHERE DId=@DId AND @dTempDate between dtStart and dtStop)
				end
			
			IF @iIsBusDay = 0
				BEGIN
					SELECT @dTempDate = DATEADD(d, 1, @dTempDate)
					GOTO Counter
				END
		
		END  
    ELSE  
		WHILE (@iCounter <= ABS(@iDayInterval))
 			BEGIN
				SELECT @dTempDate = DATEADD(d, @iMoveDirrection ,@dTempDate)   

				SET @iIsBusDay = 1
				IF @btSkipSaturday=1 AND datename(DW, @dTempDate)='Saturday'
					SET @iIsBusDay = 0
					
				IF @btSkipSunday=1 AND datename(DW, @dTempDate)='Sunday'
					SET @iIsBusDay = 0
				
				if @iIsBusDay = 1 AND @btSkipHolidays = 1
					select @iIsBusDay = 0 where exists (Select 1 from Holidays WHERE DId=@Did AND @dTempDate between dtStart and dtStop)
					
				
				SELECT @iCounter = @iCounter + @iIsBusDay
       		END
	
    SELECT @dOutputDate = @dTempDate
GO
PRINT N'Creating [dbo].[sp_ClearAccountTaskTypeRates]...';


GO
CREATE PROCEDURE dbo.sp_ClearAccountTaskTypeRates
(
	@CompanyID int,
	@AccountID int
)
AS

	UPDATE 
		AccountTaskTypeRate
	SET 
		HourlyRate = NULL
	WHERE 
		CompanyID = @CompanyID
		AND
		(AccountID = @AccountID
		OR
		(@AccountID=-1 AND AccountTaskTypeRate.AccountID IS null)
		)
GO
PRINT N'Creating [dbo].[sp_ClearProjectTaskTypeRates]...';


GO
CREATE PROCEDURE dbo.sp_ClearProjectTaskTypeRates
(
		@CompanyID int,
		@ProjectID int
)
AS

	UPDATE 
		ProjectTaskTypeRate
	SET 
		HourlyRate = NULL
	WHERE 
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID
GO
PRINT N'Creating [dbo].[sp_ConfigureMailGroupUsers]...';


GO
CREATE PROCEDURE dbo.sp_ConfigureMailGroupUsers
(
	@DepartmentId int,
	@MailGroupId int,
	@Action int, /* 1 - insert; 2 - remove */
	@list nvarchar(max)
)
AS
	/*Internal parameters*/
	Declare @char char(1)
	Declare @separate_char char(1)

	/*Initialize internal parameters*/
	Select @separate_char=','

	/*Internal variables*/
	Declare @word nvarchar(255)
	Declare @current_id int
	Declare @str_len int
	Declare @str_index int
	Declare @start_index int
	Declare @diff_index int

	/*Initialize internal variables*/
	Select @str_index=1
	Select @start_index=1

	Select @str_len=len ( @list )
	
	Begin Transaction

	/* Search words */
	While @str_index<=@str_len
	Begin
		Select @char=substring (@list,@str_index,1)

		If(@char=@separate_char) or (@str_index=@str_len) 
		Begin
			If (@str_index=@str_len)
				Select @str_index=@str_index+1

			Select @diff_index=@str_index-@start_index
			Select @word=substring (@list,@start_index,@diff_index)

			If @word!=@separate_char 
			Begin
				/* handler */
				Select @current_id=CONVERT(int, @word)

				if @Action=1
					INSERT INTO MailGroupUsers (DepartmentId, MailGroupId, LoginId) VALUES (@DepartmentId, @MailGroupId, @current_id)					
				Else
					DELETE FROM MailGroupUsers where MailGroupId=@MailGroupId and LoginId=@current_id
			End

			Select @start_index=@str_index+1
		End
		Select @str_index=@str_index+1	
	End

	Commit;

	Return
GO
PRINT N'Creating [dbo].[sp_CopyLocation]...';


GO
CREATE Procedure [dbo].[sp_CopyLocation]
	(
		@DId int,
		@Id int,
		@ParentId int
	)

As
	declare @NewId int

	INSERT INTO Locations (DId, ParentId, AccountId, LocationTypeId, Name, Status,
		Description, IsDefault, AuditorId, AuditPeriodDays, CfgEnableAudit)
	select DId,	@ParentId as ParentId, AccountId, LocationTypeId, Name, Status,
	Description, IsDefault, AuditorId, AuditPeriodDays, CfgEnableAudit
	FROM Locations s
	WHERE s.DId=@DId AND s.Id=@Id
	
	set @NewId=@@IDENTITY
	
	insert into LocationPropertyValues (DId,LocationId, LocationTypePropertyId, PropertyValue)
	select v.DId, @NewId as LocationId, v.LocationTypePropertyId, v.PropertyValue
	From LocationPropertyValues v
	where v.DId=@DId and v.LocationId=@Id
	
	insert into LocationAliases (DId,LocationAliasName,LocationId)
	select a.DId, a.LocationAliasName, @NewId as LocationId
	from LocationAliases a
	where a.DId=@DId and a.LocationId=@Id
GO
PRINT N'Creating [dbo].[sp_CopyLocationsBetweenDept]...';


GO

CREATE PROCEDURE sp_CopyLocationsBetweenDept
	(
		@FromDeptId int,
		@IntoDeptId int,
		@NewDefautTechId int
	)
AS
	INSERT INTO tbl_Locations (DId, Name, intLastResortId, Attention, Address1, Address2, City, State, Zip, Phone) 
		SELECT @IntoDeptId, Name, @NewDefautTechId, Attention, Address1, Address2, City, State, Zip, Phone FROM tbl_Locations WHERE DId=@FromDeptId

	RETURN
GO
PRINT N'Creating [dbo].[sp_CopyToDoListFromTemplate]...';


GO
CREATE PROCEDURE dbo.sp_CopyToDoListFromTemplate
(
	@DId int,
	@ToDoListId uniqueidentifier,
	@ToDoListTemplateId uniqueidentifier,
	@TicketId int = NULL,
	@ProjectId int = NULL,
	@Name nvarchar(50) = NULL
)
AS		

	DECLARE @OrderIndex int
	
	IF @Name IS NULL
	 BEGIN
	  SELECT 
		@OrderIndex = ISNULL(COUNT(*), 0)
	  FROM
		ToDoList
	  WHERE
		DId = @DId
		AND
		(TicketId = @TicketId OR @TicketId IS NULL)
		AND
		(ProjectId = @ProjectId OR @ProjectId IS NULL)

	  SET @OrderIndex = @OrderIndex + 1
	 END
	ELSE
	 BEGIN
		SET @OrderIndex = 0
	 END
	
	INSERT INTO ToDoList
		(
		[Id]
      ,[DId]
      ,[Name]
      ,[ToDoListTemplateId]
      ,[TicketId]
      ,[ProjectId]
      ,[Order])
	SELECT
		@ToDoListId,
		@DId,
		ISNULL(@Name, Name),
		@ToDoListTemplateId,
		@TicketId,
		@ProjectId,
		@OrderIndex
	FROM
		ToDoListTemplate
	WHERE
		[DId] = @DId
		AND
		Id = @ToDoListTemplateId

	IF @Name IS NOT NULL
	 BEGIN
	  UPDATE 
			tdl
		SET tdl.[Order] = tdl.rNum
		FROM
		(SELECT row_number() over (order by [Order]) AS rNum,*
		FROM
			ToDoList 
		WHERE
			DId = @DId
			AND
			(TicketId = @TicketId OR @TicketId IS NULL)
			AND
			(ProjectId = @ProjectId OR @ProjectId IS NULL)) tdl
	 END
GO
PRINT N'Creating [dbo].[sp_DeleteAccount]...';


GO
CREATE PROCEDURE dbo.sp_DeleteAccount
	(
		@DId int,
		@AcctId int
	)
AS
	SET NOCOUNT ON
		
	IF EXISTS(SELECT 'true' FROM Accounts WHERE DId=@DId AND Id=@AcctId)
		BEGIN
			/*Updates First*/
			
			UPDATE tbl_LoginCompanyJunc SET intAccountId=null,intAcctLocationId=null WHERE company_id=@DId and intAccountId=@AcctId
		
			/*Deletes*/
			
			DELETE FROM SchedTickets WHERE DId=@DId AND intAcctId=@AcctId
			
			DELETE FROM AccountLevels WHERE DId=@DId AND AcctId=@AcctId
			
			DELETE FROM AccountLocations WHERE DId=@DId AND AccountId=@AcctId

			DELETE LocationPropertyValues FROM LocationPropertyValues LPV INNER JOIN Locations L ON L.Id=LPV.LocationId AND L.DId=LPV.DId WHERE L.DId=@DId AND L.AccountId=@AcctID
			DELETE LocationRouteLevelTechs FROM LocationRouteLevelTechs LRLT INNER JOIN LocationRouteLevels LRL ON LRL.Id=LRLT.LocationRouteLevelId AND LRL.DId=LRLT.DId INNER JOIN Locations L ON L.Id=LRL.LocationId AND L.DId=LRL.DId WHERE L.DId=@DId AND L.AccountId=@AcctId
			DELETE LocationRouteLevels FROM LocationRouteLevels LRL INNER JOIN Locations L ON L.Id=LRL.LocationId AND L.DId=LRL.DId WHERE L.DId=@DId AND L.AccountId=@AcctId

			UPDATE Locations set Status=0, AccountId=null WHERE DId = @DId AND AccountId=@AcctID
			
			DELETE FROM Accounts WHERE DId=@DId AND Id=@AcctID
			
		
		
		END
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteAccountLevel]...';


GO

CREATE PROCEDURE sp_DeleteAccountLevel
	(
		@DId int,
		@AcctId int,
		@tintLevel tinyint
	)
AS
	SET NOCOUNT ON
	
	DELETE FROM AccountLevelTechs WHERE DId=@DId AND AcctId=@AcctId AND tintLevel=@tintLevel
	DELETE FROM AccountLevels WHERE DId=@DId AND AcctId=@AcctId AND tintLevel=@tintLevel
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteAccountLevelTech]...';


GO

CREATE PROCEDURE sp_DeleteAccountLevelTech
	(
		@DId int,
		@AcctId int,
		@tintLevel tinyint,
		@UId int
	)
AS
	SET NOCOUNT ON
	DELETE FROM AccountLevelTechs WHERE DId=@DId AND AcctId=@AcctId AND tintLevel=@tintLevel AND UId=@UId
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteAccountRate]...';


GO
CREATE PROCEDURE dbo.sp_DeleteAccountRate
(
	@AccountID int,
	@CompanyID int
)
AS

	DELETE
		AccountRate
	WHERE
		CompanyID = @CompanyID
		AND
		(AccountID = @AccountID
		OR
		(@AccountID=-1 AND AccountID IS null)
		)

	DELETE	
		AccountTaskTypeRate
	WHERE
		CompanyID = @CompanyID
		AND
		(AccountID = @AccountID
		OR
		(@AccountID=-1 AND AccountID IS null)
		)

	DELETE	
		AccountTech
	WHERE
		CompanyID = @CompanyID
		AND
		(AccountID = @AccountID
		OR
		(@AccountID=-1 AND AccountID IS null)
		)
GO
PRINT N'Creating [dbo].[sp_DeleteAccountRetainer]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteAccountRetainer]
(
		@CompanyID int,
		@AccountRetainerID int		
)
AS

	DELETE AccountRetainer
    WHERE
		DId = @CompanyID
		AND
		Id = @AccountRetainerID
GO
PRINT N'Creating [dbo].[sp_DeleteAccountTaskTypeRate]...';


GO
CREATE PROCEDURE dbo.sp_DeleteAccountTaskTypeRate
(
		@AccountTaskTypeRateID int,
		@CompanyID int
)
AS

	DELETE AccountTaskTypeRate
    WHERE
		CompanyID = @CompanyID
		AND
		AccountTaskTypeRateID = @AccountTaskTypeRateID
GO
PRINT N'Creating [dbo].[sp_DeleteAccountTech]...';


GO
CREATE PROCEDURE dbo.sp_DeleteAccountTech
(
		@AccountTechID int,
		@CompanyID int
)
AS

	DELETE AccountTech
    WHERE
		CompanyID = @CompanyID
		AND
		AccountTechID = @AccountTechID
GO
PRINT N'Creating [dbo].[sp_DeleteAcctLocation]...';


GO

CREATE PROCEDURE sp_DeleteAcctLocation
	(
		@DId int,
		@AcctId int,
		@Id int
	)
AS
	SET NOCOUNT ON
	DELETE FROM AccountLocations WHERE DId=@DId AND AccountId=@AcctId AND Id=@Id
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteAllAccountTechs]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteAllAccountTechs]
(
	@CompanyID int,
	@AccountID int
)
AS
BEGIN
	
	DELETE FROM
		AccountTech
	WHERE
		CompanyID = @CompanyID
		AND
		(AccountID = @AccountID
		OR
		(@AccountID=-1 AND AccountID IS null)
		)
	
END




set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_DeleteAllAssets]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteAllAssets]
	(
		@DepartmentId int,
		@DepartmentName nvarchar(250),
		@Passcode nvarchar(20)
	)
AS
	SET @DepartmentId = (SELECT company_id FROM tbl_company WHERE company_id = @DepartmentId AND company_name = @DepartmentName AND @Passcode='12345')
	
	IF @DepartmentId <> ''
		BEGIN
			print 'Start Asset Delete'
	
			DELETE FROM TicketAssets WHERE DId = @DepartmentId

			DELETE AssetLogs FROM AssetLogs INNER JOIN Assets ON AssetLogs.AssetId = Assets.Id AND Assets.DepartmentId = @DepartmentId
			
			DELETE AssetTypeCustFields FROM AssetTypeCustFields INNER JOIN Assets ON AssetTypeCustFields.AssetId = Assets.Id AND Assets.DepartmentId = @DepartmentId
			
			DELETE AssetTypeMultiChoices FROM AssetTypeMultiChoices INNER JOIN AssetTypes ON AssetTypeMultiChoices.TypeId = AssetTypes.Id AND AssetTypes.DepartmentId = @DepartmentId
			
			DELETE FROM AssetPropertyValues WHERE DId = @DepartmentId

			DELETE FROM AssetSubAssets WHERE DId = @DepartmentId

			DELETE FROM AssetBulkLocation WHERE DId=@DepartmentId

			DELETE FROM AssetBulk WHERE DepartmentId=@DepartmentId			
			
			DELETE FROM AssetComputerLogicalDrives WHERE DepartmentId=@DepartmentId

			DELETE FROM AssetComputerPrinters WHERE DepartmentId=@DepartmentId

			DELETE FROM AssetComputerProcessors WHERE DepartmentId=@DepartmentId

			DELETE FROM AssetComputers WHERE DepartmentId=@DepartmentId

			DELETE FROM AssetComputerSoftwares WHERE DepartmentId=@DepartmentId
			
			DELETE FROM AssetImports WHERE DepartmentId=@DepartmentId

			DELETE FROM LocationAuditTaggedAssets WHERE DId=@DepartmentId
			
			DELETE FROM Assets WHERE DepartmentId = @DepartmentId
			
			DELETE FROM AssetModels WHERE DepartmentId = @DepartmentId
			
			DELETE FROM AssetMakes WHERE DepartmentId = @DepartmentId
			
			DELETE AssetTypeCustCap FROM AssetTypeCustCap INNER JOIN AssetTypes ON AssetTypeCustCap.TypeId = AssetTypes.Id AND AssetTypes.DepartmentId = @DepartmentId

			DELETE FROM AssetTypeProperties WHERE DId = @DepartmentId
			
			DELETE FROM AssetTypes WHERE DepartmentId=@DepartmentId
			
			DELETE FROM AssetCategories WHERE DepartmentId = @DepartmentId
			
			DELETE FROM AssetOwnership WHERE DId=@DepartmentId
		
			PRINT 'End Asset Delete'
		END

	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteAllProjectTechs]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteAllProjectTechs] 
(
	@CompanyID int,
	@ProjectID int
)
AS
BEGIN
	
	DELETE FROM
		ProjectTech
	WHERE
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID

END
GO
PRINT N'Creating [dbo].[sp_DeleteAllTaskTypeTechs]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteAllTaskTypeTechs]
(
	@DId int,
	@TaskTypeID int
)
AS


	DELETE
		[TaskTypeTech]
	WHERE
		TaskTypeID = @TaskTypeID AND CompanyID = @DId

SET QUOTED_IDENTIFIER OFF 

SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[sp_DeleteAssetBulk]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteAssetBulk]
(
	@DepartmentId int,
	@UId int,
	@AssetId int	
)
AS
BEGIN
	SET NOCOUNT ON
	
	UPDATE AssetBulk
	SET
		Active=0, Updated=getutcdate(), UpdatedBy=@UId
	WHERE
		[DepartmentId] = @DepartmentId AND [Id] = @AssetId	
END
GO
PRINT N'Creating [dbo].[sp_DeleteAssetCategory]...';


GO
CREATE Procedure [dbo].[sp_DeleteAssetCategory]
	(
		@DepartmentId int,
		@ID int
	)
As
	
	DECLARE @RecordsFound int
	SET @RecordsFound = 0
	
	IF EXISTS(SELECT 'true' FROM AssetTypes WHERE DepartmentId=@DepartmentId And CategoryId = @Id)
		SET @RecordsFound = 1
	
	IF EXISTS(SELECT 'true' FROM Assets WHERE DepartmentId=@DepartmentId And CategoryId = @Id)
		SET @RecordsFound = 1
	
	
	/*
	Return Values 
	1 - Record is deleted
	2 - Workload must be transferred.
	
	*/
	
	IF @RecordsFound = 1
		return 2
	
	IF @RecordsFound = 0
		BEGIN
			DELETE FROM AssetCategories WHERE DepartmentId = @DepartmentID AND id = @id
			return 1
		END
GO
PRINT N'Creating [dbo].[sp_DeleteAssetColumnSetting]...';


GO
CREATE Procedure dbo.sp_DeleteAssetColumnSetting
	(
		@DId int,
		@Id int
	)
As
	UPDATE AssetFilters SET AssetColumnSettingId=NULL WHERE DId=@DId AND AssetColumnSettingId=@Id
	DELETE FROM AssetColumnSettings WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_DeleteAssetFilter]...';


GO
CREATE Procedure dbo.sp_DeleteAssetFilter
	(
		@DId int,
		@Id int
	)
As
	DELETE FROM AssetFilters WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_DeleteAssetMake]...';


GO
CREATE Procedure [dbo].[sp_DeleteAssetMake]
	(
		@DepartmentId int,
		@ID int
	)
As
	
	DECLARE @RecordsFound int
	SET @RecordsFound = 0
	
	IF EXISTS(SELECT 'true' FROM AssetModels WHERE DepartmentId=@DepartmentId And MakeId = @Id)
		SET @RecordsFound = 1
	
	IF EXISTS(SELECT 'true' FROM Assets WHERE DepartmentId=@DepartmentId And  MakeId = @Id)
		SET @RecordsFound = 1
	
	
	/*
	Return Values 
	1 - Record is deleted
	2 - Workload must be transferred.
	
	*/
	
	IF @RecordsFound = 1
		return 2
	
	IF @RecordsFound = 0
		BEGIN
			DELETE FROM AssetMakes WHERE DepartmentId = @DepartmentID AND id = @id
			return 1
		END
GO
PRINT N'Creating [dbo].[sp_DeleteAssetModel]...';


GO
CREATE Procedure [dbo].[sp_DeleteAssetModel]
	(
		@DepartmentId int,
		@ID int
	)
As
	
	DECLARE @RecordsFound int
	SET @RecordsFound = 0
	
	IF EXISTS(SELECT 'true' FROM Assets WHERE DepartmentId=@DepartmentId And ModelId = @Id)
		SET @RecordsFound = 1
	
	
	/*
	Return Values 
	1 - Record is deleted
	2 - Workload must be transferred.
	
	*/
	
	IF @RecordsFound = 1
		return 2
	
	IF @RecordsFound = 0
		BEGIN
			DELETE FROM AssetModels WHERE DepartmentId = @DepartmentID AND id = @id
			return 1
		END
GO
PRINT N'Creating [dbo].[sp_DeleteAssetMultiChoice]...';


GO

CREATE Procedure sp_DeleteAssetMultiChoice
	(
		@DId int,
		@TypeId int,
		@Multi tinyint,
		@OptionNumber tinyint
	)
As
	IF @Multi = 1
		UPDATE AssetTypeCustFields SET multi1=null WHERE DepartmentId=@DId AND TypeId=@TypeId AND multi1=@OptionNumber
	IF @Multi = 2
		UPDATE AssetTypeCustFields SET multi2=null WHERE DepartmentId=@DId AND TypeId=@TypeId AND multi2=@OptionNumber
	IF @Multi = 3
		UPDATE AssetTypeCustFields SET multi3=null WHERE DepartmentId=@DId AND TypeId=@TypeId AND multi3=@OptionNumber
	IF @Multi = 4
		UPDATE AssetTypeCustFields SET multi4=null WHERE DepartmentId=@DId AND TypeId=@TypeId AND multi4=@OptionNumber
		
	DELETE FROM AssetTypeMultiChoices WHERE TypeId=@TypeId AND MultiNumber=@Multi AND OptionNumber=@OptionNumber
	return
GO
PRINT N'Creating [dbo].[sp_DeleteAssetMultiChoices]...';


GO

Create Procedure sp_DeleteAssetMultiChoices
	(
		@DepartmentId int,
		@TypeId int,
		@MultiNumber tinyint
	)
As
	DELETE AssetTypeMultiChoices FROM AssetTypeMultiChoices INNER JOIN Assets A ON A.TypeId = AssetTypeMultiChoices.TypeId AND A.DepartmentId = @DepartmentId WHERE AssetTypeMultiChoices.TypeId=@TypeId AND AssetTypeMultiChoices.MultiNumber=@MultiNumber
	return
GO
PRINT N'Creating [dbo].[sp_DeleteAssetStatusCompany]...';


GO
CREATE PROCEDURE dbo.sp_DeleteAssetStatusCompany
(
	@DId int,
	@AssetStatusID int
)
AS
	SET NOCOUNT ON
	
	DELETE
		AssetStatusCompany
	WHERE
		DId = @DId
		AND
		AssetStatusID = @AssetStatusID
GO
PRINT N'Creating [dbo].[sp_DeleteAssetType]...';


GO
CREATE Procedure [dbo].[sp_DeleteAssetType]
	(
		@DepartmentId int,
		@ID int
	)
As
	
	DECLARE @RecordsFound int
	SET @RecordsFound = 0
	DECLARE @CustFieldsFound int
	SET @CustFieldsFound = 0
	
	IF EXISTS(SELECT 'true' FROM AssetMakes WHERE DepartmentId = @DepartmentId and TypeId = @ID)
		SET @RecordsFound = 1
	
	IF EXISTS(SELECT 'true' FROM Assets WHERE DepartmentId = @DepartmentId and TypeId = @ID)
		SET @RecordsFound = 1
		
	IF EXISTS(SELECT 'true' FROM AssetTypeProperties WHERE DId =@DepartmentId And AssetTypeId = @ID)
		SET @CustFieldsFound = 1
	/*
	Return Values 
	1 - Record is deleted
	2 - Workload must be transferred.
	3 - Custom Fields Setup that must be removed first.
	*/
	
	IF @RecordsFound = 1
		return 2
	IF @CustFieldsFound = 1
		return 3
	
	IF @RecordsFound = 0
		BEGIN
			DELETE FROM AssetTypes WHERE DepartmentId = @DepartmentID AND id = @id
			return 1
		END
GO
PRINT N'Creating [dbo].[sp_DeleteAssetTypeProperty]...';


GO
CREATE Procedure dbo.sp_DeleteAssetTypeProperty
	(
		@DId int,
		@Id int
	)
As
	DELETE FROM AssetPropertyValues WHERE DId=@DId AND AssetTypePropertyId=@Id
	DELETE FROM AssetTypeProperties WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_DeleteClass]...';


GO


CREATE Procedure [dbo].[sp_DeleteClass]
	(
		@DId int,
		@ClassID int
	)
As
	/* set nocount on */
	DECLARE @RecordsFound int,
		@CUWClassID int
	SET @RecordsFound = 0
	
	IF EXISTS(SELECT id FROM SchedTickets WHERE DId=@DId AND intClassId IN (SELECT Id FROM dbo.fxGetAllChildClasses(@DId, @ClassID, NULL)))
		SET @RecordsFound = 1
		
	IF EXISTS(SELECT id FROM tbl_ticket WHERE company_id = @DId AND class_id IN (SELECT Id FROM dbo.fxGetAllChildClasses(@DId, @ClassID, NULL)))
		SET @RecordsFound = 1
	
	SET @CUWClassID = CAST(dbo.fxGetConfigValueStr(@DId, 'CUWClassID') AS int)
	IF @CUWClassID = @ClassID
		SET @RecordsFound = 1
	
	/*
	Return Values 
	1 - Record is deleted
	2 - Workload must be transferred.
	3 - Workload must be transferred. But there are no active classes to transfer to.
	*/
	IF @RecordsFound = 1
		IF EXISTS (SELECT 'true' FROM tbl_class WHERE company_id = @DId AND btInactive = 0 AND NOT id IN (SELECT Id FROM dbo.fxGetAllChildClasses(@DId, @ClassID, NULL))) -- we have another active class to transfer to
			return 2
		ELSE
			return 3
			
	IF @RecordsFound = 0
	BEGIN
		DECLARE @CId int
		DECLARE c_cursor CURSOR FOR SELECT Id FROM dbo.fxGetAllChildClasses(@DId, @ClassID, NULL) ORDER BY Level DESC
		OPEN c_cursor
		FETCH NEXT FROM c_cursor INTO @CId
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DELETE FROM ClassLevelsTechJctn WHERE DId=@DId AND ClassId=@CId
			DELETE FROM ClassLevels WHERE DId=@DId AND ClassId=@CId
			DELETE FROM tbl_classtechnicianjctn WHERE class_id = @CId
			DELETE FROM CustomFields WHERE DepartmentId = @DId AND class_id = @CId
			DELETE FROM tbl_class WHERE company_id = @DId AND id = @CId
			FETCH NEXT FROM c_cursor INTO @CId
		END
		CLOSE c_cursor
		DEALLOCATE c_cursor
		return 1
	END
GO
PRINT N'Creating [dbo].[sp_DeleteClassLevel]...';


GO

CREATE PROCEDURE sp_DeleteClassLevel
	(
		@DId int,
		@intClassId int,
		@intClassLvlId int
	)
AS
	SET NOCOUNT ON
	
		DELETE FROM ClassLevelsTechJctn WHERE DId=@DId AND ClassId=@intClassId AND intClssLvlId=@intClassLvlId
		
		DELETE FROM ClassLevels WHERE DId=@DId AND ClassId=@intClassId AND Id=@intClassLvlId
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteClassSubTechs]...';


GO

CREATE Procedure sp_DeleteClassSubTechs
	(
		@ClassId int,
		@TechJctnId int
	)
As
	
	DELETE FROM tbl_classtechnicianjctn WHERE class_id = @ClassID AND id = @TechJctnId
	
	return
GO
PRINT N'Creating [dbo].[sp_DeleteClssLvlTech]...';


GO

CREATE PROCEDURE sp_DeleteClssLvlTech
	(
		@DId int,
		@intClassId int,
		@intClssLvlTechId int
	)
AS
	SET NOCOUNT ON
	DELETE FROM ClassLevelsTechJctn WHERE DId=@DId AND ClassId=@intClassId AND Id=@intClssLvlTechId
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteCustomField]...';


GO

Create Procedure sp_DeleteCustomField
	(
		@DepartmentId int,
		@FieldId int
	)
As
	DELETE FROM CustomFields WHERE id = @FieldId AND DepartmentId = @DepartmentId
	return
GO
PRINT N'Creating [dbo].[sp_DeleteCustomText]...';


GO

CREATE PROCEDURE sp_DeleteCustomText
	(
		@DId int,
		@Type nvarchar(25)
	)
AS
	DELETE FROM CustomText WHERE DId=@DId AND Type=@Type
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteDepartment]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteDepartment]
	(
		@DepartmentId int,
		@DepartmentName nvarchar(250)
	)
AS
IF @DepartmentId <= 0 
	RETURN
	
PRINT 'Deleting the department #' + CAST(@DepartmentId AS nvarchar(10)) + ' "' + @DepartmentName + '"'

PRINT 'Update entries of tbl_LoginCompanyJunc'
UPDATE tbl_LoginCompanyJunc 
SET tintLevel = NULL
	, LocationId = NULL
	, location_id = null
WHERE company_id = @DepartmentId

PRINT 'Updating entries of Accounts'
UPDATE Accounts SET LocationId = NULL WHERE DId = @DepartmentId

PRINT 'EMailParserDropBoxes'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM EMailParserDropBoxes WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'CustomEmailFields'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM CustomEmailFields WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_KnowledgebaseResponses'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) KBR FROM tbl_KnowledgebaseResponses AS KBR
	LEFT JOIN tbl_LoginCompanyJunc AS LCJ 
		ON LCJ.id = KBR.LoginCompanyJunc_Id
	WHERE KBR.DepartmentId = @DepartmentID OR LCJ.company_id = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_Knowledgebase'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM tbl_Knowledgebase WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'JunkMailRules'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM JunkMailRules WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ReportFilters'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ReportFilters WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'SchedTicketAssets'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM SchedTicketAssets WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ClassLevelsTechJctn'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ClassLevelsTechJctn WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ClassLevels'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ClassLevels WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'WrkLstFilters'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM WrkLstFilters WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'DeploymentLogger'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM DeploymentLogger WHERE CompanyId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'CustomNames'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM CustomNames WHERE CompanyId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TicketCriteriaData'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TicketCriteriaData WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TicketCriterias'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TicketCriterias WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'NotificationRuleUsers'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM NotificationRuleUsers WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'NotificationRuleEvents'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM NotificationRuleEvents WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'NotificationRules'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM NotificationRules WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AssetFilters'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AssetFilters WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AssetColumnSettings'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AssetColumnSettings WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'NotificationEventsQueueFiles'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM NotificationEventsQueueFiles WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'NotificationEventsQueue'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM NotificationEventsQueue WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'UserLocations'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM UserLocations WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_ClassTechnicianJctn'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) tbl_ClassTechnicianJctn FROM tbl_ClassTechnicianJctn 
	INNER JOIN tbl_class 
		ON tbl_ClassTechnicianJctn.class_id = tbl_class.id AND tbl_class.company_id = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'RoutingOrder'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM RoutingOrder WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AccountFiles'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AccountFiles WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AccountFilters'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AccountFilters WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AccountLevelTechs'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AccountLevelTechs WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AccountLevels'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AccountLevels WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AccountLocations'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AccountLocations WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AccountsCfg'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AccountsCfg WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TicketAssets'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TicketAssets WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'CustomText'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM CustomText WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'CustomFields'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM CustomFields WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_part'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM tbl_part WHERE company_id = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_PartsOrder'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM tbl_PartsOrder WHERE company_id = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_PartsRequestNotifyTechs'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'RemoteSessions'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM RemoteSessions WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TicketLogs'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TicketLogs WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TicketTime'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TicketTime WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TicketTimeEstimated'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TicketTimeEstimated WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TicketSentEmails'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TicketSentEmails WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TicketMiscCosts'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) TicketMiscCosts FROM TicketMiscCosts 
	INNER JOIN tbl_ticket 
		ON TicketMiscCosts.TicketId = tbl_ticket.Id AND tbl_ticket.company_id = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'GlobalFilters'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) GlobalFilters FROM GlobalFilters 
	INNER JOIN tbl_LoginCompanyJunc 
		ON GlobalFilters.LoginId = tbl_LoginCompanyJunc.id AND tbl_LoginCompanyJunc.company_id = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TicketAssignment'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TicketAssignment WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TicketTravelCosts'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TicketTravelCosts WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'RelatedTickets'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM RelatedTickets WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ToDoItem'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ToDoItem WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ToDoItemTemplate'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ToDoItemTemplate WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ToDoList'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ToDoList WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ToDoListTemplate'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ToDoListTemplate WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_ticket'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM tbl_ticket WHERE company_id = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'SchedTickets'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM SchedTickets WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'Folders'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM Folders WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'CreationCats'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM CreationCats WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_class'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM tbl_class WHERE company_id = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'Deleting assets'
EXEC sp_DeleteAllAssets @DepartmentId, @DepartmentName, '12345'

PRINT 'tbl_vendors'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM tbl_vendors WHERE company_id = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'QueueMembers'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM QueueMembers WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationTechJctn'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationTechJctn WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationLevelsTechJctn'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationLevelsTechJctn WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationLevels'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationLevels WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TktLevels'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TktLevels WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'Removing Primary Location from Users'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM UserAccounts WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AssetStatusCompany'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AssetStatusCompany WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationPropertyValues'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationPropertyValues WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationRouteLevelTechs'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationRouteLevelTechs WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationRouteLevels'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationRouteLevels WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationAliases'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationAliases WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationAuditHistory'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationAuditHistory WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationAuditTaggedAssets'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationAuditTaggedAssets WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationLevels'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationLevels WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationLevelsTechJctn'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationLevelsTechJctn WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationTechJctn'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationTechJctn WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationTypeProperties'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationTypeProperties WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'LocationTypePropertiesGroup'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationTypePropertiesGroup WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'Locations'
WHILE EXISTS(SELECT DId FROM Locations WHERE DId = @DepartmentId)
BEGIN
	DELETE TOP (1000) L FROM Locations L 
	WHERE L.DId = @DepartmentId AND NOT EXISTS(SELECT DId FROM Locations WHERE DId = @DepartmentId AND ParentId = L.Id) 

	IF @@ERROR <> 0
		BREAK
END

PRINT 'LocationTypes'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM LocationTypes WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_Locations'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM tbl_Locations WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ProjectRetainer'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ProjectRetainer WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ProjectTaskTypeRate'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ProjectTaskTypeRate WHERE CompanyID = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ProjectTech'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ProjectTech WHERE CompanyID = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ProjectTime'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ProjectTime WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'UserProjects'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM UserProjects WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'InvoiceRetainer'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM InvoiceRetainer WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'Invoice'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM Invoice WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'DaySummaryTime'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM DaySummaryTime WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'DayTimeProjectNotes'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM DayTimeProjectNotes WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'Project'
WHILE EXISTS(SELECT CompanyID FROM Project WHERE CompanyID = @DepartmentId)
BEGIN
	DELETE TOP (1000) P FROM Project P 
	WHERE P.CompanyID = @DepartmentId AND NOT EXISTS(SELECT CompanyID FROM Project WHERE CompanyID = @DepartmentId AND ParentId = P.ProjectID) 
	
	IF @@ERROR <> 0
		BREAK
END

PRINT 'AccountRate'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AccountRate WHERE CompanyID = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AccountRetainer'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AccountRetainer WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AccountTaskTypeRate'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AccountTaskTypeRate WHERE CompanyID = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AccountTech'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AccountTech WHERE CompanyID = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'Accounts'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM Accounts WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'ResolutionCats'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM ResolutionCats WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'AccessKey'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM AccessKey WHERE CompanyID = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TimeBill'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TimeBill WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'RatePlanRates'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM RatePlanRates WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'RatePlan'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM RatePlan WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TaskTypeTech'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TaskTypeTech WHERE CompanyID = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TaskTypeTechBillableRate'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TaskTypeTechBillableRate WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TaskTypeTechCost'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TaskTypeTechCost WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'TaskType'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM TaskType WHERE DepartmentID = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_LoginCompanyJunc'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM tbl_LoginCompanyJunc WHERE company_id = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'SupportGroups'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM SupportGroups WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'Holidays'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM Holidays WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'Priorities'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM Priorities WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'DeploymentLoggerUser'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) dlu FROM DeploymentLoggerUser AS dlu
	INNER JOIN tbl_Logins AS l
		ON dlu.LoginID = l.id
	LEFT OUTER JOIN tbl_LoginCompanyJunc AS lcj
		ON lcj.login_id = l.id 
	WHERE lcj.company_id is null
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'MailGroupUsers'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) mgu FROM MailGroupUsers AS mgu
	INNER JOIN tbl_Logins AS l
		ON mgu.LoginId = l.id AND DepartmentId = @DepartmentId
	LEFT OUTER JOIN tbl_LoginCompanyJunc AS lcj
		ON lcj.login_id = l.id 
	WHERE lcj.company_id is null
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'MailGroups'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM MailGroups WHERE DepartmentId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'SupportPortal'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM SupportPortal WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'SupportPortalLinks'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM SupportPortalLinks WHERE DId = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_company'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) FROM tbl_company WHERE company_id = @DepartmentId
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

PRINT 'tbl_Logins'
WHILE 1 = 1
BEGIN
	DELETE TOP (1000) tbl_Logins FROM tbl_Logins 
	LEFT OUTER JOIN tbl_LoginCompanyJunc 
		ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id 
	WHERE tbl_LoginCompanyJunc.company_id is null
	
	IF @@ROWCOUNT = 0 OR @@ERROR <> 0
		BREAK
END

RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteEmailDropBoxes]...';


GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_DeleteEmailDropBoxes]
	-- Add the parameters for the stored procedure here
	@DId int, 
	@Id int
AS
BEGIN
	DELETE EMailParserDropBoxes WHERE DId=@DId AND Id=@Id
END
GO
PRINT N'Creating [dbo].[sp_DeleteFolder]...';


GO

CREATE Procedure sp_DeleteFolder

	(
		@DId int,
		@FolderId int,
		@PreviousFolderId int = 0

	)

As

	/*If this value is populated then transfer the tickets*/
	IF @PreviousFolderId <> 0
		BEGIN
			UPDATE tbl_ticket SET folder_id = @FolderId WHERE company_id=@DId AND folder_id = @PreviousFolderId
			SET @FolderId = @PreviousFolderId
		END
		
	
	/*Check to see if subfolders exists*/
	IF EXISTS(SELECT 'true' FROM Folders WHERE DId=@DId AND ParentId = @FolderId)
		return 1
	
	IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id = @DId AND folder_id = @FolderId)
		return 2
	ELSE
		BEGIN
			/*Delete the Folder*/
			DELETE FROM Folders WHERE DId=@DId AND Id = @FolderId
			return 0 
		END
GO
PRINT N'Creating [dbo].[sp_DeleteHoliday]...';


GO

CREATE PROCEDURE sp_DeleteHoliday
	(
		@DId int,
		@Id int
	)
AS
	DELETE FROM Holidays WHERE DId=@DId AND Id=@Id
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteInvoice]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteInvoice]
(
	@DepartmentId int,	
	@InvoiceID int
)
AS

	BEGIN TRANSACTION DeleteInvoiceFullInfo

	UPDATE
		[ProjectTime]
	SET
		InvoiceId = NULL,
		BillRate = NULL
	WHERE
		DepartmentId = @DepartmentId
		AND
		InvoiceId = @InvoiceID

	UPDATE
		TicketTime
	SET
		InvoiceId = NULL,
		BillRate = NULL
	WHERE
		DepartmentId = @DepartmentId
		AND
		InvoiceId = @InvoiceID

	UPDATE
		TicketTravelCosts
	SET
		InvoiceId = NULL
	WHERE
		DepartmentId = @DepartmentId
		AND
		InvoiceId = @InvoiceID

	DELETE
	FROM
		InvoiceRetainer
	WHERE
		DId = @DepartmentId
		AND
		InvoiceId = @InvoiceID

	DELETE
	FROM
		Invoice
	WHERE
		DId = @DepartmentId
		AND
		Id = @InvoiceID

	COMMIT TRANSACTION DeleteInvoiceFullInfo
GO
PRINT N'Creating [dbo].[sp_DeleteKBArticle]...';


GO

----------------------------------------------------------------------------------------------------------------
-- Stored procedures


	CREATE PROCEDURE sp_DeleteKBArticle
	(
		@DId int,
		@KBid int
	)
		AS
			IF EXISTS(SELECT 'true' FROM tbl_Knowledgebase WHERE DepartmentId = @DId AND id = @KBid)
				BEGIN
					DELETE FROM tbl_KnowledgebaseResponses WHERE DepartmentId = @DId AND knowledgebase_Id = @KBid
					DELETE FROM tbl_Knowledgebase WHERE DepartmentId = @DId AND id = @KBId
				END
GO
PRINT N'Creating [dbo].[sp_DeleteLevel]...';


GO

CREATE PROCEDURE [dbo].[sp_DeleteLevel]
	(
		@DId int,
		@tintLevel tinyint
	)
AS
	DECLARE @LevelsCount int
	SELECT @LevelsCount=COUNT(*) FROM TktLevels WHERE DId=@DId
	IF @LevelsCount>1 AND EXISTS(SELECT 'true' FROM TktLevels WHERE DId=@DId and tintLevel=@tintLevel)
		BEGIN
			DECLARE @HighLevel tinyint
			SELECT @HighLevel=MAX(tintLevel) FROM TktLevels WHERE DId=@DId
			DECLARE @NewTintLevel tinyint
			DELETE ClassLevelsTechJctn FROM ClassLevelsTechJctn INNER JOIN ClassLevels ON ClassLevels.DId=@DId AND ClassLevelsTechJctn.intClssLvlId=ClassLevels.Id AND ClassLevels.tintLevel=@tintLevel
			DELETE FROM ClassLevels WHERE DId=@DId AND tintLevel=@tintLevel
			DELETE FROM AccountLevelTechs WHERE DId=@DId AND tintLevel=@tintLevel
			DELETE FROM AccountLevels WHERE DId=@DId AND tintLevel=@tintLevel
			DELETE LocationLevelsTechJctn FROM LocationLevelsTechJctn INNER JOIN LocationLevels ON LocationLevels.DId=@DId AND LocationLevelsTechJctn.intLctLvlId=LocationLevels.Id AND LocationLevels.tintLevel=@tintLevel
			DELETE FROM LocationLevels WHERE DId=@DId AND tintLevel=@tintLevel
			DELETE LocationRouteLevelTechs FROM LocationRouteLevelTechs INNER JOIN LocationRouteLevels ON LocationRouteLevels.DId=@DId AND LocationRouteLevelTechs.LocationRouteLevelId=LocationRouteLevels.Id AND LocationRouteLevels.TicketLevel=@tintLevel
			DELETE FROM LocationRouteLevels WHERE DId=@DId AND TicketLevel=@tintLevel
			
			IF @tintLevel=@HighLevel
			BEGIN
				SET @NewTintLevel=@tintLevel-1
				UPDATE tbl_LoginCompanyJunc SET tintLevel=@NewTintLevel WHERE company_id=@DId and tintLevel=@tintLevel
				UPDATE tbl_class SET tintLevelOverride=@NewTintLevel WHERE company_id=@DId and tintLevelOverride=@tintLevel
				UPDATE tbl_ticket SET tintLevel=@NewTintLevel WHERE company_id=@DId AND tintLevel=@tintLevel
				UPDATE TktLevels SET tintLevel=@NewTintLevel WHERE DId=@DId AND tintLevel=@NewTintLevel				
			END
			ELSE
			BEGIN
				DECLARE @Description nvarchar(2000)
				DECLARE @bitDefault bit
				DECLARE @intLastResortId int
				DECLARE @tintRoutingType tinyint
				DECLARE @LevelName nvarchar(50)
				WHILE @tintLevel<@HighLevel
				BEGIN
					SET @tintLevel=@tintLevel+1
					SET @NewTintLevel=@tintLevel-1
					UPDATE tbl_LoginCompanyJunc SET tintLevel=@NewTintLevel WHERE company_id=@DId and tintLevel=@tintLevel
					UPDATE tbl_class SET tintLevelOverride=@NewTintLevel WHERE company_id=@DId and tintLevelOverride=@tintLevel
					UPDATE ClassLevels SET tintLevel=@NewTintLevel WHERE DId=@DId AND tintLevel=@tintLevel
					UPDATE AccountLevels SET tintLevel=@NewTintLevel WHERE DId=@DId AND tintLevel=@tintLevel
					UPDATE LocationLevels SET tintLevel=@NewTintLevel WHERE DId=@DId AND tintLevel=@tintLevel
					UPDATE LocationRouteLevels SET TicketLevel=@NewTintLevel WHERE DId=@DId AND TicketLevel=@tintLevel					
					UPDATE tbl_ticket SET tintLevel=@NewTintLevel WHERE company_id=@DId AND tintLevel=@tintLevel
					SELECT @Description=Description, @bitDefault=bitDefault, @intLastResortId=intLastResortId, @tintRoutingType=tintRoutingType, @LevelName=LevelName FROM TktLevels WHERE DId=@DId AND tintLevel=@tintLevel
					UPDATE TktLevels SET Description=@Description, bitDefault=@bitDefault, intLastResortId=@intLastResortId, tintRoutingType=@tintRoutingType, LevelName=@LevelName  WHERE DId=@DId AND tintLevel=@NewTintLevel
				END
			END
			DELETE FROM TktLevels WHERE DId=@DId and tintLevel=@tintLevel
			IF NOT EXISTS(SELECT 'true' FROM TktLevels WHERE DId=@DId AND bitDefault=1)
				UPDATE TktLevels SET bitDefault = 1 WHERE DId=@DId AND tintLevel=(SELECT TOP 1 tintLevel FROM TktLevels WHERE DId=@DId ORDER BY tintLevel)
			RETURN 0
		END
	ELSE
		RETURN  -1
GO
PRINT N'Creating [dbo].[sp_DeleteLocation]...';


GO
CREATE Procedure [dbo].[sp_DeleteLocation]
	(
		@DId int,
		@LocationId int
	)

As
	set ARITHABORT ON
	DECLARE @RecordsFound int
	DECLARE @return_value int
	
	SET @RecordsFound = 0
	
	IF NOT EXISTS(SELECT Id FROM Locations WHERE DId = @DId AND Id = @LocationId )
		return 3
	DECLARE @AccountId int
	SELECT @AccountId=AccountId FROM Locations WHERE DId=@DId AND Id=@LocationId

	IF EXISTS(SELECT 'true' FROM Locations WHERE ParentId = @LocationId)
		SET @RecordsFound = 1
	/*
	Return Values 
	1 - Record is deleted
	2 - Workload must be transferred.
	3 - CompanyID and LocationId do not agree
	*/
	IF @AccountId IS NULL
	BEGIN
		IF @RecordsFound=0
			IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND (LocationId = @LocationId OR AccountLocationId = @LocationId))
				SET @RecordsFound = 1
				
		IF @RecordsFound=0
			IF EXISTS(SELECT 'true' FROM SchedTickets WHERE DId=@DId AND (LocationId = @LocationId OR AccountLocationId = @LocationId))
				SET @RecordsFound = 1

		IF @RecordsFound=0
			IF EXISTS(SELECT 'true' FROM tbl_PartsOrder WHERE company_id=@DId AND LocationId = @LocationId )
				SET @RecordsFound = 1

		IF @RecordsFound=0
			IF EXISTS(SELECT 'true' FROM Accounts WHERE DId=@DId AND LocationId = @LocationId )
				SET @RecordsFound = 1

		IF @RecordsFound=0
			IF EXISTS(SELECT 'true' FROM Assets WHERE DepartmentId=@DId AND LocationId = @LocationId )
				SET @RecordsFound = 1--IF @RecordsFound=0
				
		IF @RecordsFound=0
			IF EXISTS(select 'true' from UserAccounts where DepartmentId=@DId AND AccountLocationId=@LocationId)
				SET  @RecordsFound = 1
		
		-- Audit section		
		IF @RecordsFound=0
			IF EXISTS(select 'true' from AssetBulkLocation where DId=@DId AND LocationId=@LocationId)
				SET  @RecordsFound = 1
		IF @RecordsFound=0
			IF EXISTS(select 'true' from LocationAuditHistory where DId=@DId AND LocationId=@LocationId)
				SET  @RecordsFound = 1
		IF @RecordsFound=0
			IF EXISTS(select 'true' from LocationAuditTaggedAssets where DId=@DId AND LocationId=@LocationId)
				SET  @RecordsFound = 1
		-- End of audit section
				
		IF @RecordsFound = 0
			BEGIN
				DELETE FROM LocationPropertyValues WHERE DId=@DId AND LocationId=@LocationId
				DELETE LocationRouteLevelTechs FROM LocationRouteLevelTechs LRLT INNER JOIN LocationRouteLevels LRL ON LRLT.LocationRouteLevelId=LRL.Id WHERE LRLT.DId=@DId AND LRL.LocationId=@LocationId
				DELETE FROM LocationRouteLevels WHERE DId=@DId AND LocationId=@LocationId
				DELETE FROM UserLocations WHERE DId=@DId AND LocationId=@LocationId
				UPDATE tbl_LoginCompanyJunc SET LocationId=NULL WHERE company_id=@DId AND LocationId=@LocationId
				UPDATE tbl_LoginCompanyJunc SET AccountLocationId=NULL WHERE company_id=@DId AND AccountLocationId=@LocationId
				UPDATE ClassLevelsTechJctn SET LocationId=NULL WHERE DId=@DId AND LocationId=@LocationId
				DELETE FROM tbl_ClassTechnicianJctn WHERE LocationId=@LocationId
				DELETE FROM LocationAliases WHERE DId=@DId AND LocationId = @LocationId
				UPDATE UserAccounts SET AccountLocationId=NULL WHERE DepartmentId=@DId AND AccountLocationId=@LocationId
				--DELETE AssetBulkLocation WHERE DId=@DId AND LocationId=@LocationId
				
				UPDATE Locations set Status=0 WHERE DId = @DId AND Id = @LocationId
			
				return 1
			END
		ELSE
			return 2
	END
	ELSE
	BEGIN
		IF @RecordsFound=0
			IF EXISTS(SELECT 'true' FROM SchedTickets WHERE DId=@DId AND AccountLocationId = @LocationId )
				SET @RecordsFound = 1

		IF @RecordsFound=0
			IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND AccountLocationId = @LocationId )
				SET @RecordsFound = 1
				
		IF @RecordsFound=0
			IF EXISTS(select 'true' from UserAccounts where DepartmentId=@DId AND AccountLocationId=@LocationId)
				SET  @RecordsFound = 1
		
		-- Audit section		
		IF @RecordsFound=0
			IF EXISTS(select 'true' from AssetBulkLocation where DId=@DId AND LocationId=@LocationId)
				SET  @RecordsFound = 1
		IF @RecordsFound=0
			IF EXISTS(select 'true' from LocationAuditHistory where DId=@DId AND LocationId=@LocationId)
				SET  @RecordsFound = 1
		IF @RecordsFound=0
			IF EXISTS(select 'true' from LocationAuditTaggedAssets where DId=@DId AND LocationId=@LocationId)
				SET  @RecordsFound = 1
		-- End of audit section

		IF @RecordsFound = 0
			BEGIN
				DELETE FROM LocationPropertyValues WHERE DId=@DId AND LocationId=@LocationId
				DELETE LocationRouteLevelTechs FROM LocationRouteLevelTechs LRLT INNER JOIN LocationRouteLevels LRL ON LRLT.LocationRouteLevelId=LRL.Id WHERE LRLT.DId=@DId AND LRL.LocationId=@LocationId
				DELETE FROM LocationRouteLevels WHERE DId=@DId AND LocationId=@LocationId
				UPDATE tbl_LoginCompanyJunc SET AccountLocationId=NULL WHERE company_id=@DId AND AccountLocationId=@LocationId
				DELETE FROM LocationAliases WHERE DId=@DId AND LocationId = @LocationId
				UPDATE UserAccounts SET AccountLocationId=NULL WHERE DepartmentId=@DId AND AccountLocationId=@LocationId
				--DELETE AssetBulkLocation WHERE DId=@DId AND LocationId=@LocationId
				
				UPDATE Locations set Status=0 WHERE DId = @DId AND Id = @LocationId
				return 1
			END
		ELSE
			return 2
	END
GO
PRINT N'Creating [dbo].[sp_DeleteLocationAlias]...';


GO
CREATE Procedure dbo.sp_DeleteLocationAlias
	(
		@DId int,
		@Id int
	)
As
	DELETE FROM LocationAliases WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_DeleteLocationLevel]...';


GO

CREATE PROCEDURE sp_DeleteLocationLevel
	(
		@DId int,
		@intLocationId int,
		@intLocationLvlId int
	)
AS
	SET NOCOUNT ON
	
		DELETE FROM LocationLevelsTechJctn WHERE DId=@DId AND LocationId=@intLocationId AND intLctLvlId=@intLocationLvlId
		
		DELETE FROM LocationLevels WHERE DId=@DId AND LocationId=@intLocationId AND Id=@intLocationLvlId
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteLocationRouteLevel]...';


GO
CREATE Procedure dbo.sp_DeleteLocationRouteLevel
	(
		@DId int,
		@Id int
	)
As
	DELETE FROM LocationRouteLevelTechs WHERE DId=@DId AND LocationRouteLevelId=@Id
	DELETE FROM LocationRouteLevels WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_DeleteLocationRouteLevelTech]...';


GO
CREATE Procedure dbo.sp_DeleteLocationRouteLevelTech
	(
		@DId int,
		@Id int
	)
As
	DELETE FROM LocationRouteLevelTechs WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_DeleteLocationSubTech]...';


GO

CREATE PROCEDURE sp_DeleteLocationSubTech
	(
		@DId int,
		@LocationId int,
		@Id int
	)
AS
	DELETE FROM LocationTechJctn WHERE DId=@DId AND LocationId=@LocationId AND id=@Id
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteLocationType]...';


GO
CREATE Procedure dbo.sp_DeleteLocationType
	(
		@DId int,
		@Id int
	)
As
BEGIN
	delete from LocationPropertyValues
	from LocationPropertyValues v
	join Locations l on l.DId=@DId and l.LocationTypeId=@Id and l.Id=v.LocationId
	
	Update Locations set LocationTypeId=null where DId=@DId and LocationTypeId=@Id
	
	delete from LocationTypeProperties where DId=@DId and LocationTypeId=@Id
	
	delete from LocationTypePropertiesGroup where DId=@DId AND LocationTypeId=@Id
	
	DELETE FROM LocationTypes WHERE DId=@DId AND Id=@Id
END
GO
PRINT N'Creating [dbo].[sp_DeleteLocationTypePropertieGroup]...';


GO
CREATE Procedure [dbo].[sp_DeleteLocationTypePropertieGroup]
	(
		@DId int,
		@GroupId int
	)
As
BEGIN
	update LocationTypeProperties set GroupId=null where DId=@DId and GroupId=@GroupId
	
	delete from LocationTypePropertiesGroup where DId=@DId AND Id=@GroupId
END
GO
PRINT N'Creating [dbo].[sp_DeleteLocationTypeProperty]...';


GO


CREATE Procedure sp_DeleteLocationTypeProperty
	(
		@DId int,
		@Id int
	)
As
	DELETE FROM LocationPropertyValues WHERE DId=@DId AND LocationTypePropertyId=@Id
	DELETE FROM LocationTypeProperties WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_DeleteLocLvlTech]...';


GO

CREATE PROCEDURE sp_DeleteLocLvlTech
	(
		@DId int,
		@intLocationId int,
		@intLocLvlTechId int
	)
AS
	SET NOCOUNT ON
	DELETE FROM LocationLevelsTechJctn WHERE DId=@DId AND LocationId=@intLocationId AND Id=@intLocLvlTechId
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteLogin]...';


GO
CREATE Procedure dbo.sp_DeleteLogin
	(
		@UId int,
		@DId int
	)
As

	DECLARE @IsTech int
	DECLARE @RecordsFound int


	SET @IsTech = 0
	SET @RecordsFound = 0
	
	IF EXISTS(SELECT 'true' FROM TktLevels WHERE DId=@DId AND intLastResortId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
			
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM Accounts WHERE DId=@DId AND AcctRepId=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM AccountLevelTechs WHERE DId=@DId AND UId=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM AccountTech WHERE CompanyID=@DId AND TechID=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END


	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM ProjectTech WHERE CompanyID=@DId AND TechID=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM TaskTypeTech WHERE CompanyID=@DId AND TechID=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
		
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_class WHERE company_id=@DId AND lastResorttechId = @UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM ClassLevels WHERE DId=@DId AND intLastResortId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_ClassTechnicianJctn CTJ INNER JOIN tbl_class C ON CTJ.class_id = C.id WHERE C.company_id=@DId AND CTJ.LoginCompanyJunc_id=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM ClassLevelsTechJctn WHERE DId=@DId AND intUId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
	
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_Locations WHERE DId=@DId AND intLastResortId = @UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationLevels WHERE DId=@DId AND intLastResortId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationTechJctn WHERE DId=@DId AND intUId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM EMailParserDropBoxes WHERE DId=@DId AND TechnicianId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationLevelsTechJctn WHERE DId=@DId AND intUId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
				
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationRouteLevels WHERE DId=@DId AND LastResortTechId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationRouteLevelTechs WHERE DId=@DId AND TechId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM SchedTickets WHERE DId=@DId AND (intTechId=@UId OR intOwnerId=@UId))
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
	
	IF @IsTech = 0
	BEGIN
		IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND technician_id = @UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
	END
	
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM TicketMiscCosts WHERE UserId = @UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
	
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM Project WHERE CompanyID = @DId AND (InternalPMID = @UId OR ClientPMID = @UId))
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
			
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId=@DId AND LoginCompanyJunc_Id=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1 
		END
	
	IF @RecordsFound = 0
		IF EXISTS(SELECT 'true' FROM Assets WHERE DepartmentId=@DId AND (OwnerId = @UId OR CheckedOutId = @UId) )
			SET @RecordsFound = 1
		
	IF @RecordsFound = 0
		IF EXISTS(SELECT 'true' FROM SchedTickets WHERE DId=@DId AND intUserId=@UId )
			SET @RecordsFound = 1

	/*Probably need to stop checking the created id field, also delete the foreign key relationship*/
	--VGOOZ 08-SEP-2005: added check on Created_id
	IF @RecordsFound = 0
		IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND (user_id = @UId OR Created_id=@UId))
			SET @RecordsFound = 1

	
	DECLARE @return_value int
	
	
	IF @IsTech = 0 AND @RecordsFound = 0
		BEGIN
			Begin Transaction

			/*Find the login id*/
			DECLARE @LoginId int
			SET @LoginId = (SELECT login_id FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@UId)
			--VGOOZ 04-AUG-2005: tkt #2369 - Deletion of my account
			DELETE FROM AccountFilters WHERE DId=@DId AND UId=@UId
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -1
				return					
			END

			DELETE FROM AssetColumnSettings WHERE DId = @DId AND UId = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -10
				return					
			END

			DELETE FROM AssetFilters WHERE DId = @DId AND UId = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -11
				return					
			END
			
			DELETE FROM MailGroupUsers WHERE DepartmentId = @DId AND LoginId = @LoginId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -12
				return					
			END
			
			DELETE FROM NotificationRuleUsers WHERE DId = @DId AND UserId = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -13
				return					
			END
			
			DELETE NotificationRuleEvents FROM NotificationRuleEvents NRE INNER JOIN NotificationRules NR ON NR.DId=@DId AND NR.Id=NRE.NotificationRuleId WHERE NRE.DId = @DId AND NR.UserId = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -14
				return					
			END
			
			DELETE NotificationRuleUsers FROM NotificationRuleUsers NRU INNER JOIN NotificationRules NR ON NR.DId=@DId AND NR.Id=NRU.NotificationRuleId WHERE NRU.DId = @DId AND NR.UserId = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -14
				return					
			END
			
			DELETE FROM NotificationRules WHERE DId = @DId AND UserId = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -14
				return					
			END
						
			DELETE FROM ReportFilters WHERE DId = @DId AND UId = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -15
				return					
			END
						
			DELETE FROM TicketCriterias WHERE DId = @DId AND UserId = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -17
				return					
			END

			DELETE FROM TicketAssignment WHERE DepartmentId = @DId AND UserId = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -17
				return					
			END
			
			DELETE FROM QueueMembers WHERE DepartmentId = @DId AND QueueId = @UId
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -17
				return					
			END
			
			DELETE FROM UserAccounts WHERE DepartmentId = @DId AND UserId = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -17
				return					
			END
			
			DELETE FROM UserLocations WHERE DId = @DId AND UId = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -17
				return					
			END
			
			DELETE FROM GlobalFilters WHERE LoginId=@UId
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -2
				return					
			END

			--End tkt #2369
			
			DELETE FROM WrkLstFilters WHERE DId=@DId AND UId=@UId
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -3
				return					
			END

			DELETE FROM ClassLevelsTechJctn WHERE DId=@DId AND intUId=@UId
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -4 
				return					
			END

			DELETE FROM LocationLevelsTechJctn WHERE DId=@DId AND intUId=@UId
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -5
				return					
			END

			DELETE FROM tbl_ClassTechnicianJctn WHERE LoginCompanyJunc_id=@UId
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -6
				return					
			END

			DELETE FROM LocationTechJctn WHERE DId=@DId AND intUId=@UId
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -7
				return					
			END
			
			/*This needs to be changed to leave these values in place and just have a missing foreign key value, better performance*/
			UPDATE EMailParserDropBoxes SET TechnicianId=null WHERE DId=@DId AND TechnicianId=@UId
			UPDATE TicketTime SET UserId=null WHERE DepartmentId=@DId AND UserId=@UId
			UPDATE tbl_part SET intReceivedBy=null WHERE company_id=@DId AND intReceivedBy=@UId
			UPDATE tbl_part SET intRequestedBy=null WHERE company_id=@DId AND intRequestedBy=@UId
			UPDATE tbl_ticket SET created_id=null WHERE company_id=@DId AND created_id=@UId
			UPDATE tbl_PartsOrder SET intOrderedBy=null WHERE company_id=@DId AND intOrderedBy=@UId
		
			UPDATE ResolutionCats SET intUpdatedBy=null WHERE DId=@DId AND intUpdatedBy=@UId
			UPDATE tbl_Knowledgebase SET LoginCompanyJunc_id=null WHERE DepartmentId=@DId AND LoginCompanyJunc_id=@UId
			UPDATE tbl_KnowledgebaseResponses SET LoginCompanyJunc_id=null WHERE DepartmentId=@DId AND LoginCompanyJunc_id=@UId
			UPDATE TicketLogs SET UId=null WHERE DId=@DId AND UId=@UId
			DELETE NotificationEventsQueueFiles FROM NotificationEventsQueueFiles NEQF INNER JOIN NotificationEventsQueue NEQ ON NEQ.DId=@DId AND NEQ.Id=NEQF.NotificationEventsQueueId WHERE NEQF.DId=@DId AND NEQ.CreatedByUserId=@UId
			DELETE FROM NotificationEventsQueue WHERE DId = @DId AND CreatedByUserId = @UId 
			UPDATE Project SET InternalPMID = NULL WHERE CompanyID = @DId AND InternalPMID = @UId
			UPDATE Project SET ClientPMID = NULL WHERE CompanyID = @DId AND ClientPMID = @UId
			UPDATE ToDoItemTemplate SET AssignedId = NULL WHERE DId = @DId AND AssignedId = @UId
			UPDATE ToDoItem SET AssignedId = NULL WHERE DId = @DId AND AssignedId = @UId
			
			DELETE FROM tbl_LoginCompanyJunc WHERE company_id = @DId AND id = @UId 
			IF @@ERROR<>0 
			BEGIN
				ROLLBACK TRANSACTION
				SET @return_value = -8 
				return					
			END
						
			/*Check to see if login is used anywhere else, if not then delete the login*/
			IF NOT EXISTS(SELECT 'true' FROM tbl_LoginCompanyJunc WHERE login_id=@LoginId)
			Begin
				DELETE FROM tbl_logins WHERE id = @LoginId
				IF @@ERROR<>0 
				BEGIN
					ROLLBACK TRANSACTION
					SET @return_value = -9
					return					
				END
			End
				
			Commit;

			SET @return_value = 1
		END
		
		
	IF @IsTech = 0 AND @RecordsFound = 1
		BEGIN
			SET @return_value = 2
		END
		
	IF @IsTech = 1 AND @RecordsFound = 1
		BEGIN
			SET @return_value = 3
		END
	
	
return @return_value
GO
PRINT N'Creating [dbo].[sp_DeleteMailGroup]...';


GO
CREATE Procedure [dbo].[sp_DeleteMailGroup]
	(
		@DepartmentId int,
		@MailGroupID int
	)
As
			
	
	DELETE FROM NotificationRuleUsers WHERE DId = @DepartmentId AND UserGroupId = @MailGroupID
	DELETE FROM MailGroupUsers WHERE DepartmentId = @DepartmentId AND MailGroupId = @MailGroupID
	DELETE FROM MailGroups WHERE DepartmentId = @DepartmentId AND id = @MailGroupID

	return 1
GO
PRINT N'Creating [dbo].[sp_DeleteNotificationEventsQueue]...';


GO
CREATE Procedure dbo.sp_DeleteNotificationEventsQueue
	(
		@DId int,
		@NotificationEventId int =null,
		@ScheduledTicketId int = null
	)
As
	IF (NOT @NotificationEventId IS NULL)
	BEGIN
		DELETE FROM NotificationEventsQueueFiles WHERE DId=@DId AND NotificationEventsQueueId=@NotificationEventId
		DELETE FROM NotificationEventsQueue WHERE DId=@DId AND Id=@NotificationEventId
	END
	ELSE IF (NOT @ScheduledTicketId IS NULL)
	BEGIN
		DELETE NotificationEventsQueueFiles 
			FROM NotificationEventsQueueFiles NEQF 
			INNER JOIN NotificationEventsQueue NEQ ON NEQF.DId = NEQ.DId AND NEQF.NotificationEventsQueueId = NEQ.Id 
			WHERE NEQF.DId=@DId AND NEQ.ScheduledTicketId=@ScheduledTicketId
		DELETE FROM NotificationEventsQueue WHERE DId=@DId AND ScheduledTicketId=@ScheduledTicketId
	END
	ELSE
	BEGIN
		DELETE NotificationEventsQueueFiles FROM NotificationEventsQueueFiles WHERE DId=@DId
		DELETE FROM NotificationEventsQueue WHERE DId=@DId
	END
GO
PRINT N'Creating [dbo].[sp_DeleteNotificationRule]...';


GO
CREATE Procedure dbo.sp_DeleteNotificationRule
	(
		@DId int,
		@Id int
	)
As
	DELETE FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@Id
	DELETE FROM NotificationRuleUsers WHERE DId=@DId AND NotificationRuleId=@Id
	DECLARE @tcriteria int
	SELECT @tcriteria=Id FROM TicketCriterias WHERE DId=@DId AND NotificationRuleId=@Id
	DELETE FROM TicketCriteriaData WHERE DId=@DId AND TicketCriteriaId=@tcriteria
	DELETE FROM TicketCriterias WHERE DId=@DId AND NotificationRuleId=@Id
	DELETE FROM NotificationRules WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_DeleteNotificationRuleEvents]...';


GO
CREATE Procedure dbo.sp_DeleteNotificationRuleEvents
	(
		@DId int,
		@NotificationRuleId int
	)
As
	DELETE FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId
GO
PRINT N'Creating [dbo].[sp_DeleteNotificationRuleUsers]...';


GO
CREATE Procedure dbo.sp_DeleteNotificationRuleUsers
	(
		@DId int,
		@NotificationRuleId int
	)
As
	DELETE FROM NotificationRuleUsers WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId
GO
PRINT N'Creating [dbo].[sp_DeletePriority]...';


GO
CREATE PROCEDURE dbo.sp_DeletePriority
	(
		@DId int,
		@Id int
	)
AS
	/* Return Values 
	1 - Record is deleted
	2 - Workload must be transferred.
	3 - CompanyID and PriorityId do not agree
	4 - Cannot delete the last priority
	*/
	SET NOCOUNT ON
	
	DECLARE @RecordsFound bit
	SET @RecordsFound = 0
	
	IF NOT EXISTS(SELECT 'true' FROM Priorities WHERE DId=@DId AND Id=@Id)
		return 3
		
	IF NOT EXISTS(SELECT 'true' FROM Priorities WHERE DId=@DId AND Id<>@Id)
		return 4
		
	IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND PriorityId = @Id)
		SET @RecordsFound = 1
		
	IF EXISTS(SELECT 'true' FROM tbl_class WHERE company_id=@DId AND intPriorityId=@Id)
		SET @RecordsFound = 1
		
	IF EXISTS(SELECT 'true' FROM SchedTickets WHERE DId=@DId AND intPriorityId=@Id)
		SET @RecordsFound = 1
		
	IF @RecordsFound = 0
		BEGIN
			DECLARE @PriorityToDelete tinyint
			SELECT @PriorityToDelete = tintPriority FROM Priorities WHERE DId=@DId AND Id=@Id
			
			DELETE FROM Priorities WHERE DId=@DId AND Id=@Id
			
			UPDATE Priorities SET tintPriority = tintPriority - 1 WHERE DId=@DId AND tintPriority > @PriorityToDelete

			IF NOT EXISTS(SELECT 'true' FROM Priorities WHERE DId=@DId AND bitDefault=1)
				UPDATE Priorities SET bitDefault=1 WHERE DId=@DId AND Id=(SELECT TOP 1 Id FROM Priorities WHERE DId=@DId ORDER BY tintPriority DESC)
				
				
			RETURN 1
		END
	ELSE
		RETURN 2
GO
PRINT N'Creating [dbo].[sp_DeleteProjectPriority]...';


GO

CREATE PROCEDURE [dbo].[sp_DeleteProjectPriority]
(
	@DId int,
	@ProjectPriorityID int
)
AS
BEGIN
	
	DECLARE @delPriority tinyint,
		@NextPriority int
	
	SET @NextPriority = 0
	
	SELECT
		@delPriority = tintPriority
	FROM
		ProjectPriority
	WHERE
		DId = @DId
		AND
		Id = @ProjectPriorityID
		
	SELECT TOP 1
		@NextPriority = ISNULL(Id, 0)
	FROM
		ProjectPriority
	WHERE
		DId = @DId
		AND
		tintPriority < @delPriority
	ORDER BY
		tintPriority
	
	IF @NextPriority = 0
	 BEGIN
		SELECT TOP 1
			@NextPriority = ISNULL(Id, 0)
		FROM
			ProjectPriority
		WHERE
			DId = @DId
			AND
			tintPriority <> @delPriority
		ORDER BY
			tintPriority DESC
	 END
	
	IF @NextPriority > 0
	 BEGIN
		UPDATE 
			Project
		SET
			PriorityId = @NextPriority
		WHERE
			CompanyID = @DId
			AND
			PriorityId = @ProjectPriorityID
	 END
	ELSE
	 BEGIN
		UPDATE 
			Project
		SET
			PriorityId = NULL
		WHERE
			CompanyID = @DId
			AND
			PriorityId = @ProjectPriorityID
	 END
	 
	DELETE 
		ProjectPriority
	WHERE
		DId = @DId
		AND
		Id = @ProjectPriorityID
	
	IF NOT EXISTS(SELECT 'true' FROM ProjectPriority WHERE DId=@DId AND bitDefault=1)
		UPDATE ProjectPriority SET bitDefault=1 WHERE DId=@DId AND Id=(SELECT TOP 1 Id FROM ProjectPriority WHERE DId=@DId ORDER BY tintPriority DESC)
	
	UPDATE 
		pp
	SET pp.[tintPriority] = pp.rNum
	FROM
	(SELECT row_number() over (order by [tintPriority]) AS rNum,*
	FROM
		ProjectPriority 
	WHERE
		DId = @DId
	) pp
END
GO
PRINT N'Creating [dbo].[sp_DeleteProjectRate]...';


GO
CREATE PROCEDURE dbo.sp_DeleteProjectRate
(
	@ProjectID int,
	@CompanyID int
)
AS

	UPDATE [Project]
	SET 
		[BillingMethodID] = NULL,
		[FlatFee] = NULL,
		[HourlyBlendedRate] = NULL,
		[RatePlanID] = NULL
	WHERE 
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID

	DELETE	
		ProjectTaskTypeRate
	WHERE
		ProjectID = @ProjectID
		AND
		CompanyID = @CompanyID

	DELETE	
		ProjectTech
	WHERE
		ProjectID = @ProjectID
		AND
		CompanyID = @CompanyID
GO
PRINT N'Creating [dbo].[sp_DeleteProjectRetainer]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteProjectRetainer]
(
		@CompanyID int,
		@ProjectRetainerID int		
)
AS

	DELETE ProjectRetainer
    WHERE
		DId = @CompanyID
		AND
		Id = @ProjectRetainerID
GO
PRINT N'Creating [dbo].[sp_DeleteProjectTaskTypeRate]...';


GO
CREATE PROCEDURE dbo.sp_DeleteProjectTaskTypeRate
(
		@ProjectTaskTypeRateID int,
		@CompanyID int
)
AS

	DELETE ProjectTaskTypeRate
    WHERE
		CompanyID = @CompanyID
		AND
		ProjectTaskTypeRateID = @ProjectTaskTypeRateID
GO
PRINT N'Creating [dbo].[sp_DeleteProjectTech]...';


GO
CREATE PROCEDURE dbo.sp_DeleteProjectTech
(
		@ProjectTechID int,
		@CompanyID int
)
AS

	DELETE ProjectTech
    WHERE
		CompanyID = @CompanyID
		AND
		ProjectTechID = @ProjectTechID
GO
PRINT N'Creating [dbo].[sp_DeleteProjectTime]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteProjectTime]
(	
	@ProjectTimeId int,	
	@DepartmentID int
)
AS

	UPDATE
		ProjectTime
	SET 
		Deleted = 1
	WHERE 
		DepartmentId = @DepartmentID 
		AND 
		Id = @ProjectTimeId
GO
PRINT N'Creating [dbo].[sp_DeleteProjectTimeFromBill]...';


GO
CREATE PROCEDURE dbo.sp_DeleteProjectTimeFromBill
(
		@DId int,
		@ProjectTimeID int,
		@BillID int
)
AS		

	DECLARE @TotalAmount money,
			@Hours decimal(8, 4)
	SET @TotalAmount = 0
	SET @Hours = 0

	SELECT
		@TotalAmount = Hours * ISNULL(HourlyRate, 0),
		@Hours = Hours
	FROM
		ProjectTime
	WHERE
		DepartmentId = @DId
		AND
		Id = @ProjectTimeID

	UPDATE
		ProjectTime
	SET
		BillId = NULL
	WHERE
		DepartmentId = @DId
		AND
		Id = @ProjectTimeID

	UPDATE [TimeBill]
		SET [TotalHours] = ISNULL([TotalHours], 0) - @Hours, 
			[Amount] = ISNULL([Amount], 0) - @TotalAmount,
			[TimeLogsCount] = ISNULL([TimeLogsCount], 0) - 1
		WHERE 
			[TimeBill].[DId] = @DId
			AND
			[TimeBill].[Id] = @BillID
GO
PRINT N'Creating [dbo].[sp_DeleteProjectTimeFromInvoice]...';


GO
CREATE PROCEDURE dbo.sp_DeleteProjectTimeFromInvoice
(
		@DId int,
		@ProjectTimeID int,
		@InvoiceID int
)
AS		

	DECLARE @TotalAmount money,
			@Hours decimal(8, 4)
	SET @TotalAmount = 0
	SET @Hours = 0

	SELECT
		@TotalAmount = Hours * ISNULL(BillRate, 0),
		@Hours = Hours
	FROM
		ProjectTime
	WHERE
		DepartmentId = @DId
		AND
		Id = @ProjectTimeID

	UPDATE
		ProjectTime
	SET
		InvoiceId = NULL,
		BillRate = NULL
	WHERE
		DepartmentId = @DId
		AND
		Id = @ProjectTimeID

	UPDATE [Invoice]
		SET [TotalHours] = ISNULL([TotalHours], 0) - @Hours, 
			[Amount] = ISNULL([Amount], 0) - @TotalAmount,
			[TimeLogsCount] = ISNULL([TimeLogsCount], 0) - 1
		WHERE 
			[Invoice].[DId] = @DId
			AND
			[Invoice].[Id] = @InvoiceID
GO
PRINT N'Creating [dbo].[sp_DeleteProjectUser]...';


GO
CREATE PROCEDURE dbo.sp_DeleteProjectUser
(
		@ProjectTechID int,
		@CompanyID int
)
AS

	DELETE UserProjects
    WHERE
		DepartmentId = @CompanyID
		AND
		Id = @ProjectTechID
GO
PRINT N'Creating [dbo].[sp_DeleteQueueMember]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.sp_DeleteQueueMember
	-- Add the parameters for the stored procedure here
	@DepartmentId int, 
	@QueueId int,
	@Id int
AS
BEGIN
	DELETE FROM QueueMembers WHERE DepartmentId = @DepartmentId AND QueueId = @QueueId AND Id = @Id
END
GO
PRINT N'Creating [dbo].[sp_DeleteRatePlan]...';


GO
CREATE PROCEDURE dbo.sp_DeleteRatePlan
(
	@RatePlanID int,
	@CompanyID int
)
AS

	DELETE	
		RatePlan
	WHERE
		DepartmentId = @CompanyID
		AND
		Id = @RatePlanID
GO
PRINT N'Creating [dbo].[sp_DeleteRatePlanRate]...';


GO
CREATE PROCEDURE dbo.sp_DeleteRatePlanRate
(
	@RatePlanRatesID int,
	@CompanyID int
)
AS

	DELETE	
		RatePlanRates
	WHERE
		DepartmentId = @CompanyID
		AND
		Id = @RatePlanRatesID
GO
PRINT N'Creating [dbo].[sp_DeleteRelatedTicket]...';


GO
CREATE Procedure [dbo].[sp_DeleteRelatedTicket]
	(
		@DId int,
		@TicketId int,
		@RelatedTicketId int
	)
As
	DELETE FROM RelatedTickets WHERE DId=@DId AND TicketId=@TicketId AND RelatedTicketId=@RelatedTicketId
	DELETE FROM RelatedTickets WHERE DId=@DId AND TicketId=@RelatedTicketId AND RelatedTicketId=@TicketId
	UPDATE tbl_ticket SET UpdatedTime=getutcdate() WHERE company_id = @DId AND id = @TicketId






SET QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_DeleteReportFilter]...';


GO
CREATE Procedure dbo.sp_DeleteReportFilter
	(
		@DId int,
		@Id int
	)
As
	DELETE FROM ReportFilters WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_DeleteResolution]...';


GO


CREATE Procedure sp_DeleteResolution
	(
		@DId int,
		@Id int
	)
As
	
	DECLARE @RecordsFound int
	SET @RecordsFound = 0
	
	IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id = @DId AND ResolutionCatsId = @Id)
		SET @RecordsFound = 1
	
	
	
	
	
	/*
	
	Return Values 
	
	1 - Record is deleted
	2 - Workload must be transferred.
	
	*/
	
	IF @RecordsFound = 1
		return 2
	
	IF @RecordsFound = 0
	
		BEGIN
			DELETE FROM ResolutionCats WHERE DId = @DId AND id = @Id
			return 1
		END
GO
PRINT N'Creating [dbo].[sp_DeleteRoute]...';


GO

CREATE PROCEDURE sp_DeleteRoute
	(
		@DId int,
		@tintRoute tinyint
	)
AS
	/*Return -1=cannot delete last route*/
	IF EXISTS(SELECT 'true' FROM RoutingOrder WHERE DId=@DId AND tintRoute<>@tintRoute)
		BEGIN
			DECLARE @tintOrder tinyint
			SET @tintOrder = (SELECT tintOrder FROM RoutingOrder WHERE DId=@DId AND tintRoute=@tintRoute)
			
			UPDATE RoutingOrder SET tintOrder=tintOrder-1 WHERE DId=@DId AND tintOrder>@tintOrder
			
			DELETE FROM RoutingOrder WHERE DId=@DId AND tintRoute=@tintRoute
			RETURN 0
		END
	ELSE
		RETURN -1
GO
PRINT N'Creating [dbo].[sp_DeleteSchedTicketAsset]...';


GO
CREATE Procedure dbo.sp_DeleteSchedTicketAsset
	(
		@DId int,
		@SchedTicketId int,
		@AssetId int
	)
As
	DELETE FROM SchedTicketAssets WHERE DId=@DId AND SchedTicketId=@SchedTicketId AND AssetId=@AssetId
GO
PRINT N'Creating [dbo].[sp_DeleteSchedTicketFile]...';


GO
CREATE PROCEDURE dbo.sp_DeleteSchedTicketFile
	(
		@DId int,
		@STId int,
		@FId int
	)
AS
	SET NOCOUNT ON
	DELETE FROM SchedTicketFiles WHERE DId=@DId AND STId=@STId AND Id=@FId
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteSchedTkt]...';


GO
CREATE PROCEDURE dbo.sp_DeleteSchedTkt
	(
		@DId int,
		@Id int
	)
AS
	BEGIN TRANSACTION
		-- trying to delete scheduled ticket files
		DELETE FROM SchedTicketFiles WHERE DId=@DId AND STId=@Id
		IF @@ERROR <> 0
		 BEGIN
			ROLLBACK TRANSACTION
			RAISERROR ('Error in deleting files.', 16, 1)
			RETURN
		 END

		-- trying to delete scheduled ticket assets
		DELETE FROM SchedTicketAssets WHERE DId=@DId AND SchedTicketId=@Id
		IF @@ERROR <> 0
		 BEGIN
			ROLLBACK TRANSACTION
			RAISERROR ('Error in deleting assets.', 16, 1)
			RETURN
		 END
		 
		UPDATE tbl_ticket
		SET
			SchedTicketID = NULL
		WHERE
			company_id = @DId
			AND
			SchedTicketID = @Id

		-- trying to delete scheduled ticket
		DELETE FROM SchedTickets WHERE DId=@DId AND Id=@Id
		IF @@ERROR <> 0
		 BEGIN
			ROLLBACK TRANSACTION
			RAISERROR ('Error in deleting scheduled ticket.', 16, 1)
			RETURN
		 END
	COMMIT TRANSACTION
RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteSubAsset]...';


GO
CREATE Procedure dbo.sp_DeleteSubAsset
	(
		@DepartmentId int,
		@AssetId int,
		@SubAssetId int = null
	)
As

	IF ((@DepartmentId IS NOT NULL) AND (@AssetId IS NOT NULL))
	BEGIN
		BEGIN TRANSACTION		
		
		If (@SubAssetId IS NOT NULL)		
		BEGIN
			Delete from AssetSubAssets
			where DId=@DepartmentId and AssetId=@AssetId and AssetChildId=@SubAssetId
		END
		ELSE
		BEGIN
			Delete from AssetSubAssets
			where DId=@DepartmentId and AssetId=@AssetId
		END 

		COMMIT
	END

	return
GO
PRINT N'Creating [dbo].[sp_DeleteSupportGroup]...';


GO
CREATE PROCEDURE dbo.sp_DeleteSupportGroup
	(
		@DId int,
		@Id int
	)
AS
	SET NOCOUNT ON
	IF EXISTS(SELECT 'true' FROM Accounts WHERE DId=@DId AND SupGroupId=@Id) OR 
		EXISTS(SELECT 'true' FROM Project WHERE CompanyID=@DId AND SupGroupId=@Id)
		RETURN -1
	ELSE
		BEGIN
			UPDATE tbl_LoginCompanyJunc SET SupGroupId=null WHERE company_id=@DId and SupGroupId=@Id
			DELETE FROM SupportGroups WHERE DId=@DId AND Id=@Id
			
		END
		
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_DeleteSupportGrpMmbr]...';


GO

CREATE PROCEDURE sp_DeleteSupportGrpMmbr
	(
		@DId int,
		@GroupId int,
		@UId int
	)
AS
	SET NOCOUNT ON
	UPDATE tbl_LoginCompanyJunc SET SupGroupId=null WHERE company_id=@DId AND id=@UId AND SupGroupId=@GroupId
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeleteSupportPortalLink]...';


GO
CREATE  PROCEDURE dbo.sp_DeleteSupportPortalLink
(
	@DId int,
	@SupportPortalLinkID int
)

As
	
	DELETE [SupportPortalLinks]
	WHERE 
		DId = @DId
		AND
		Id = @SupportPortalLinkID
GO
PRINT N'Creating [dbo].[sp_DeleteTaskTypeTech]...';


GO
CREATE PROCEDURE dbo.sp_DeleteTaskTypeTech
(
		@TaskTypeTechID int,
		@CompanyID int
)
AS

	DELETE TaskTypeTech
    WHERE
		CompanyID = @CompanyID
		AND
		TaskTypeTechID = @TaskTypeTechID
GO
PRINT N'Creating [dbo].[sp_DeleteTaskTypeTechBillableRate]...';


GO
CREATE PROCEDURE dbo.sp_DeleteTaskTypeTechBillableRate
(
	@TaskTypeTechBillableRateID int,
	@CompanyID int
)
AS

	DELETE	
		TaskTypeTechBillableRate
	WHERE
		DId = @CompanyID
		AND
		Id = @TaskTypeTechBillableRateID
GO
PRINT N'Creating [dbo].[sp_DeleteTaskTypeTechCost]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteTaskTypeTechCost]
(
		@DId int,
		@TaskTypeID int,
		@TechID int
)
AS

	IF (@TechID = 0)
	BEGIN
		UPDATE TaskType
		SET
			EstimatedCost = NULL
		WHERE
			DepartmentID = @DId
			AND
			TaskTypeId = @TaskTypeID
	END
	ELSE
	BEGIN
		DELETE FROM [TaskTypeTechCost]
		WHERE
			DId = @DId
			AND
			TaskTypeId = @TaskTypeID
			AND
			TechId = @TechID
	END
GO
PRINT N'Creating [dbo].[sp_DeleteTempAsset]...';


GO
CREATE Procedure [dbo].[sp_DeleteTempAsset]
	(
		@DId int,
		@AssetId int
	)
As
	set nocount on
	DELETE FROM AssetComputerLogicalDrives WHERE DepartmentId = @DId AND AssetId=@AssetId
	DELETE FROM AssetComputerPrinters WHERE DepartmentId = @DId AND AssetId=@AssetId
	DELETE FROM AssetComputerProcessors WHERE DepartmentId = @DId AND AssetId=@AssetId
	DELETE FROM AssetComputerSoftwares WHERE DepartmentId = @DId AND AssetId=@AssetId
	DELETE FROM AssetComputers WHERE DepartmentId = @DId AND AssetId=@AssetId
	
	DELETE FROM Assets WHERE DepartmentId = @DId AND Id=@AssetId
GO
PRINT N'Creating [dbo].[sp_DeleteTicket]...';


GO
CREATE Procedure dbo.sp_DeleteTicket
	(
		@DId int,
		@TId int
	)
As
	set nocount on
	UPDATE ToDoItem SET TicketId = NULL WHERE DId = @DId AND TicketId = @TId
	DELETE ToDoItem FROM ToDoItem tdi INNER JOIN ToDoList ON tdi.DId = ToDoList.DId AND tdi.ToDoListId = ToDoList.Id WHERE tdi.DId = @DId AND ToDoList.TicketId = @TId
	DELETE FROM ToDoList WHERE DId = @DId AND TicketId = @TId
	DELETE FROM TicketAssignment WHERE DepartmentId = @DId AND TicketId = @TId
	DELETE FROM RemoteSessions WHERE DId=@DId AND TId=@TId
	DELETE FROM TicketLogs WHERE DId=@DId AND TId=@TId
	DELETE FROM TicketTime WHERE DepartmentId=@DId AND TicketId=@TId 
	DELETE FROM tbl_part WHERE company_id=@DId AND ticket_id = @TId
	DELETE FROM TicketMiscCosts WHERE TicketId = @TId
	DELETE FROM TicketTravelCosts WHERE DepartmentId=@DId AND TicketId=@TId 
	DELETE FROM TicketAssets WHERE DId=@DId AND TicketId=@TId
	DELETE FROM RelatedTickets WHERE DId=@DId AND (TicketId=@TId OR RelatedTicketId=@TId)
	DELETE FROM TicketTimeEstimated WHERE DId=@DId AND TicketId=@TId
	DELETE FROM TicketSentEmails WHERE DId=@DId AND TicketId=@TId
	DELETE FROM tbl_ticket WHERE company_id=@DId AND id=@TId 
	return
GO
PRINT N'Creating [dbo].[sp_DeleteTicketAsset]...';


GO
CREATE Procedure dbo.sp_DeleteTicketAsset
	(
		@DId int,
		@TicketId int,
		@AssetId int,
		@SerialTagNumber nvarchar(50) = null
	)
As
	DELETE FROM TicketAssets WHERE DId=@DId AND TicketId=@TicketId AND (AssetId=@AssetId OR SerialTagNumber=@SerialTagNumber)
	
	UPDATE tbl_ticket SET UpdatedTime=getutcdate() WHERE company_id = @DId AND id = @TicketId




SET QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_DeleteTicketCriteria]...';


GO
CREATE Procedure dbo.sp_DeleteTicketCriteria
	(
		@DId int,
		@Id int
	)
As
	DELETE FROM TicketCriteriaData WHERE DId=@DId AND TicketCriteriaId=@Id
	DELETE FROM TicketCriterias WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_DeleteTicketCriteriaData]...';


GO
CREATE Procedure dbo.sp_DeleteTicketCriteriaData
	(
		@DId int,
		@TicketCriteriaId int,
		@FilterType tinyint = null
	)
As

IF @FilterType IS NULL
	DELETE FROM TicketCriteriaData WHERE DId=@DId AND TicketCriteriaId=@TicketCriteriaId
ELSE
	DELETE FROM TicketCriteriaData WHERE DId=@DId AND TicketCriteriaId=@TicketCriteriaId AND FilterType=@FilterType
GO
PRINT N'Creating [dbo].[sp_DeleteTicketTimeFromBill]...';


GO
CREATE PROCEDURE dbo.sp_DeleteTicketTimeFromBill
(
		@DId int,
		@TicketTimeID int,
		@BillID int
)
AS		

	DECLARE @TotalAmount money,
			@Hours decimal(8, 4)
	SET @TotalAmount = 0
	SET @Hours = 0

	SELECT
		@TotalAmount = Hours * ISNULL(HourlyRate, 0),
		@Hours = Hours
	FROM
		TicketTime
	WHERE
		DepartmentId = @DId
		AND
		Id = @TicketTimeID

	UPDATE
		TicketTime
	SET
		BillId = NULL
	WHERE
		DepartmentId = @DId
		AND
		Id = @TicketTimeID

	UPDATE [TimeBill]
		SET [TotalHours] = ISNULL([TotalHours], 0) - @Hours, 
			[Amount] = ISNULL([Amount], 0) - @TotalAmount,
			[TimeLogsCount] = ISNULL([TimeLogsCount], 0) - 1
		WHERE 
			[TimeBill].[DId] = @DId
			AND
			[TimeBill].[Id] = @BillID
GO
PRINT N'Creating [dbo].[sp_DeleteTicketTimeFromInvoice]...';


GO
CREATE PROCEDURE dbo.sp_DeleteTicketTimeFromInvoice
(
		@DId int,
		@TicketTimeID int,
		@InvoiceID int
)
AS		

	DECLARE @TotalAmount money,
			@Hours decimal(8, 4)
	SET @TotalAmount = 0
	SET @Hours = 0

	SELECT
		@TotalAmount = Hours * ISNULL(BillRate, 0),
		@Hours = Hours
	FROM
		TicketTime
	WHERE
		DepartmentId = @DId
		AND
		Id = @TicketTimeID

	UPDATE
		TicketTime
	SET
		InvoiceId = NULL,
		BillRate = NULL
	WHERE
		DepartmentId = @DId
		AND
		Id = @TicketTimeID

	UPDATE [Invoice]
		SET [TotalHours] = ISNULL([TotalHours], 0) - @Hours, 
			[Amount] = ISNULL([Amount], 0) - @TotalAmount,
			[TimeLogsCount] = ISNULL([TimeLogsCount], 0) - 1
		WHERE 
			[Invoice].[DId] = @DId
			AND
			[Invoice].[Id] = @InvoiceID
GO
PRINT N'Creating [dbo].[sp_DeleteTicketTravelCostsFromInvoice]...';


GO
CREATE PROCEDURE dbo.sp_DeleteTicketTravelCostsFromInvoice
(
		@DId int,
		@TicketTravelCostsID int,
		@InvoiceID int
)
AS		

	DECLARE @Total money
	SET @Total = 0

	SELECT
		@Total = ISNULL(Total, 0)
	FROM
		TicketTravelCosts
	WHERE
		DepartmentId = @DId
		AND
		Id = @TicketTravelCostsID

	UPDATE
		TicketTravelCosts
	SET
		InvoiceId = NULL
	WHERE
		DepartmentId = @DId
		AND
		Id = @TicketTravelCostsID

	UPDATE [Invoice]
		SET TravelCost = ISNULL(TravelCost, 0) - @Total
		WHERE 
			[Invoice].[DId] = @DId
			AND
			[Invoice].[Id] = @InvoiceID
GO
PRINT N'Creating [dbo].[sp_DeleteToDoItemTemplate]...';


GO
CREATE PROCEDURE dbo.sp_DeleteToDoItemTemplate
(
	@Id uniqueidentifier,
	@DId int
)
AS		
	DECLARE @ToDoListTemplateId uniqueidentifier
	
	SELECT
		@ToDoListTemplateId = ToDoListTemplateId
	FROM
		ToDoItemTemplate
	WHERE
		DId = @DId
		AND
		Id = @Id
	
	UPDATE ToDoItem
		SET ToDoItemTemplateId = NULL
	WHERE
		DId = @DId
		AND
		ToDoItemTemplateId = @Id

	DELETE
		ToDoItemTemplate
	WHERE
		DId = @DId
		AND
		Id = @Id
		
	UPDATE 
		tdit
	SET tdit.[Order] = tdit.rNum
	FROM
	(SELECT row_number() over (order by [Order]) AS rNum,*
	FROM
		ToDoItemTemplate 
	WHERE
		DId = @DId
		AND
		ToDoListTemplateId = @ToDoListTemplateId) tdit
GO
PRINT N'Creating [dbo].[sp_DeleteToDoList]...';


GO
CREATE PROCEDURE dbo.sp_DeleteToDoList
(
	@Id uniqueidentifier,
	@DId int
)
AS		
	
	DECLARE @TicketID int,
		@ProjectID int
	
	SELECT
		@TicketID = TicketId,
		@ProjectID = ProjectId
	FROM
		ToDoList
	WHERE
		DId = @DId
		AND
		Id = @Id
		
	DELETE
		ToDoItem
	WHERE
		DId = @DId
		AND
		ToDoListId = @Id
	
	DELETE
		ToDoList
	WHERE
		DId = @DId
		AND
		Id = @Id
		
	
	UPDATE 
			tdl
		SET tdl.[Order] = tdl.rNum
		FROM
		(SELECT row_number() over (order by [Order]) AS rNum,*
		FROM
			ToDoList 
		WHERE
			DId = @DId
			AND
			(TicketId = @TicketId OR @TicketId IS NULL)
			AND
			(ProjectId = @ProjectId OR @ProjectId IS NULL)) tdl
	
	IF @TicketId > 0
	 BEGIN
		
	  UPDATE 
		tbl_ticket 
	  SET 
		RemainingHours = dbo.fxCalculateTicketRemainingHours(@DId, @TicketId)
	  WHERE 
		company_id = @DId
		AND
		Id = @TicketId
	 END
GO
PRINT N'Creating [dbo].[sp_DeleteToDoListTemplate]...';


GO
CREATE PROCEDURE dbo.sp_DeleteToDoListTemplate
(
	@Id uniqueidentifier,
	@DId int
)
AS		
	
	UPDATE 
		ToDoList
	SET
		ToDoListTemplateId = NULL
	WHERE
		DId = @DId
		AND
		ToDoListTemplateId = @Id
		
	UPDATE
		ToDoItem
	SET
		ToDoItemTemplateId = NULL
	FROM
		ToDoItem 
	INNER JOIN
		ToDoItemTemplate ON ToDoItem.DId = ToDoItemTemplate.DId AND ToDoItem.ToDoItemTemplateId = ToDoItemTemplate.Id
	WHERE
		ToDoItemTemplate.ToDoListTemplateId = @Id
		
	DELETE
		ToDoItemTemplate
	WHERE
		DId = @DId
		AND
		ToDoListTemplateId = @Id
	
	DELETE
		ToDoListTemplate
	WHERE
		DId = @DId
		AND
		Id = @Id
GO
PRINT N'Creating [dbo].[sp_DeleteUserLocation]...';


GO
CREATE Procedure dbo.sp_DeleteUserLocation
	(
		@DId int,
		@Id int
	)
As
	DECLARE @UId int
	DECLARE @LocationId int
	SELECT @UId=UId, @LocationId=LocationId FROM UserLocations WHERE Id=@Id AND DId=@DId
	DELETE FROM UserLocations WHERE DId=@DId AND Id=@Id
--	IF NOT EXISTS(SELECT * FROM UserLocations WHERE DId=@DId AND UId=@UId)
--		UPDATE tbl_LoginCompanyJunc SET LocationId=NULL WHERE Id=@UId AND company_id=@DId
--	ELSE
		UPDATE tbl_LoginCompanyJunc SET LocationId=(SELECT TOP 1 LocationId FROM UserLocations WHERE DId=@DId AND UId=@UId) WHERE Id=@UId AND company_id=@DId AND LocationId=@LocationId
GO
PRINT N'Creating [dbo].[sp_DeleteVendor]...';


GO
CREATE Procedure dbo.sp_DeleteVendor

	(
		@CompanyId int,
		@VendorId int
	)

As
begin
	update Assets set VendorId=null where DepartmentId=@CompanyId and VendorId=@VendorId
	
	update tbl_PartsOrder set VendorId=null where company_id=@CompanyId and VendorId=@VendorId

	DELETE FROM tbl_vendors WHERE company_id = @CompanyID AND id = @VendorId
end
GO
PRINT N'Creating [dbo].[sp_DemoteLogin]...';


GO

CREATE PROCEDURE [dbo].[sp_DemoteLogin]
	(
		@UId int,
		@DId int,
		@intUserType int,
		@btAllTkt bit
	)
AS

	--VGOOZ 30-JUL-2005: tkt #2694 - Changing a tech to user

	DECLARE @IsTech int
	DECLARE @RecordsFound int


	SET @IsTech = 0
	SET @RecordsFound = 0
	
	IF EXISTS(SELECT 'true' FROM TktLevels WHERE DId=@DId AND intLastResortId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
		
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM Accounts WHERE DId=@DId AND AcctRepId=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM AccountLevelTechs WHERE DId=@DId AND UId=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM AccountTech WHERE CompanyID=@DId AND TechID=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
		
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM ProjectTech WHERE CompanyID=@DId AND TechID=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
		
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM TaskTypeTech WHERE CompanyID=@DId AND TechID=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
		
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_class WHERE company_id=@DId AND lastResorttechId = @UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM ClassLevels WHERE DId=@DId AND intLastResortId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_ClassTechnicianJctn CTJ INNER JOIN tbl_class C ON CTJ.class_id = C.id WHERE C.company_id=@DId AND CTJ.LoginCompanyJunc_id=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM ClassLevelsTechJctn WHERE DId=@DId AND intUId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
	
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_Locations WHERE DId=@DId AND intLastResortId = @UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationLevels WHERE DId=@DId AND intLastResortId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
	
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationTechJctn WHERE DId=@DId AND intUId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationLevelsTechJctn WHERE DId=@DId AND intUId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationRouteLevels WHERE DId=@DId AND LastResortTechId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationRouteLevelTechs WHERE DId=@DId AND TechId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM SchedTickets WHERE DId=@DId AND (intTechId=@UId OR intOwnerId=@UId))
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
				
	IF @IsTech = 0
	BEGIN
		IF @btAllTkt=1
			IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND technician_id = @UId)
			BEGIN
				SET @IsTech = 1
				SET @RecordsFound = 1
			END
		ELSE	
			IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND technician_id = @UId  AND Status<>'Closed')
			BEGIN
				SET @IsTech = 1
				SET @RecordsFound = 1
			END
	END
		
	IF @IsTech = 0
	BEGIN
		IF @btAllTkt=1
			IF EXISTS(SELECT 'true' FROM TicketAssignment WHERE DepartmentId = @DId AND UserId = @UId AND StopDate IS NULL AND AssignmentType=2)
			BEGIN
				SET @IsTech = 1
				SET @RecordsFound = 1
			END
		ELSE	
			IF EXISTS(SELECT 'true' FROM TicketAssignment ta INNER JOIN tbl_ticket t ON ta.TicketId = t.id  WHERE ta.DepartmentId = @DId AND ta.UserId = @UId AND ta.StopDate IS NULL AND AssignmentType=2 AND t.Status<>'Closed')
			BEGIN
				SET @IsTech = 1
				SET @RecordsFound = 1
			END
	END
		
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId=@DId AND LoginCompanyJunc_Id=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1 
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM EMailParserDropBoxes WHERE DId=@DId AND TechnicianId=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1 
		END
	
	IF @RecordsFound = 0
		IF EXISTS(SELECT 'true' FROM Assets WHERE DepartmentId=@DId AND (OwnerId = @UId OR CheckedOutId = @UId) )
			SET @RecordsFound = 1
		
	IF @RecordsFound = 0
		IF EXISTS(SELECT 'true' FROM SchedTickets WHERE DId=@DId AND intUserId=@UId )
			SET @RecordsFound = 1

	/*Probably need to stop checking the created id field, also delete the foreign key relationship*/
	IF @RecordsFound = 0
		IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND user_id = @UId)
			SET @RecordsFound = 1

	
	DECLARE @return_value int
	
	
	IF @IsTech = 1 AND @RecordsFound = 1
		SET @return_value = 1 --Need transfer data to another Technican
	ELSE
		BEGIN
			DELETE FROM WrkLstFilters WHERE DId=@DId AND UId=@UId
			DELETE FROM ClassLevelsTechJctn WHERE DId=@DId AND intUId=@UId
			DELETE FROM LocationLevelsTechJctn WHERE DId=@DId AND intUId=@UId
			DELETE FROM tbl_ClassTechnicianJctn WHERE LoginCompanyJunc_id=@UId
			DELETE FROM LocationTechJctn WHERE DId=@DId AND intUId=@UId
			DELETE FROM GlobalFilters WHERE LoginId=@UId

			/*This needs to be changed to leave these values in place and just have a missing foreign key value, better performance*/
			UPDATE tbl_part SET intReceivedBy=null WHERE company_id=@DId AND intReceivedBy=@UId
			UPDATE tbl_part SET intRequestedBy=null WHERE company_id=@DId AND intRequestedBy=@UId
			UPDATE tbl_PartsOrder SET intOrderedBy=null WHERE company_id=@DId AND intOrderedBy=@UId

			UPDATE tbl_LoginCompanyJunc SET userType_id=@intUserType, btGlobalFilterEnabled=0, btLimitToAssignedTkts=0, btDisabledReports=0  WHERE company_id=@DId AND id=@UId
			SET @return_value = 0 --Updated Successfully
		END

return @return_value
GO
PRINT N'Creating [dbo].[sp_EnableKBFullText]...';


GO

CREATE PROCEDURE sp_EnableKBFullText

AS
	/* SET NOCOUNT ON */
	
	exec sp_fulltext_table 'tbl_Knowledgebase', 'drop'
	exec sp_fulltext_table 'tbl_KnowledgebaseResponses', 'drop'
	exec sp_fulltext_catalog 'Knowledgebase', 'drop'
	exec sp_fulltext_catalog 'Knowledgebase', 'create', 'd:\mssql\FullTextData\'
	
	--TBL Knowledgebase
	exec sp_fulltext_table N'[dbo].[tbl_Knowledgebase]', N'create', N'Knowledgebase', N'PK_tbl_ticket_resolution'
	exec sp_fulltext_column N'[dbo].[tbl_Knowledgebase]', N'fullname', N'add'
	exec sp_fulltext_column N'[dbo].[tbl_Knowledgebase]', N'subject', N'add'
	exec sp_fulltext_column N'[dbo].[tbl_Knowledgebase]', N'symptom', N'add'
	exec sp_fulltext_column N'[dbo].[tbl_Knowledgebase]', N'cause', N'add'
	exec sp_fulltext_column N'[dbo].[tbl_Knowledgebase]', N'resolution', N'add'
	exec sp_fulltext_table N'[dbo].[tbl_Knowledgebase]', N'activate'
	
	--TBL Knowledgebase Responses
	exec sp_fulltext_table N'[dbo].[tbl_KnowledgebaseResponses]', N'create', N'Knowledgebase', N'PK_tbl_KnowledgebaseResponses'
	exec sp_fulltext_column N'[dbo].[tbl_KnowledgebaseResponses]', N'Comment', N'add'
	exec sp_fulltext_table N'[dbo].[tbl_KnowledgebaseResponses]', N'activate'
	
	exec sp_fulltext_catalog N'Knowledgebase', N'start_full'
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_ExportAssetType]...';


GO

CREATE PROCEDURE sp_ExportAssetType
	(
		@DId int,
		@TypeId int
	)
AS

	DECLARE @bit1Cap nvarchar(100)
	DECLARE @bit2Cap nvarchar(100)
	DECLARE @bit3Cap nvarchar(100)
	DECLARE @bit4Cap nvarchar(100)
	DECLARE @bit5Cap nvarchar(100)
	DECLARE @bit6Cap nvarchar(100)
	DECLARE @bit7Cap nvarchar(100)
	DECLARE @bit8Cap nvarchar(100)

	DECLARE @char1Cap nvarchar(100)
	DECLARE @char2Cap nvarchar(100)
	DECLARE @char3Cap nvarchar(100)
	DECLARE @char4Cap nvarchar(100)
	DECLARE @char5Cap nvarchar(100)
	DECLARE @char6Cap nvarchar(100)
	DECLARE @char7Cap nvarchar(100)
	DECLARE @char8Cap nvarchar(100)

	DECLARE @int1Cap nvarchar(100)
	DECLARE @int2Cap nvarchar(100)
	DECLARE @int3Cap nvarchar(100)
	DECLARE @int4Cap nvarchar(100)

	DECLARE @multi1Cap nvarchar(100)
	DECLARE @multi2Cap nvarchar(100)
	DECLARE @multi3Cap nvarchar(100)
	DECLARE @multi4Cap nvarchar(100)

	

SELECT 
	@bit1Cap=bit1Cap,
	@bit2Cap=bit2Cap,
	@bit3Cap=bit3Cap,
	@bit4Cap=bit4Cap,
	@bit5Cap=bit5Cap,
	@bit6Cap=bit6Cap,
	@bit7Cap=bit7Cap,
	@bit8Cap=bit8Cap,
	@char1Cap=char1Cap,
	@char2Cap=char2Cap,
	@char3Cap=char3Cap,
	@char4Cap=char4Cap,
	@char5Cap=char5Cap,
	@char6Cap=char6Cap,
	@char7Cap=char7Cap,
	@char8Cap=char8Cap,
	@int1Cap=int1Cap,
	@int2Cap=int2Cap,
	@int3Cap=int3Cap,
	@int4Cap=int4Cap,
	@multi1Cap=multi1Cap,
	@multi2Cap=multi2Cap,
	@multi3Cap=multi3Cap,
	@multi4Cap=multi4Cap
FROM AssetTypeCustCap
WHERE TypeId=@TypeId

IF @bit1Cap IS NULL
	SET @bit1Cap='-blank-'
IF @bit2Cap IS NULL 
	SET @bit2Cap='-blank-'
IF @bit3Cap IS NULL
	SET @bit3Cap='-blank-'
IF @bit4Cap IS NULL
	SET @bit4Cap='-blank-'
IF @bit5Cap IS NULL
	SET @bit5Cap='-blank-'
IF @bit6Cap IS NULL
	SET @bit6Cap='-blank-'
IF @bit7Cap IS NULL
	SET @bit7Cap='-blank-'
IF @bit8Cap IS NULL
	SET @bit8Cap='-blank-'

IF @char1Cap IS NULL
	SET @char1Cap='-blank-'
IF @char2Cap IS NULL
	SET @char2Cap='-blank-'
IF @char3Cap IS NULL
	SET @char3Cap='-blank-'
IF @char4Cap IS NULL
	SET @char4Cap='-blank-'
IF @char5Cap IS NULL
	SET @char5Cap='-blank-'
IF @char6Cap IS NULL
	SET @char6Cap='-blank-'
IF @char7Cap IS NULL
	SET @char7Cap='-blank-'
IF @char8Cap IS NULL
	SET @char8Cap='-blank-'

IF @int1Cap IS NULL
	SET @int1Cap='-blank-'
IF @int2Cap IS NULL
	SET @int2Cap='-blank-'
IF @int3Cap IS NULL
	SET @int3Cap='-blank-'
IF @int4Cap IS NULL
	SET @int4Cap='-blank-'
	
IF @multi1Cap IS NULL
	SET @multi1Cap='-blank-'	
IF @multi2Cap IS NULL
	SET @multi2Cap='-blank-'	
IF @multi3Cap IS NULL
	SET @multi3Cap='-blank-'	
IF @multi4Cap IS NULL
	SET @multi4Cap='-blank-'	


EXEC('SELECT v.AssetCategoryName,
	v.AssetModelName,
	v.AssetMakeName,
	v.AssetTypeName,
	v.AssetLocationName,
	v.OwnerName,
	v.CheckedOutName,
	v.Name as AssetName,
	v.SerialNumber,
	v.AssetTag,
	v.Description,
	v.Value,
	v.DateAquired,
	v.LaborWarrantyLength,
	v.PartsWarrantyLength,
	v.Notes,
	v.Room,
	v.PONumber,
	v.Active,
        v.FundingSource,
	v.FundingCode,
	v.vchStatus,
	cf.bit1 as ['+@bit1Cap+'],
	cf.bit2 as ['+@bit2Cap+'],
	cf.bit3 as ['+@bit3Cap+'],
	cf.bit4 as ['+@bit4Cap+'],
	cf.bit5 as ['+@bit5Cap+'],
	cf.bit6 as ['+@bit6Cap+'],
	cf.bit7 as ['+@bit7Cap+'],
	cf.bit8 as ['+@bit8Cap+'],
	cf.char1 as ['+@char1Cap+'],
	cf.char2 as ['+@char2Cap+'],
	cf.char3 as ['+@char3Cap+'],
	cf.char4 as ['+@char4Cap+'],
	cf.char5 as ['+@char5Cap+'],
	cf.char6 as ['+@char6Cap+'],
	cf.char7 as ['+@char7Cap+'],
	cf.char8 as ['+@char8Cap+'],
	cf.int1 as ['+@int1Cap+'],
	cf.int2 as ['+@int2Cap+'],
	cf.int3 as ['+@int3Cap+'],
	cf.int4 as ['+@int4Cap+'],
	m1.vchOption as ['+@multi1Cap+'],
	m2.vchOption as ['+@multi2Cap+'],
	m3.vchOption as ['+@multi3Cap+'],
	m4.vchOption as ['+@multi4Cap+']
FROM vw_AssetDetail v
LEFT OUTER JOIN AssetTypeCustFields cf ON cf.DepartmentId=v.DepartmentId AND cf.AssetId=v.id
LEFT OUTER JOIN AssetTypeMultiChoices m1 ON m1.TypeId=cf.TypeId AND m1.MultiNumber=1 AND m1.OptionNumber=cf.multi1
LEFT OUTER JOIN AssetTypeMultiChoices m2 ON m2.TypeId=cf.TypeId AND m2.MultiNumber=2 AND m2.OptionNumber=cf.multi2
LEFT OUTER JOIN AssetTypeMultiChoices m3 ON m3.TypeId=cf.TypeId AND m3.MultiNumber=3 AND m3.OptionNumber=cf.multi3
LEFT OUTER JOIN AssetTypeMultiChoices m4 ON m4.TypeId=cf.TypeId AND m4.MultiNumber=4 AND m4.OptionNumber=cf.multi4
WHERE v.DepartmentId='+@DId+' AND v.TypeId='+@TypeId+'')
GO
PRINT N'Creating [dbo].[sp_ExportMasterUserList]...';


GO

 CREATE Procedure dbo.sp_ExportMasterUserList (

	@vchUserTypeInput varchar(50)

)
as

/*Options
@vchUserTypeInput

admin
tech
super
user
*/


DECLARE @vchUserType varchar(20)

IF @vchUserTypeInput = 'admin'
	SET @vchUserType = '3'

IF @vchUserTypeInput = 'tech'
	SET @vchUserType = '2'

IF @vchUserTypeInput = 'super'
	SET @vchUserType = '5'

IF @vchUserTypeInput = 'user'
	SET @vchUserType = '1'


SELECT '['+lo.FirstName+']'+lo.Email as NameEmail
FROM tbl_LoginCompanyJunc lj
JOIN tbl_Logins lo ON lj.login_id=lo.id
WHERE lj.UserType_Id in (@vchUserType)
GROUP BY lo.FirstName, lo.Email
GO
PRINT N'Creating [dbo].[sp_FileService_CopyFiles]...';


GO
/* Designer: Valeriy Gooz */
/* Set mark files as delete  */

CREATE PROCEDURE [dbo].[sp_FileService_CopyFiles]
(
	@DepartmentId int,
	@OldLocalObjectId nvarchar(255),
	@NewLocalObjectId nvarchar(255),
	@LocalObjectType nvarchar(50)
)
AS
Begin
	Declare @org_guid uniqueidentifier
	Declare @dept_guid uniqueidentifier

	Select @dept_guid = NULL
	select @dept_guid=company_guid from tbl_company where company_id=@DepartmentId

	if NOT @dept_guid IS NULL
	Begin
		Select @org_guid=@dept_guid
		UPDATE [dbo].[Mfs_File] SET LocalObjectId=@NewLocalObjectId 
		FROM [dbo].[Mfs_File] F 
		WHERE F.OrganizationId=@org_guid AND F.DepartmentId=@dept_guid AND F.LocalObjectId=@OldLocalObjectId AND F.LocalObjectType=@LocalObjectType
	End
End
GO
PRINT N'Creating [dbo].[sp_freetextticket]...';


GO
CREATE Procedure dbo.sp_freetextticket
	(
	@DepartmentId int,
	@search nvarchar(100),
	@IncludeClosed tinyint
	)
As
	--VGOOZ 28-JUL-2005: Test comparison functionality
	--VGOOZ 2-JUL-2005: Temporary disabled FREETEXTTABLE and FREETEXTTABLE supports if for tbl_ticket is enabled Full Text search
/*
	IF @IncludeClosed = 0
		BEGIN
			SELECT x.id, sum(x.RankTotal) as rank, ti.subject, ti.TicketNumber FROM (
				SELECT t.id, f.Rank as RankTotal FROM tbl_ticket t INNER JOIN (SELECT TOP 100 * FROM FREETEXTTABLE(tbl_ticket, *, @search) ORDER BY Rank DESC) f ON f.[key] = t.id WHERE t.company_id = @DepartmentId AND t.status <> 'Closed'
				UNION
				SELECT t.id, f.Rank as RankTotal FROM tbl_ticketnote t INNER JOIN (SELECT TOP 100 * FROM FREETEXTTABLE(tbl_ticketnote, *, @search) ORDER BY Rank DESC) f ON f.[key] = t.id INNER JOIN tbl_ticket ti ON ti.company_id = @DepartmentId AND ti.status <> 'Closed' AND ti.id=t.ticket_id 
			) as x INNER JOIN tbl_ticket ti ON ti.company_id = @DepartmentId AND ti.id = x.id GROUP BY x.id,ti.subject,ti.TicketNumber ORDER BY rank desc
		END
	ELSE
		BEGIN
			SELECT x.id, sum(x.RankTotal) as rank, ti.subject, ti.TicketNumber FROM (
				SELECT t.id, f.Rank as RankTotal FROM tbl_ticket t INNER JOIN (SELECT TOP 100 * FROM FREETEXTTABLE(tbl_ticket, *, @search) ORDER BY Rank DESC) f ON f.[key] = t.id WHERE t.company_id = @DepartmentId
				UNION
				SELECT t.id, f.Rank as RankTotal FROM tbl_ticketnote t INNER JOIN (SELECT TOP 100 * FROM FREETEXTTABLE(tbl_ticketnote, *, @search) ORDER BY Rank DESC) f ON f.[key] = t.id INNER JOIN tbl_ticket ti ON ti.company_id = @DepartmentId AND ti.id=t.ticket_id 
			) as x INNER JOIN tbl_ticket ti ON ti.company_id = @DepartmentId AND ti.id = x.id GROUP BY x.id,ti.subject,ti.TicketNumber ORDER BY rank desc

		END
*/
GO
PRINT N'Creating [dbo].[sp_GetAssetPropertyValue]...';


GO
CREATE Procedure dbo.sp_GetAssetPropertyValue
	(
		@DId int,
		@AssetId int,
		@AssetTypePropertyId int, 
		@PropertyValue nvarchar(255) OUTPUT
	)
As
	SELECT @PropertyValue=PropertyValue FROM AssetPropertyValues WHERE DId=@DId AND AssetId=@AssetId AND AssetTypePropertyId=@AssetTypePropertyId
	IF @PropertyValue IS NULL
		SET @PropertyValue=''
GO
PRINT N'Creating [dbo].[sp_GetLocationPropertyValue]...';


GO
CREATE Procedure dbo.sp_GetLocationPropertyValue
	(
		@DId int,
		@LocationId int,
		@LocationTypePropertyId int, 
		@PropertyValue nvarchar(255) OUTPUT
	)
As
	SELECT @PropertyValue=PropertyValue FROM LocationPropertyValues WHERE DId=@DId AND LocationId=@LocationId AND LocationTypePropertyId=@LocationTypePropertyId
	IF @PropertyValue IS NULL
		SET @PropertyValue=''
GO
PRINT N'Creating [dbo].[sp_GetPrintFontSize]...';


GO
CREATE PROCEDURE dbo.sp_GetPrintFontSize
	(
		@DId int,
		@UId int,
		@PrintFontSize tinyint=NULL OUTPUT 
	)
AS

SELECT @PrintFontSize=printFontSize FROM tbl_LoginCompanyJunc WHERE company_id=@DId and id=@UId
IF @PrintFontSize IS NULL
	SELECT @PrintFontSize = CAST(dbo.fxGetConfigValueStr(@DId, 'printFontSize') AS tinyint)
GO
PRINT N'Creating [dbo].[sp_GetTicketInitThreadMessageId]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_GetTicketInitThreadMessageId]
		@DId int,
		@TicketId int,
		@Email nvarchar(50), 
		@MessageId nvarchar(255),
		@InitMessageId nvarchar(255) OUTPUT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT @InitMessageId=MessageId FROM TicketSentEmails WHERE DId=@DId AND TicketId=@TicketId AND Email=@Email
	IF @InitMessageId IS NULL AND LEN(ISNULL(@MessageId, ''))>0 AND EXISTS(SELECT Id FROM tbl_ticket WHERE company_id=@DId AND Id=@TicketId)
		INSERT INTO TicketSentEmails (DId, TicketId, Email, MessageId, LastSentDateTime) VALUES (@DId, @TicketId, @Email, @MessageId, getutcdate())
END
GO
PRINT N'Creating [dbo].[sp_ImportAccountLocations]...';


GO
CREATE PROCEDURE dbo.sp_ImportAccountLocations
	(
		@DId int,
		@vchEmailImpersonate nvarchar(75),
		@vchAcctName nvarchar(100),
		@vchLocationName nvarchar(25),
		@vchAddress1 nvarchar(50)=null,
		@vchAddress2 nvarchar(50)=null,
		@vchCity nvarchar(25)=null,
		@vchState nvarchar(25)=null,
		@vchPostalCode nvarchar(10)=null,
		@vchCountry nvarchar(25)=null,
		@vchPhone1 nvarchar(20)=null,
		@vchPhone2 nvarchar(20)=null,
		@vchError nvarchar(max)=null OUTPUT
	)
AS
	
	--NOTE sintHourOffset is not working
	--Need to change the vchEmailImpersonate to just the id of the system adming, have the id fed to the sp.
	
	/*Return Codes
	-1 = Account could not be found
	-2 = Location already exists
	*/
	
	DECLARE @intAcctId int
	DECLARE @UId int
	DECLARE @intLocationId int
		
	IF EXISTS(SELECT 'true' FROM Accounts WHERE DId=@DId AND vchName=@vchAcctName)
		BEGIN
			SET @intAcctId = (SELECT TOP 1 id FROM Accounts WHERE DId=@DId AND vchName=@vchAcctName)	
		
			SET @UId = (SELECT id FROM vw_Logins3 WHERE DId=@DId AND vchEmail=@vchEmailImpersonate)
			
			IF NOT EXISTS(SELECT 'true' FROM AccountLocations WHERE DId=@DId AND AccountId=@intAcctId AND vchName=@vchLocationName)
				BEGIN
					INSERT INTO AccountLocations (DId,AccountId,vchName,vchAddress1,vchAddress2,vchCity,vchStateProv,vchPostalCode,vchCountry,sintHourOffset,vchPhone1,vchPhone2,dtUpdated,UpdatedId,btDefault)
						VALUES (@DId,@intAcctId,@vchLocationName,@vchAddress1,@vchAddress2,@vchCity,@vchState,@vchPostalCode,@vchCountry,0,@vchPhone1,@vchPhone2,getutcdate(),@UId,0)
				
					SET @intLocationId = (SELECT @@Identity)
					
					--If it is the only location set it to default.
					IF NOT EXISTS(SELECT 'true' FROM AccountLocations WHERE DId=@DId AND AccountId=@intAcctId AND Id<>@intLocationId)
						UPDATE AccountLocations SET btDefault=1 WHERE DId=@DId AND AccountId=@intAcctId AND Id=@intLocationId
				
				END
			ELSE
				BEGIN
					SET @vchError=@vchError+'Location by the name '+@vchLocationName+' already exists.'+char(10)+char(13)
					RETURN -2
				END
		END
	ELSE
		BEGIN
			SET @vchError=@vchError+'Account by the name '+@vchAcctName+' could not be found.'+char(10)+char(13)
			RETURN -1		
		END
GO
PRINT N'Creating [dbo].[sp_InactivateAccount]...';


GO
CREATE  PROCEDURE dbo.sp_InactivateAccount
(
	@CompanyID int,
	@AccountID int,
	@Active bit
)
AS
	
	UPDATE Accounts
	SET btActive = @Active
	WHERE
		DId = @CompanyID
		AND
		Id = @AccountID
GO
PRINT N'Creating [dbo].[sp_InactivateLogin]...';


GO

CREATE Procedure [dbo].[sp_InactivateLogin]
	(
		@UId int,
		@DId int,
		@btAllTkt bit
	)
As

--VGOOZ 23-SEP-2005: tkt #2951 - Inactive users functionality
	DECLARE @btUserInactive bit
	DECLARE @LoginId int
	SELECT @btUserInactive=btUserInactive, @LoginId=login_id FROM tbl_LoginCompanyJunc WHERE company_id = @DId AND id = @UId
	
	IF @btUserInactive=1
	BEGIN
		UPDATE tbl_LoginCompanyJunc SET btUserInactive=0 WHERE company_id = @DId AND id = @UId
		RETURN 1
	END

	DECLARE @IsTech int
	DECLARE @RecordsFound int


	SET @IsTech = 0
	SET @RecordsFound = 0
	
	IF EXISTS(SELECT 'true' FROM TktLevels WHERE DId=@DId AND intLastResortId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
			
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM Accounts WHERE DId=@DId AND AcctRepId=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM AccountLevelTechs WHERE DId=@DId AND UId=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM AccountTech WHERE CompanyID=@DId AND TechID=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END


	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM ProjectTech WHERE CompanyID=@DId AND TechID=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM TaskTypeTech WHERE CompanyID=@DId AND TechID=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
		
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_class WHERE company_id=@DId AND lastResorttechId = @UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM ClassLevels WHERE DId=@DId AND intLastResortId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_ClassTechnicianJctn CTJ INNER JOIN tbl_class C ON CTJ.class_id = C.id WHERE C.company_id=@DId AND CTJ.LoginCompanyJunc_id=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM ClassLevelsTechJctn WHERE DId=@DId AND intUId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
	
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_Locations WHERE DId=@DId AND intLastResortId = @UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationLevels WHERE DId=@DId AND intLastResortId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationTechJctn WHERE DId=@DId AND intUId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationLevelsTechJctn WHERE DId=@DId AND intUId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
				
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationRouteLevels WHERE DId=@DId AND LastResortTechId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM LocationRouteLevelTechs WHERE DId=@DId AND TechId=@UId)
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END

	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM SchedTickets WHERE DId=@DId AND (intTechId=@UId OR intOwnerId=@UId))
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1
		END
	
	IF @IsTech = 0
	BEGIN
		IF @btAllTkt=1
			IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND technician_id = @UId)
			BEGIN
				SET @IsTech = 1
				SET @RecordsFound = 1
			END
		ELSE	
			IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND technician_id = @UId  AND Status<>'Closed')
			BEGIN
				SET @IsTech = 1
				SET @RecordsFound = 1
			END
	END

	IF @IsTech = 0
	BEGIN
		IF @btAllTkt=1
			IF EXISTS(SELECT 'true' FROM TicketAssignment WHERE DepartmentId = @DId AND UserId = @UId AND StopDate IS NULL AND AssignmentType=2)
			BEGIN
				SET @IsTech = 1
				SET @RecordsFound = 1
			END
		ELSE	
			IF EXISTS(SELECT 'true' FROM TicketAssignment ta INNER JOIN tbl_ticket t ON ta.TicketId = t.id  WHERE ta.DepartmentId = @DId AND ta.UserId = @UId AND ta.StopDate IS NULL AND AssignmentType=2 AND t.Status<>'Closed')
			BEGIN
				SET @IsTech = 1
				SET @RecordsFound = 1
			END
	END
    	
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId=@DId AND LoginCompanyJunc_Id=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1 
		END
	
	IF @IsTech = 0
		IF EXISTS(SELECT 'true' FROM EMailParserDropBoxes WHERE DId=@DId AND TechnicianId=@UId )
		BEGIN
			SET @IsTech = 1
			SET @RecordsFound = 1 
		END
		
	IF @RecordsFound = 0
		IF EXISTS(SELECT 'true' FROM Assets WHERE DepartmentId=@DId AND (OwnerId = @UId OR CheckedOutId = @UId) )
			SET @RecordsFound = 1
		
	IF @RecordsFound = 0
		IF EXISTS(SELECT 'true' FROM SchedTickets WHERE DId=@DId AND intUserId=@UId )
			SET @RecordsFound = 1

	/*Probably need to stop checking the created id field, also delete the foreign key relationship*/
	--VGOOZ 08-SEP-2005: added check on Created_id
	IF @RecordsFound = 0
	BEGIN
		IF @btAllTkt=1
		BEGIN
			IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND (user_id = @UId))
				SET @RecordsFound = 1
		END
		ELSE
		BEGIN
			IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND (user_id = @UId) AND Status<>'Closed')
				SET @RecordsFound = 1
		END
	END
	
	DECLARE @return_value int
	
	
	IF @IsTech = 0 AND @RecordsFound = 0
		BEGIN
			DELETE FROM ClassLevelsTechJctn WHERE DId=@DId AND intUId=@UId
			DELETE FROM LocationLevelsTechJctn WHERE DId=@DId AND intUId=@UId
			DELETE FROM tbl_ClassTechnicianJctn WHERE LoginCompanyJunc_id=@UId
			DELETE FROM LocationTechJctn WHERE DId=@DId AND intUId=@UId
			DELETE FROM AccountLevelTechs WHERE DId=@DId AND UId=@UId
			DELETE FROM MailGroupUsers WHERE DepartmentId=@DId AND LoginId=@LoginId
			DELETE FROM NotificationRuleUsers WHERE DId=@DId AND UserId=@UId
			DELETE FROM QueueMembers WHERE UserId=@UId
			DELETE FROM ProjectTech WHERE TechID=@UId

			UPDATE tbl_LoginCompanyJunc SET btUserInactive=1 WHERE company_id = @DId AND id = @UId
				
			SET @return_value = 1
		END
		
		
	IF @IsTech = 0 AND @RecordsFound = 1
		BEGIN
			SET @return_value = 2
		END
		
	IF @IsTech = 1 AND @RecordsFound = 1
		BEGIN
			SET @return_value = 3
		END
	
	
return @return_value
GO
PRINT N'Creating [dbo].[sp_InactivateProject]...';


GO
CREATE  PROCEDURE dbo.sp_InactivateProject
(
	@CompanyID int,
	@ProjectID int,
	@Active bit
)
AS
	
	UPDATE Project
	SET Active = @Active
	WHERE
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID
GO
PRINT N'Creating [dbo].[sp_IncreaseKBHelpfulCount]...';


GO
CREATE PROCEDURE dbo.sp_IncreaseKBHelpfulCount
(
		@DId int,
		@TId int
)
AS
	DECLARE @KBHelpfulCount int
	
	SELECT
		@KBHelpfulCount = ISNULL(KBHelpfulCount, 0) + 1
	FROM 
		tbl_ticket 
	WHERE 
		company_id=@DId 
		AND 
		id=@TId
	
	UPDATE
		tbl_ticket
	SET
		KBHelpfulCount = @KBHelpfulCount
	WHERE
		company_id=@DId 
		AND 
		id=@TId
GO
PRINT N'Creating [dbo].[sp_InsertAccountLevelTech]...';


GO

CREATE PROCEDURE sp_InsertAccountLevelTech
	(
		@DId int,
		@AcctId int,
		@tintLevel tinyint,
		@UId int
	)
AS
	SET NOCOUNT ON
	
	IF NOT EXISTS(SELECT 'true' FROM AccountLevelTechs WHERE DId=@DId AND AcctId=@AcctId AND tintLevel=@tintLevel AND UId=@UId)
		INSERT INTO AccountLevelTechs (DId,AcctId,tintLevel,UId) VALUES (@DId,@AcctId,@tintLevel,@UId)
	RETURN
GO
PRINT N'Creating [dbo].[sp_InsertAccountRetainer]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertAccountRetainer]
(
		@CompanyID int,
        @AccountID int = NULL,
        @TechID int
)
AS

	IF @AccountId<=0
		SET @AccountId=NULL
	

	INSERT INTO AccountRetainer
           (DId
           ,AccountId
           ,TechId
		   ,Amount
		   ,StartDate)
     VALUES
		(
		@CompanyID,
		@AccountID,
		@TechID,
		0,
		getutcdate()
		)
		


set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_InsertAccountTaskTypeRate]...';


GO
CREATE PROCEDURE dbo.sp_InsertAccountTaskTypeRate
(
		@CompanyID int,
        @AccountID int = NULL,
        @TaskTypeID int,
		@HourlyRate smallmoney
)
AS

	IF @AccountID<=0
		SET @AccountID=NULL
		
	IF @HourlyRate < 0
		SET @HourlyRate = NULL

	INSERT INTO AccountTaskTypeRate
           (CompanyID
           ,AccountID
           ,TaskTypeID
		   ,HourlyRate)
     VALUES
		(
		@CompanyID,
		@AccountID,
		@TaskTypeID,
		@HourlyRate
		)
GO
PRINT N'Creating [dbo].[sp_InsertAccountTech]...';


GO
CREATE PROCEDURE dbo.sp_InsertAccountTech
(
		@CompanyID int,
        @AccountID int = NULL,
        @TechID int
)
AS

	IF @AccountId<=0
		SET @AccountId=NULL

	IF @TechID = 0
		SET @TechID = NULL

	INSERT INTO AccountTech
           (CompanyID
           ,AccountID
           ,TechID)
     VALUES
		(
		@CompanyID,
		@AccountID,
		@TechID
		)
		


set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_InsertAsset]...';


GO
CREATE Procedure dbo.sp_InsertAsset
	(
		@DepartmentId int,
		@AssetGUID uniqueidentifier,
		@SerialNumber nvarchar(50) = null,
		@Unique1 nvarchar(100) = null,
		@Unique2 nvarchar(100) = null,
		@Unique3 nvarchar(100) = null,
		@Unique4 nvarchar(100) = null,
		@Unique5 nvarchar(100) = null,
		@Unique6 nvarchar(100) = null,
		@Unique7 nvarchar(100) = null,
		@AssetCategory int,
		@AssetType int,
		@AssetMake int,
		@AssetModel int,
		@UserId int,
		@MotherboardSerial nvarchar(100) = null,
		@BiosSerial nvarchar(100) = null,
		@Name nvarchar(50) = null,
		@Description nvarchar(250) = null,
		@LocationId int = null		
	)
As
	DECLARE @AssetNumber int
	SET @AssetNumber = ISNULL((SELECT Max(AssetNumber) FROM Assets WHERE DepartmentId = @DepartmentId),0) + 1
	IF @AssetGUID IS NULL
		SET @AssetGUID = newid()
		
	DECLARE @AssetProfileId int	
	SELECT @AssetProfileId=AssetProfileId FROM AssetTypes where DepartmentId=@DepartmentId AND id=@AssetType
		
	INSERT INTO Assets (DepartmentId, OwnerId, CheckedOutId, CategoryId, TypeId, MakeId, ModelId, AssetGUID,AssetNumber, SerialNumber, Unique1, Unique2, Unique3, Unique4, Unique5, Unique6, Unique7, dtUpdated, intUpdatedBy, Name, [Description], LocationId) VALUES (@DepartmentId, @UserId, @UserId, @AssetCategory, @AssetType, @AssetMake, @AssetModel, @AssetGUID, @AssetNumber, @SerialNumber, @Unique1, @Unique2, @Unique3, @Unique4, @Unique5, @Unique6, @Unique7, getutcdate(), @UserId, @Name, @Description, @LocationId)
	
	DECLARE @AssetId int
	SET @AssetId = @@Identity
	
	IF @AssetProfileId=1
	INSERT INTO AssetComputers(DepartmentId,AssetId,MotherboardSerial,BiosSerial) VALUES(@DepartmentId,@AssetId,@MotherboardSerial,@BiosSerial)

	return @AssetId
GO
PRINT N'Creating [dbo].[sp_InsertAssetBulk]...';


GO
CREATE Procedure [dbo].[sp_InsertAssetBulk]
	(
		@DepartmentId int,
		@UserId int,
		@AssetCategory int,
		@AssetType int,
		@Name nvarchar(50) = null,
		@Description nvarchar(250) = null		
	)
AS
		
	INSERT INTO AssetBulk
		(DepartmentId, CategoryId, TypeId, Name, [Description], Created, CreatedBy)
	VALUES
		(@DepartmentId, @AssetCategory, @AssetType, @Name, @Description, getutcdate(), @UserId)
	
	RETURN @@Identity
GO
PRINT N'Creating [dbo].[sp_InsertAssetStatusCompany]...';


GO
CREATE PROCEDURE dbo.sp_InsertAssetStatusCompany
(
	@DId int,
	@AssetStatusID int,
	@NonActive bit = 0,
	@EnableUse bit =1
)
AS
	SET NOCOUNT ON
	
    UPDATE AssetStatus SET NonActive=@NonActive WHERE DId=@DId AND Id=@AssetStatusID
    IF EXISTS(SELECT * FROM AssetStatusCompany WHERE DId=@DId AND AssetStatusID=@AssetStatusID)
		UPDATE AssetStatusCompany SET NonActive=@NonActive, EnableUse=@EnableUse WHERE DId=@DId AND AssetStatusID=@AssetStatusID
	ELSE
		INSERT INTO AssetStatusCompany (DId,AssetStatusID,NonActive,EnableUse) VALUES(@DId,@AssetStatusID,@NonActive,@EnableUse)
GO
PRINT N'Creating [dbo].[sp_InsertAssetStatusCompanyAll]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertAssetStatusCompanyAll]
	@DepartmentId int
AS
BEGIN
	SET NOCOUNT ON;
	
	INSERT INTO AssetStatusCompany (DId, AssetStatusID) 
	SELECT @DepartmentId AS DId, AssetStatus.id AS AssetStatusID 
	FROM AssetStatus
	LEFT JOIN AssetStatusCompany ON (AssetStatusCompany.DId = @DepartmentId) AND AssetStatus.id = AssetStatusCompany.AssetStatusID
	WHERE AssetStatusCompany.AssetStatusID IS NULL AND (AssetStatus.DId = @DepartmentId OR AssetStatus.DId IS NULL)
END
GO
PRINT N'Creating [dbo].[sp_InsertCategory]...';


GO
CREATE Procedure dbo.sp_InsertCategory
	(
		@DepartmentId int,
		@CategoryName nvarchar(50),
		@btInactive bit,
		@UId int
	)
As
	IF NOT EXISTS(Select 'true' FROM CreationCats WHERE DId = @DepartmentId AND vchName = @CategoryName)
		INSERT INTO CreationCats (DId, vchName, btInactive, intCreated, dtCreated) VALUES (@DepartmentId, @CategoryName, @btInactive, @UId, getutcdate())
	ELSE
		raiserror('Can''t add Creation Category! The %s already exists.',16,1, @CategoryName)
	return (SELECT ISNULL(@@identity, -1))
GO
PRINT N'Creating [dbo].[sp_InsertClassLevel]...';


GO

CREATE PROCEDURE sp_InsertClassLevel
	(
		@DId int,
		@ClassId int,
		@tintLevel tinyint	
	)
AS
	IF @tintLevel > 1 AND NOT EXISTS(SELECT 'true' FROM ClassLevels WHERE DId=@DId AND ClassId=@ClassId AND tintLevel=@tintLevel)
		BEGIN
			DECLARE @intLastResortId int, @tintDistributedRouting int, @tintClassType int
			SELECT @intLastResortId=LastResortTechId, @tintDistributedRouting=ConfigDistributedRouting, @tintClassType=tintClassType FROM tbl_class WHERE company_id=@DId AND id=@ClassId
		
			INSERT INTO ClassLevels (DId, ClassId, tintLevel, intLastResortId, tintDistributedRouting, tintClassType) VALUES (@DId, @ClassId, @tintLevel, @intLastResortId, @tintDistributedRouting, @tintClassType)
		
		END
	RETURN
GO
PRINT N'Creating [dbo].[sp_InsertDaySummaryTime]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertDaySummaryTime]
(		
	@DepartmentID int,	
	@UserID int,	
	@Date smalldatetime,		
	@StartTime smalldatetime,
	@StopTime smalldatetime,
	@TimeOut decimal(10, 4),
	@TotalDayTime decimal(10, 4),
	@CreatedTime smalldatetime,
	@CreatedBy int,
	@TimeOffset decimal(18, 0)
)
AS

	INSERT INTO
		[DaySummaryTime]
		([DepartmentId],		
		[UserId],		
		[Date],
		[StartTime],
		[StopTime],
		[TimeOut],
		[TotalDayTime],		
		[CreatedDate],
		[CreatedBy],
		[Deleted],
		[LocalTimeZoneOffset]
		)
	VALUES
	(
		@DepartmentID,		
		@UserID,		
		@Date,
		@StartTime,
		@StopTime,
		@TimeOut,
		@TotalDayTime,		
		@CreatedTime,
		@CreatedBy,
		0,
		@TimeOffset
	)
GO
PRINT N'Creating [dbo].[sp_InsertEmailParseLogin]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertEmailParseLogin]
	(
		@DId int,
		@FirstName nvarchar(50) OUTPUT,
		@LastName nvarchar(50) OUTPUT,
		@Email nvarchar(50),
		@Pin nvarchar(4),
		@ClassorQue varchar(1),
		@CQId int,
		@EDropBoxId nchar(8),
		@IsServiceEmail bit,
		@FailureMsg nvarchar(max) = null OUTPUT,
		@NewGlobalAcct bit = 0 OUTPUT,
		@SendEmailToPref bit = 1 OUTPUT
	)
AS
	/*
	>0 = all okay
	-1 = Department has deactivated email parsing for tickets.
	-2 = Que/Class and Department does not exists.
	-3 = Que/Class does exists but explicitly denies email ticket creation
	-4 = Email DropBox does not exists.
	-5 = Department does not allow account creation via Email parsing.
	-6 = Email Suffix did not find in any Accounts
	-7 = Inactive user was found
	-8 = User First/Last name is not defined
	*/
	SET NOCOUNT ON
	
	--Select failure msg upfront in case error occurs
	DECLARE @btUserInactive bit

	SELECT @FailureMsg = txtText FROM CustomText WHERE DId=@DId AND Type='EmailTktCreationFailure'
	
	IF dbo.fxGetConfigValueStr(@DId, 'tintCfgEParserV2') = '0'
		RETURN -1
	IF @ClassorQue = 'c' AND NOT EXISTS(SELECT 'true' FROM tbl_class WHERE company_id=@DId AND id=@CQId)
		RETURN -2
	IF @ClassorQue = 'c' AND NOT EXISTS(SELECT 'true' FROM tbl_class WHERE company_id=@DId AND id=@CQId AND bitAllowEmailParsing=1)
		RETURN -3
	IF @ClassorQue = 'q' AND NOT EXISTS(SELECT 'true' FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@CQId AND UserType_Id=4)
		RETURN -2
	IF @ClassorQue = 'q' AND NOT EXISTS(SELECT 'true' FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@CQId AND bitAllowQueEmailParsing=1)
		RETURN -3
	IF LEN(@EDropBoxId)>0 AND NOT EXISTS(SELECT 'true' FROM EMailParserDropBoxes WHERE DId=@DId AND PseudoId=@EDropBoxId)
		RETURN -4	
	DECLARE @bitAllowEmailNewAcct bit
	DECLARE @btCfgLimitNewUsersToMatchingDomainSuffixes bit
	DECLARE @btCfgAcctMngr bit
	DECLARE @EMailSuffixes nvarchar(1024)
	
	SELECT @btCfgAcctMngr = dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr')
	SELECT @bitAllowEmailNewAcct = dbo.fxGetConfigValueBit(@DId, 'configAllowEmailNewAcct')
	SELECT @btCfgLimitNewUsersToMatchingDomainSuffixes = dbo.fxGetConfigValueBit(@DId, 'btCfgLimitNewUsersToMatchingDomainSuffixes')
	SELECT @EMailSuffixes = dbo.fxGetConfigValueStr(@DId, 'emailSuffixes')
	
	DECLARE @LoginId int
	DECLARE @UserId int

	SELECT @LoginId = id FROM tbl_Logins WHERE Email = @Email
	IF NOT @LoginId IS NULL
		SELECT @UserId=id FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND login_id=@LoginId

	DECLARE @EmailSuffix nvarchar(50)
	DECLARE @EmailPrefix nvarchar(50)
	
	IF CHARINDEX('@', @Email)>0
	BEGIN
		SET @EmailSuffix=REPLACE(SUBSTRING(@Email, CHARINDEX('@', @Email), LEN(@Email)-CHARINDEX('@', @Email, 0)+1), '@', '')
		SET @EmailPrefix=SUBSTRING(@Email, 0, CHARINDEX('@', @Email)) 
	END
	ELSE
	BEGIN
		SET @EmailSuffix=@Email
		SET @EmailPrefix=''
	END
	
	IF @IsServiceEmail=1 
	BEGIN
		IF LEN(ISNULL(@FirstName,''))=0
			SET @FirstName=@EmailPrefix
		IF LEN(ISNULL(@LastName,''))=0
			SET @LastName=@EMailSuffix
			
		GoTo ForceCreateTicket
	END
		 		
	IF (@LoginId IS NULL OR @UserId IS NULL) AND @bitAllowEmailNewAcct=0
		RETURN -5
					
	IF (@LoginId IS NULL OR @UserId IS NULL) AND @btCfgLimitNewUsersToMatchingDomainSuffixes=1
	BEGIN
		IF CHARINDEX(@EmailSuffix, @EMailSuffixes)=0 AND NOT EXISTS(SELECT * FROM Accounts WHERE DId=@DId AND vchEmailSuffix LIKE '%'+@EmailSuffix+'%')
		BEGIN
			SELECT @FailureMsg = txtText FROM CustomText WHERE DId=@DId AND Type='EmailNonMatchDomainSuffix'
			RETURN -6
		END
	END

ForceCreateTicket:
	IF @LoginId is null AND (LEN(ISNULL(@FirstName, ''))=0 OR LEN(ISNULL(@LastName, ''))=0)
		RETURN -8
	
	IF @LoginId is null
	BEGIN
		INSERT INTO tbl_Logins (Email, FirstName, LastName, Password) VALUES (@Email, @FirstName, @LastName, @Pin)
		SET @LoginId = (SELECT @@Identity)
		SET @NewGlobalAcct = 1
		SET @FailureMsg='NewGlobalAcct'
	END
	IF @UserId is null
	BEGIN
		INSERT INTO tbl_LoginCompanyJunc (login_id, company_id, usertype_id, configPartialSetup) VALUES (@LoginId, @DId, 1, 1)
		SET @UserId = (SELECT @@Identity)
		IF CHARINDEX(@EmailSuffix, @EMailSuffixes)>0
			INSERT INTO UserAccounts (DepartmentId, UserId) VALUES (@DId, @UserId)
		DECLARE @AccId int	
		DECLARE a_cursor CURSOR FOR SELECT Id AS AId FROM Accounts A WHERE A.DId=@DId AND vchEmailSuffix LIKE '%'+@EmailSuffix+'%'
		OPEN a_cursor
		FETCH NEXT FROM a_cursor INTO @AccId
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO UserAccounts (DepartmentId, UserId, AccountId) VALUES (@DId, @UserId, @AccId)
			FETCH NEXT FROM a_cursor INTO @AccId
		END
		CLOSE a_cursor
		DEALLOCATE a_cursor
		SET @FailureMsg='NewLocalAcct'
	END
	ELSE
	BEGIN
		SELECT @SendEmailToPref=configEmailUserNewTicket, @btUserInactive=btUserInactive FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@UserId
		IF @btUserInactive=1
			RETURN -7
	END
			
	SELECT @FirstName=FirstName, @LastName=LastName FROM tbl_Logins WHERE Email=@Email
	RETURN @UserId
GO
PRINT N'Creating [dbo].[sp_InsertFolder]...';


GO
CREATE Procedure sp_InsertFolder
	(
		@DId int,
		@ParentId int,
		@vchName nvarchar(50)
	)
As
	IF NOT EXISTS(SELECT 'true' FROM Folders WHERE DId=@DId AND ParentId=@ParentId AND vchName=@vchName)
		BEGIN
			INSERT INTO Folders(DId, ParentId, vchName) VALUES (@DId, @ParentId, @vchName)
			return @@IDENTITY --VGOOZ 18-JUNE-2005: improved functionality
		END
	ELSE
		return 0
GO
PRINT N'Creating [dbo].[sp_InsertInvoice]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertInvoice]
(
		@DId int,
		@UserId int,
		@AccountID int,
		@ProjectID int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime,
		@CalculateRange bit,
		@InvoiceID int output
)
AS		
	DECLARE @btCfgProject bit
	SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	
	INSERT INTO [Invoice]
           ([DId]
           ,[BeginDate]
           ,[EndDate]
           ,[Date]
		   ,[AccountId]
		   ,[ProjectId]
		   ,[Amount]
           ,[QBExported]
		   ,[FBExported]           
           ,[CreatedBy]
		   ,[TotalHours]
		   ,[TimeLogsCount]
		   ,[BillingMethodID]
		   ,[FlatFeeNextDate]
		   ,[QBAccountAlias]
		   ,[QBItemAlias])
     VALUES
           (@DId
           ,@BeginDate
           ,@EndDate
           ,getutcdate()
		   ,@AccountID
		   ,@ProjectID
           ,NULL
           ,0
           ,0
           ,@UserId
           ,NULL
		   ,NULL
		   ,NULL
		   ,NULL
		   ,NULL
		   ,NULL)

	IF (@@ROWCOUNT <> 0)
	BEGIN
		SET @InvoiceID = @@IDENTITY

		DECLARE @BillingMethodID int,
				@Mode int,
				@NextDate smalldatetime,
				@NewNextDate smalldatetime,
				@FlatFee money,
				@QBAccountAlias nvarchar(200),
				@QBItemAlias nvarchar(200),
				@BeginDateCalculated smalldatetime,
				@EndDateCalculated smalldatetime,
				@BeginDateRetainerCalculated smalldatetime,
				@EndDateRetainerCalculated smalldatetime


		SET @BillingMethodID = NULL
		SET @Mode = 0
		SET @NextDate = NULL
		SET @NewNextDate = NULL
		SET @FlatFee = NULL
		SET @QBAccountAlias = NULL
		SET @QBItemAlias = NULL
		SET @BeginDateCalculated = @BeginDate
		SET @EndDateCalculated = @EndDate
		SET @BeginDateRetainerCalculated = NULL
		SET @EndDateRetainerCalculated = NULL
		
		IF (@ProjectID IS NOT NULL)
		BEGIN
			SELECT
				@BillingMethodID = BillingMethodID,
				@Mode = FlatFeeMode,
				@NextDate = FlatFeeNextDate,
				@FlatFee = FlatFee,
				@QBAccountAlias = QBAccountAlias,
				@QBItemAlias = QBItemAlias
			FROM 
				Project
			WHERE 
				CompanyID = @DId
				AND
				ProjectID = @ProjectID
		END
		ELSE
		BEGIN
			SELECT 
				@BillingMethodID = BillingMethodID,
				@Mode = FlatFeeMode,
				@NextDate = FlatFeeNextDate,
				@FlatFee = FlatFee,
				@QBAccountAlias = QBAccountAlias,
				@QBItemAlias = QBItemAlias
			FROM 
				AccountRate
			WHERE
				CompanyID = @DId
				AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))
		END	


		DECLARE @TotalTicketHours decimal(12, 4), @TotalProjectHours decimal(12, 4)
		DECLARE @TicketAmount money, @ProjectAmount money, @RetainerAmount money, @TravelCost money
		DECLARE @TicketTimeLogsCount int, @ProjectTimeLogsCount int

		IF (@BillingMethodID = 1) -- FlatFee
		BEGIN			
			SET @TicketAmount = @FlatFee
			UPDATE [TicketTime]
			SET 
				[InvoiceId] = @InvoiceID,
				[BillRate] = 0
			FROM
				TicketTime tt
			INNER JOIN 
				tbl_ticket tkt ON tt.DepartmentId = tkt.company_id AND tt.TicketId = tkt.Id
			WHERE 
				tt.[DepartmentId] = @DId						
				AND
				tt.[InvoiceId] IS NULL
				AND
				tt.[Deleted] = 0
				AND
				tt.[Date] BETWEEN @BeginDate AND @EndDate	
				AND 
				(@btCfgProject = 1 OR (@btCfgProject <> 1 AND tkt.ProjectID IS NULL))			
				AND
				(CASE 
					WHEN (dbo.fxGetParentBMProject(@DId, @AccountID,tkt.ProjectID) > 0)
					THEN
						CASE
							WHEN (dbo.fxGetParentBMProject(@DId, @AccountID,tkt.ProjectID) = @ProjectID)
							THEN 1 ELSE 0
						END
					ELSE
						CASE
							WHEN @ProjectID IS NULL
							THEN 1 ELSE 0
						END
				END = 1)
				AND
				(ISNULL(tkt.intAcctId, -1) = ISNULL(@AccountID, -1))
					

			UPDATE [ProjectTime]
			SET [InvoiceId] = @InvoiceID,
				[BillRate] = 0
			FROM
				ProjectTime pt
			LEFT OUTER JOIN 
				Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID
			WHERE 
				pt.[DepartmentId] = @DId
				AND
				pt.[InvoiceId] IS NULL
				AND
				pt.[Deleted] = 0
				AND
				pt.[Date] BETWEEN @BeginDate AND @EndDate		
				AND
				ISNULL(ISNULL(p.AccountID, pt.AccountID), -1) = ISNULL(@AccountID, -1)	
				AND
				(@btCfgProject = 1 OR (@btCfgProject <> 1 AND pt.ProjectId IS NULL))	
				AND
				CASE 
					WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, pt.ProjectID) > 0)
					THEN 
						CASE 
							WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, pt.ProjectID) = @ProjectID)
							THEN 1 ELSE 0
						END
					ELSE CASE
						WHEN @ProjectID IS NULL
						THEN 1 ELSE 0
					END
				END = 1
		END
		ELSE
		BEGIN
			IF @BillingMethodID = 4 -- add retainers amounts
			BEGIN				
				IF (@ProjectID IS NULL)
				BEGIN
					SELECT TOP 1 
						@BeginDateRetainerCalculated = ar.FlatFeeNextDate
					FROM 
						AccountRetainer aret
							INNER JOIN 
								AccountRate ar ON aret.DId = ar.CompanyID AND ISNULL(aret.AccountId, -1) = ISNULL(ar.AccountID, -1)
					WHERE 
						aret.DId = @DId 
						AND ar.BillingMethodID = 4			
						AND ar.FlatFeeNextDate IS NOT NULL
						AND ar.FlatFeeNextDate >= @BeginDate
						AND ar.FlatFeeNextDate <= @EndDate
						AND (dbo.fxGetRetainerAmount(@DId, aret.AccountId, NULL, aret.TechId, @BeginDate, @EndDate) >= 0)
						AND ISNULL(aret.AccountID, -1) = ISNULL(@AccountID, -1)		
					ORDER BY
						ar.FlatFeeNextDate ASC
						
					SELECT TOP 1 
						@EndDateRetainerCalculated = ar.FlatFeeNextDate
					FROM 
						AccountRetainer aret
							INNER JOIN 
								AccountRate ar ON aret.DId = ar.CompanyID AND ISNULL(aret.AccountId, -1) = ISNULL(ar.AccountID, -1)
					WHERE 
						aret.DId = @DId 
						AND ar.BillingMethodID = 4			
						AND ar.FlatFeeNextDate IS NOT NULL
						AND ar.FlatFeeNextDate >= @BeginDate
						AND ar.FlatFeeNextDate <= @EndDate
						AND (dbo.fxGetRetainerAmount(@DId, aret.AccountId, NULL, aret.TechId, @BeginDate, @EndDate) >= 0)
						AND ISNULL(aret.AccountID, -1) = ISNULL(@AccountID, -1)		
					ORDER BY
						ar.FlatFeeNextDate DESC
					
					INSERT INTO InvoiceRetainer (DId, InvoiceId, TechId, Amount, TechStart, TechEnd, LoggedHours, LogsCount, FullAmount)
					SELECT
						@DId AS DId,
						@InvoiceID AS InvoiceId,
						aret.TechId,
						dbo.fxGetRetainerAmount(@DId, aret.AccountId, NULL, aret.TechId, @BeginDate, @EndDate) AS Amount,
						aret.StartDate, aret.EndDate,
						dbo.fxGetProjectLoggedHours(@DId, aret.AccountId, NULL, @BeginDate, @EndDate, aret.TechId),
						dbo.fxGetProjectTimeLogsCount(@DId, aret.AccountId, NULL, @BeginDate, @EndDate, aret.TechId),
						aret.Amount
					FROM 
						AccountRetainer aret
							INNER JOIN 
								AccountRate ar ON aret.DId = ar.CompanyID AND ISNULL(aret.AccountId, -1) = ISNULL(ar.AccountID, -1)
					WHERE 
						aret.DId = @DId 
						AND ar.BillingMethodID = 4			
						AND ar.FlatFeeNextDate IS NOT NULL
						AND ar.FlatFeeNextDate >= @BeginDate
						AND ar.FlatFeeNextDate <= @EndDate
						AND (dbo.fxGetRetainerAmount(@DId, aret.AccountId, NULL, aret.TechId, @BeginDate, @EndDate) >= 0)
						AND ISNULL(aret.AccountID, -1) = ISNULL(@AccountID, -1)					
				END
				ELSE
				BEGIN
					SELECT TOP 1 
						@BeginDateRetainerCalculated = p.FlatFeeNextDate
					FROM 
						ProjectRetainer pr
							INNER JOIN Project p ON pr.DId = p.CompanyID AND pr.ProjectId = p.ProjectID
					WHERE 
						pr.DId = @DId 
						AND p.BillingMethodID = 4
						AND p.FlatFeeNextDate IS NOT NULL
						AND p.FlatFeeNextDate >= @BeginDate
						AND p.FlatFeeNextDate <= @EndDate
						AND dbo.fxGetRetainerAmount(@DId, p.AccountID, pr.ProjectId, pr.TechId, @BeginDate, @EndDate) >= 0						
						AND pr.ProjectId = @ProjectID
						AND @btCfgProject = 1
					ORDER BY
						p.FlatFeeNextDate ASC
						
					SELECT TOP 1 
						@EndDateRetainerCalculated = p.FlatFeeNextDate
					FROM 
						ProjectRetainer pr
							INNER JOIN Project p ON pr.DId = p.CompanyID AND pr.ProjectId = p.ProjectID
					WHERE 
						pr.DId = @DId 
						AND p.BillingMethodID = 4
						AND p.FlatFeeNextDate IS NOT NULL
						AND p.FlatFeeNextDate >= @BeginDate
						AND p.FlatFeeNextDate <= @EndDate
						AND dbo.fxGetRetainerAmount(@DId, p.AccountID, pr.ProjectId, pr.TechId, @BeginDate, @EndDate) >= 0						
						AND pr.ProjectId = @ProjectID
						AND @btCfgProject = 1
					ORDER BY
						p.FlatFeeNextDate DESC
					
					INSERT INTO InvoiceRetainer (DId, InvoiceId, TechId, Amount, TechStart, TechEnd, LoggedHours, LogsCount, FullAmount)
					SELECT
						@DId AS DId,
						@InvoiceID AS InvoiceId,
						pr.TechId,
						dbo.fxGetRetainerAmount(@DId, p.AccountID, pr.ProjectId, pr.TechId, @BeginDate, @EndDate) AS Amount,
						pr.StartDate, pr.EndDate,
						dbo.fxGetProjectLoggedHours(@DId, p.AccountID, pr.ProjectId, @BeginDate, @EndDate, pr.TechId),
						dbo.fxGetProjectTimeLogsCount(@DId, p.AccountID, pr.ProjectId, @BeginDate, @EndDate, pr.TechId),
						pr.Amount
					FROM 
						ProjectRetainer pr
							INNER JOIN Project p ON pr.DId = p.CompanyID AND pr.ProjectId = p.ProjectID
					WHERE 
						pr.DId = @DId 
						AND p.BillingMethodID = 4
						AND p.FlatFeeNextDate IS NOT NULL
						AND p.FlatFeeNextDate >= @BeginDate
						AND p.FlatFeeNextDate <= @EndDate
						AND dbo.fxGetRetainerAmount(@DId, p.AccountID, pr.ProjectId, pr.TechId, @BeginDate, @EndDate) >= 0						
						AND pr.ProjectId = @ProjectID
						AND @btCfgProject = 1
				END
				
				-- additional amount				
				SELECT @RetainerAmount = SUM(Amount)
				FROM InvoiceRetainer
				WHERE DId = @DId AND InvoiceId = @InvoiceID

				--move retainers time logs to 0 bill rate
				UPDATE [TicketTime]
				SET 
					[InvoiceId] = @InvoiceID,
					[BillRate] = 0
				FROM
					TicketTime tt
				INNER JOIN 
					tbl_ticket tkt ON tt.DepartmentId = tkt.company_id AND tt.TicketId = tkt.Id
				WHERE 
					tt.[DepartmentId] = @DId						
					AND
					tt.[InvoiceId] IS NULL
					AND
					tt.[Deleted] = 0
					AND
					tt.[Date] BETWEEN @BeginDate AND @EndDate
					AND dbo.fxGetRetainerAmount(@DId, @AccountID, @ProjectID, tt.UserId, @BeginDate, @EndDate) >= 0						
					AND 
					(dbo.fxGetIsTimeLogBillable(@DId, @AccountID, tkt.ProjectID,
						tt.TaskTypeId, tt.UserId, 0, 0, 0) = 0)
					AND
					(CASE 
						WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, tkt.ProjectID) > 0)
						THEN
							CASE
								WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, tkt.ProjectID) = @ProjectID)
								THEN 1 ELSE 0
							END
						ELSE
							CASE
								WHEN @ProjectID IS NULL
								THEN 1 ELSE 0
							END
					END = 1)
					AND 
					(@btCfgProject = 1 OR (@btCfgProject <> 1 AND tkt.ProjectID IS NULL))	
					AND
					(ISNULL(tkt.intAcctId, -1) = ISNULL(@AccountID, -1))



				UPDATE [ProjectTime]
				SET [InvoiceId] = @InvoiceID,				
					[BillRate] = 0
				FROM
					ProjectTime pt
				LEFT OUTER JOIN 
					Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID
				WHERE 
					pt.[DepartmentId] = @DId
					AND
					pt.[InvoiceId] IS NULL
					AND
					pt.[Deleted] = 0
					AND
					(@btCfgProject = 1 OR (@btCfgProject <> 1 AND pt.ProjectId IS NULL))
					AND
					pt.[Date] BETWEEN @BeginDate AND @EndDate
					AND dbo.fxGetRetainerAmount(@DId, @AccountID, @ProjectID, pt.UserId, @BeginDate, @EndDate) >= 0						
					AND 
					(dbo.fxGetIsTimeLogBillable(@DId, @AccountID, @ProjectID, pt.TaskTypeId, pt.UserId, 0, 0, 0) = 0)					
					AND
					ISNULL(ISNULL(p.AccountID, pt.AccountID), -1) = ISNULL(@AccountID, -1)	
					AND
					CASE 
						WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, pt.ProjectID) > 0)
						THEN 
							CASE 
								WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, pt.ProjectID) = @ProjectID)
								THEN 1 ELSE 0
							END
						ELSE CASE
							WHEN @ProjectID IS NULL
							THEN 1 ELSE 0
						END
					END = 1		
			END
			-- End Retainer section

			UPDATE [TicketTime]
			SET 
				[InvoiceId] = @InvoiceID,
				[BillRate] = dbo.fxGetTimeLogBillableRate(@DId, @AccountID, @ProjectID, tt.TaskTypeId, tt.UserId)				
			FROM
				TicketTime tt
			INNER JOIN 
				tbl_ticket tkt ON tt.DepartmentId = tkt.company_id AND tt.TicketId = tkt.Id
			WHERE 
				tt.[DepartmentId] = @DId						
				AND
				tt.[InvoiceId] IS NULL
				AND
				tt.[Deleted] = 0
				AND 
				(@btCfgProject = 1 OR (@btCfgProject <> 1 AND tkt.ProjectID IS NULL))
				AND
				tt.[Date] BETWEEN @BeginDate AND @EndDate
				AND 
				(dbo.fxGetIsTimeLogBillable(@DId, @AccountID, tkt.ProjectID,
					tt.TaskTypeId, tt.UserId, 0, 0, 0) = 1)				
				AND
				(CASE 
					WHEN (dbo.fxGetParentBMProject(@DId, @AccountID,tkt.ProjectID) > 0)
					THEN
						CASE
							WHEN (dbo.fxGetParentBMProject(@DId, @AccountID,tkt.ProjectID) = @ProjectID)
							THEN 1 ELSE 0
						END
					ELSE
						CASE
							WHEN @ProjectID IS NULL
							THEN 1 ELSE 0
						END
				END = 1)
				AND
				(ISNULL(tkt.intAcctId, -1) = ISNULL(@AccountID, -1))

			UPDATE [ProjectTime]
			SET [InvoiceId] = @InvoiceID,				
				[BillRate] = dbo.fxGetTimeLogBillableRate(@DId, @AccountID, @ProjectID, pt.TaskTypeId, pt.UserId)
			FROM ProjectTime pt
			LEFT OUTER JOIN 
				Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID
			WHERE 
				pt.[DepartmentId] = @DId
				AND
				pt.[InvoiceId] IS NULL
				AND
				pt.[Deleted] = 0
				AND
				(@btCfgProject = 1 OR (@btCfgProject <> 1 AND pt.ProjectId IS NULL))
				AND
				pt.[Date] BETWEEN @BeginDate AND @EndDate
				AND 
				(dbo.fxGetIsTimeLogBillable(@DId, @AccountID, @ProjectID, pt.TaskTypeId, pt.UserId, 0, 0, 0) = 1)
				AND
				ISNULL(ISNULL(p.AccountID, pt.AccountID), -1) = ISNULL(@AccountID, -1)
				AND				
				CASE 
					WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, pt.ProjectID) > 0)
					THEN 
						CASE 
							WHEN (dbo.fxGetParentBMProject(@DId, @AccountID, pt.ProjectID) = @ProjectID)
							THEN 1 ELSE 0
						END
					ELSE CASE
							WHEN @ProjectID IS NULL
							THEN 1 ELSE 0
						END
				END = 1

			SELECT 				
				@TicketAmount = SUM(tt.Hours * tt.BillRate)
			FROM
				TicketTime tt
			WHERE 
				tt.DepartmentId = @DId			
				AND
				tt.InvoiceId = @InvoiceID
				AND
				tt.BillRate >= 0				

			SELECT 				
				@ProjectAmount = SUM(pt.Hours * pt.BillRate)
			FROM
				ProjectTime pt
			WHERE 
				pt.DepartmentId = @DId			
				AND
				pt.InvoiceId = @InvoiceID
				AND
				pt.BillRate >= 0
		END

		UPDATE
			TicketTravelCosts
		SET
			InvoiceId = @InvoiceID
		FROM
			TicketTravelCosts ttc
		INNER JOIN tbl_ticket t ON ttc.DepartmentId = t.company_id AND ttc.TicketId = t.Id
		WHERE
			ttc.DepartmentId = @DId 
			AND ttc.InvoiceId IS NULL
			AND ttc.Date >= @BeginDate
			AND ttc.Date <= @EndDate
			AND
			ISNULL(t.intAcctId, -1) = ISNULL(@AccountID, -1)
			AND
			(@btCfgProject = 1 OR (@btCfgProject <> 1 AND t.ProjectID IS NULL))
			AND
			(CASE 
			WHEN (dbo.fxGetParentBMProject(@DId, @AccountID,t.ProjectID) > 0)
			THEN
				CASE
					WHEN (dbo.fxGetParentBMProject(@DId, @AccountID,t.ProjectID) = @ProjectID)
					THEN 1 ELSE 0
				END
			ELSE
				CASE
					WHEN @ProjectID IS NULL
					THEN 1 ELSE 0
				END
				END = 1)

		UPDATE
			TicketMiscCosts
		SET
			InvoiceId = @InvoiceID
		FROM
			TicketMiscCosts ttc
		INNER JOIN tbl_ticket t ON ttc.UserId = t.User_id AND ttc.TicketId = t.Id
		WHERE
			ttc.UserId = @UserId 
			AND ttc.InvoiceId IS NULL
			AND ttc.dtDate >= @BeginDate
			AND ttc.dtDate <= @EndDate

		-- Calculate totals
		SELECT 
			@TotalTicketHours = SUM(tt.Hours),			
			@TicketTimeLogsCount = COUNT(tt.Id)
		FROM
			TicketTime tt
		WHERE 
			tt.DepartmentId = @DId			
			AND
			tt.InvoiceId = @InvoiceID
			AND
			tt.BillRate >= 0				

		SELECT 
			@TotalProjectHours = SUM(pt.Hours),			
			@ProjectTimeLogsCount = COUNT(pt.Id)
		FROM
			ProjectTime pt
		WHERE 
			pt.DepartmentId = @DId			
			AND
			pt.InvoiceId = @InvoiceID
			AND
			pt.BillRate >= 0


		SELECT 				
			@TravelCost = SUM(ttc.Total)
		FROM
			TicketTravelCosts ttc
		WHERE 
			ttc.DepartmentId = @DId			
			AND
			ttc.InvoiceId = @InvoiceID	

		IF @CalculateRange = '1'
		 BEGIN
			SELECT 
				@BeginDateCalculated = MIN(InvoiceTimeLog.TimeLogDate), 
				@EndDateCalculated = MAX(InvoiceTimeLog.TimeLogDate) 
			FROM (SELECT 
				tt.Date AS TimeLogDate
			FROM
				TicketTime tt
			WHERE 
				tt.DepartmentId = @DId			
				AND
				tt.InvoiceId = @InvoiceID
			UNION ALL
			SELECT 
				pt.Date AS TimeLogDate
			FROM
				ProjectTime pt
			WHERE 
				pt.DepartmentId = @DId			
				AND
				pt.InvoiceId = @InvoiceID
			UNION ALL
			SELECT 				
				ttc.Date AS TimeLogDate
			FROM
				TicketTravelCosts ttc
			WHERE 
				ttc.DepartmentId = @DId			
				AND
				ttc.InvoiceId = @InvoiceID) InvoiceTimeLog
				
			IF @BeginDateRetainerCalculated IS NOT NULL
				BEGIN
					IF @BeginDateCalculated IS NULL
						SET @BeginDateCalculated = @BeginDateRetainerCalculated
					ELSE
						BEGIN
							IF @BeginDateRetainerCalculated < @BeginDateCalculated
								SET @BeginDateCalculated = @BeginDateRetainerCalculated
						END
				END
				
			IF @EndDateRetainerCalculated IS NOT NULL
				BEGIN
					IF @EndDateCalculated IS NULL
						SET @EndDateCalculated = @EndDateRetainerCalculated
					ELSE
						BEGIN
							IF @EndDateRetainerCalculated > @EndDateCalculated
								SET @EndDateCalculated = @EndDateRetainerCalculated
						END
				END
			
			IF @BeginDateCalculated IS NULL
				SET @BeginDateCalculated = @BeginDate
				
			IF @EndDateCalculated IS NULL
				SET @EndDateCalculated = @EndDate
			
		 END

		UPDATE [Invoice]
		SET [TotalHours] = ISNULL(@TotalTicketHours, 0) + ISNULL(@TotalProjectHours, 0), 
			[Amount] = ISNULL(@TicketAmount, 0) + ISNULL(@ProjectAmount, 0) + ISNULL(@RetainerAmount, 0),
			[TimeLogsCount] = ISNULL(@TicketTimeLogsCount, 0) + ISNULL(@ProjectTimeLogsCount, 0),
			[BillingMethodID] = @BillingMethodID,
			[FlatFeeNextDate] = @NextDate,
			[QBAccountAlias] = @QBAccountAlias,
			[QBItemAlias] = @QBItemAlias,
			TravelCost = @TravelCost,
			[BeginDate] = @BeginDateCalculated,
			[EndDate] = @EndDateCalculated
		WHERE 
			[Invoice].[DId] = @DId
			AND
			[Invoice].[Id] = @InvoiceID

		-- refresh next date
		IF (@BillingMethodID = 1 AND @NextDate IS NOT NULL AND @Mode IS NOT NULL)
			BEGIN
				IF @Mode = 0 
					SET @NewNextDate = NULL
				ELSE
					SET @NewNextDate = DATEADD(m, 1, @NextDate)
				IF @ProjectID IS NULL
					UPDATE
						AccountRate
					SET
						FlatFeeNextDate = @NewNextDate
					WHERE
						CompanyID = @DId
						AND ISNULL(AccountID, -1) = ISNULL(@AccountID, -1)
				ELSE
					UPDATE
						Project
					SET						
						FlatFeeNextDate = @NewNextDate						
					WHERE
						CompanyID = @DId
						AND ProjectID = @ProjectID
			END
	END
GO
PRINT N'Creating [dbo].[sp_InsertJunkEmail]...';


GO
CREATE PROCEDURE dbo.sp_InsertJunkEmail
	(
		@DId int,
		@intUId int,
		@vchEmail nvarchar(100)
	)
AS
	SET NOCOUNT ON
	
	IF NOT EXISTS(SELECT 'true' FROM JunkMailRules WHERE DId=@DId AND vchEmail=@vchEmail)
		INSERT INTO JunkMailRules (DId, dtUpdated, intUId, vchEmail) VALUES (@DId, getutcdate(), @intUId, @vchEmail)
	ELSE
		UPDATE JunkMailRules SET dtUpdated=getutcdate(), intUId=@intUId WHERE DId=@DId and vchEmail=@vchEmail
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_InsertKBQuestion]...';


GO
CREATE Procedure dbo.sp_InsertKBQuestion
	(
		@DId int,
		@TktID int,
		@KBAlternateId nvarchar(255)
	)
As
	
	UPDATE tbl_ticket
		SET
			[KB] = 1
           ,[KBType] = 2
           ,[KBPublishLevel] = 0
           ,KBAlternateId = @KBAlternateId
	WHERE
		[company_id] = @DId
		AND
		ID = @TktID
GO
PRINT N'Creating [dbo].[sp_InsertKBResponse]...';


GO
CREATE PROCEDURE dbo.sp_InsertKBResponse
(
		@DId int,
		@TId int,
		@vchNote nvarchar(max),
		@To nvarchar(1000) = NULL,
		@UserName nvarchar(100),
		@UserEmail nvarchar(50)
)
AS
	DECLARE @Status varchar(15)
	SET @Status = NULL
	
	SELECT
		@Status = Status
	FROM 
		tbl_ticket 
	WHERE 
		company_id=@DId AND id=@TId
	
	IF @Status IS NOT NULL
	 BEGIN
	  IF @Status='Closed' OR @Status='On Hold'
		BEGIN
			UPDATE 
				tbl_ticket 
			SET 
				Status = 'Open', 
				btInitResponse=0, 
				UpdatedTime=getutcdate() 
			WHERE 
				company_id = @DId 
				AND 
				Id = @TId
		END
		
		INSERT 
			INTO TicketLogs 
				(DId,
				TId,
				dtDate,
				vchType,
				vchNote,
				[To],
				UserName,
				UserEmail) 
			VALUES (
				@DId,
				@TId,
				getutcdate(),
				'Response',
				@vchNote,
				@To,
				@UserName,
				@UserEmail)
		
		UPDATE 
			tbl_ticket 
		SET 
			UpdatedTime=getutcdate() 
		WHERE 
			company_id = @DId 
			AND 
			Id = @TId
	 END
GO
PRINT N'Creating [dbo].[sp_InsertKNowledgebaseResponse]...';


GO
CREATE Procedure [dbo].[sp_InsertKNowledgebaseResponse]

		(
			@UserId int,
			@KBId int,
			@Comment ntext,
			@vchFullName nvarchar(100),
			@DepartmentId int
			
		)

	As
		INSERT INTO tbl_knowledgeBaseResponses (knowledgebase_Id, dtDate, Comment, vchPostedBy, loginCompanyJunc_id, DepartmentId) VALUES 
			(@KBId, getutcdate() ,@Comment, @vchFullName, @userId, @DepartmentId)
GO
PRINT N'Creating [dbo].[sp_InsertLocationAudit]...';


GO
CREATE Procedure [dbo].[sp_InsertLocationAudit]
	(
		@DId int,		
		@UserId int,
		@LocationId	int
	)
As

	DECLARE @NowTime datetime 
	SET @NowTime = getutcdate()
	
	IF @LocationId = 0
		SET @LocationId = NULL

	INSERT INTO LocationAuditHistory (DId, LocationId, AuditDate, AuditorId, Created, CreatedBy)	
	VALUES (@DId, @LocationId, @NowTime, @UserId, @NowTime, @UserId)
		
	DECLARE @LocationAuditId int
	SET @LocationAuditId = @@Identity

	return @LocationAuditId
GO
PRINT N'Creating [dbo].[sp_InsertLocationLevel]...';


GO

CREATE PROCEDURE sp_InsertLocationLevel
	(
		@DId int,
		@LocationId int,
		@tintLevel tinyint	
	)
AS
	IF @tintLevel > 1 AND NOT EXISTS(SELECT 'true' FROM LocationLevels WHERE DId=@DId AND LocationId=@LocationId AND tintLevel=@tintLevel)
		BEGIN
			DECLARE @intLastResortId int, @tintRoutingType int, @tintLocationType int
			SELECT @intLastResortId=intLastResortId, @tintRoutingType=tintRoutingType, @tintLocationType=tintLocationType FROM tbl_Locations WHERE DId=@DId AND id=@LocationId
		
			INSERT INTO LocationLevels (DId, LocationId, tintLevel, intLastResortId, tintRoutingType, tintLocationType) VALUES (@DId, @LocationId, @tintLevel, @intLastResortId, @tintRoutingType, @tintLocationType)
		
		END
	RETURN
GO
PRINT N'Creating [dbo].[sp_InsertLogin]...';


GO
CREATE Procedure dbo.sp_InsertLogin
	(
		@LoginId int OUTPUT,
		@Email nvarchar(50),
		@FirstName nvarchar(50),
		@LastName nvarchar(50),
		@Password nvarchar(50),
		@Title nvarchar(30),
		@Phone nvarchar(20) = null,
		@MobilePhone nvarchar(20) = null
	)
As
	DECLARE @Id int
	
		IF NOT @LoginId IS NULL
		BEGIN
			IF @Password IS NULL
				SELECT @Password=Password FROM tbl_Logins WHERE id=@LoginId
			UPDATE tbl_Logins SET Email=@Email, FirstName=@FirstName, LastName=@LastName, Password=@Password, Title=@Title, Phone=@Phone, MobilePhone=@MobilePhone WHERE id=@LoginId
		END
		ELSE
			BEGIN
				INSERT INTO tbl_Logins (Email, FirstName, LastName, Password, Title, Phone, MobilePhone) VALUES (@Email, @FirstName, @LastName, @Password, @Title, @Phone, @MobilePhone)
				SET @LoginId = @@identity
			END
GO
PRINT N'Creating [dbo].[sp_InsertLoginCompanyJunc]...';


GO

CREATE Procedure sp_InsertLoginCompanyJunc
	(
		@DId int,
		@LoginId int,
		@UserType tinyint
	)
As
	/*Check to make sure it does not exist first */
	DECLARE @JuncId int

	IF EXISTS(SELECT id FROM tbl_LoginCompanyJunc WHERE company_id = @DId AND login_id = @LoginId)
			set @JuncId = (SELECT id FROM tbl_LoginCompanyJunc WHERE company_id = @DId AND login_id = @LoginId)
	ELSE
		BEGIN
			INSERT INTO tbl_LoginCompanyJunc (login_id, company_id, UserType_Id) VALUES (@LoginId, @DId, @UserType)
			SET @JuncId = (SELECT @@identity)
		END
		
		return @JuncId
GO
PRINT N'Creating [dbo].[sp_InsertLoginToken]...';


GO
CREATE PROCEDURE dbo.sp_InsertLoginToken
	(
		@Token int,
		@Seed nvarchar(50)
	)
AS
	INSERT INTO LoginTokens (Token, Seed, dtExpires) VALUES(@Token, @Seed, getutcdate())
	RETURN
GO
PRINT N'Creating [dbo].[sp_InsertMailGroup]...';


GO
CREATE Procedure dbo.sp_InsertMailGroup
	(
		@DepartmentId int,
		@Name nvarchar(50)
	)
As
	IF NOT EXISTS(Select 'true' FROM MailGroups WHERE DepartmentId = @DepartmentId AND Name = @Name)
		INSERT INTO MailGroups (DepartmentId, Name) VALUES (@DepartmentId, @Name)
	ELSE
		raiserror('Can''t add mail group! The %s already exists.',16,1, @Name)
	return (SELECT @@identity)
GO
PRINT N'Creating [dbo].[sp_InsertMiscCost]...';


GO
CREATE Procedure dbo.sp_InsertMiscCost
	(
		@DId int,
		@UId int,
		@TId int,
		@Amount money,
		@Note nvarchar(100)
	)
As
	INSERT INTO TicketMiscCosts (TicketId, UserId, Amount, Note, dtDate) VALUES (@TId, @UId, @Amount, @Note, getutcdate())
	
	DECLARE @MiscCost money
	SET @MiscCost = (SELECT sum(Amount) FROM TicketMiscCosts WHERE TicketId = @TId)	
	UPDATE tbl_ticket SET MiscCost = @MiscCost, UpdatedTime=getutcdate() WHERE company_id=@DId AND Id=@TId
	return
GO
PRINT N'Creating [dbo].[sp_InsertProject]...';


GO

CREATE PROCEDURE [dbo].[sp_InsertProject]
(
		@CompanyID int,
		@AccountID int = NULL,
		@ParentID int = NULL,
		@Name nvarchar(50),
		@Description ntext = NULL,
		@InternalPMID int = NULL,
		@ClientPMID int = NULL,
		@Active bit = NULL,
		@EstimatedHours int = NULL,
		@EstimatedCost decimal(12, 4) = NULL,
		@EstimatedInvoicedAmount decimal(12, 4) = NULL,
		@vchCust1 nvarchar(1000) = NULL,
		@vchCust2 nvarchar(1000) = NULL,
		@vchCust3 nvarchar(1000) = NULL,
		@vchCust4 nvarchar(1000) = NULL,
		@vchCust5 nvarchar(1000) = NULL,
		@vchCust6 nvarchar(1000) = NULL,
		@vchCust7 nvarchar(1000) = NULL,
		@vchCust8 nvarchar(1000) = NULL,
		@vchCust9 nvarchar(1000) = NULL,
		@vchCust10 nvarchar(1000) = NULL,
		@vchCust11 nvarchar(1000) = NULL,
		@vchCust12 nvarchar(1000) = NULL,
		@vchCust13 nvarchar(1000) = NULL,
		@vchCust14 nvarchar(1000) = NULL,
		@vchCust15 nvarchar(1000) = NULL,
		@dtCust1 smalldatetime = NULL,
		@dtCust2 smalldatetime = NULL,
		@SupGroupId int = NULL,
		@PriorityId int = NULL
)
AS

	IF @AccountId<=0
		SET @AccountId=NULL
		
	DECLARE @ProjectID int
		
	INSERT INTO
		[Project]
		([CompanyID],
		[AccountID],
		[ParentID],
		[Name],
		[Description],
		[InternalPMID],
		[ClientPMID],
		[Active],
		[EstimatedHours],
		[EstimatedCost],
		[EstimatedInvoicedAmount],
		vchCust1,  
		vchCust2, 
		vchCust3,  
		vchCust4,  
		vchCust5,  
		vchCust6,  
		vchCust7,  
		vchCust8,  
		vchCust9,  
		vchCust10,  
		vchCust11,  
		vchCust12,  
		vchCust13,  
		vchCust14,  
		vchCust15,  
		dtCust1,  
		dtCust2,
		SupGroupId,
		PriorityId
		)
	VALUES
	(
		@CompanyID,
		@AccountID,
		@ParentID,
		@Name,
		@Description,
		@InternalPMID,
		@ClientPMID,
		@Active,
		@EstimatedHours,
		@EstimatedCost,
		@EstimatedInvoicedAmount,
		@vchCust1, 
		@vchCust2, 
		@vchCust3, 
		@vchCust4, 
		@vchCust5, 
		@vchCust6, 
		@vchCust7, 
		@vchCust8, 
		@vchCust9, 
		@vchCust10, 
		@vchCust11, 
		@vchCust12, 
		@vchCust13, 
		@vchCust14, 
		@vchCust15, 
		@dtCust1, 
		@dtCust2,
		@SupGroupId,
		@PriorityId
	)
	
	SET @ProjectID = (SELECT @@Identity)
	RETURN ISNULL(@ProjectID, 0)
GO
PRINT N'Creating [dbo].[sp_InsertProjectPriority]...';


GO

CREATE PROCEDURE [dbo].[sp_InsertProjectPriority] 
(
	@DId int,
	@Name nvarchar(50),
	@Description nvarchar(2000)
)
AS
BEGIN
	
	DECLARE @NextPriorityLevel tinyint
	
	SET @NextPriorityLevel = (SELECT max(tintPriority) FROM ProjectPriority WHERE DId=@DID)
	
	IF @NextPriorityLevel IS NULL
		SET @NextPriorityLevel = 1
	ELSE
		SET @NextPriorityLevel = @NextPriorityLevel + 1
	
	IF EXISTS(SELECT 'true' FROM ProjectPriority WHERE DId=@DId)
		INSERT INTO ProjectPriority (DId, tintPriority, Name, Description, bitDefault) VALUES (@DId, @NextPriorityLevel, @Name, @Description, 0)
	ELSE
		INSERT INTO ProjectPriority (DId, tintPriority, Name, Description, bitDefault) VALUES (@DId, @NextPriorityLevel, @Name, @Description, 1)
	
	
END
GO
PRINT N'Creating [dbo].[sp_InsertProjectRetainer]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertProjectRetainer]
(
		@CompanyID int,
        @ProjectID int,
        @TechID int
)
AS

	INSERT INTO ProjectRetainer
           (DId
           ,ProjectId
           ,TechId
		   ,Amount
		   ,StartDate)
     VALUES
		(
		@CompanyID,
		@ProjectID,
		@TechID,
		0,
		getutcdate()
		)
		


set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_InsertProjectTaskTypeRate]...';


GO
CREATE PROCEDURE dbo.sp_InsertProjectTaskTypeRate
(
		@CompanyID int,
        @ProjectID int,
        @TaskTypeID int,
		@HourlyRate smallmoney
)
AS

	IF @HourlyRate < 0
		SET @HourlyRate = NULL
		
	INSERT INTO ProjectTaskTypeRate
           (CompanyID
           ,ProjectID
           ,TaskTypeID
		   ,HourlyRate)
     VALUES
		(
		@CompanyID,
		@ProjectID,
		@TaskTypeID,
		@HourlyRate
		)
GO
PRINT N'Creating [dbo].[sp_InsertProjectTech]...';


GO
CREATE PROCEDURE dbo.sp_InsertProjectTech
(
		@CompanyID int,
        @ProjectID int,
        @TechID int
)
AS

	IF @TechID = 0
		SET @TechID = NULL

	INSERT INTO ProjectTech
           (CompanyID
           ,ProjectID
           ,TechID)
     VALUES
		(
		@CompanyID,
		@ProjectID,
		@TechID
		)
		



set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_InsertProjectTime]...';


GO
CREATE Procedure dbo.sp_InsertProjectTime
(		
	@DepartmentID int,
	@ProjectID int,
	@UserID int,
	@TaskTypeID int,
	@Date smalldatetime,
	@Hours decimal(10, 4),
	@Note nvarchar(512),
	@StartTime smalldatetime,
	@StopTime smalldatetime,
	@CreatedTime smalldatetime,
	@CreatedBy int,
	@TimeOffset decimal,
	@HourlyRate smallmoney,
	@AccountID int
)
AS

	DECLARE @insTaskType int
	IF (@TaskTypeID = 2147483647) SET @insTaskType = NULL
	ELSE SET @insTaskType = @TaskTypeID
		
	INSERT INTO
		[ProjectTime]
		([DepartmentId],
		[ProjectId],
		[UserId],
		[TaskTypeId],
		[Date],
		[Hours],
		[Note],
		[StartTimeUTC],
		[StopTimeUTC],
		[Downloaded],
		[CreatedTimeUTC],
		[CreatedBy],
		[Deleted],
		[LocalTimeZoneOffset],
		[HourlyRate],
		[AccountID]
		)
	VALUES
	(
		@DepartmentID,
		@ProjectID,
		@UserID,
		@insTaskType,
		@Date,
		@Hours,
		@Note,
		@StartTime,
		@StopTime,
		0,
		@CreatedTime,
		@CreatedBy,
		0,
		@TimeOffset,
		@HourlyRate,
		@AccountID
	)
GO
PRINT N'Creating [dbo].[sp_InsertProjectUser]...';


GO
CREATE PROCEDURE dbo.sp_InsertProjectUser
(
		@CompanyID int,
        @ProjectID int,
        @UserID int,
	@SubscribeEmail bit
)
AS

	INSERT INTO UserProjects
           (DepartmentId
           ,ProjectID
           ,UserId
	   ,SubscribeEmail)
     VALUES
		(
		@CompanyID,
		@ProjectID,
		@UserID,
		@SubscribeEmail
		)
GO
PRINT N'Creating [dbo].[sp_InsertQueueMember]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.sp_InsertQueueMember
	-- Add the parameters for the stored procedure here
	@DepartmentId int, 
	@QueueId int,
	@UserId int,
	@UserEmail nvarchar(500)
AS
BEGIN

IF @UserId < 1
	SET @UserId = NULL
IF @UserEmail = ''
 SET @UserEmail = NULL
 
IF @UserId IS NOT NULL OR @UserEmail IS NOT NULL
 BEGIN
	INSERT INTO QueueMembers(DepartmentId, QueueId, UserId, UserEmail) VALUES (@DepartmentId, @QueueId, @UserId, @UserEmail)
 END
END
GO
PRINT N'Creating [dbo].[sp_InsertRatePlan]...';


GO
CREATE Procedure [dbo].[sp_InsertRatePlan]
	(	
		@DepartmentID int,
		@Name nvarchar(100),		
		@NewRatePlanId int = null OUTPUT
	)

As	
	INSERT INTO RatePlan (RatePlan.Name, DepartmentID) VALUES (@Name, @DepartmentID)		
	SET @NewRatePlanId = (SELECT @@Identity)
	RETURN @NewRatePlanId
GO
PRINT N'Creating [dbo].[sp_InsertRelatedTicket]...';


GO
CREATE Procedure [dbo].[sp_InsertRelatedTicket]
	(
		@DId int,
		@TicketId int,
		@RelatedTicketId int,
		@RelationType tinyint
	)
As
	IF NOT EXISTS(SELECT * FROM RelatedTickets WHERE DId=@DId AND TicketId=@TicketId AND RelatedTicketId=@RelatedTicketId)
	BEGIN
		INSERT INTO RelatedTickets (DId, TicketId, RelatedTicketId, RelationType) VALUES (@DId, @TicketId, @RelatedTicketId, @RelationType)
		UPDATE tbl_ticket SET UpdatedTime=getutcdate() WHERE company_id = @DId AND id = @TicketId
		IF @RelationType=0 --Master
			INSERT INTO RelatedTickets (DId, TicketId, RelatedTicketId, RelationType) VALUES (@DId, @RelatedTicketId, @TicketId, 1)
		ELSE IF @RelationType=1 --Sub
			INSERT INTO RelatedTickets (DId, TicketId, RelatedTicketId, RelationType) VALUES (@DId, @RelatedTicketId, @TicketId, 0)
		ELSE IF @RelationType=2	--Related	
			INSERT INTO RelatedTickets (DId, TicketId, RelatedTicketId, RelationType) VALUES (@DId, @RelatedTicketId, @TicketId, 2)
		RETURN 1
	END
	ELSE
		RETURN 0





/****** Object:  StoredProcedure [dbo].[sp_DeleteRelatedTicket]    Script Date: 02/15/2011 16:57:52 ******/
SET ANSI_NULLS OFF
GO
PRINT N'Creating [dbo].[sp_InsertResolution]...';


GO
--VGOOZ: 18-NOV-2004
--Add new resolution

CREATE Procedure dbo.sp_InsertResolution
	(
		@DepartmentId int,
		@ResolutionName nvarchar(50),
		@btInactive bit,
		@btResolved bit,
		@UId int
	)
As
	IF NOT EXISTS(Select 'true' FROM ResolutionCats WHERE DId = @DepartmentId AND vchName = @ResolutionName)
		INSERT INTO ResolutionCats (DId, vchName, btInactive, btResolved, intCreated, dtCreated) VALUES (@DepartmentId, @ResolutionName, @btInactive, @btResolved, @UId, getutcdate())
	ELSE
		raiserror('Can''t add Resolution! The %s already exists.',16,1, @ResolutionName)
	return (SELECT ISNULL(@@identity, -1))
GO
PRINT N'Creating [dbo].[sp_InsertRoute]...';


GO

CREATE PROCEDURE sp_InsertRoute
	(
		@DId int,
		@tintRoute tinyint
	)
AS
	IF EXISTS(SELECT 'true' FROM RoutingOrder WHERE DId=@DId AND tintRoute=@tintRoute)
		RETURN -1
	ELSE
		BEGIN
			DECLARE @MaxOrder tinyint
			SET @MaxOrder = (SELECT Max(tintOrder) FROM RoutingOrder WHERE DId=@DId)
			IF @MaxOrder IS NULL
				SET @MaxOrder=0
			
			SET @MaxOrder=@MaxOrder+1
			
			INSERT INTO RoutingOrder(DId,tintOrder,tintRoute) VALUES (@DId,@MaxOrder,@tintRoute)
			
			RETURN 0
		END
GO
PRINT N'Creating [dbo].[sp_InsertSubAsset]...';


GO
CREATE Procedure dbo.sp_InsertSubAsset
	(
		@DepartmentId int,
		@AssetId int,
		@SubAssetId int,
		@Description nvarchar(255)
	)
As

	IF ((@DepartmentId IS NOT NULL) AND (@AssetId IS NOT NULL) AND (@SubAssetId IS NOT NULL))
	BEGIN
		INSERT INTO AssetSubAssets (DId, AssetId, AssetChildId, Description) VALUES (@DepartmentId, @AssetId, @SubAssetId, @Description)
		return (SELECT @@Identity)
	END

	return -1
GO
PRINT N'Creating [dbo].[sp_InsertSupportPortalLink]...';


GO



CREATE  PROCEDURE [dbo].[sp_InsertSupportPortalLink]
(
	@DId int,
	@AccountID int = null,
	@Title varchar(50),
    @Url varchar(500),
    @OrderIndex tinyint,
    @Bold bit
)

As
	
	INSERT INTO [SupportPortalLinks]
           ([DId]
           ,[AccountID]
           ,[Title]
           ,[Url]
           ,[OrderIndex]
           ,[Bold])
     VALUES
           (@DId
           ,@AccountID
           ,@Title
           ,@Url
           ,@OrderIndex
           ,@Bold)
GO
PRINT N'Creating [dbo].[sp_InsertTaskType]...';


GO
CREATE Procedure [dbo].[sp_InsertTaskType]
	(
		@DepartmentID int,
		@TaskTypeName nvarchar(50),
		@HourlyRate smallmoney,
		@Active bit,
		@AppliesToTickets bit,
		@AppliesToProjects bit,
		@QBAccount nvarchar(200),
		@QBItem nvarchar(200),
		@Cost smallmoney
	)

As
	DECLARE @TaskTypeID int
	
	INSERT INTO TaskType (TaskTypeName, HourlyRate, DepartmentID, Active, AppliesToTickets, AppliesToProjects, QBAccountAlias, QBItemAlias, EstimatedCost) 
	VALUES (@TaskTypeName, @HourlyRate, @DepartmentID, @Active, @AppliesToTickets, @AppliesToProjects, @QBAccount, @QBItem, @Cost)
	
	SET @TaskTypeID = (SELECT @@Identity)
	RETURN ISNULL(@TaskTypeID, 0)


set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_InsertTaskTypeTech]...';


GO
CREATE PROCEDURE dbo.sp_InsertTaskTypeTech
(
		@CompanyID int,
        @TaskTypeID int,
        @TechID int
)
AS

	IF @TechID = 0
	BEGIN
		SET @TechID = NULL
		DELETE [TaskTypeTech]
		WHERE TaskTypeID = @TaskTypeID AND CompanyID = @CompanyID
	END 

	INSERT INTO TaskTypeTech
           (CompanyID
           ,TaskTypeID
           ,TechID)
     VALUES
		(
		@CompanyID,
		@TaskTypeID,
		@TechID
		)
		






SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[sp_InsertTaskTypeTechCost]...';


GO
CREATE Procedure dbo.sp_InsertTaskTypeTechCost
	(
		@DId int,
        @TaskTypeID int,
        @TechID int
)
AS

	DECLARE @DefaultCost smallmoney
	IF @TechID = 0
	BEGIN
		SELECT @DefaultCost = CAST(dbo.fxGetConfigValueStr(@DId, 'configHourlyRate') AS smallmoney)

		UPDATE TaskType
		SET
			EstimatedCost = @DefaultCost
		WHERE
			DepartmentID = @DId
			AND
			TaskTypeId = @TaskTypeID
	END 
	ELSE
	BEGIN		
		DELETE FROM [TaskTypeTechCost]
		WHERE
			DId = @DId
			AND
			TaskTypeId = @TaskTypeID
			AND
			TechId = @TechID
		
		SELECT
			@DefaultCost = EstimatedCost
		FROM
			TaskType
		WHERE
			DepartmentID = @DId
			AND
			TaskTypeId = @TaskTypeID
		IF (@DefaultCost IS NULL)
		BEGIN
			SELECT
				@DefaultCost = CASE WHEN L.configHourlyRate IS NULL
					THEN CAST(dbo.fxGetConfigValueStr(@DId, 'configHourlyRate') AS smallmoney)
					ELSE L.configHourlyRate
				END
			FROM tbl_LoginCompanyJunc L
					INNER JOIN tbl_Logins LO ON L.login_id = LO.id
					INNER JOIN tbl_company CO ON L.company_id=CO.company_id
			WHERE L.company_id = @DId AND L.id = @TechID
		END

		INSERT INTO TaskTypeTechCost
			(DId, TaskTypeId, TechId, Cost)
		VALUES
			(@DId, @TaskTypeID, @TechID, @DefaultCost)
	END
GO
PRINT N'Creating [dbo].[sp_InsertTicketAssignment]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_InsertTicketAssignment]
	@DepartmentId int,
	@TicketId int,
	@UserId int,
	@AssignmentType int,
	@IsPrimary bit = 0,
	@ReassignIfAssigned bit
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @IsAssigned bit
	SELECT @IsAssigned = 1 FROM TicketAssignment WHERE DepartmentId = @DepartmentId AND TicketId = @TicketId AND UserId = @UserId AND AssignmentType = @AssignmentType AND StopDate IS NULL
	
	IF @IsAssigned = 1 AND @ReassignIfAssigned = 1
		BEGIN
		UPDATE TicketAssignment SET StopDate = GETUTCDATE() WHERE DepartmentId = @DepartmentId AND TicketId = @TicketId AND UserId = @UserId AND AssignmentType = @AssignmentType AND StopDate IS NULL
		
		UPDATE tbl_ticket SET UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND id = @TicketId
		END
	ELSE
		IF @ReassignIfAssigned != 1 AND @IsAssigned = 1
			RETURN
			
	INSERT INTO TicketAssignment(DepartmentId, TicketId, UserId, AssignmentType, IsPrimary) VALUES (@DepartmentId, @TicketId, @UserId, @AssignmentType, @IsPrimary)
	UPDATE tbl_ticket SET UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND id = @TicketId
END





SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[sp_InsertTicketTravelCosts]...';


GO
CREATE PROCEDURE dbo.sp_InsertTicketTravelCosts
(
	@DepartmentId int,
	@TicketId int,
	@StartLocation nvarchar(250),
	@EndLocation nvarchar(250),
	@Distance int,
	@DistanceRate money,
	@Date smalldatetime,
	@Note nvarchar(250)
)
AS
	SET NOCOUNT ON;
	INSERT INTO TicketTravelCosts
           (DepartmentId
           ,TicketId
           ,StartLocation
           ,EndLocation
           ,Distance
           ,DistanceRate
		   ,Date
		   ,Note)
     VALUES
           (@DepartmentId
           ,@TicketId
           ,@StartLocation
           ,@EndLocation
           ,@Distance
           ,@DistanceRate
		   ,@Date
		   ,@Note)

	UPDATE tbl_ticket SET TravelCost = (SELECT sum(Total) FROM TicketTravelCosts WHERE DepartmentId = @DepartmentId AND TicketId = @TicketId), UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND id = @TicketId
GO
PRINT N'Creating [dbo].[sp_InsertTimeBill]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertTimeBill]
(
		@DId int,
		@UserId int,
		@TechId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime,
		@BillID int output
)
AS
	SET @BillID = 0

	INSERT INTO [TimeBill]
           ([DId]
           ,[BeginDate]
           ,[EndDate]
           ,[Date]
           ,[Exported]
           ,[TechID]
           ,[TotalHours]
           ,[Amount]
           ,[CreatedBy]
		   ,[TimeLogsCount])
     VALUES
           (@DId
           ,@BeginDate
           ,@EndDate
           ,getutcdate()
           ,0
           ,@TechId
           ,NULL
           ,NULL
           ,@UserId
		   ,NULL)

	IF (@@ROWCOUNT <> 0)
	BEGIN
		SET @BillID = @@IDENTITY
		UPDATE [TicketTime]
		SET [BillId] = @BillID
		WHERE 
			[TicketTime].[DepartmentId] = @DId
			AND
			[TicketTime].[UserId] = @TechId
			AND
			[TicketTime].[Deleted] = 0
			AND			
			[TicketTime].[BillId] IS NULL
			AND
			[TicketTime].[Date] BETWEEN @BeginDate AND @EndDate

		UPDATE [ProjectTime]
		SET [BillId] = @BillID
		WHERE 
			[ProjectTime].[DepartmentId] = @DId
			AND
			[ProjectTime].[UserId] = @TechId
			AND
			[ProjectTime].[Deleted] = 0
			AND
			[ProjectTime].[BillId] IS NULL
			AND
			[ProjectTime].[Date] BETWEEN @BeginDate AND @EndDate

		
		DECLARE @TotalTicketHours decimal(12, 4), @TotalProjectHours decimal(12, 4)
		DECLARE @TicketAmount money, @ProjectAmount money
		DECLARE @TicketTimeLogsCount int, @ProjectTimeLogsCount int

		SELECT 
			@TotalTicketHours = SUM(tt.Hours),
			@TicketAmount = SUM(tt.Hours * tt.HourlyRate),
			@TicketTimeLogsCount = COUNT(tt.Id)
		FROM
			TicketTime tt
		WHERE 
			tt.DepartmentId = @DId
			AND 
			tt.UserId = @TechId
			AND
			tt.BillId = @BillID

		SELECT 
			@TotalProjectHours = SUM(pt.Hours),
			@ProjectAmount = SUM(pt.Hours * pt.HourlyRate),
			@ProjectTimeLogsCount = COUNT(pt.Id)
		FROM
			ProjectTime pt
		WHERE 
			pt.DepartmentId = @DId
			AND 
			pt.UserId = @TechId
			AND
			pt.BillId = @BillID

		UPDATE [TimeBill]
		SET [TotalHours] = ISNULL(@TotalTicketHours, 0) + ISNULL(@TotalProjectHours, 0), 
			[Amount] = ISNULL(@TicketAmount, 0) + ISNULL(@ProjectAmount, 0),
			[TimeLogsCount] = ISNULL(@TicketTimeLogsCount, 0) + ISNULL(@ProjectTimeLogsCount, 0)
		WHERE 
			[TimeBill].[DId] = @DId
			AND
			[TimeBill].[Id] = @BillID
	END
GO
PRINT N'Creating [dbo].[sp_InsertTktLevel]...';


GO
CREATE PROCEDURE dbo.sp_InsertTktLevel
	(
		@DId int,
		@LevelName nvarchar(50) = NULL,
		@Description nvarchar(2000) = NULL,
		@intLastResort int,
		@tintRoutingType tinyint = 1
	)
AS
	DECLARE @NextLevel tinyint
	
	SET @NextLevel = (SELECT max(tintLevel) FROM TktLevels WHERE DId=@DID)
	
	IF @NextLevel IS NULL
		SET @NextLevel = 1
	ELSE
		SET @NextLevel = @NextLevel + 1
	
	IF @NextLevel < 10
		IF EXISTS(SELECT 'true' FROM TktLevels WHERE DId=@DId)
			INSERT INTO TktLevels (DId, tintLevel, intLastResortId, tintRoutingType, LevelName, Description) VALUES (@DId, @NextLevel, @intLastResort, @tintRoutingType, @LevelName, @Description)
		ELSE
			INSERT INTO TktLevels (DId, tintLevel, bitDefault, intLastResortId, tintRoutingType, LevelName, Description) VALUES (@DId, @NextLevel, 1, @intLastResort, @tintRoutingType, @LevelName, @Description)
	
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_InsertTktLog]...';


GO
CREATE PROCEDURE dbo.sp_InsertTktLog
	(
		@DId int,
		@TId int,
		@UId int,
		@vchType nvarchar(50),
		@vchNote nvarchar(max),
		@SystemGeneratedText nvarchar(max) = NULL,
		@TimeEntryID int = NULL,
		@To nvarchar(1000) = NULL
	)
AS
	SET NOCOUNT ON
	
	IF (@vchNote IS NOT NULL) AND (@SystemGeneratedText IS NOT NULL)
		SET @vchNote = @vchNote + '<br><br>' + @SystemGeneratedText
	ELSE IF (@SystemGeneratedText IS NOT NULL)
		SET @vchNote = @SystemGeneratedText
		
	IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@DId AND id=@TId)
		BEGIN
			INSERT INTO TicketLogs (DId,TId,UId,dtDate,vchType,vchNote,TicketTimeID, [To]) VALUES (@DId,@TId,@UId,getutcdate(),@vchType,@vchNote,@TimeEntryID, @To)
			RETURN @@Identity
		END
	return
GO
PRINT N'Creating [dbo].[sp_InsertToDoItemTemplate]...';


GO
CREATE PROCEDURE dbo.sp_InsertToDoItemTemplate
(
	@Id uniqueidentifier,
	@DId int,
	@ToDoListTemplateId uniqueidentifier,
	@Text nvarchar(1000),
	@AssignedId int = NULL,
	@HoursEstimatedRemaining decimal(10, 4) = NULL
)
AS		
	--Calculate Order
	DECLARE @OrderIndex int
	
	SELECT 
		@OrderIndex = ISNULL(COUNT(*), 0)
	FROM
		ToDoItemTemplate
	WHERE
		DId = @DId
		AND
		ToDoListTemplateId = @ToDoListTemplateId

	SET @OrderIndex = @OrderIndex + 1
	
	INSERT INTO ToDoItemTemplate
           (Id,
           [DId]
           ,ToDoListTemplateId
           ,[Text]
           ,[Order]
           ,AssignedId
           ,HoursEstimatedRemaining)
     VALUES
           (@Id,
           @DId
           ,@ToDoListTemplateId
           ,@Text
           ,@OrderIndex
           ,@AssignedId
           ,@HoursEstimatedRemaining)
GO
PRINT N'Creating [dbo].[sp_InsertToDoList]...';


GO
CREATE PROCEDURE dbo.sp_InsertToDoList
(
	@Id uniqueidentifier,
	@DId int,
	@Name nvarchar(50),
	@ToDoListTemplateId uniqueidentifier = NULL,
	@TicketId int = NULL,
	@ProjectId int = NULL
)
AS		
	
	INSERT INTO ToDoList
           ([Id]
			,[DId]
			,[Name]
			,[ToDoListTemplateId]
			,[TicketId]
			,[ProjectId]
			,[Order])
     VALUES
           (@Id,
           @DId
           ,@Name
           ,@ToDoListTemplateId
           ,@TicketId
           ,@ProjectId
           ,0)
    
    UPDATE 
			tdl
		SET tdl.[Order] = tdl.rNum
		FROM
		(SELECT row_number() over (order by [Order]) AS rNum,*
		FROM
			ToDoList 
		WHERE
			DId = @DId
			AND
			(TicketId = @TicketId OR @TicketId IS NULL)
			AND
			(ProjectId = @ProjectId OR @ProjectId IS NULL)) tdl
GO
PRINT N'Creating [dbo].[sp_InsertToDoListTemplate]...';


GO
CREATE PROCEDURE dbo.sp_InsertToDoListTemplate
(
	@Id uniqueidentifier,
	@DId int,
	@Name nvarchar(50)
)
AS		
	
	INSERT INTO ToDoListTemplate
           (Id,
           [DId]
           ,Name)
     VALUES
           (@Id,
           @DId
           ,@Name)
GO
PRINT N'Creating [dbo].[sp_InsertUQueue]...';


GO
CREATE Procedure dbo.sp_InsertUQueue
	(
		@DId int,
		@vchEmail nvarchar(255) = null,
		@vchFirstName nvarchar(50)
	)
As
	IF NOT EXISTS(SELECT 'true' FROM tbl_Logins WHERE Email=@vchEmail AND FirstName=@vchFirstName AND ConfigUnassignedQue = 1)
		BEGIN
			DECLARE @RandomLogin nvarchar(50)
			SET @RandomLogin = CONVERT(varchar(50), getutcdate())+@vchFirstName
			INSERT INTO tbl_Logins (Email, FirstName, LastName, Password, ConfigUnassignedQue) VALUES
				(@RandomLogin, @vchFirstName, 'Queue', 'kf9838475jgmvjf87', 1)
				
			DECLARE @LoginId int
			
			SET @LoginId = (SELECT @@Identity)
			
			INSERT INTO tbl_LoginCompanyJunc (login_id, company_id, UserType_Id, QueEmailAddress) VALUES
				(@LoginId, @DId, 4, @vchEmail)
		END
	
	return (SELECT @@Identity)
GO
PRINT N'Creating [dbo].[sp_LinkFreshBooksTask]...';


GO
CREATE PROCEDURE [dbo].[sp_LinkFreshBooksTask]
(
	@DId int,
	@TaskTypeID int,
	@FBTaskTypeID int
)
AS
BEGIN
	
	UPDATE 
		TaskType
	SET
		FBTaskTypeID = @FBTaskTypeID
	WHERE
		DepartmentID = @DId
		AND
		TaskTypeId = @TaskTypeID
		
END
GO
PRINT N'Creating [dbo].[sp_LinkFreshBooksTimeEntry]...';


GO
CREATE PROCEDURE dbo.sp_LinkFreshBooksTimeEntry
(
	@DId int,
	@TimeLogID int,
	@FBTimeEntryID int,
	@IsProjectLog bit
)
AS
BEGIN
	
	IF @IsProjectLog = '1'
	 BEGIN
		UPDATE
			ProjectTime
		SET
			[FBTimeEntryID] = @FBTimeEntryID
		WHERE
			[DepartmentId] = @DId
			AND
			[Id] = @TimeLogID
	 END
	ELSE
	 BEGIN
		UPDATE
			TicketTime
		SET
			[FBTimeEntryID] = @FBTimeEntryID
		WHERE
			[DepartmentId] = @DId
			AND
			[Id] = @TimeLogID
	 END
	
END
GO
PRINT N'Creating [dbo].[sp_MoveCustomField]...';


GO
CREATE Procedure dbo.sp_MoveCustomField
(
		@DId int,
		@SorceCustomFieldId int,
		@DestCustomFieldId int = NULL
	)

As
	DECLARE @CustomFieldId int,
		@Index int,
		@MoveAbove bit
	
	SET @Index = 0
	SET @MoveAbove = NULL
	
	DECLARE CustomField_crsr CURSOR
		FOR	
		SELECT     
			Id
		FROM         
			CustomFields 
		WHERE     
			DepartmentId=@DId
		ORDER BY
			Position
	FOR READ ONLY;

	OPEN CustomField_crsr;

	FETCH NEXT FROM CustomField_crsr INTO @CustomFieldId
	
	WHILE @@Fetch_Status = 0
	BEGIN
		IF @MoveAbove IS NULL AND @CustomFieldId = @SorceCustomFieldId
		 BEGIN
			SET @MoveAbove = 0
			FETCH NEXT FROM CustomField_crsr INTO @CustomFieldId;
			CONTINUE
		 END
		IF @MoveAbove IS NULL AND @CustomFieldId = @DestCustomFieldId
		 BEGIN
			SET @MoveAbove = 1
			
			UPDATE CustomFields
			SET Position = @Index
			WHERE
				Id = @SorceCustomFieldId
				
			SET @Index = @Index + 1
		 END
		
		IF @MoveAbove = 1 AND @CustomFieldId = @SorceCustomFieldId
		 BEGIN
			FETCH NEXT FROM CustomField_crsr INTO @CustomFieldId;
			CONTINUE
		 END
		 
		 IF @MoveAbove = 0 AND @CustomFieldId = @DestCustomFieldId
		 BEGIN
			UPDATE CustomFields
			SET Position = @Index
			WHERE
				Id = @SorceCustomFieldId
				
			SET @Index = @Index + 1
		 END
		 
		 UPDATE CustomFields
			SET Position = @Index
		  WHERE
			Id = @CustomFieldId
			
		SET @Index = @Index + 1
		 
		FETCH NEXT FROM CustomField_crsr INTO @CustomFieldId;
	END
	IF @DestCustomFieldId IS NULL
	 BEGIN
		UPDATE CustomFields
			SET Position = @Index
		WHERE
			Id = @SorceCustomFieldId
	 END

	CLOSE CustomField_crsr;
	DEALLOCATE CustomField_crsr;
GO
PRINT N'Creating [dbo].[sp_MoveLocation]...';


GO
CREATE Procedure dbo.sp_MoveLocation
	(
		@DId int,
		@Id int,
		@ParentId int
	)

As
	IF @ParentId=0
		SET @ParentId=NULL

	DECLARE @LocationName nvarchar(50)
	DECLARE @AccountId int
	DECLARE @LocationTypeId int
	SELECT @LocationName=Name, @AccountId=AccountId, @LocationTypeId=LocationTypeId FROM Locations WHERE DId=@DId AND Id=@Id
	
	DECLARE @ProposedNameAfterMove nvarchar(50)
	SET @ProposedNameAfterMove = @LocationName
	
	DECLARE @counter int
	SET @counter = 0

	WHILE EXISTS(SELECT 'true' FROM Locations WHERE DId=@DId AND AccountId=@AccountId AND ParentId=@ParentId AND (LocationTypeId=@LocationTypeId OR (LocationTypeId is null and @LocationTypeId is null)) AND Name=@ProposedNameAfterMove AND Id <> @Id)
	BEGIN
		IF @counter > 0
			SET @ProposedNameAfterMove = '(Moved '+CAST(@counter AS nvarchar(3))+') ' + @LocationName
		ELSE
			SET @ProposedNameAfterMove = '(Moved) ' + @LocationName
		SET @counter = @counter + 1
	END

	IF @counter > 0
		UPDATE Locations SET Name=@ProposedNameAfterMove WHERE DId=@DId AND Id=@Id

	UPDATE Locations SET ParentId=@ParentId WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_MoveLocationTypeProperty]...';


GO
CREATE PROCEDURE [dbo].[sp_MoveLocationTypeProperty]
	(
		@DId int,
		@LocationTypeId int,
		@SorcePropId int=null,
		@SorceGroupId int=null,
		@DestPropId int=null,
		@DestGroupId int=null,
		@MoveToFirst bit = 0
	)
AS
begin
	if @SorcePropId is NULL
	begin
		--Move Group
		if @SorceGroupId is null return
		
		declare @DGroupSortOrder int
		if @MoveToFirst=1
		begin
			select @DGroupSortOrder = MIN(g.SortOrder) from LocationTypePropertiesGroup g where g.DId=@DId and g.LocationTypeId=@LocationTypeId
			if @DGroupSortOrder is null set @DGroupSortOrder=1;
			set @DGroupSortOrder=@DGroupSortOrder-1;
			update LocationTypePropertiesGroup set SortOrder = @DGroupSortOrder where DId=@DId and LocationTypeId=@LocationTypeId and Id=@SorceGroupId
			return
		end
		
		
		
		DECLARE @SGroupSortOrder int		
		select @SGroupSortOrder=g.SortOrder from LocationTypePropertiesGroup g where g.DId=@DId and g.LocationTypeId=@LocationTypeId and g.Id=@SorceGroupId
		if(@SGroupSortOrder is null) return
		
		
		DECLARE @DGroupName nvarchar(255)		
		if @DestPropId is null
		begin
			select @DGroupSortOrder=g.SortOrder, @DGroupName=g.Name from LocationTypePropertiesGroup g where g.DId=@DId  and g.LocationTypeId=@LocationTypeId and g.Id=@DestGroupId
		end
		else
		begin
			select @DGroupSortOrder=g.SortOrder, @DGroupName=g.Name 
			from LocationTypeProperties p
			join LocationTypePropertiesGroup g on g.DId=@DId and g.LocationTypeId=@LocationTypeId and g.Id=p.GroupId
			where p.DId=@DId and p.LocationTypeId=@LocationTypeId and p.Id=@DestPropId
		end
		if(@DGroupSortOrder is null) return
		
		Update LocationTypePropertiesGroup
		SET SortOrder = SortOrder+2
		where DId=@DId and LocationTypeId=@LocationTypeId AND 
				(SortOrder>@DGroupSortOrder OR (SortOrder=@DGroupSortOrder AND Name>@DGroupName))
		
		Update LocationTypePropertiesGroup
		SET SortOrder = @DGroupSortOrder + 1
		WHERE DId=@DId and LocationTypeId=@LocationTypeId AND Id=@SorceGroupId
	end
	ELSE
	begin
		--Move Property
		
		
		declare @DPropSortOrder int
		if @MoveToFirst=1
		begin
		
			select @DPropSortOrder=min(p.SortOrder) from LocationTypeProperties p  where p.DId=@DId and p.LocationTypeId=@LocationTypeId and 
					(p.GroupId=@DestGroupId OR(@DestGroupId is null and p.GroupId is null))
					
			if @DPropSortOrder is null set @DPropSortOrder=1
			
			set @DPropSortOrder=@DPropSortOrder-1
			
			update LocationTypeProperties set SortOrder=@DPropSortOrder, GroupId=@DestGroupId where DId=@DId and LocationTypeId=@LocationTypeId and Id=@SorcePropId
			
		print @SorcePropId
		return;
			return
			
		end
		
		
		
		DECLARE @SPropSortOrder int
		DECLARE @SPropGroupId int
		select @SPropSortOrder=p.SortOrder, @SPropGroupId=p.GroupId from LocationTypeProperties p  where p.DId=@DId and p.LocationTypeId=@LocationTypeId and p.Id=@SorcePropId
		if @SPropSortOrder is null return;
		
		declare @DPropGroupId int
		DECLARE @DPropName nvarchar(255)
		if @DestPropId is null
		begin
			set @DPropGroupId = @DestGroupId
			select @DPropSortOrder=MIN(g.SortOrder)-1 from LocationTypePropertiesGroup g where g.DId=@DestGroupId
		end
		else
		begin
			select @DPropSortOrder=p.SortOrder, @DPropGroupId=p.GroupId, @DPropName=p.Name
			from LocationTypeProperties p where p.DId=@DId and p.LocationTypeId=@LocationTypeId and p.Id=@DestPropId
		end
		if(@DPropSortOrder is null) return;
		
		Update LocationTypeProperties
		set SortOrder = SortOrder+2
		where DId=@DId and LocationTypeId=@LocationTypeId AND isnull(GroupId,0)=isnull(@DPropGroupId,0) AND
			(SortOrder>@DPropSortOrder OR (SortOrder=@DPropSortOrder and Name>@DPropName))
		
		Update LocationTypeProperties
		set GroupId=@DPropGroupId,
			SortOrder = @DPropSortOrder+ 1
		where DId=@DId and LocationTypeId=@LocationTypeId and Id=@SorcePropId
	end
		
end
GO
PRINT N'Creating [dbo].[sp_MoveProject]...';


GO
CREATE  PROCEDURE dbo.sp_MoveProject
(
	@CompanyID int,
	@ProjectID int,
	@ParentID int
)
AS
	
	UPDATE Project
	SET ParentID = @ParentID
	WHERE
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID
GO
PRINT N'Creating [dbo].[sp_MoveToDoItem]...';


GO
CREATE PROCEDURE dbo.sp_MoveToDoItem
(
	@DId int,
	@SourceToDoListId uniqueidentifier,
	@SourceToDoItemId uniqueidentifier,
	@DestToDoListId uniqueidentifier,
	@DestToDoItemId uniqueidentifier = NULL
)
AS		

	IF @DestToDoItemId IS NOT NULL
	 BEGIN
		DECLARE @DestOrder tinyint
		SELECT
			@DestOrder = [Order]
		FROM
			ToDoItem
		WHERE
			DId = @DId
			AND
			Id = @DestToDoItemId
		
		UPDATE
			ToDoItem
		SET 
			[Order] = [Order] + 1
		WHERE
			DId = @DId
			AND
			ToDoListId = @DestToDoListId
			AND
			[Order] > @DestOrder
		
		UPDATE
			ToDoItem
		SET 
			[Order] = @DestOrder + 1,
			ToDoListId = @DestToDoListId
		WHERE
			DId = @DId
			AND
			Id = @SourceToDoItemId
	 END
	ELSE
	 BEGIN
		UPDATE
			ToDoItem
		SET 
			[Order] = 0,
			ToDoListId = @DestToDoListId
		WHERE
			DId = @DId
			AND
			Id = @SourceToDoItemId
	 END
	
	UPDATE 
		tdit
	SET tdit.[Order] = tdit.rNum
	FROM
	(SELECT row_number() over (order by [Order]) AS rNum,*
	FROM
		ToDoItem 
	WHERE
		DId = @DId
		AND
		ToDoListId = @DestToDoListId) tdit
		
	IF @DestToDoListId <> @SourceToDoListId
	 BEGIN
		UPDATE 
			tdit
		SET tdit.[Order] = tdit.rNum
		FROM
		(SELECT row_number() over (order by [Order]) AS rNum,*
		FROM
			ToDoItem 
		WHERE
			DId = @DId
			AND
			ToDoListId = @SourceToDoListId) tdit
	 END
GO
PRINT N'Creating [dbo].[sp_MoveToDoItemTemplate]...';


GO
CREATE PROCEDURE dbo.sp_MoveToDoItemTemplate
(
	@DId int,
	@SourceToDoListTemplateId uniqueidentifier,
	@SourceToDoItemTemplateId uniqueidentifier,
	@DestToDoListTemplateId uniqueidentifier,
	@DestToDoItemTemplateId uniqueidentifier = NULL
)
AS		

	IF @DestToDoItemTemplateId IS NOT NULL
	 BEGIN
		DECLARE @DestOrder tinyint
		SELECT
			@DestOrder = [Order]
		FROM
			ToDoItemTemplate
		WHERE
			DId = @DId
			AND
			Id = @DestToDoItemTemplateId
		
		UPDATE
			ToDoItemTemplate
		SET 
			[Order] = [Order] + 1
		WHERE
			DId = @DId
			AND
			ToDoListTemplateId = @DestToDoListTemplateId
			AND
			[Order] > @DestOrder
		
		UPDATE
			ToDoItemTemplate
		SET 
			[Order] = @DestOrder + 1,
			ToDoListTemplateId = @DestToDoListTemplateId
		WHERE
			DId = @DId
			AND
			Id = @SourceToDoItemTemplateId
	 END
	ELSE
	 BEGIN
		UPDATE
			ToDoItemTemplate
		SET 
			[Order] = 0,
			ToDoListTemplateId = @DestToDoListTemplateId
		WHERE
			DId = @DId
			AND
			Id = @SourceToDoItemTemplateId
	 END
	
	UPDATE 
		tdit
	SET tdit.[Order] = tdit.rNum
	FROM
	(SELECT row_number() over (order by [Order]) AS rNum,*
	FROM
		ToDoItemTemplate 
	WHERE
		DId = @DId
		AND
		ToDoListTemplateId = @DestToDoListTemplateId) tdit
		
	IF @DestToDoListTemplateId <> @SourceToDoListTemplateId
	 BEGIN
		UPDATE 
			tdit
		SET tdit.[Order] = tdit.rNum
		FROM
		(SELECT row_number() over (order by [Order]) AS rNum,*
		FROM
			ToDoItemTemplate 
		WHERE
			DId = @DId
			AND
			ToDoListTemplateId = @SourceToDoListTemplateId) tdit
	 END
GO
PRINT N'Creating [dbo].[sp_RenameProject]...';


GO
CREATE  PROCEDURE dbo.sp_RenameProject
(
	@CompanyID int,
	@ProjectID int,
	@Name nvarchar(50)
)
AS
	
	UPDATE Project
	SET Name = @Name
	WHERE
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID
GO
PRINT N'Creating [dbo].[sp_SelectAccessKeysTypes]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAccessKeysTypes]
	(		
		@CompanyID int
	)
AS

	SELECT   
		AccessKeyType.AccessKeyTypeID,
		AccessKeyType.Name,
		AccessKeyType.Description,
		AccessKeyType.EnablePrivateKey,
		ISNULL(AccessKey.AccessKeyID, 0) AS AccessKeyID,
		AccessKey.PublicAccessKey,
		CASE WHEN AccessKeyType.EnablePrivateKey = 1 
		THEN AccessKey.PrivateAccessKey ELSE 
			CASE WHEN AccessKey.AccessKeyID IS NULL THEN NULL ELSE 'Private key disabled' END
		END AS PrivateAccessKey,
		AccessKey.UserID,
		l.LastName+', '+l.FirstName AS FullName
	FROM         
		AccessKeyType LEFT OUTER JOIN
			AccessKey ON AccessKeyType.AccessKeyTypeID = AccessKey.AccessKeyTypeID AND AccessKey.CompanyID = @CompanyID
		LEFT OUTER JOIN
			tbl_LoginCompanyJunc ON AccessKey.CompanyID = tbl_LoginCompanyJunc.company_id 
			AND 
			AccessKey.UserID = tbl_LoginCompanyJunc.id 
		LEFT OUTER JOIN
			tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
GO
PRINT N'Creating [dbo].[sp_SelectAccount]...';


GO
CREATE PROCEDURE dbo.sp_SelectAccount
	(
		@DId int,
		@Id int	
	)
AS
	SELECT *, dbo.fxGetUserLocationName(@DId, LocationId) AS LocationName FROM Accounts WHERE DId=@DId AND Id=@Id
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAccountContacts]...';


GO
CREATE PROCEDURE dbo.[sp_SelectAccountContacts]
(
		@DepartmentId int,
		@AccountID int 
)
AS
BEGIN
	
	SELECT 
		ua.[UserId]
      ,ua.[Id]
      ,lo.FirstName
      ,lo.LastName
      ,lo.Email
      ,ISNULL(ua.[AccountingContactPrimary], 0) AS AccountingContactPrimary
      ,lo.Phone,
      lo.MobilePhone
	FROM 
		[UserAccounts] ua
	INNER JOIN
		tbl_LoginCompanyJunc lj ON ua.DepartmentId = lj.company_id AND ua.UserId = lj.id
	INNER JOIN 
		tbl_Logins lo ON lo.id=lj.login_id 
	WHERE
		ua.[DepartmentId] = @DepartmentId
		AND
		(ua.[AccountingContactPrimary] = 1 OR ua.AccountingContact = 1)
		AND
		ISNULL(ua.[AccountId] , -1) = @AccountID
		AND
		ISNULL(lj.btUserInactive, 0) = 0
		
END
GO
PRINT N'Creating [dbo].[sp_SelectAccountDetail]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAccountDetail]
	(
		@DId int,
		@Id int
	)
AS

	SELECT a.Id, a.vchName as AcctName, a.intBWDAcctNum, a.btOrgAcct, a.vchAcctNum, a.vchRef1Num, a.vchRef2Num,
		a.City, a.State, a.ZipCode, a.Country, a.TimeZoneId, a.Phone1, a.Phone2, a.Address1, a.Address2,
		
		(select top 1 v.PropertyValue from LocationTypeProperties p join LocationPropertyValues v on v.DId=@DId and v.LocationId=l.Id and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='Address1') as LocationAddress1,
		(select top 1 v.PropertyValue from LocationTypeProperties p join LocationPropertyValues v on v.DId=@DId and v.LocationId=l.Id and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='Address2') as LocationAddress2,
		(select top 1 v.PropertyValue from LocationTypeProperties p join LocationPropertyValues v on v.DId=@DId and v.LocationId=l.Id and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='City') as LocationCity,
		(select top 1 v.PropertyValue from LocationTypeProperties p join LocationPropertyValues v on v.DId=@DId and v.LocationId=l.Id and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='State') as LocationState,
		(select top 1 v.PropertyValue from LocationTypeProperties p join LocationPropertyValues v on v.DId=@DId and v.LocationId=l.Id and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='Zip Code') as LocationZipCode,
		(select top 1 v.PropertyValue from LocationTypeProperties p join LocationPropertyValues v on v.DId=@DId and v.LocationId=l.Id and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='Country') as LocationCountry,
		(select top 1 v.PropertyValue from LocationTypeProperties p join LocationPropertyValues v on v.DId=@DId and v.LocationId=l.Id and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='Phone1') as LocationPhone1,
		(select top 1 v.PropertyValue from LocationTypeProperties p join LocationPropertyValues v on v.DId=@DId and v.LocationId=l.Id and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='Phone2') as LocationPhone2,
		
		dbo.fxGetUserLocationName(@DId, a.LocationId) as LocationName, a.SupGroupId, g.vchName as SupportGroup, a.vchCust1, a.vchCust2, a.vchCust3, a.vchCust4, a.vchCust5, a.vchCust6, a.vchCust7, a.vchCust8, a.vchCust9, a.vchCust10, a.vchCust11, a.vchCust12, a.vchCust13, a.vchCust14, a.vchCust15, a.txtNote, a.vchEmailSuffix,
		a.dtCust1, a.dtCust2, a.btActive, a.AcctRepId, dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) as AcctRepName,
		ac.btCust1On,ac.vchCust1Cap,ac.btCust2On,ac.vchCust2Cap,ac.btCust3On,ac.vchCust3Cap,ac.btCust4On,ac.vchCust4Cap, ac.btCust5On,ac.vchCust5Cap,ac.btCust6On,ac.vchCust6Cap,ac.btCust7On,ac.vchCust7Cap,ac.btCust8On,ac.vchCust8Cap, ac.btCust9On,ac.vchCust9Cap, ac.btCust10On,ac.vchCust10Cap, ac.btCust11On,ac.vchCust11Cap, ac.btCust12On,ac.vchCust12Cap, ac.btCust13On,ac.vchCust13Cap, ac.btCust14On,ac.vchCust14Cap, ac.btCust15On,ac.vchCust15Cap,
		ac.btDateCust1On,ac.vchDateCust1Cap,ac.btDateCust2On,ac.vchDateCust2Cap, a.LocationId, a.AccLevelTimeTracking,
		a.btCfgSupportPortal, a.btSPLimitNewUsersToKnownEmailSuffixes, a.SupportPhone, a.SupportEmail, a.SPTitle, a.LogoBackLinkURL, a.SPDisableCSS,
		a.SPFacebook, a.SPTwitter1, a.SPTwitter2, ISNULL(ua.[UserId], 0) AS ClientContactID, lo.FirstName AS AcctRepFirstName, lo.LastName AS AcctRepLastName, lo.Email AS AcctRepEmail, 
		lo.Phone AS AcctRepPhone, lo.MobilePhone AS AcctRepMobilePhone
	FROM Accounts a
	LEFT OUTER JOIN AccountsCfg ac ON ac.DId=@DId AND isProject = 0
	LEFT OUTER JOIN Locations l ON l.DId=@DId AND l.Id=a.LocationId
	LEFT JOIN LocationTypes t ON t.DId=@DId and l.LocationTypeId=t.Id and t.Name='Building'
	LEFT OUTER JOIN SupportGroups g ON g.DId=@DId AND g.Id=a.SupGroupId
	LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=a.AcctRepId JOIN tbl_Logins lo ON lo.id = tlj.login_id
	LEFT OUTER JOIN UserAccounts ua ON ua.DepartmentId=@DId AND ua.AccountId=a.id AND ua.AccountingContactPrimary = 1
	WHERE a.DId=@DId AND a.id=@Id
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAccountLevel]...';


GO

CREATE PROCEDURE sp_SelectAccountLevel
	(
		@DId int,
		@AcctId int,
		@tintLevel tinyint,
		@tintRoutingOption tinyint=null OUTPUT
	)
AS
	SET NOCOUNT ON
	SELECT @tintRoutingOption=tintRoutingOption FROM AccountLevels WHERE DId=@DId AND AcctId=@AcctId AND tintLevel=@tintLevel
	
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_SelectAccountLevelTimeTracking]...';


GO
CREATE PROCEDURE dbo.sp_SelectAccountLevelTimeTracking
(
	@CompanyID int,
	@AccountID int,
	@UserID int
)
AS
 BEGIN

	IF @AccountID = -1 --Internal account
	 BEGIN
		IF @UserID = 0
		 BEGIN
			SELECT 
				tbl_company.company_name AS AccountName
			FROM
				tbl_company
			WHERE
				tbl_company.company_id = @CompanyID
				AND 
				dbo.fxGetConfigValueBit(@CompanyID, 'AccLevelTimeTracking') = 1
		 END
		ELSE
		 BEGIN
		  SELECT     
			tbl_company.company_name AS AccountName
		  FROM         
			AccountTech 
		  INNER JOIN
            tbl_company ON AccountTech.CompanyID = tbl_company.company_id
		  WHERE     
			AccountTech.CompanyID = @CompanyID 
			AND 
			AccountTech.AccountID IS NULL 
			AND 
			(AccountTech.TechID = @UserID OR AccountTech.TechID IS NULL OR @UserID = 0)
			AND 
			dbo.fxGetConfigValueBit(@CompanyID, 'AccLevelTimeTracking') = 1
	
		  UNION ALL

		  SELECT 
			tbl_company.company_name AS AccountName
		  FROM 
			UserAccounts
		  INNER JOIN
            tbl_company ON UserAccounts.DepartmentId = tbl_company.company_id
		  INNER JOIN 
			tbl_LoginCompanyJunc lj ON lj.company_id = UserAccounts.DepartmentId AND lj.Id = UserAccounts.UserId
		  INNER JOIN 
			tbl_UserType ut ON ut.id=lj.UserType_id
		  WHERE 
			UserAccounts.DepartmentId = @CompanyID 
			AND 
			UserAccounts.AccountID IS NULL
			AND
			(UserAccounts.UserId = @UserID OR @UserID = 0)
			AND
			lj.btUserInactive = 0
			AND
			ut.Name IN ('Technician', 'Administrator')
			AND 
			dbo.fxGetConfigValueBit(@CompanyID, 'AccLevelTimeTracking') = 1
		END
	 END
	ELSE
	 BEGIN
		IF @UserID = 0
		 BEGIN
			SELECT
				Accounts.vchName AS AccountName
			FROM
				Accounts
			WHERE
				Accounts.DId = @CompanyID
				AND
				Accounts.Id = @AccountID
				AND
				Accounts.AccLevelTimeTracking = 1
		 END
		ELSE
		 BEGIN
		  SELECT     
			Accounts.vchName AS AccountName
		  FROM         
			AccountTech 
		  INNER JOIN
            Accounts ON AccountTech.CompanyID = Accounts.DId AND AccountTech.AccountID = Accounts.Id
		  WHERE     
			AccountTech.CompanyID = @CompanyID 
			AND 
			AccountTech.AccountID = @AccountID 
			AND 
			(AccountTech.TechID = @UserID OR AccountTech.TechID IS NULL OR @UserID = 0)
			AND 
			Accounts.AccLevelTimeTracking = 1

		  UNION ALL

		  SELECT 
			Accounts.vchName AS AccountName
		  FROM 
			UserAccounts
		  INNER JOIN
            Accounts ON UserAccounts.DepartmentId = Accounts.DId AND UserAccounts.AccountId = Accounts.Id
		  INNER JOIN 
			tbl_LoginCompanyJunc lj ON lj.company_id = UserAccounts.DepartmentId AND lj.Id = UserAccounts.UserId
		  INNER JOIN 
			tbl_UserType ut ON ut.id=lj.UserType_id
		  WHERE 
			UserAccounts.DepartmentId = @CompanyID 
			AND 
			UserAccounts.AccountID = @AccountID
			AND
			(UserAccounts.UserId = @UserID OR @UserID = 0)
			AND
			lj.btUserInactive = 0
			AND
			ut.Name IN ('Technician', 'Administrator')
			AND 
			Accounts.AccLevelTimeTracking = 1
	   END

	 END

 END
GO
PRINT N'Creating [dbo].[sp_SelectAccountLocation]...';


GO

CREATE PROCEDURE sp_SelectAccountLocation
	(
		@DId int,
		@AcctId int,
		@Id int	
	)
AS
	SELECT al.*, a.vchName as vchAcctName 
	FROM Accounts a
	LEFT OUTER JOIN AccountLocations al ON al.DId=@DId AND al.AccountId=@AcctId AND al.id=@Id
	WHERE a.DId=@DId and a.id=@AcctId
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAccountPrimaryContact]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAccountPrimaryContact]
(
		@DepartmentId int,
		@AccountID int 
)
AS
BEGIN

	SELECT 
		ua.[UserId]
      ,ua.[Id]
      ,dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) AS userFullName
      ,CASE WHEN ua.AccountLocationId IS NULL THEN CASE WHEN ua.AccountId IS NULL THEN '' ELSE ISNULL(a.Country, '') END ELSE 
      (select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='Country' ) END AS Country
      ,CASE WHEN ua.AccountLocationId IS NULL THEN CASE WHEN ua.AccountId IS NULL THEN '' ELSE ISNULL(a.City, '') END ELSE 
      (select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='City' ) END AS City
      ,CASE WHEN ua.AccountLocationId IS NULL THEN CASE WHEN ua.AccountId IS NULL THEN '' ELSE ISNULL(a.Address1, '') END ELSE 
      (select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='Address1' ) END AS Address1
      ,CASE WHEN ua.AccountLocationId IS NULL THEN CASE WHEN ua.AccountId IS NULL THEN '' ELSE ISNULL(a.Address2, '') END ELSE 
      (select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='Address2' ) END AS Address2
      ,CASE WHEN ua.AccountLocationId IS NULL THEN CASE WHEN ua.AccountId IS NULL THEN '' ELSE ISNULL(a.State, '') END ELSE 
      (select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='State' ) END AS State
      ,CASE WHEN ua.AccountLocationId IS NULL THEN CASE WHEN ua.AccountId IS NULL THEN '' ELSE ISNULL(a.ZipCode, '') END ELSE 
      (select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='Zip Code' ) END AS ZipCode
      ,CASE WHEN ua.AccountLocationId IS NULL THEN CASE WHEN ua.AccountId IS NULL THEN '' ELSE ISNULL(a.Phone1, '') END ELSE 
      (select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='Phone1' ) END AS Phone1
      ,CASE WHEN ua.AccountLocationId IS NULL THEN CASE WHEN ua.AccountId IS NULL THEN '' ELSE ISNULL(a.Phone2, '') END ELSE 
      (select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='Phone2' ) END AS Phone2
	FROM 
		[UserAccounts] ua
	INNER JOIN
		tbl_LoginCompanyJunc lj ON ua.DepartmentId = lj.company_id AND ua.UserId = lj.id
	INNER JOIN 
		tbl_Logins lo ON lo.id=lj.login_id 
	LEFT OUTER JOIN
		Locations l ON ua.DepartmentId = l.DId AND ua.AccountLocationId = l.Id
	LEFT OUTER JOIN
        Accounts a ON ua.DepartmentId = a.DId AND ua.AccountId = a.Id
	WHERE
		ua.[DepartmentId] = @DepartmentId
		AND
		ua.[AccountingContactPrimary] = 1
		AND
		ISNULL(ua.[AccountId] , -1) = @AccountID
		AND
		ISNULL(lj.btUserInactive, 0) = 0
	

END
GO
PRINT N'Creating [dbo].[sp_SelectAccountProjectTechs]...';


GO



CREATE PROCEDURE [dbo].[sp_SelectAccountProjectTechs]
		(
		@DepartmentId int,
		@AccountID int = NULL,
		@ProjectID int = NULL
	)
As

	DECLARE @configUAQ bit,
		@btCfgESG bit 
	SELECT @configUAQ = dbo.fxGetConfigValueBit(@DepartmentId, 'ConfigUAQ')
	SET @btCfgESG = dbo.fxGetConfigValueBit(@DepartmentId, 'btCfgESG')


	DECLARE @AssignedTechsTasks TABLE(
  		id int,
		FullName nvarchar(100),  		
		TaskTypeName nvarchar(50),
		SelectLevel nvarchar(150))

	DECLARE @Id int, @Name nvarchar(100)

	IF (@AccountID IS NOT NULL)
	BEGIN
		DECLARE AccTechs CURSOR LOCAL FOR
		SELECT 
			L.id, dbo.fxGetUserName(LO.FirstName, LO.LastName, LO.Email) AS FullName
		FROM tbl_LoginCompanyJunc L
		INNER JOIN tbl_Logins LO ON L.login_id = LO.id
		INNER JOIN tbl_company CO ON L.company_id=CO.company_id		
		WHERE L.company_id = @DepartmentId AND (L.btUserInactive = 0)
			AND (L.UserType_Id=2 OR L.UserType_Id=3 OR (L.UserType_Id=4 AND @configUAQ = 1))
			AND ((SELECT COUNT(ISNULL(TechID, 0)) FROM AccountTech 
					WHERE AccountTech.CompanyID = @DepartmentId 
						AND (AccountTech.AccountID = @AccountID OR (AccountTech.AccountID IS NULL AND @AccountID = -1))
						AND (AccountTech.TechID IS NULL OR AccountTech.TechID = L.id)) > 0 OR L.UserType_Id=3)
		ORDER BY dbo.fxGetUserName(LO.FirstName, LO.LastName, LO.Email)
		OPEN AccTechs

		FETCH NEXT FROM AccTechs INTO @Id, @Name

		WHILE @@FETCH_STATUS = 0
		BEGIN		
			INSERT INTO @AssignedTechsTasks
			SELECT 
				@Id, @Name,
				tasks.TaskTypeName,
				tasks.SelectLevel
			FROM 
				dbo.fxSelectAssignedTaskTypes(@DepartmentId, @Id, NULL, NULL, @AccountID) tasks
			ORDER BY TaskTypeName	
			FETCH NEXT FROM AccTechs INTO @Id, @Name
		END
		CLOSE AccTechs
	END
	ELSE
	BEGIN		
		IF (@ProjectID IS NOT NULL)
		BEGIN			
			DECLARE PrjTechs CURSOR LOCAL FOR
			SELECT 
			L.id, dbo.fxGetUserName(LO.FirstName, LO.LastName, LO.Email) AS FullName
			FROM tbl_LoginCompanyJunc L
			INNER JOIN tbl_Logins LO ON L.login_id = LO.id
			INNER JOIN tbl_company CO ON L.company_id=CO.company_id		
			WHERE L.company_id = @DepartmentId AND (L.btUserInactive = 0)
				AND (L.UserType_Id=2 OR L.UserType_Id=3 OR (L.UserType_Id=4 AND @configUAQ = 1))
				AND (dbo.fxIsTechAssignedToProject(@DepartmentId, 0, @ProjectID, L.id, @btCfgESG) = 1 OR L.UserType_Id=3)
			ORDER BY dbo.fxGetUserName(LO.FirstName, LO.LastName, LO.Email)
			OPEN PrjTechs

			FETCH NEXT FROM PrjTechs INTO @Id, @Name

			WHILE @@FETCH_STATUS = 0
			BEGIN		
				INSERT INTO @AssignedTechsTasks
				SELECT 
					@Id, @Name,
					tasks.TaskTypeName,
					tasks.SelectLevel
				FROM 
					dbo.fxSelectAssignedTaskTypes(@DepartmentId, @Id, @ProjectID, NULL, NULL) tasks
				ORDER BY TaskTypeName	
				FETCH NEXT FROM PrjTechs INTO @Id, @Name
			END
			CLOSE PrjTechs
		END
	END
	SELECT * FROM @AssignedTechsTasks
GO
PRINT N'Creating [dbo].[sp_SelectAccountRate]...';


GO
CREATE PROCEDURE dbo.sp_SelectAccountRate
(
	@CompanyID int,
	@AccountID int
)
AS

	SELECT 
	   [AccountRateID]
      ,[CompanyID]
      ,[AccountID]
      ,[AccountRate].[BillingMethodID]
      ,[FlatFee]
      ,[HourlyBlendedRate]
      ,[RatePlanID]
	  ,BillingMethod.Name AS [BillingMethodName]
	  ,FlatFeeMode
	  ,FlatFeeNextDate
	  ,QBAccountAlias
	  ,QBItemAlias
	FROM 
		[AccountRate]
		LEFT OUTER JOIN BillingMethod ON [AccountRate].[BillingMethodID] = [BillingMethod].[BillingMethodID]
	WHERE
		[CompanyID] = @CompanyID
		AND
		(AccountID = @AccountID
		OR
		(@AccountID=-1 AND [AccountRate].AccountID IS null)
		)
GO
PRINT N'Creating [dbo].[sp_SelectAccountRatesHierarchy]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAccountRatesHierarchy]
	(
		@AccountTaskTypeRateID int,
		@CompanyID int
	)
AS


DECLARE @RateHierarchy TABLE(
  	ID int,
	RateObject nvarchar(50),
  	ObjectName nvarchar(100),
  	ObjectRate smallmoney,
	Active bit)
	
DECLARE @BillingMethodID int -- must be equal 4
DECLARE @AccountID int
DECLARE @AccountActiveStatus bit
DECLARE @TaskTypeID int
DECLARE @AccountTaskTypeRate smallmoney
DECLARE @RatePlanID int
SET @AccountTaskTypeRate = NULL
SET @BillingMethodID = NULL
SET @AccountID = NULL
SET @RatePlanID = NULL

	-- Account Task Type Rate
	SELECT @AccountID = ATT.AccountID, @TaskTypeID = ATT.TaskTypeID, @AccountTaskTypeRate = HourlyRate
	FROM AccountTaskTypeRate ATT
	WHERE ATT.AccountTaskTypeRateID = @AccountTaskTypeRateID AND ATT.CompanyID = @CompanyID
	IF (@AccountTaskTypeRate IS NOT NULL)
	BEGIN		
		DECLARE @AccountName nvarchar(100)
		IF (@AccountID IS NULL)
		BEGIN
			SELECT @AccountName=(company_name + ' (Internal)') FROM tbl_company WHERE company_id = @CompanyID			
			SET @AccountActiveStatus = 1
		END
		ELSE SELECT @AccountName = vchName, @AccountActiveStatus = btActive FROM Accounts WHERE DId = @CompanyID  AND Id=@AccountID
		INSERT INTO @RateHierarchy VALUES (3, 'Account', @AccountName, @AccountTaskTypeRate, @AccountActiveStatus)
	END
	-- check billing method lately

	-- Rate Plan ID
	SELECT @RatePlanID = AR.RatePlanID, @BillingMethodID = AR.BillingMethodID
	FROM AccountRate AR
	WHERE AR.CompanyID = @CompanyID AND (AR.AccountID = @AccountID OR (AR.AccountID IS NULL AND @AccountID IS NULL))
	DECLARE @RatePlanName nvarchar(100)
	DECLARE @RatePlanRate smallmoney
	IF (@RatePlanID IS NOT NULL)
	BEGIN
		SELECT @RatePlanName = RP.Name
		FROM RatePlan RP
		WHERE RP.DepartmentId = @CompanyID AND RP.Id = @RatePlanID
		SELECT  @RatePlanRate = RPR.HourlyRate
		FROM RatePlanRates RPR
		WHERE RPR.DepartmentId = @CompanyID AND RPR.RatePlanId = @RatePlanID AND RPR.TaskTypeId = @TaskTypeID
		IF (@RatePlanRate IS NOT NULL)
			INSERT INTO @RateHierarchy VALUES (2, 'Rate Plan', @RatePlanName, @RatePlanRate, 1)		
	END
	
	-- Task Type
	DECLARE @TaskTypeName nvarchar(50)
	DECLARE @TaskTypeRate smallmoney
	DECLARE @TaskTypeActiveStatus bit

	SELECT @TaskTypeName = TT.TaskTypeName, @TaskTypeRate = ISNULL(TT.HourlyRate, 0), @TaskTypeActiveStatus = TT.Active
	FROM TaskType TT
	WHERE TT.DepartmentID = @CompanyID AND TT.TaskTypeId= @TaskTypeID
	IF ((@RatePlanRate IS NULL) AND (@RatePlanID IS NOT NULL))
		INSERT INTO @RateHierarchy VALUES (2, 'Rate Plan', @RatePlanName, @TaskTypeRate, 1)
	INSERT INTO @RateHierarchy VALUES (1, 'Task Type', @TaskTypeName, @TaskTypeRate, @TaskTypeActiveStatus)

	SELECT * FROM @RateHierarchy ORDER BY ID
GO
PRINT N'Creating [dbo].[sp_SelectAccountRetainers]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAccountRetainers]
	(
		@CompanyID int,
		@AccountID int = NULL		
	)
AS

	SELECT     
		AccountRetainer.Id,
		TechId,
		dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) AS FullName,
		Amount,
		StartDate,
		EndDate
	FROM         
		AccountRetainer
	LEFT OUTER JOIN
        tbl_LoginCompanyJunc ON AccountRetainer.DId = tbl_LoginCompanyJunc.company_id 
		AND 
        AccountRetainer.TechId = tbl_LoginCompanyJunc.id 
	LEFT OUTER JOIN
		tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
	LEFT OUTER JOIN 
		tbl_company ON tbl_LoginCompanyJunc.company_id=tbl_company.company_id
	WHERE
		AccountRetainer.DId = @CompanyID
		AND
		(AccountRetainer.AccountId = @AccountID
		OR
		(@AccountID=-1 AND AccountRetainer.AccountId IS null)
		)
		




set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON



set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_SelectAccounts]...';


GO
CREATE Procedure dbo.sp_SelectAccounts
	(
		@DId int,
		@Id int = null
	)

As
	IF @Id IS NULL
		BEGIN
			SELECT 0 AS ArtificialSort, -1 AS Id, -1 AS AcctRepId, (SELECT company_name FROM tbl_company WHERE company_id = @DId) + ' (Internal)' As [Name] 
			,CAST (CASE WHEN EXISTS(SELECT * FROM Locations WHERE DId = @DId AND AccountId IS NULL AND ParentId IS NULL AND Inactive = 0) THEN 1 ELSE 0 END AS bit)AS HasActiveParentLocations
			UNION
			SELECT 1 AS ArtificialSort, Id, A.AcctRepId, vchName as [Name]
			,CAST (CASE WHEN EXISTS(SELECT * FROM Locations WHERE DId = @DId AND AccountId = A.Id AND ParentId IS NULL AND Inactive = 0) THEN 1 ELSE 0 END AS bit) AS HasActiveParentLocations
			 FROM Accounts AS A WHERE DId = @DId  AND btActive=1
			ORDER BY ArtificialSort, [Name]
			END
	ELSE
		SELECT Id, vchName as Name
		,CAST (CASE WHEN EXISTS(SELECT * FROM Locations WHERE DId = @DId AND AccountId = A.Id AND ParentId IS NULL AND Inactive = 0) THEN 1 ELSE 0 END AS bit) AS HasActiveParentLocations
		FROM Accounts AS A WHERE Id = @Id AND DId = @DId ORDER BY vchName
	return
GO
PRINT N'Creating [dbo].[sp_SelectAccountsAssignedToTech]...';


GO
CREATE Procedure dbo.sp_SelectAccountsAssignedToTech
	(
	@CompanyID int,
	@UserId int
)

As	
	
	DECLARE @AccountsAssignedToTech TABLE(
  		Id int,
		Name nvarchar(170),
		OrderBit bit)

	DECLARE @AccLevelTimeTracking bit,
		@btCfgProject bit,
		@btCfgESG bit 
	SELECT @AccLevelTimeTracking=dbo.fxGetConfigValueBit(@CompanyID, 'AccLevelTimeTracking'),
		@btCfgProject = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgProject'),
		@btCfgESG = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgESG')
	INSERT INTO @AccountsAssignedToTech (Id, Name, OrderBit)
		SELECT 
			-1,     
			ISNULL(tbl_company.company_name, '') + ' (Internal)' AS AccountName,
			0
		FROM         
			AccountTech 
		INNER JOIN
            tbl_company ON AccountTech.CompanyID = tbl_company.company_id
		WHERE     
			AccountTech.CompanyID = @CompanyID 
			AND 
			AccountTech.AccountID IS NULL 
			AND 
			(AccountTech.TechID = @UserID OR AccountTech.TechID IS NULL OR @UserID = 0)
			AND 
			@AccLevelTimeTracking = 1


	INSERT INTO @AccountsAssignedToTech (Id, Name, OrderBit)
		SELECT 
			-1,     
			ISNULL(tbl_company.company_name, '') + ' (Internal)' AS AccountName,
			0
		FROM 
			UserAccounts
		INNER JOIN
            tbl_company ON UserAccounts.DepartmentId = tbl_company.company_id
		INNER JOIN 
			tbl_LoginCompanyJunc lj ON lj.company_id = UserAccounts.DepartmentId AND lj.Id = UserAccounts.UserId
		INNER JOIN 
			tbl_UserType ut ON ut.id=lj.UserType_id
		WHERE 
			UserAccounts.DepartmentId = @CompanyID 
			AND 
			UserAccounts.AccountID IS NULL
			AND
			(UserAccounts.UserId = @UserID OR @UserID = 0)
			AND
			lj.btUserInactive = 0
			AND
			ut.Name IN ('Technician', 'Administrator')
			AND 
			@AccLevelTimeTracking = 1


	INSERT INTO @AccountsAssignedToTech (Id, Name, OrderBit)
		SELECT     
			AccountTech.AccountID,
			Accounts.vchName AS AccountName,
			1
		FROM         
			AccountTech 
		INNER JOIN
            Accounts ON AccountTech.CompanyID = Accounts.DId AND AccountTech.AccountID = Accounts.Id
		WHERE     
			AccountTech.CompanyID = @CompanyID 
			AND 
			AccountTech.AccountID IS NOT NULL  
			AND 
			(AccountTech.TechID = @UserID OR AccountTech.TechID IS NULL OR @UserID = 0)
			AND 
			Accounts.AccLevelTimeTracking = 1
			AND
			Accounts.btActive = 1

	INSERT INTO @AccountsAssignedToTech (Id, Name, OrderBit)
		SELECT     
			UserAccounts.AccountID,
			Accounts.vchName AS AccountName,
			1
		FROM 
			UserAccounts
		INNER JOIN
            Accounts ON UserAccounts.DepartmentId = Accounts.DId AND UserAccounts.AccountId = Accounts.Id
		INNER JOIN 
			tbl_LoginCompanyJunc lj ON lj.company_id = UserAccounts.DepartmentId AND lj.Id = UserAccounts.UserId
		INNER JOIN 
			tbl_UserType ut ON ut.id=lj.UserType_id
		WHERE 
			UserAccounts.DepartmentId = @CompanyID 
			AND 
			UserAccounts.AccountID IS NOT NULL
			AND
			(UserAccounts.UserId = @UserID OR @UserID = 0)
			AND
			lj.btUserInactive = 0
			AND
			ut.Name IN ('Technician', 'Administrator')
			AND 
			Accounts.AccLevelTimeTracking = 1
			AND
			Accounts.btActive = 1

	IF @btCfgProject = 1
	 BEGIN
	  INSERT INTO @AccountsAssignedToTech (Id, Name, OrderBit)
		SELECT     
			CASE 
			WHEN Accounts.DId IS NULL THEN -1
			ELSE Project.AccountID
      		END AS ID,
			CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END AS AccountName,
			CASE WHEN Accounts.DId IS NULL THEN 0
			ELSE 1
      		END
		FROM       
			Project
		INNER JOIN
			tbl_company ON Project.CompanyID = tbl_company.company_id
		LEFT OUTER JOIN
			Accounts ON Project.CompanyID = Accounts.DId AND Project.AccountID = Accounts.Id
		WHERE     
			Project.CompanyID = @CompanyID  
			AND
			Project.Active = 1
			AND
			(@UserID = 0 OR dbo.fxIsTechAssignedToProject(Project.CompanyID, Project.AccountID, Project.ProjectID, @UserID, @btCfgESG) = 1)
			AND
			ISNULL(Accounts.btActive, 1) = 1
	 END


	SELECT DISTINCT 
		*
	FROM
		@AccountsAssignedToTech
	ORDER BY
		OrderBit, Name
GO
PRINT N'Creating [dbo].[sp_SelectAccountsDynamicWhere]...';


GO
-- Procedure
CREATE PROCEDURE [dbo].[sp_SelectAccountsDynamicWhere]
(
	@DId int,
	@Where nvarchar(MAX) = null
)
AS
BEGIN
if @Where is null
begin

	SELECT a.*,
           sg.vchName AS SupportGroupName, 
           a.dtUpdated AS UpdatedDateTime, 
           l1.Email AS UpdatedByEmail, l1.LastName + ', ' + l1.FirstName AS UpdatedByFullName, 
           l2.Email AS ReportTechnicianEmail, l2.LastName + ', ' + l2.FirstName AS ReportTechnicianFullName,
           dbo.fxGetUserLocationName(a.DId, a.LocationId) AS LocationFullName
	FROM Accounts AS a
	LEFT JOIN  SupportGroups AS sg ON sg.DId=@DId AND a.SupGroupId = sg.Id
	LEFT JOIN dbo.tbl_LoginCompanyJunc AS lcj1 ON lcj1.company_id=@DId AND a.UpdatedId = lcj1.id
    LEFT JOIN dbo.tbl_Logins AS l1 ON lcj1.login_id = l1.id
    LEFT JOIN dbo.tbl_LoginCompanyJunc AS lcj2 ON lcj2.company_id=@DId AND a.AcctRepId = lcj2.id
    LEFT JOIN dbo.tbl_Logins AS l2 ON lcj2.login_id = l2.id
    order by a.vchName
	
end else begin	

	declare @SqlQuery nvarchar(MAX)
	SET  @SqlQuery = 
	   'SELECT a.*,
           sg.vchName AS SupportGroupName, 
           a.dtUpdated AS UpdatedDateTime, 
           l1.Email AS UpdatedByEmail, l1.LastName + '', '' + l1.FirstName AS UpdatedByFullName, 
           l2.Email AS ReportTechnicianEmail, l2.LastName + '', '' + l2.FirstName AS ReportTechnicianFullName,
           dbo.fxGetUserLocationName(a.DId, a.LocationId) AS LocationFullName
	FROM Accounts AS a
	LEFT JOIN  SupportGroups AS sg ON sg.DId='+@DId+' AND a.SupGroupId = sg.Id
	LEFT JOIN dbo.tbl_LoginCompanyJunc AS lcj1 ON lcj1.company_id='+@DId+' AND a.UpdatedId = lcj1.id
    LEFT JOIN dbo.tbl_Logins AS l1 ON lcj1.login_id = l1.id
    LEFT JOIN dbo.tbl_LoginCompanyJunc AS lcj2 ON lcj2.company_id='+@DId+' AND a.AcctRepId = lcj2.id
    LEFT JOIN dbo.tbl_Logins AS l2 ON lcj2.login_id = l2.id
	where a.DId='+@DId+convert(nvarchar(MAX),@DId) + ISNULL(' and ('+@Where+')','') +'
	order by a.vchName'

	EXEC (@SqlQuery)
	
end
		
END
GO
PRINT N'Creating [dbo].[sp_SelectAccountsForExport]...';


GO
CREATE PROCEDURE dbo.sp_SelectAccountsForExport
@DepartmentId int
AS
BEGIN
    SELECT  A.Id, 
			A.vchName AS [Name], 
			CASE A.btActive WHEN 1 THEN 'Active' ELSE 'Inactive' END AS Active,
			L.Email AS SupportRepEmail,
			CASE A.btOrgAcct WHEN 1 THEN 'Organization/Business' ELSE 'Individual' END AS [Type],
			dbo.fxGetUserLocationName(A.DId , A.LocationId) AS Location,
			A.vchEmailSuffix AS ClientEmailSuffix,
			vchAcctNum AS InternalId,
			SG.vchName AS SupportGroup,
			A.AccLevelTimeTracking
	FROM Accounts AS A
	LEFT JOIN tbl_LoginCompanyJunc AS LCJ ON LCJ.company_id = A.DId AND LCJ.id = A.AcctRepId
	LEFT JOIN tbl_Logins AS L on L.id = LCJ.login_id
	LEFT JOIN SupportGroups AS SG ON SG.DId = A.DId AND A.SupGroupId = SG.Id
	WHERE A.DId = @DepartmentId
END
GO
PRINT N'Creating [dbo].[sp_SelectAccountsProjects]...';


GO
CREATE  PROCEDURE dbo.sp_SelectAccountsProjects
(
	@CompanyID int
)
AS

	DECLARE @btCfgAcctMngr nvarchar(255),
		@btCfgProject bit
	SET @btCfgAcctMngr = dbo.fxGetConfigValueStr(@CompanyID, 'btCfgAcctMngr')
	SET	@btCfgProject = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgProject')

	(SELECT
		'-2A' AS ID,
		NULL AS ParentID,
		CASE
			WHEN @btCfgAcctMngr = 'true'
			THEN '---All Accounts---'
			ELSE '---All Projects---'
		END AS [Name]
		
	UNION
	
	SELECT
		'A-1' AS ID,
		NULL AS ParentID,
		company_name + ' (Internal)' As [Name]
	FROM 
		tbl_company 
	WHERE 
		company_id = @CompanyID
		AND
		@btCfgAcctMngr = 'true'
		
	UNION
	
	SELECT
		'A' + CAST(Accounts.Id AS nvarchar) AS ID, 
		NULL AS ParentID,
		Accounts.vchName as [Name]
	FROM 
		Accounts 
	WHERE 
		DId = @CompanyID 
		AND
		@btCfgAcctMngr = 'true'
		AND
		Accounts.btActive = 1
	
	UNION
	
	SELECT 
		CAST(Project.ProjectID AS nvarchar) AS ID, 
		CASE 
			WHEN @btCfgAcctMngr = 'true'
			THEN ISNULL(CAST(Project.ParentID AS nvarchar), 'A' + CAST(ISNULL(Project.AccountID, '-1') as nvarchar)) 
			ELSE '-2A'
		END
		AS ParentID,
		Project.Name AS [Name]
	FROM 
		Project 
	LEFT OUTER JOIN 
		Accounts ON Project.CompanyID = Accounts.DId AND Project.AccountID = Accounts.Id
	WHERE 
		@btCfgProject = 1
		AND
		Project.CompanyID = @CompanyID
		AND
		(@btCfgAcctMngr = 'true' OR (@btCfgAcctMngr = 'false' AND Project.AccountID IS NULL))
		AND 
		(Project.Active = 1 AND ISNULL(Accounts.btActive, 1) = 1)
		) ORDER BY Name
GO
PRINT N'Creating [dbo].[sp_SelectAccountsProjectsMiscList]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAccountsProjectsMiscList]
(
		@DId int,
		@Active bit = NULL,
		@btCfgAcctMngr bit
	)

AS

		DECLARE @btCfgProject bit
		SET	@btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	
		SELECT -1 AS Id, (SELECT company_name FROM tbl_company WHERE company_id = @DId) + ' (Internal)' As [Name], '-1|A' AS ComplexID, 0 AS OrderIndex, '' AS ProjectName
		WHERE (@Active IS NULL OR @Active = 1)
			AND @btCfgAcctMngr = 1
		UNION
		SELECT Accounts.Id, Accounts.vchName as [Name], CAST(Accounts.Id AS nvarchar) + '|A' AS ComplexID, 1 AS OrderIndex, '' AS ProjectName
		FROM 
			Accounts 
		WHERE 
			@btCfgAcctMngr = 1
			AND
			DId = @DId AND
			(@Active IS NULL OR Accounts.btActive = @Active)
		UNION
		SELECT Project.ProjectID AS Id, 
		(CASE WHEN Project.AccountID IS NOT NULL 
				THEN Accounts.vchName + ' - ' + dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID)
				ELSE  CASE WHEN @btCfgAcctMngr = 1 THEN (SELECT company_name FROM tbl_company WHERE company_id = @DId) + ' (Internal)' + ' - ' ELSE '' END+ dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID)
			END) AS [Name],
		(CAST(Project.ProjectID AS nvarchar) + '|P') AS ComplexID,
		CASE WHEN Project.AccountID IS NULL THEN 0 ELSE 1 END AS OrderIndex, '-    ' + dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS ProjectName
		FROM Project LEFT OUTER JOIN Accounts 
			ON @btCfgAcctMngr = 1 AND Project.CompanyID = Accounts.DId AND (Project.AccountID = Accounts.Id)
		WHERE 
			@btCfgProject = 1
			AND
			Project.CompanyID = @DId AND 
			(@Active IS NULL OR Project.Active = @Active)
			AND
			(@btCfgAcctMngr = 1 OR (@btCfgAcctMngr = 0 AND Project.AccountID IS NULL))
		ORDER BY OrderIndex, [Name]
GO
PRINT N'Creating [dbo].[sp_SelectAccountTaskTypeRates]...';


GO
CREATE PROCEDURE dbo.sp_SelectAccountTaskTypeRates
	(
		@AccountID int = NULL,
		@CompanyID int,
		@RatePlanID int = NULL
	)
AS
	IF @RatePlanID > 0
	 BEGIN
		SELECT
			TaskType.TaskTypeName,
			'' AS HourlyRateLabel, 
			'' AS HourlyTaskRateLabel,
			ISNULL(AccountTaskTypeRate.HourlyRate, ISNULL(RatePlanRates.HourlyRate, ISNULL(TaskType.HourlyRate, 0))) AS HourlyRateInherited,
			AccountTaskTypeRate.HourlyRate AS HourlyRateOverrided,
			AccountTaskTypeRate.AccountTaskTypeRateID,
			TaskType.TaskTypeId
		FROM         
			TaskType 
		LEFT OUTER JOIN
			RatePlanRates ON RatePlanRates.DepartmentId = TaskType.DepartmentID 
			AND 
			RatePlanRates.TaskTypeId = TaskType.TaskTypeId 
			AND
			RatePlanRates.RatePlanId = @RatePlanID
		LEFT OUTER JOIN
            AccountTaskTypeRate ON TaskType.DepartmentID = AccountTaskTypeRate.CompanyID 
            AND TaskType.TaskTypeId = AccountTaskTypeRate.TaskTypeID 
            AND (AccountTaskTypeRate.AccountID = @AccountID OR
				(@AccountID=-1 AND AccountTaskTypeRate.AccountID IS null))
        WHERE
			TaskType.DepartmentID = @CompanyID
			AND
			TaskType.Active = 1
	 END
	ELSE
	 BEGIN
		SELECT     
			TaskType.TaskTypeName,
			'' AS HourlyRateLabel, 
			'' AS HourlyTaskRateLabel,
			CASE   
				WHEN RatePlanRates.HourlyRate IS NULL 
					THEN ISNULL(TaskType.HourlyRate, 0) 
				ELSE RatePlanRates.HourlyRate END AS HourlyRateInherited,
			AccountTaskTypeRate.HourlyRate AS HourlyRateOverrided,
			AccountTaskTypeRate.AccountTaskTypeRateID,
			TaskType.TaskTypeId
		FROM         
			AccountTaskTypeRate
		INNER JOIN
		    TaskType ON AccountTaskTypeRate.TaskTypeID = TaskType.TaskTypeId AND AccountTaskTypeRate.CompanyID = TaskType.DepartmentID 
		LEFT OUTER JOIN
		    RatePlanRates ON TaskType.TaskTypeId = RatePlanRates.TaskTypeId 
					AND TaskType.DepartmentID = RatePlanRates.DepartmentId 
					AND RatePlanRates.RatePlanId = @RatePlanID
					AND AccountTaskTypeRate.CompanyID = RatePlanRates.DepartmentId
		WHERE
			AccountTaskTypeRate.CompanyID = @CompanyID
			AND
			TaskType.Active = 1
			AND
			(AccountTaskTypeRate.AccountID = @AccountID
			OR
			(@AccountID=-1 AND AccountTaskTypeRate.AccountID IS null)
			)
	END
GO
PRINT N'Creating [dbo].[sp_SelectAccountTechs]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAccountTechs]
	(
		@AccountID int = NULL,
		@CompanyID int
	)
AS

	DECLARE @configHourlyBillableRate smallmoney
	SELECT @configHourlyBillableRate=ISNULL(CAST(dbo.fxGetConfigValueStr(@CompanyID, 'configHourlyBillableRate') as smallmoney), 0)
	
	SELECT     
		tbl_LoginCompanyJunc.id,
		CASE  
			WHEN AccountTech.TechID IS NULL
				THEN 'All Technicians' 
			ELSE dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) END AS FullName,
		CASE  
			WHEN tbl_LoginCompanyJunc.configHourlyBillableRate IS NULL 
				THEN @configHourlyBillableRate 
			ELSE tbl_LoginCompanyJunc.configHourlyBillableRate END AS HourlyRate,
		AccountTech.AccountTechID
	FROM         
		AccountTech 
	LEFT OUTER JOIN
        tbl_LoginCompanyJunc ON AccountTech.CompanyID = tbl_LoginCompanyJunc.company_id 
		AND 
        AccountTech.TechID = tbl_LoginCompanyJunc.id 
	LEFT OUTER JOIN
		tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
	LEFT OUTER JOIN 
		tbl_company ON tbl_LoginCompanyJunc.company_id=tbl_company.company_id
	WHERE
		AccountTech.CompanyID = @CompanyID
		AND
		(AccountTech.AccountID = @AccountID
		OR
		(@AccountID=-1 AND AccountTech.AccountID IS null)
		)
GO
PRINT N'Creating [dbo].[sp_SelectAccountTicketStats]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAccountTicketStats]
(
		@DepartmentId int,
		@AccountID int 
)
AS
BEGIN
	
	DECLARE @SchedTktCount int
	SET @SchedTktCount = 0
	
	SELECT 
		@SchedTktCount = COUNT(st.id)
	FROM 
		SchedTickets st
	WHERE 
		st.DId=@DepartmentId 
		AND 
		ISNULL(intAcctId,-1) = @AccountID 

	SELECT 
		SUM(CASE WHEN status = 'Open' OR status = 'On Hold' THEN 1 ELSE 0 END) AS OpenTkt,
		SUM(CASE WHEN status = 'Closed' THEN 1 ELSE 0 END) AS ClosedTkt,
		@SchedTktCount AS SchedTktCount,
		SUM(CASE WHEN status <> 'Closed' AND dtFollowUp IS NOT NULL THEN 1 ELSE 0 END) AS FollowUpTkt
	FROM tbl_ticket
	WHERE 
		company_id = @DepartmentId 
		AND 
		ISNULL(intAcctId, -1) = @AccountID
		--AND 
		--(@AccountID = -1 AND ISNULL(btNoAccount, 0) = 0)

END
GO
PRINT N'Creating [dbo].[sp_SelectAccountTimeReport]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAccountTimeReport]
(
		@CompanyID int,		
		@AccountIDs varchar(2300),
		@DateStart smalldatetime,
		@DateEnd smalldatetime
	)
AS

	DECLARE @query VARCHAR(8000)

	SET @query = '(SELECT     
		Project.ProjectID,
		ISNULL(SUM(ProjectTime.Hours), 0) AS Hours,
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '''') + '' (Internal)''
			ELSE Accounts.vchName
      		END AS AccountName,
		dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS ProjectName,
		TaskType.TaskTypeId, 
		CASE 
			WHEN TaskType.TaskTypeId IS NULL THEN ''Default''
			ELSE TaskType.TaskTypeName
		END AS TaskTypeName,
		ProjectTime.UserId,
		dbo.fxGetUserName(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email) AS userFullName,
		ISNULL(Project.AccountID, ISNULL(ProjectTime.AccountID, -1)) AS AccountID,
		''PT'' AS Type
	FROM         
		ProjectTime LEFT OUTER JOIN
        Project ON ProjectTime.DepartmentId = Project.CompanyID AND ProjectTime.ProjectId = Project.ProjectID
		INNER JOIN tbl_company ON ProjectTime.DepartmentId = tbl_company.company_id
		LEFT OUTER JOIN Accounts ON ProjectTime.DepartmentId = Accounts.DId AND ISNULL(Project.AccountID, ProjectTime.AccountID) = Accounts.Id		
		LEFT OUTER JOIN TaskType ON ProjectTime.TaskTypeId = TaskType.TaskTypeId AND ProjectTime.DepartmentId = TaskType.DepartmentID
		LEFT OUTER JOIN tbl_LoginCompanyJunc ON ProjectTime.DepartmentId = tbl_LoginCompanyJunc.company_id AND ProjectTime.UserId = tbl_LoginCompanyJunc.id 
		LEFT OUTER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
	WHERE 
		ProjectTime.DepartmentId = ' + CAST(@CompanyID as varchar) + '		
		AND 
		ProjectTime.Deleted = 0
		AND 
		ProjectTime.Date >= ''' + CONVERT(nvarchar, @DateStart, 126) + '''
		AND
		ProjectTime.Date <= ''' + CONVERT(nvarchar, @DateEnd, 126) + '''' 

	IF @AccountIDs <> ''
		BEGIN
			SET @query = @query + 
			' AND 
			(ISNULL(Project.AccountID, ProjectTime.AccountID) IN (' + @AccountIDs + ')'
			IF PATINDEX('%-1%', @AccountIDs) <> 0
			BEGIN
				SET @query = @query + ' OR ISNULL(Project.AccountID, ProjectTime.AccountID) IS NULL)'
			END
			ELSE
			BEGIN
				SET @query = @query + ')'
			END			
		END

	SET @query = @query + ' GROUP BY
			Project.AccountID, Project.ProjectID, ProjectTime.UserId, TaskType.TaskTypeId,
			tbl_company.company_name, Accounts.vchName, Accounts.DId, TaskType.TaskTypeName,
			tbl_Logins.LastName, tbl_Logins.FirstName, Project.CompanyID, ProjectTime.AccountID, tbl_Logins.Email'

	SET @query = @query + ' UNION All
		SELECT 
		Project.ProjectID,
		ISNULL(SUM(TicketTime.Hours), 0) AS Hours,
		CASE 
			WHEN tbl_ticket.intAcctId IS NULL THEN CASE WHEN ISNULL(tbl_ticket.btNoAccount, 0) = 0 THEN 
				ISNULL(tbl_company.company_name, '''') + '' (Internal)'' ELSE '''' END
			ELSE Accounts.vchName
      		END AS AccountName,
		dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS ProjectName,
		TaskType.TaskTypeId, 
		CASE 
			WHEN TaskType.TaskTypeId IS NULL THEN ''Default''
			ELSE TaskType.TaskTypeName
		END AS TaskTypeName,
		TicketTime.UserId,
		dbo.fxGetUserName(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email) AS userFullName,
		ISNULL(tbl_ticket.intAcctId, CASE WHEN ISNULL(tbl_ticket.btNoAccount, 0) = 0 THEN -1 ELSE -2 END) AS AccountID,
		''TT'' AS Type
		FROM TicketTime
        INNER JOIN tbl_ticket ON TicketTime.DepartmentId = tbl_ticket.company_id AND TicketTime.TicketId = tbl_ticket.Id
		INNER JOIN tbl_company ON TicketTime.DepartmentId = tbl_company.company_id
		LEFT OUTER JOIN Project ON tbl_ticket.company_id = Project.CompanyID AND tbl_ticket.ProjectID = Project.ProjectID
		LEFT OUTER JOIN Accounts ON tbl_ticket.company_id = Accounts.DId AND tbl_ticket.intAcctId = Accounts.Id		
		LEFT OUTER JOIN TaskType ON TicketTime.TaskTypeId = TaskType.TaskTypeId AND TicketTime.DepartmentId = TaskType.DepartmentID
		LEFT OUTER JOIN tbl_LoginCompanyJunc ON TicketTime.DepartmentId = tbl_LoginCompanyJunc.company_id AND TicketTime.UserId = tbl_LoginCompanyJunc.id 
		LEFT OUTER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
		WHERE 
		TicketTime.DepartmentId = ' + CAST(@CompanyID as varchar) + '		
		AND 
		TicketTime.Deleted = 0
		AND 
		TicketTime.Date >= ''' + CONVERT(nvarchar, @DateStart, 126) + '''
		AND
		TicketTime.Date <= ''' + CONVERT(nvarchar, @DateEnd, 126) + ''''	

	IF @AccountIDs <> ''
		BEGIN
			SET @query = @query + 
			' AND 
			(tbl_ticket.intAcctId IN (' + @AccountIDs + ')'
			IF PATINDEX('%-1%', @AccountIDs) <> 0
			BEGIN
				SET @query = @query + ' OR (tbl_ticket.intAcctId IS NULL AND ISNULL(tbl_ticket.btNoAccount, 0) = 0))'
			END
			ELSE
			BEGIN
				SET @query = @query + ')'
			END			
		END

	SET @query = @query + ' GROUP BY
			tbl_ticket.intAcctId, Project.ProjectID, TicketTime.UserId, TaskType.TaskTypeId,
			tbl_company.company_name, Accounts.vchName, Accounts.DId, TaskType.TaskTypeName,
			tbl_Logins.LastName, tbl_Logins.FirstName, Project.CompanyID, ISNULL(tbl_ticket.btNoAccount, 0), tbl_Logins.Email'
		
	SET @query = @query + ') ORDER BY AccountID, Project.ProjectID, ProjectTime.UserId, TaskType.TaskTypeId, Type'

	EXEC(@query)
GO
PRINT N'Creating [dbo].[sp_SelectAcctAllChildLocations]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAcctAllChildLocations]
	(
		@DepartmentId int,
		@AccountId int = NULL
	)
AS

WITH LocationChilds(Id, Name) AS 
(
    SELECT Id, [dbo].[fxGetLocationName](@DepartmentId,Id) as Name
    FROM Locations 
    WHERE DId=@DepartmentId and ISNULL(AccountId, -1) = ISNULL(@AccountId,-1)
    UNION ALL
    SELECT c.Id, [dbo].[fxGetLocationName](@DepartmentId,c.Id) as Name
    FROM Locations AS c
    JOIN Locations AS p ON c.ParentId=p.Id and c.DId=@DepartmentId and p.DId=@DepartmentId
)

SELECT distinct Id, Name
FROM LocationChilds
OPTION (MAXRECURSION 33);
GO
PRINT N'Creating [dbo].[sp_SelectAcctCfg]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAcctCfg]
	(
		@DId int,
		@isProject bit
	)
AS
	IF NOT EXISTS(SELECT 'true' FROM AccountsCfg WHERE DId=@DId AND isProject = @isProject)
				INSERT INTO AccountsCfg (DId, isProject) VALUES (@DId, @isProject)
				
	SELECT * FROM AccountsCfg WHERE DId=@DId AND isProject = @isProject
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctCreateTkt]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAcctCreateTkt]
	(
		@DId int,
		@UId int,
		@AcctId int=null OUTPUT,
		@vchAcctName nvarchar(100)=null OUTPUT,
		@AccountLocationId int=null OUTPUT,
		@AccountLocationName nvarchar(50)=null OUTPUT,
		@UserDeptLocationId int=null OUTPUT,
		@AcctDeptLocationId int=null OUTPUT,
		@AcctDeptLocationName nvarchar(50)=null OUTPUT,
--		@vchRoom nvarchar(30)=null OUTPUT,
		@vchUserFirstName nvarchar(100)=null OUTPUT, 
		@vchUserLastName nvarchar(100)=null OUTPUT, 
		@btCfgCCRep bit=null OUTPUT, --VGOOZ: 14-MAR-2005 - Added Call Centre Support
		@vchUserEmail nvarchar(100)=null OUTPUT,
		@DeptAccCount int=null OUTPUT,
		@DeptLocationCount int=null OUTPUT
	)
AS
	SET NOCOUNT ON
			DECLARE @RetrievedAccountId int
		IF @AcctId IS NULL	
			SELECT @RetrievedAccountId=ISNULL(intAcctId,-1) FROM tbl_ticket WHERE company_id=@DId AND User_id=@UId AND intAcctId IN (SELECT AccountId FROM UserAccounts WHERE DepartmentId=@DId AND UserId=@UId) GROUP BY intAcctId ORDER BY count(*) DESC
		ELSE
			SET @RetrievedAccountId=@AcctId	
		IF @RetrievedAccountId IS NULL	
			SELECT @RetrievedAccountId = ISNULL(a.id,-1), @vchAcctName=ISNULL(a.vchName, (SELECT company_name FROM tbl_company WHERE company_id=@DId) + ' (Internal)'), 
				@AccountLocationId=UA.AccountLocationId, 
				@AccountLocationName=dbo.fxGetUserLocationName(@DId, UA.AccountLocationId), 
				@AcctDeptLocationId=a.LocationId,
				@AcctDeptLocationName=dbo.fxGetUserLocationName(@DId, a.LocationId), 
				@UserDeptLocationId=lcj.LocationId, 
				@vchUserFirstName=l.FirstName,
				@vchUserLastName=l.LastName,				 
				@btCfgCCRep=lcj.btCfgCCRep, 
				@vchUserEmail=l.Email 
			FROM tbl_LoginCompanyJunc lcj
			JOIN tbl_Logins l ON l.id=lcj.login_id
			LEFT JOIN UserAccounts AS UA ON UA.DepartmentId = lcj.company_id AND UA.UserId = lcj.Id
			LEFT JOIN Accounts AS A ON A.DId=lcj.company_id AND A.id=UA.AccountId
			WHERE lcj.company_id=@DId and lcj.id=@UId
		ELSE
			SELECT @RetrievedAccountId = ISNULL(a.id,-1), @vchAcctName=ISNULL(a.vchName, (SELECT company_name FROM tbl_company WHERE company_id=@DId) + ' (Internal)'), 
				@AccountLocationId=UA.AccountLocationId, 
				@AccountLocationName=dbo.fxGetUserLocationName(@DId, UA.AccountLocationId), 
				@AcctDeptLocationId=a.LocationId,
				@AcctDeptLocationName=dbo.fxGetUserLocationName(@DId, a.LocationId), 
				@UserDeptLocationId=lcj.LocationId, 
				@vchUserFirstName=l.FirstName,
				@vchUserLastName=l.LastName,				 
				@btCfgCCRep=lcj.btCfgCCRep, 
				@vchUserEmail=l.Email 
			FROM tbl_LoginCompanyJunc lcj
			JOIN tbl_Logins l ON l.id=lcj.login_id
			LEFT JOIN UserAccounts AS UA ON UA.DepartmentId = lcj.company_id AND UA.UserId = lcj.Id AND ISNULL(UA.AccountId,-1)=@RetrievedAccountId
			LEFT JOIN Accounts AS A ON A.DId=lcj.company_id AND A.id=@RetrievedAccountId
			WHERE lcj.company_id=@DId and lcj.id=@UId
		SET @AcctId = @RetrievedAccountId
		
		SELECT @DeptAccCount=COUNT(Id)
		FROM Accounts WHERE DId = @DId  AND btActive=1
		SET @DeptAccCount = @DeptAccCount + 1
		SELECT @DeptLocationCount=COUNT(Id)
		FROM Locations WHERE DId=@DId AND Inactive=0
		
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctEmailSuffix]...';


GO

CREATE PROCEDURE sp_SelectAcctEmailSuffix
	(
		@DId int,
		@vchEmailSuffix nvarchar(50),
		@AcctId int=null OUTPUT
	)
AS
	SELECT TOP 1 @AcctId=Id FROM Accounts WHERE DId=@DId AND vchEmailSuffix=@vchEmailSuffix
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctFields]...';


GO

CREATE PROCEDURE sp_SelectAcctFields
	(
		@Mode varchar(1),
		@DId int,
		@UId int,
		@vchAcctFields varchar(30)=null OUTPUT,
		@vchAcctSort varchar(25)=null OUTPUT
	)
AS
	IF @Mode = 'S'
		SELECT @vchAcctFields=vchAcctFields, @vchAcctSort=vchAcctSort FROM AccountFilters WHERE DId=@DId AND UId=@UId
		
	IF @Mode = 'U'
		BEGIN
			IF EXISTS(SELECT 'true' FROM AccountFilters WHERE DId=@DId AND UId=@UId)
				UPDATE AccountFilters SET vchAcctFields=@vchAcctFields, vchAcctSort=@vchAcctSort WHERE DId=@DId AND UId=@UId
			ELSE
				INSERT INTO AccountFilters (DId, UId, vchAcctFields, vchAcctSort) VALUES (@DId, @UId, @vchAcctFields, @vchAcctSort)
		END
		
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctFile]...';


GO
CREATE PROCEDURE dbo.sp_SelectAcctFile
	(
		@DId int,
		@AcctId int,
		@Id int,
		@intBWAFileId int=null OUTPUT,
		@vchName nvarchar(100)=null OUTPUT,
		@tintVersion tinyint=null OUTPUT,
		@intSizeKB int=null OUTPUT
	)
AS
	SELECT @intBWAFileId=intBWAFileId, @vchName=vchName, @tintVersion=tintVersion, @intSizeKB=intSizeKB
	FROM AccountFiles
	WHERE DId=@DId AND AcctId=@AcctId AND Id=@ID
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctFiles]...';


GO

CREATE PROCEDURE sp_SelectAcctFiles
	(
		@DId int,
		@AcctId int,
		@strSearch nvarchar(25)=null
	)
AS
	IF @strSearch IS NULL
		BEGIN
			SELECT f.id, f.vchName, f.intSizeKB, f.dtModified, f.tintVersion 
			FROM AccountFiles f
			WHERE f.DId=@DId AND f.AcctId=@AcctId
			ORDER BY f.vchName, f.dtModified DESC
		END
	ELSE
		BEGIN
			SELECT f.id, f.vchName, f.intSizeKB, f.dtModified, f.tintVersion 
			FROM AccountFiles f
			WHERE f.DId=@DId AND f.AcctId=@AcctId AND f.vchName LIKE @strSearch+'%'
			ORDER BY f.vchName, f.dtModified DESC
		END
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctLocations]...';


GO
CREATE PROCEDURE dbo.sp_SelectAcctLocations
	(
		@DepartmentId int,
		@AccountId int = NULL
	)
AS
SELECT l.Id, l.Name, 
(select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='Address1' ) as Address1,
(select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='City' ) as City, 
(select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='State' ) as State, 
(select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='Zip Code' ) as ZipCode, 
(select top 1 PropertyValue from LocationPropertyValues v join LocationTypeProperties p on v.LocationTypePropertyId=p.Id and p.DId=@DepartmentId where v.DId=@DepartmentId and v.LocationId=l.Id and p.Name='Phone1' ) as Phone1, 
l.Inactive, t.Name as TypeName
FROM Locations l
left join LocationTypes t on t.DId=@DepartmentId and t.Id=l.LocationTypeId
WHERE l.DId=@DepartmentId AND 
	ISNULL(l.AccountId, -1) = ISNULL(@AccountId,-1) AND 
	l.ParentId IS NULL
ORDER BY l.Inactive, l.Name
GO
PRINT N'Creating [dbo].[sp_SelectAcctLvlReps]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectAcctLvlReps]
	(
		@DId int,
		@AcctId int,
		@tintLevel tinyint
	)
AS
	SELECT LCJ.id, L.LastName+', '+L.FirstName as vchFullName
	FROM AccountLevelTechs ALT 
	INNER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND LCJ.id=ALT.UId 
	INNER JOIN tbl_Logins L ON L.id=LCJ.login_id 
	WHERE ALT.DId=@DId AND ALT.AcctId=@AcctId AND ALT.tintLevel=@tintLevel
	ORDER BY vchFullName
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctName]...';


GO
CREATE PROCEDURE dbo.sp_SelectAcctName
	(
		@DId int,
		@AcctId int,
		@vchAcctName nvarchar(100)=null OUTPUT
	)
AS
	IF (@AcctId = -1)
		SELECT @vchAcctName=company_name + ' (Internal)' FROM tbl_company WHERE company_id=@DId
	ELSE
		SELECT @vchAcctName=vchName FROM Accounts WHERE DId=@DId AND Id=@AcctId
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctNote]...';


GO

CREATE PROCEDURE sp_SelectAcctNote
	(
		@DId int,
		@AcctId int
	)
AS
	SELECT txtNote FROM Accounts WHERE DId=@DId AND Id=@AcctId
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctProjects]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectAcctProjects]
(
		@CompanyID int,
		@AccountID int
	)
AS

	DECLARE @Stack TABLE(
  	ProjectID int,
	lvl int
	)

DECLARE @ProjectTree TABLE(
  	ProjectID int,
  	Name nvarchar(50),
  	ParentID int,
	InternalPMFullName nvarchar(100),
	ClientPMLFullName nvarchar(100),
	Active bit,
	lvl int,
	OverrideRate nvarchar(50),
	BillingMethodID int,
	InfoField nvarchar(200)
	)

DECLARE @lvl int,
		@CurrentProjectID int, 
		@btCfgToDo bit

SET @btCfgToDo = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgToDo')
SET @lvl = 1

INSERT
		@Stack
	SELECT     
		Project.ProjectID, 
		@lvl
	FROM         
		Project 
	WHERE
		Project.CompanyID = @CompanyID 
		AND 
		((@AccountID=-1 AND Project.AccountID IS null) OR Project.AccountID=@AccountID)
		AND
		ParentID IS NULL      
		AND
		Active = 1    
	ORDER BY
		Project.Name  DESC           

WHILE @lvl > 0
      BEGIN
         IF EXISTS (SELECT * FROM @Stack WHERE lvl = @lvl)
            BEGIN
               SELECT @CurrentProjectID = ProjectID
               FROM @Stack
               WHERE lvl = @lvl

			   INSERT
					@ProjectTree
			   SELECT  
					Project.ProjectID, 
					space((@lvl - 1)*5) + Project.Name, 
					Project.ParentID,
					dbo.fxGetUserName(internalPML.FirstName, internalPML.LastName, internalPML.Email),
					dbo.fxGetUserName(clientPML.FirstName, clientPML.LastName, clientPML.Email),
					Project.Active,
					@lvl,
					dbo.fxGetProjectBillingMethod(@CompanyID, Project.ProjectID) AS OverrideRate,
					Project.BillingMethodID,
					CASE dbo.fxGetProjectBillingMethod(@CompanyID, Project.ProjectID)
						WHEN 'Flat Fee' THEN '$' + RTRIM(LTRIM(STR(dbo.fxGetProjectFlatFee(@CompanyID, Project.ProjectID), 25, 2)))
						WHEN 'Hourly Staff Rate' THEN ''
						WHEN 'Hourly Blended Rate' THEN '$' + RTRIM(LTRIM(STR(dbo.fxGetProjectBlendedRate(@CompanyID, Project.ProjectID), 25, 2))) + '/hr'
						WHEN 'Hourly Task Rate' THEN 
									CASE 
										WHEN dbo.fxGetProjectRatePlan(@CompanyID, Project.ProjectID) IS NULL 
										THEN 'No Rate Plan' 
										ELSE (SELECT [Name] FROM RatePlan WHERE DepartmentId = @CompanyID AND Id = dbo.fxGetProjectRatePlan(@CompanyID, Project.ProjectID))
									END
						WHEN 'Billing Disabled' THEN 'Not Billable'
						ELSE ''
					END AS InfoField
			   FROM       
					Project 
			   LEFT OUTER JOIN
					tbl_LoginCompanyJunc tbl_LoginCompanyJuncInternal ON Project.CompanyID = tbl_LoginCompanyJuncInternal.company_id AND Project.InternalPMID = tbl_LoginCompanyJuncInternal.id 
			   LEFT OUTER JOIN
                    tbl_Logins internalPML ON tbl_LoginCompanyJuncInternal.login_id = internalPML.id
			   LEFT OUTER JOIN
					tbl_LoginCompanyJunc ON Project.CompanyID = tbl_LoginCompanyJunc.company_id AND Project.ClientPMID = tbl_LoginCompanyJunc.id 
			   LEFT OUTER JOIN
                    tbl_Logins clientPML ON tbl_LoginCompanyJunc.login_id = clientPML.id
			   WHERE
					Project.CompanyID = @CompanyID
					AND
					Project.ProjectID = @CurrentProjectID
					AND
					Project.Active = 1


               DELETE FROM @Stack
               WHERE lvl = @lvl
                  AND ProjectID = @CurrentProjectID

				INSERT
					@Stack
				SELECT     
					Project.ProjectID,
					@lvl + 1
				FROM        
					Project 
				WHERE
					ParentID = @CurrentProjectID
				ORDER BY
					Project.Name  DESC

               IF @@ROWCOUNT > 0
                  SET @lvl = @lvl + 1
            END
         ELSE
            SELECT @lvl = @lvl - 1
   END -- WHILE

	SELECT
		tree.ProjectID,
  		tree.Name,
  		tree.ParentID,
		tree.InternalPMFullName,
		tree.ClientPMLFullName,
		tree.Active,
		tree.lvl,
		tree.OverrideRate,
		tree.BillingMethodID,
		tree.InfoField,
		ISNULL(prt.TotalHours, 0) + ISNULL(ptkt.TicketHours, 0) AS TotalHours,
		ISNULL(ptkt.OpenTickets, 0) AS OpenTickets,
		ISNULL(ptkt.CountTickets, 0) - ISNULL(ptkt.OpenTickets, 0) AS ClosedTickets,
		ISNULL(ptkt.TicketRemainingHours, 0) + ISNULL(prtd.ToDoProjectRemaining, 0) AS RemainingHours
	FROM
		@ProjectTree tree
	LEFT OUTER JOIN 
		(SELECT pt.ProjectId AS ProjectId, ISNULL(SUM(pt.Hours), 0) AS TotalHours FROM ProjectTime pt WHERE pt.DepartmentId=@CompanyID AND pt.Deleted=0 GROUP BY pt.ProjectId) prt ON prt.ProjectId = tree.ProjectID
	LEFT OUTER JOIN 
		(SELECT t.ProjectID AS ProjectID, SUM(CASE WHEN t.Status<>'Closed' THEN 1 ELSE 0 END) AS OpenTickets, COUNT(*) AS CountTickets, SUM(ISNULL(TotalHours, 0)) AS TicketHours, SUM(ISNULL(RemainingHours, 0)) AS TicketRemainingHours FROM tbl_ticket t WHERE t.company_id=@CompanyID GROUP BY t.ProjectID) ptkt ON ptkt.ProjectID = tree.ProjectID
	LEFT OUTER JOIN
		(SELECT ToDoList.ProjectId, SUM(ISNULL(ToDoItem.HoursEstimatedRemaining, 0)) AS ToDoProjectRemaining FROM ToDoItem INNER JOIN ToDoList ON ToDoItem.DId = ToDoList.DId AND ToDoItem.ToDoListId = ToDoList.Id WHERE ToDoList.DId=@CompanyID AND ToDoItem.Completed = 0 AND ToDoList.ProjectId IS NOT NULL AND @btCfgToDo = 1 GROUP BY ToDoList.ProjectId) prtd ON prtd.ProjectID = tree.ProjectID
GO
PRINT N'Creating [dbo].[sp_SelectAcctProjectsBillMethods]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAcctProjectsBillMethods]
	(
		@DId int,		
		@Active bit
	)
AS

DECLARE @btCfgAcctMngr nvarchar(255),
	@btCfgProject bit
SET @btCfgAcctMngr = dbo.fxGetConfigValueStr(@DId, 'btCfgAcctMngr')
SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')

SELECT NULL AS ProjectID, -1 AS Id, (company_name + ' (Internal)') AS [Name], 1 AS Active, ISNULL(AR.BillingMethodID, 0) AS BillingMethodID, ISNULL(BM.Name, 'No') AS BillingMethodName, 'A' AS EntityName, NULL AS ParentID
FROM tbl_company LEFT OUTER JOIN AccountRate AR ON AR.CompanyID = tbl_company.company_id AND AR.AccountID IS NULL
		LEFT OUTER JOIN BillingMethod BM ON AR.BillingMethodID = BM.BillingMethodID
WHERE company_id = @DId AND (@Active = 1 OR @Active IS NULL 
		OR (((SELECT COUNT(pp.ProjectID) FROM Project pp WHERE pp.AccountID IS NULL AND pp.Active = 0) > 0) AND @Active = 0))
UNION
SELECT NULL AS ProjectID, A.Id, A.vchName AS [Name], btActive AS Active, ISNULL(AR.BillingMethodID, 0) AS BillingMethodID, ISNULL(BM.Name, 'No') AS BillingMethodName, 'A' AS EntityName, NULL AS ParentID
FROM Accounts A LEFT OUTER JOIN AccountRate AR ON A.DId = AR.CompanyID AND A.Id = AR.AccountID
				LEFT OUTER JOIN BillingMethod BM ON AR.BillingMethodID = BM.BillingMethodID
WHERE @btCfgAcctMngr = 'true' AND A.DId = @DId AND 
(@Active IS NULL
OR ((A.btActive = @Active OR (SELECT COUNT(pp.ProjectID) FROM Project pp WHERE pp.AccountID = A.Id AND pp.Active = 1) > 0) AND @Active = 1) 
OR ((A.btActive = @Active OR (SELECT COUNT(pp.ProjectID) FROM Project pp WHERE pp.AccountID = A.Id AND pp.Active = 0) > 0) AND @Active = 0))
UNION
SELECT P.ProjectID, ISNULL(P.AccountID, -1) AS Id, P.Name, ISNULL(Active, 0) AS Active, ISNULL(P.BillingMethodID, 0) AS BillingMethodID, dbo.fxGetProjectBillingMethod(@DId, P.ProjectID)  AS BillingMethodName, 'P' AS EntityName, ISNULL(ParentID, -1) AS ParentID
FROM Project P LEFT OUTER JOIN BillingMethod BM ON P.BillingMethodID = BM.BillingMethodID
WHERE P.CompanyID = @DId AND 
@btCfgProject = 1	
AND
(@Active IS NULL
OR ((P.Active = @Active OR dbo.fxGetCountActiveChildProjects(P.ProjectID) > 0) AND @Active = 1) 
OR ((P.Active = @Active OR dbo.fxGetCountInActiveChildProjects(P.ProjectID) > 0) AND @Active = 0))
GO
PRINT N'Creating [dbo].[sp_SelectAcctProjectsTree]...';


GO
CREATE PROCEDURE dbo.sp_SelectAcctProjectsTree
	(
		@CompanyID int,
		@AccountID int,
		@Active bit,
		@CurrProjectID int
	)
AS

	SELECT     
		Project.ProjectID, 
		Project.ParentID,
		Name,
		Active,
		dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS FullProjectName,
		dbo.fxIsChildProject(Project.ProjectID, @CurrProjectID) AS IsChildProject
	FROM         
		Project 
	WHERE
		Project.CompanyID = @CompanyID 
		AND 
		((@AccountID=-1 AND Project.AccountID IS null) OR Project.AccountID=@AccountID)  
		AND
		(((Active = 1 OR dbo.fxGetCountActiveChildProjects(Project.ProjectID) > 0) AND @Active = 1)
		OR @Active = 0)
	ORDER BY
		FullProjectName
GO
PRINT N'Creating [dbo].[sp_SelectAcctReps]...';


GO
CREATE PROCEDURE dbo.sp_SelectAcctReps
	(
		@DId int
	)
AS
--VGOOZ 26-SEP-2005: tkt #2951 - Inactive users functionality
--VGOOZ 21-NOV-2005: allow unasigned queues to be selected as well as technicians	
	SELECT lcj.id, l.LastName+', '+l.FirstName as FullName
	FROM tbl_LoginCompanyJunc lcj
	JOIN tbl_Logins l ON l.id = lcj.login_id
	WHERE lcj.company_id=@DId AND (lcj.usertype_id=2 OR lcj.usertype_id=3 OR lcj.usertype_id=4) AND lcj.btUserInactive=0
	ORDER BY l.LastName, l.FirstName
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctSchedTkt]...';


GO
CREATE PROCEDURE dbo.sp_SelectAcctSchedTkt
	(
		@DId int,
		@AcctId int,
		@vchAcctName nvarchar(100)=null OUTPUT,
		@LocationId int=null OUTPUT, 
		@LocationName nvarchar(2000)=null OUTPUT		
	)
AS
	SELECT @vchAcctName=vchName, @LocationId=LocationId, @LocationName=dbo.fxGetUserLocationName(@DId, LocationId) FROM Accounts WHERE DId=@DId AND Id=@AcctId
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctUser]...';


GO
CREATE PROCEDURE dbo.sp_SelectAcctUser
	(
		@DId int,
		@AccountId int,
		@Id int
	)
AS
	SELECT l.Email as vchEmail, l.FirstName as vchFirstName, l.LastName as vchLastName, l.Title as vchTitle, l.Phone as vchPhone, 
		l.MobilePhone as vchMobile, lcj.LocationId AS InternalLocationId, UA.AccountLocationId, lcj.dtLastLogin, lcj.UserType_id as intUserType,
		dbo.fxGetUserLocationName(@DId, UA.AccountLocationId) AS LocationName, 
		
		(select top 1 v.PropertyValue from LocationTypeProperties p	join LocationPropertyValues v on v.DId=p.DId and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='Address1' and v.LocationId=al.Id) as Address1,
		(select top 1 v.PropertyValue from LocationTypeProperties p	join LocationPropertyValues v on v.DId=p.DId and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='Address2' and v.LocationId=al.Id) as Address2,
		(select top 1 v.PropertyValue from LocationTypeProperties p	join LocationPropertyValues v on v.DId=p.DId and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='City' and v.LocationId=al.Id) as City,
		(select top 1 v.PropertyValue from LocationTypeProperties p	join LocationPropertyValues v on v.DId=p.DId and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='State' and v.LocationId=al.Id) as State,
		(select top 1 v.PropertyValue from LocationTypeProperties p	join LocationPropertyValues v on v.DId=p.DId and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='Zip Code' and v.LocationId=al.Id) as ZipCode,
		(select top 1 v.PropertyValue from LocationTypeProperties p	join LocationPropertyValues v on v.DId=p.DId and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='Country' and v.LocationId=al.Id) as Country,
		(select top 1 v.PropertyValue from LocationTypeProperties p	join LocationPropertyValues v on v.DId=p.DId and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='LocationPhone1' and v.LocationId=al.Id) as LocationPhone1,
		(select top 1 v.PropertyValue from LocationTypeProperties p	join LocationPropertyValues v on v.DId=p.DId and v.LocationTypePropertyId=p.Id where p.DId=@DId and p.LocationTypeId=t.Id and p.Name='LocationPhone2' and v.LocationId=al.Id) as LocationPhone2,
		
		ISNULL(UA.AccountingContact, 0) AS AccountingContact, ISNULL(UA.AccountingContactPrimary, 0) AS AccountingContactPrimary
	FROM tbl_LoginCompanyJunc lcj
	JOIN tbl_Logins l ON l.id = lcj.login_id
	LEFT JOIN UserAccounts UA ON UA.DepartmentId = lcj.company_id AND UA.UserId = lcj.id AND ISNULL(AccountId, -1) = @AccountId
	LEFT OUTER JOIN Locations al ON al.DId=@DId /*AND al.AccountId=lcj.intAccountId*/ AND al.Id=UA.AccountLocationId
	
	left join LocationTypes t on t.DId=@DId /*and t.Name = 'Building'*/ and al.LocationTypeId=t.Id
	
	WHERE lcj.company_id=@DId AND lcj.id=@Id
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctUsers]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAcctUsers]
(
		@DId int,
		@Id int,
		@strSearch nvarchar(25)=null,
		@btInactive bit = null,
		@Top int = NULL -- Not fully used for now, saved for the future
	)
AS
--VGOOZ 27-SEP-2005: tkt #2951 - Inactive users functionality	
--Valeriy Gooz: tkt #3609 - Inactive users must show with mark, but cant create tickets	
	IF @strSearch IS NULL
		BEGIN
			IF @Top IS NULL
				BEGIN
					SELECT  lj.id, dbo.fxGetUserName2(lo.FirstName, lo.LastName, lo.Email) AS vchFullName, lo.Email AS vchEmail, lo.Title AS vchTitle, lo.Phone AS vchPhone, dbo.fxGetUserLocationName(@DId, UA.AccountLocationId) as LocationName,
					ut.Name as vchUserType, lj.btUserInactive as UserInactive,
					ISNULL(UA.AccountingContact, 0) AS AccountingContact, ISNULL(UA.AccountingContactPrimary, 0) AS AccountingContactPrimary
					FROM tbl_LoginCompanyJunc lj
					JOIN tbl_Logins lo ON lo.id=lj.login_id 
					JOIN UserAccounts AS UA ON UA.DepartmentId = lj.company_id AND lj.Id = UA.UserId
					LEFT OUTER JOIN tbl_UserType ut ON ut.id=lj.UserType_id
					WHERE lj.company_id=@DId AND (lj.btUserInactive = @btInactive OR @btInactive IS NULL) AND ISNULL(UA.AccountId, -1) = @Id
					ORDER BY lo.LastName, lo.FirstName
				END
			ELSE
				BEGIN
					SELECT TOP/*(@Top)*/ 26 lj.id, dbo.fxGetUserName2(lo.FirstName, lo.LastName, lo.Email) AS vchFullName, lo.Email AS vchEmail, lo.Title AS vchTitle, lo.Phone AS vchPhone, dbo.fxGetUserLocationName(@DId, UA.AccountLocationId) as LocationName,
					ut.Name as vchUserType, lj.btUserInactive as UserInactive,
					ISNULL(UA.AccountingContact, 0) AS AccountingContact, ISNULL(UA.AccountingContactPrimary, 0) AS AccountingContactPrimary
					FROM tbl_LoginCompanyJunc lj 
					JOIN tbl_Logins lo ON lo.id=lj.login_id
					JOIN UserAccounts AS UA ON UA.DepartmentId = lj.company_id AND lj.Id = UA.UserId
					LEFT OUTER JOIN tbl_UserType ut ON ut.id=lj.UserType_id
					WHERE lj.company_id=@DId AND (lj.btUserInactive = @btInactive OR @btInactive IS NULL) AND ISNULL(UA.AccountId, -1) = @Id
					ORDER BY lo.LastName, lo.FirstName
				END
		END
		
	ELSE
		BEGIN
			IF @Top IS NULL
				BEGIN
					SELECT lj.id, dbo.fxGetUserName2(lo.FirstName, lo.LastName, lo.Email) AS vchFullName, lo.Email AS vchEmail, lo.Title AS vchTitle, lo.Phone AS vchPhone, dbo.fxGetUserLocationName(@DId, UA.AccountLocationId) as LocationName,
					ut.Name as vchUserType, lj.btUserInactive as UserInactive,
					ISNULL(UA.AccountingContact, 0) AS AccountingContact, ISNULL(UA.AccountingContactPrimary, 0) AS AccountingContactPrimary
					FROM tbl_LoginCompanyJunc lj
					JOIN tbl_Logins lo ON lo.id=lj.login_id AND lo.LastName LIKE @strSearch+'%'
					JOIN UserAccounts AS UA ON UA.DepartmentId = lj.company_id AND lj.Id = UA.UserId
					LEFT OUTER JOIN tbl_UserType ut ON ut.id=lj.UserType_id
					WHERE lj.company_id=@DId AND (lj.btUserInactive = @btInactive OR @btInactive IS NULL) AND ISNULL(UA.AccountId, -1) = @Id
					ORDER BY lo.LastName, lo.FirstName	
				END
			ELSE
				BEGIN
					SELECT TOP/*(@Top)*/ 26 lj.id, dbo.fxGetUserName2(lo.FirstName, lo.LastName, lo.Email) AS vchFullName, lo.Email AS vchEmail, lo.Title AS vchTitle, lo.Phone AS vchPhone, dbo.fxGetUserLocationName(@DId, UA.AccountLocationId) as LocationName,
					ut.Name as vchUserType, lj.btUserInactive as UserInactive,
					ISNULL(UA.AccountingContact, 0) AS AccountingContact, ISNULL(UA.AccountingContactPrimary, 0) AS AccountingContactPrimary
					FROM tbl_LoginCompanyJunc lj
					JOIN tbl_Logins lo ON lo.id=lj.login_id AND lo.LastName LIKE @strSearch+'%'
					JOIN UserAccounts AS UA ON UA.DepartmentId = lj.company_id AND lj.Id = UA.UserId
					LEFT OUTER JOIN tbl_UserType ut ON ut.id=lj.UserType_id
					WHERE lj.company_id=@DId AND (lj.btUserInactive = @btInactive OR @btInactive IS NULL) AND ISNULL(UA.AccountId, -1) = @Id 
					ORDER BY lo.LastName, lo.FirstName
				END	
		
		END
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctUsersDelete]...';


GO
CREATE PROCEDURE dbo.sp_SelectAcctUsersDelete
	(
		@DId int,
		@AcctId int,
		@Id int
	)
AS
	SELECT lcj.id, l.LastName+', '+l.FirstName as vchFullName FROM UserAccounts AS UA
	JOIN tbl_LoginCompanyJunc AS LCJ ON UA.DepartmentId =@DId AND ISNULL(UA.AccountId,-1) = @AcctId AND LCJ.company_id = UA.DepartmentId AND LCJ.id = UA.UserId
	JOIN tbl_Logins AS L ON L.id = LCJ.login_id
	WHERE lcj.id<>@Id
	ORDER BY l.FirstName, l.LastName
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctUserSearch]...';


GO
CREATE PROCEDURE dbo.sp_SelectAcctUserSearch
	(
		@DId int,
		@AcctId int,
		@vchLastName nvarchar(50),
		@vchFirstName nvarchar(50),
		@vchEmail nvarchar(50),
		@intAcctLocationId int=null
	)
AS
	
--VGOOZ 27-SEP-2005: tkt #2951 - Inactive users functionality	
	IF @intAcctLocationId is NULL OR @intAcctLocationId=0
		BEGIN
			SELECT TOP 25 tlj.id, lo.LastName+', '+lo.FirstName AS vchFullName, lo.Email AS vchEmail, al.vchName as vchLocationName
			FROM tbl_LoginCompanyJunc tlj
			JOIN tbl_Logins lo ON lo.id=tlj.login_id
			LEFT OUTER JOIN AccountLocations al ON al.DId=@DId AND al.AccountId=@AcctId AND al.id=tlj.intAcctLocationId
			WHERE tlj.company_id=@DId AND tlj.intAccountId=@AcctId AND tlj.btUserInactive=0 AND lo.LastName LIKE @vchLastName+'%' AND lo.FirstName LIKE @vchFirstName+'%' AND lo.Email LIKE @vchEmail+'%'
			ORDER BY lo.LastName, lo.FirstName
		End
	ELSE
		BEGIN
			SELECT TOP 25 tlj.id, lo.LastName+', '+lo.FirstName AS vchFullName, lo.Email AS vchEmail, al.vchName as vchLocationName
			FROM tbl_LoginCompanyJunc tlj
			JOIN tbl_Logins lo ON lo.id=tlj.login_id
			LEFT OUTER JOIN AccountLocations al ON al.DId=@DId AND al.AccountId=@AcctId AND al.id=tlj.intAcctLocationId
			WHERE tlj.company_id=@DId AND tlj.intAccountId=@AcctId AND tlj.intAcctLocationId=@intAcctLocationId AND tlj.btUserInactive=0 AND lo.LastName LIKE @vchLastName+'%' AND lo.FirstName LIKE @vchFirstName+'%' AND lo.Email LIKE @vchEmail+'%'
			ORDER BY lo.LastName, lo.FirstName
		
		END
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAcctUsersPager]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_SelectAcctUsersPager]
	@DepartmentId int,
	@AccountId int
AS
BEGIN
	DECLARE @AllLetters TABLE(FirstName nchar(1), LastName nchar(1))

	INSERT INTO @AllLetters 
	SELECT UPPER(LEFT(L.FirstName,1)) AS FirstName, UPPER(LEFT(L.LastName,1)) AS LastName FROM UserAccounts AS UA
	JOIN tbl_LoginCompanyJunc AS LCJ ON UA.DepartmentId =@DepartmentId AND ISNULL(UA.AccountId,-1) = @AccountId AND LCJ.company_id = UA.DepartmentId AND LCJ.id = UA.UserId
	JOIN tbl_Logins AS L ON L.id = LCJ.login_id
	
	SELECT DISTINCT FirstName AS FirstLetter FROM @AllLetters
	UNION
	SELECT LastName FROM @AllLetters
	ORDER BY FirstLetter
END
GO
PRINT N'Creating [dbo].[sp_SelectArticle]...';


GO

CREATE Procedure sp_SelectArticle

	(
		@id int
	)

As
	/* set nocount on */
	DECLARE @global int
	IF EXISTS(SELECT * FROM tbl_knowledgebase WHERE  id = @id AND globalKnowledgebase = 1 )
		
		SET @global = 1
	ELSE
		SET @global = 0
	SELECT @Global AS isGlobal
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectAsset]...';


GO
CREATE Procedure dbo.sp_SelectAsset
	(
		@DepartmentId int,
		@AssetId int
	)

As
	-- Using view commented by reasons: - unknown sql server bug (not return existing records) - not need select all asset for all departments!!! for later choose one record

	--SELECT * FROM vw_AssetDetail WHERE DepartmentId = @DepartmentId AND id = @AssetId

SELECT     dbo.Assets.*, dbo.Assets.CategoryId, dbo.Assets.AssetGUID , dbo.Assets.AssetNumber , dbo.Assets.SerialNumber, dbo.Assets.Unique1, dbo.Assets.Unique3, dbo.Assets.Unique3, dbo.Assets.Unique4, 
					  dbo.Assets.Unique5, dbo.Assets.Unique6, dbo.Assets.Unique7, dbo.Assets.Room, dbo.AssetCategories.Name AS AssetCategoryName, dbo.AssetTypes.Name AS AssetTypeName, dbo.AssetTypes.AssetProfileId AS AssetProfileId,
                      dbo.AssetModels.Model AS AssetModelName, dbo.AssetMakes.Make AS AssetMakeName, dbo.fxGetUserLocationName(dbo.Assets.DepartmentId, dbo.Assets.LocationId) AS AssetLocationName, 
                      lo1.LastName + ', ' + lo1.FirstName AS CheckedOutName, dbo.Assets.Active, dbo.Assets.DepartmentId, dbo.Assets.OwnerId, dbo.Assets.CheckedOutId, 
                      dbo.Assets.TypeId, dbo.Assets.MakeId, dbo.Assets.ModelId, ISNULL(dbo.Assets.AccountId, -1) AS AccountId , dbo.Assets.LocationId, dbo.Assets.StatusId, ST.vchStatus
FROM         dbo.Assets LEFT OUTER JOIN
                      dbo.AssetCategories ON dbo.Assets.DepartmentId = dbo.AssetCategories.DepartmentId AND dbo.Assets.CategoryId = dbo.AssetCategories.id LEFT OUTER JOIN
                      dbo.AssetTypes ON dbo.Assets.DepartmentId = dbo.AssetTypes.DepartmentId AND dbo.Assets.TypeId = dbo.AssetTypes.id LEFT OUTER JOIN
                      dbo.AssetModels ON dbo.Assets.DepartmentId = dbo.AssetModels.DepartmentId AND dbo.Assets.ModelId = dbo.AssetModels.id LEFT OUTER JOIN
                      dbo.AssetMakes ON dbo.Assets.DepartmentId = dbo.AssetMakes.DepartmentId AND dbo.Assets.MakeId = dbo.AssetMakes.id LEFT OUTER JOIN
--                      dbo.tbl_Locations ON dbo.Assets.DepartmentId = dbo.tbl_Locations.DId AND dbo.Assets.LocationId = dbo.tbl_Locations.id LEFT OUTER JOIN
                      dbo.tbl_LoginCompanyJunc tlj ON tlj.company_id = dbo.Assets.DepartmentId AND tlj.id = dbo.Assets.CheckedOutId LEFT OUTER JOIN
                      dbo.tbl_Logins lo1 ON lo1.id = tlj.login_id LEFT OUTER JOIN
                      dbo.AssetStatus ST ON ST.id = dbo.Assets.StatusId
where
	Assets.DepartmentId=@DepartmentId and Assets.Id=@AssetId

	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetBulk]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetBulk]
	(
		@DepartmentId int,		
		@AssetId int
	)

AS

SELECT a.Id, a.Name, a.[Description], a.CategoryId, a.TypeId, ac.Name AS CategoryName, at.Name AS TypeName
FROM
	AssetBulk a
	LEFT OUTER JOIN AssetCategories ac ON a.DepartmentId = ac.DepartmentId AND a.CategoryId = ac.id
	LEFT OUTER JOIN AssetTypes at ON a.DepartmentId = at.DepartmentId AND a.TypeId = at.id	
WHERE
	a.DepartmentId=@DepartmentId AND a.Id = @AssetId

return
GO
PRINT N'Creating [dbo].[sp_SelectAssetBulkByLocations]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetBulkByLocations]
	(
		@DId int,
		@AssetId int,
		@ParentId int = null
	)
As
		
	SELECT  L.Id, L.Name, L.CfgEnableAudit, L.AuditorId, L.AuditPeriodDays, lo.FirstName+' '+lo.LastName AS AuditorName,
			CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND Inactive = 0)
				WHEN 0 THEN Cast(1 As bit) ELSE Cast(0 As bit) END AS IsLastChildNode,
			ISNULL(al.Quantity, 0) AS LocQuantity,
			ISNULL(al.ExcessQuantity, 0) AS LocExcess,
			ISNULL(dbo.fxGetAssetSubLocationQty(@DId, @AssetId, L.Id), 0) AS SubLocQty,
			ISNULL(dbo.fxGetAssetSubLocationExcessQty(@DId, @AssetId, L.Id), 0) AS SubExcessLocQty,
			dbo.fxGetLocationAliasesAsString(L.DId, L.Id) AS LocationsAliases,
			lah.Id AS AuditId, lah.AuditDate AS LastAuditDate, lah.Completed,
			loL.FirstName+' '+loL.LastName AS LastAuditorName
	FROM
		Locations L
		
		LEFT OUTER JOIN AssetBulkLocation al
            ON
            L.DId = al.DId
            AND
            al.AssetBulkId = @AssetId
            AND
            al.LocationId = L.Id
            AND
            al.AuditDate = (SELECT TOP 1 AuditDate FROM AssetBulkLocation tt WHERE tt.DId = al.DId AND tt.AssetBulkId = al.AssetBulkId AND tt.LocationId = al.LocationId ORDER BY tt.AuditDate DESC)
            
		LEFT OUTER JOIN LocationAuditHistory lah ON lah.DId = al.DId AND lah.Id = al.AuditId
	
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON L.DId = tlj.company_id AND L.AuditorId = tlj.id
				LEFT OUTER JOIN tbl_Logins lo ON lo.id = tlj.login_Id				
			
		LEFT OUTER JOIN tbl_LoginCompanyJunc tljL ON tljL.company_id = @DId AND lah.AuditorId = tljL.id
				LEFT OUTER JOIN tbl_Logins loL ON loL.id = tljL.login_Id
		
	WHERE
		L.DId = @DId
		AND ISNULL(L.AccountId, 0) = 0
		AND (L.Inactive = 0)
		AND (ISNULL(L.ParentId, 0) = @ParentId)		
		
	ORDER BY L.Name
GO
PRINT N'Creating [dbo].[sp_SelectAssetByUniqueField]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAssetByUniqueField]
	(
		@DId int,
		@Search nvarchar(50)=null,
		@IdValue int = NULL
	)
AS
	DECLARE @unique1Enabled bit
	,@unique2Enabled bit
	,@unique3Enabled bit
	,@unique4Enabled bit
	,@unique5Enabled bit
	,@unique6Enabled bit
	,@unique7Enabled bit
	
	SELECT
	@unique1Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DId, 'AssetsUnique1Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique2Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DId, 'AssetsUnique2Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique3Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DId, 'AssetsUnique3Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique4Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DId, 'AssetsUnique4Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique5Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DId, 'AssetsUnique5Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique6Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DId, 'AssetsUnique6Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique7Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DId, 'AssetsUnique7Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	
	SELECT Id FROM Assets 
	WHERE DepartmentId=@DId
		AND
		(
			SerialNumber=@Search
			OR (@unique1Enabled = 1 AND Unique1 = @Search)
			OR (@unique2Enabled = 1 AND Unique2 = @Search)
			OR (@unique3Enabled = 1 AND Unique3 = @Search)
			OR (@unique4Enabled = 1 AND Unique4 = @Search)
			OR (@unique5Enabled = 1 AND Unique5 = @Search)
			OR (@unique6Enabled = 1 AND Unique6 = @Search)
			OR (@unique7Enabled = 1 AND Unique7 = @Search)
			OR (@IdValue IS NOT NULL AND AssetNumber = @IdValue)
		)
GO
PRINT N'Creating [dbo].[sp_SelectAssetCategoriesWithCount]...';


GO
CREATE Procedure dbo.sp_SelectAssetCategoriesWithCount
	(
		@DepartmentId int
	)
As
	Select AC.id as CategoryId, AC.id, AC.Name, AT.count FROM AssetCategories AC
	LEFT OUTER JOIN (SELECT CategoryId, count(id) as count FROM AssetTypes WHERE DepartmentId = @DepartmentId GROUP BY CategoryId) AT ON AT.CategoryId = AC.id
	WHERE AC.DepartmentId = @DepartmentId ORDER BY AC.Name
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetCategory]...';


GO
CREATE Procedure dbo.sp_SelectAssetCategory
	(
		@DepartmentId int,
		@CategoryId int
	)
As
	Select * FROM AssetCategories AC
	WHERE AC.DepartmentId = @DepartmentId and AC.Id = @CategoryId 

	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetCategoryTypes]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetCategoryTypes]
	(
		@DepartmentId int,
		@TypeId int=null,
		@Portable bit = NULL
	)
As
	Select t.id as TypeId, t.Name as TypeName,  c.id as CategoryId, c.Name as CategoryName
	FROM AssetTypes t
	JOIN AssetCategories c on c.id=t.CategoryId and c.DepartmentId=@DepartmentId
	WHERE t.DepartmentId = @DepartmentId AND (@TypeId is null OR t.id=@TypeId) AND t.EnableAudit = 1
	AND (@Portable IS NULL OR (t.cfgPortable = @Portable))
	ORDER BY c.Name, c.id, t.Name
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetColumnSettings]...';


GO
CREATE Procedure dbo.sp_SelectAssetColumnSettings
	(
		@DId int,
		@UId int,
		@Id int = null
	)
As
	IF @Id IS NULL
		SELECT * FROM AssetColumnSettings WHERE DId=@DId  AND ISNULL(UId,0)=ISNULL(@UId,0) ORDER BY Name
	ELSE
		SELECT * FROM AssetColumnSettings WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_SelectAssetComputer]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetComputer]
	(
		@DepartmentId int,
		@AssetId int
	)

As
SELECT ac.*
FROM AssetComputers ac
WHERE ac.DepartmentId=@DepartmentId and ac.AssetId=@AssetId

return
GO
PRINT N'Creating [dbo].[sp_SelectAssetComputerLogicalDrives]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetComputerLogicalDrives]
	(
		@DepartmentId int,
		@AssetId int
	)

As
SELECT *
FROM AssetComputerLogicalDrives
WHERE DepartmentId=@DepartmentId and AssetId=@AssetId
ORDER BY DeviceID

return
GO
PRINT N'Creating [dbo].[sp_SelectAssetComputerPrinters]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetComputerPrinters]
	(
		@DepartmentId int,
		@AssetId int
	)

As
SELECT *
FROM AssetComputerPrinters
WHERE DepartmentId=@DepartmentId and AssetId=@AssetId
ORDER BY PrinterName, PrinterDriver, PrinterPort

return
GO
PRINT N'Creating [dbo].[sp_SelectAssetComputerProcessors]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetComputerProcessors]
	(
		@DepartmentId int,
		@AssetId int
	)

As
SELECT *
FROM AssetComputerProcessors
WHERE DepartmentId=@DepartmentId and AssetId=@AssetId
ORDER BY DeviceID

return
GO
PRINT N'Creating [dbo].[sp_SelectAssetComputerSoftwares]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetComputerSoftwares]
	(
		@DepartmentId int,
		@AssetId int
	)

As
SELECT *
FROM AssetComputerSoftwares
WHERE DepartmentId=@DepartmentId and AssetId=@AssetId
ORDER BY SoftwareName, SoftwarePublisher, SoftwareVersion

return
GO
PRINT N'Creating [dbo].[sp_SelectAssetFilters]...';


GO
CREATE Procedure dbo.sp_SelectAssetFilters
	(
		@DId int,
		@UId int,
		@Id int = null,
		@FilterName nvarchar(255) = null
	)
As
	IF @Id IS NULL
		SELECT * FROM AssetFilters WHERE DId=@DId  AND ISNULL(UId,0)=ISNULL(@UId,0) AND (@FilterName IS NULL OR @FilterName=Name) ORDER BY Name
	ELSE
		SELECT * FROM AssetFilters WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_SelectAssetIsDuplicate]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_SelectAssetIsDuplicate]
		@DepartmentId int,
		@AssetId int = null,
		
		@SerialNumber nvarchar(50) = null,
		@Unique1 nvarchar(100) = null,
		@Unique2 nvarchar(100) = null,
		@Unique3 nvarchar(100) = null,
		@Unique4 nvarchar(100) = null,
		@Unique5 nvarchar(100) = null,
		@Unique6 nvarchar(100) = null,
		@Unique7 nvarchar(100) = null,
		
		@MotherboardSerial nvarchar(100) = null,
		@BiosSerial nvarchar(100) = null
AS
BEGIN
	/*
		Will return binary data
		'00000000' = 0 (No duplicates)
		'00000001' = 1 (SN duplicates)
		'00000010' = 2 (Unique1 duplicates)
		'00000011' = 3 (SN and Unique1 duplicates)
		...
		'11111111' = 255 (All unique fields duplicates)
	*/
	DECLARE @ReturnValue int  
	SET @ReturnValue = 0
	
	DECLARE @DuplicateLevel INT
	SET @DuplicateLevel = 0
	
	        IF @SerialNumber IS NOT NULL
				SET @DuplicateLevel = @DuplicateLevel | 1
			IF @Unique1 IS NOT NULL
				SET @DuplicateLevel = @DuplicateLevel | 2
			IF @Unique2 IS NOT NULL
				SET @DuplicateLevel = @DuplicateLevel | 4
			IF @Unique3 IS NOT NULL
				SET @DuplicateLevel = @DuplicateLevel | 8
			IF @Unique4 IS NOT NULL
				SET @DuplicateLevel = @DuplicateLevel | 16
			IF @Unique5 IS NOT NULL
				SET @DuplicateLevel = @DuplicateLevel | 32
			IF @Unique6 IS NOT NULL
				SET @DuplicateLevel = @DuplicateLevel | 64
			IF @Unique7 IS NOT NULL
				SET @DuplicateLevel = @DuplicateLevel | 128
	
	DECLARE @DuplicateAssetId int
	DECLARE @AssetSerialNumber nvarchar(50)
	DECLARE @AssetUnique1 nvarchar(100)
	DECLARE @AssetUnique2 nvarchar(100)
	DECLARE @AssetUnique3 nvarchar(100)
	DECLARE @AssetUnique4 nvarchar(100)
	DECLARE @AssetUnique5 nvarchar(100)
	DECLARE @AssetUnique6 nvarchar(100)
	DECLARE @AssetUnique7 nvarchar(100)
	DECLARE @AssetMotherboardSerial nvarchar(100)
	DECLARE @AssetBiosSerial nvarchar(100)
	
	DECLARE @AssetDuplicatesTable TABLE(AssetId int, DuplicateFields int)
	
	DECLARE AssetDuplicatesCursor CURSOR READ_ONLY FORWARD_ONLY FOR
	SELECT a.Id, a.SerialNumber,a.Unique1,a.Unique2,a.Unique3,a.Unique4,a.Unique5,a.Unique6,a.Unique7,
	ac.MotherboardSerial, ac.BiosSerial
	FROM Assets a
	LEFT JOIN AssetComputers ac on ac.AssetId=a.Id AND ac.DepartmentId=@DepartmentId
	WHERE
	    a.StatusId<>17 AND a.DepartmentId = @DepartmentId
		AND(
			a.SerialNumber = @SerialNumber
			OR a.Unique1 = @Unique1
			OR a.Unique2 = @Unique2
			OR a.Unique3 = @Unique3
			OR a.Unique4 = @Unique4
			OR a.Unique5 = @Unique5
			OR a.Unique6 = @Unique6
			OR a.Unique7 = @Unique7
			
			OR ac.MotherboardSerial = @MotherboardSerial
			OR ac.BiosSerial = @BiosSerial
		)
		AND (@AssetId IS NULL OR a.Id != @AssetId)
		
	OPEN AssetDuplicatesCursor
	FETCH NEXT FROM AssetDuplicatesCursor INTO
	@DuplicateAssetId, @AssetSerialNumber, 
	@AssetUnique1, @AssetUnique2, @AssetUnique3, @AssetUnique4, @AssetUnique5, @AssetUnique6, @AssetUnique7,
	@AssetMotherboardSerial, @AssetBiosSerial
	
	WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @CurrentAssetDuplicateFields int
			SET @CurrentAssetDuplicateFields = 0
			
			IF @SerialNumber = @AssetSerialNumber
				SET @CurrentAssetDuplicateFields = @CurrentAssetDuplicateFields | 1
			IF @Unique1 = @AssetUnique1
				SET @CurrentAssetDuplicateFields = @CurrentAssetDuplicateFields | 2
			IF @Unique2 = @AssetUnique2
				SET @CurrentAssetDuplicateFields = @CurrentAssetDuplicateFields | 4
			IF @Unique3 = @AssetUnique3
				SET @CurrentAssetDuplicateFields = @CurrentAssetDuplicateFields | 8
			IF @Unique4 = @AssetUnique4
				SET @CurrentAssetDuplicateFields = @CurrentAssetDuplicateFields | 16
			IF @Unique5 = @AssetUnique5
				SET @CurrentAssetDuplicateFields = @CurrentAssetDuplicateFields | 32
			IF @Unique6 = @AssetUnique6
				SET @CurrentAssetDuplicateFields = @CurrentAssetDuplicateFields | 64
			IF @Unique7 = @AssetUnique7
				SET @CurrentAssetDuplicateFields = @CurrentAssetDuplicateFields | 128
			IF @MotherboardSerial = @AssetMotherboardSerial
				SET @CurrentAssetDuplicateFields = @CurrentAssetDuplicateFields | 258
			IF @BiosSerial = @AssetBiosSerial
				SET @CurrentAssetDuplicateFields = @CurrentAssetDuplicateFields | 512
			
			INSERT INTO @AssetDuplicatesTable VALUES (@DuplicateAssetId, @CurrentAssetDuplicateFields)
				
			IF (@DuplicateLevel = @CurrentAssetDuplicateFields)	
			SET @ReturnValue = @ReturnValue | @CurrentAssetDuplicateFields 
			
			FETCH NEXT FROM AssetDuplicatesCursor INTO
			@DuplicateAssetId, @AssetSerialNumber, 
			@AssetUnique1, @AssetUnique2, @AssetUnique3, @AssetUnique4, @AssetUnique5, @AssetUnique6, @AssetUnique7,
			@AssetMotherboardSerial, @AssetBiosSerial
		END
	
	CLOSE AssetDuplicatesCursor
	DEALLOCATE AssetDuplicatesCursor
	
	SELECT A.Id, A.Name, A.AssetModelName, A.AssetMakeName, SerialNumber, 
		A.Unique1, A.Unique2, A.Unique3, A.Unique4, A.Unique5, A.Unique6, A.Unique7, 
		AD.DuplicateFields, ac.MotherboardSerial, ac.BiosSerial
	FROM @AssetDuplicatesTable AS AD
	JOIN vw_Asset AS A ON A.DepartmentId = @DepartmentId AND A.Id = AD.AssetId
	LEFT JOIN AssetComputers ac on ac.AssetId=AD.AssetId AND ac.DepartmentId=@DepartmentId
   WHERE AD.DuplicateFields = @DuplicateLevel	
	
	RETURN @ReturnValue
END
GO
PRINT N'Creating [dbo].[sp_SelectAssetLogs]...';


GO

CREATE Procedure sp_SelectAssetLogs
	(
		@AssetId int
	)
As
	SELECT * FROM AssetLogs WHERE AssetId = @AssetId ORDER BY dtDate DESC
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetMake]...';


GO
CREATE Procedure dbo.sp_SelectAssetMake
	(
		@DepartmentId int,
		@MakeId int
	)
As
	--VGOOZ 2-JUL-2005: renamed AssetTypeId field to TypeId
	Select * FROM AssetMakes WHERE DepartmentId = @DepartmentId AND id = @MakeId 
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetMakes]...';


GO
CREATE Procedure dbo.sp_SelectAssetMakes
	(
		@DepartmentId int,
		@AssetTypeId int
	)
As
	--VGOOZ 2-JUL-2005: renamed AssetTypeId field to TypeId
	Select id, Make FROM AssetMakes WHERE DepartmentId = @DepartmentId AND TypeId = @AssetTypeId ORDER BY Make
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetMakesWithCount]...';


GO
CREATE Procedure dbo.sp_SelectAssetMakesWithCount
	(
		@DepartmentId int,
		@TypeId int
	)
As
	Select AM.TypeId, AM.id as MakeId, AM.id, AM.Make, AssetModels.count, AT.AssetProfileId
	FROM AssetMakes AM
	LEFT OUTER JOIN (SELECT MakeId, count(id) as count FROM AssetModels WHERE DepartmentId = @DepartmentId GROUP BY MakeId) AssetModels ON AM.Id = AssetModels.MakeId
	LEFT JOIN AssetTypes AT on AT.id=@TypeId
	WHERE AM.DepartmentId = @DepartmentId AND AM.TypeId = @TypeId ORDER BY AM.Make
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetModel]...';


GO
CREATE Procedure dbo.sp_SelectAssetModel
	(
		@DepartmentId int,
		@ModelId int
	)
As
	SELECT * FROM AssetModels WHERE DepartmentId = @DepartmentId AND Id = @ModelId 
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetModels]...';


GO
CREATE Procedure dbo.sp_SelectAssetModels
	(
		@DepartmentId int,
		@MakeId int
	)
As
	SELECT AssetModels.MakeId, id as ModelId, id, model, Links FROM AssetModels WHERE DepartmentId = @DepartmentId AND MakeId = @MakeId ORDER BY Model
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetMultiChoices]...';


GO

Create Procedure sp_SelectAssetMultiChoices
	(
		@DId int,
		@TypeId int,
		@Multi tinyint
	)
As
	SELECT * FROM AssetTypeMultiChoices WHERE TypeId=@TypeId AND MultiNumber=@Multi ORDER BY vchOption
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetProfileCategories]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetProfileCategories]
	(
		@DepartmentId int,
		@AssetProfileId int
	)
As
	Select distinct c.*
	FROM AssetCategories c
	JOIN AssetTypes t on t.CategoryId=c.id
	WHERE c.DepartmentId = @DepartmentId AND t.AssetProfileId=@AssetProfileId
	ORDER BY c.Name
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetProfilesList]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetProfilesList]
As
SELECT *
FROM AssetProfiles

return
GO
PRINT N'Creating [dbo].[sp_SelectAssetProfileTypes]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetProfileTypes]
	(
		@DepartmentId int,
		@AssetProfileId int,
		@AssetCategoryId int
	)
As
	Select t.*
	FROM AssetTypes t
	WHERE t.DepartmentId = @DepartmentId AND t.AssetProfileId=@AssetProfileId AND t.CategoryId=@AssetCategoryId
	ORDER BY t.Name
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetsBulk]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetsBulk]
	(
		@DepartmentId int,		
		@Pattern nvarchar(50)
	)

AS

SELECT a.Id, a.Name, a.[Description], a.CategoryId, a.TypeId, ac.Name AS CategoryName, at.Name AS TypeName,
	COUNT(al.Quantity) AS QuantityCount, COUNT(al.ExcessQuantity) AS ExcessCount	                  
FROM
	AssetBulk a
	LEFT OUTER JOIN AssetCategories ac ON a.DepartmentId = ac.DepartmentId AND a.CategoryId = ac.id
	LEFT OUTER JOIN AssetTypes at ON a.DepartmentId = at.DepartmentId AND a.TypeId = at.id
	LEFT OUTER JOIN AssetBulkLocation al ON a.DepartmentId = al.DId AND a.Id = al.AssetBulkId
		AND al.AuditDate = (SELECT TOP 1 AuditDate FROM AssetBulkLocation abl WHERE abl.DId = al.DId AND abl.AssetBulkId = al.AssetBulkId ORDER BY abl.AuditDate DESC)
WHERE
	a.DepartmentId=@DepartmentId AND a.Active = 1 AND (@Pattern IS NULL OR a.Name LIKE '%' + @Pattern + '%' OR ac.Name LIKE '%' + @Pattern + '%' OR at.Name LIKE '%' + @Pattern + '%')
GROUP BY
	a.Id, a.Name, a.[Description], a.CategoryId, a.TypeId, ac.Name, at.Name
ORDER BY	
	ac.Name, a.CategoryId, at.Name, a.TypeId, a.Name, a.Id		
return
GO
PRINT N'Creating [dbo].[sp_SelectAssetsCheckedOut]...';


GO
CREATE Procedure dbo.sp_SelectAssetsCheckedOut
	(
		@DepartmentId int,
		@UserId int
	)
As
	SELECT A.id, A.SerialNumber, A.Unique1, A.Unique2, A.Unique3, A.Unique4, A.Unique5, A.Unique6, A.Unique7
		,C.Name AS [Category]
		,T.Name AS [Type]
		,M.Make
		,Mod.Model
		FROM Assets A
		LEFT OUTER JOIN AssetCategories C ON C.DepartmentId=@DepartmentId AND A.CategoryId = C.id
		LEFT OUTER JOIN AssetTypes T ON T.DepartmentId=@DepartmentId AND A.TypeId = T.Id
		LEFT OUTER JOIN AssetMakes M ON M.DepartmentId=@DepartmentId AND A.MakeId = M.Id
		LEFT OUTER JOIN AssetModels Mod ON Mod.DepartmentId=@DepartmentId AND A.ModelId = Mod.Id
	WHERE A.DepartmentId = @DepartmentId AND CheckedOutId = @UserId
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetsSearchUnionCheckedOut]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAssetsSearchUnionCheckedOut]
	(
		@DepartmentId int,
		@UserId int,
		@UniqueField nvarchar(50)=NULL,
		@AccountId INT = 0
	)
AS
	DECLARE @configAssetTracking bit
	,@unique1Enabled bit
	,@unique2Enabled bit
	,@unique3Enabled bit
	,@unique4Enabled BIT
	,@unique5Enabled bit
	,@unique6Enabled bit
	,@unique7Enabled BIT
  
    DECLARE @NoAccountLimits INT = 0  
	
	SELECT
	@configAssetTracking = dbo.fxGetConfigValueBit(@DepartmentId, 'configAssetTracking')
	,@unique1Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique1Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique2Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique2Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique3Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique3Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique4Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique4Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique5Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique5Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique6Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique6Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END
	,@unique7Enabled = CASE (ISNULL(CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique7Caption') AS nvarchar(100)),'')) WHEN '' THEN 0 ELSE 1 END

	
	/* ItemOrigin column values: SearchResult = 1, CheckedOutToUser = 2.*/
	IF @configAssetTracking=1
		BEGIN
           With AssetsTable AS (      
				SELECT A.id, A.SerialNumber, A.Unique1, A.Unique2, A.Unique3, A.Unique4, A.Unique5, A.Unique6, A.Unique7
					,C.Name AS [Category]
					,T.Name AS [Type]
					,M.Make
					,Mod.Model
					,1 AS [ItemOrigin]
					,CASE WHEN @AccountId <> @NoAccountLimits THEN A.AccountId ELSE @NoAccountLimits END Accountcheck
				FROM Assets A
					LEFT OUTER JOIN AssetCategories C ON C.DepartmentId=@DepartmentId AND A.CategoryId = C.id
					LEFT OUTER JOIN AssetTypes T ON T.DepartmentId=@DepartmentId AND A.TypeId = T.Id
					LEFT OUTER JOIN AssetMakes M ON M.DepartmentId=@DepartmentId AND A.MakeId = M.Id
					LEFT OUTER JOIN AssetModels Mod ON Mod.DepartmentId=@DepartmentId AND A.ModelId = Mod.Id 
				WHERE 
					A.StatusId<>17 AND @UniqueField IS NOT NULL AND A.DepartmentId=@DepartmentId
					AND
					(
						A.SerialNumber LIKE @UniqueField + '%'
						OR (@unique1Enabled = 1 AND A.Unique1 LIKE @UniqueField + '%')
						OR (@unique2Enabled = 1 AND A.Unique2 LIKE @UniqueField + '%')
						OR (@unique3Enabled = 1 AND A.Unique3 LIKE @UniqueField + '%')
						OR (@unique4Enabled = 1 AND A.Unique4 LIKE @UniqueField + '%')
						OR (@unique5Enabled = 1 AND A.Unique5 LIKE @UniqueField + '%')
						OR (@unique6Enabled = 1 AND A.Unique6 LIKE @UniqueField + '%')
						OR (@unique7Enabled = 1 AND A.Unique7 LIKE @UniqueField + '%')
					)
				UNION ALL
				SELECT A.id, A.SerialNumber, A.Unique1, A.Unique2, A.Unique3, A.Unique4, A.Unique5, A.Unique6, A.Unique7
					,C.Name AS [Category]
					,T.Name AS [Type]
					,M.Make
					,Mod.Model
					,2 AS [ItemOrigin]
					,CASE WHEN @AccountId <> @NoAccountLimits THEN A.AccountId ELSE @NoAccountLimits END Accountcheck
				FROM Assets A
					LEFT OUTER JOIN AssetCategories C ON C.DepartmentId=@DepartmentId AND A.CategoryId = C.id
					LEFT OUTER JOIN AssetTypes T ON T.DepartmentId=@DepartmentId AND A.TypeId = T.Id
					LEFT OUTER JOIN AssetMakes M ON M.DepartmentId=@DepartmentId AND A.MakeId = M.Id
					LEFT OUTER JOIN AssetModels Mod ON Mod.DepartmentId=@DepartmentId AND A.ModelId = Mod.Id
				WHERE A.StatusId<>17 AND A.DepartmentId = @DepartmentId AND CheckedOutId = @UserId
			   )
			  
			  SELECT * FROM AssetsTable WHERE Accountcheck = @AccountId
		END
GO
PRINT N'Creating [dbo].[sp_SelectAssetStatusCompany]...';


GO
CREATE PROCEDURE dbo.sp_SelectAssetStatusCompany
	(
		@DId int
	)
AS
	SELECT     
		AssetStatus.id, 
		AssetStatus.vchStatus,
		
		CASE WHEN AssetStatusCompany.NonActive IS NULL 
		THEN AssetStatus.NonActive 
		ELSE AssetStatusCompany.NonActive END AS NonActive,
		
		CASE WHEN AssetStatusCompany.DId IS NULL 
			THEN 0 ELSE AssetStatusCompany.EnableUse END AS AssetStatusIsChecked
	FROM         
		AssetStatus 
	LEFT OUTER JOIN
        AssetStatusCompany ON AssetStatus.id = AssetStatusCompany.AssetStatusID
		AND
		AssetStatusCompany.DId = @DId
GO
PRINT N'Creating [dbo].[sp_SelectAssetStatusList]...';


GO
CREATE PROCEDURE dbo.sp_SelectAssetStatusList 
	(
		@DId int,
		@Id int = NULL
	)
AS
		SELECT AssetStatus.*
		FROM AssetStatus 
		INNER JOIN AssetStatusCompany ON AssetStatus.id = AssetStatusCompany.AssetStatusID AND AssetStatusCompany.EnableUse=1
		WHERE AssetStatusCompany.DId = @DId AND
			(AssetStatus.id=@Id OR @Id IS NULL OR @Id=0)
		ORDER BY AssetStatus.vchStatus
GO
PRINT N'Creating [dbo].[sp_SelectAssetTickets]...';


GO
CREATE PROCEDURE dbo.sp_SelectAssetTickets
(
	@DepartmentId int,
	@AssetId int
)
AS

SELECT TicketAssets.Id, TicketAssets.TicketId, TicketAssets.AssetId, TicketAssets.Description, tbl_ticket.id as TktId, tbl_ticket.TicketNumber as TktNumber, tbl_ticket.Status as TktStatus, tbl_ticket.Subject as TktSubject, tbl_ticket.Technician_id, lo.firstname AS technician_firstname, lo.lastname AS technician_lastname, lo.firstname +', '+lo.lastname as technician_name, tbl_ticket.PartsCost, tbl_ticket.LaborCost, tbl_ticket.TravelCost, tbl_ticket.MiscCost, tbl_ticket.PartsCost + tbl_ticket.LaborCost + tbl_ticket.TravelCost + tbl_ticket.MiscCost as TktTotal
FROM         TicketAssets INNER JOIN
                      tbl_ticket ON TicketAssets.DId = tbl_ticket.company_id AND TicketAssets.TicketId = tbl_ticket.Id 
		      LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_Id=@DepartmentId AND tlj.id=tbl_ticket.Technician_id
		      LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id
where TicketAssets.DId=@DepartmentId and TicketAssets.AssetId=@AssetId
GO
PRINT N'Creating [dbo].[sp_SelectAssetType]...';


GO
CREATE Procedure dbo.sp_SelectAssetType
	(
		@DepartmentID int,
		@TypeId int
	)
As
	SELECT AT.*, CC.bit1Cap, CC.bit2Cap, CC.bit3Cap, CC.bit4Cap, CC.bit5Cap, CC.bit6Cap, CC.bit7Cap, CC.bit8Cap, 
		CC.char1Cap, CC.char2Cap, CC.char3Cap, CC.char4Cap, CC.char5Cap, CC.char6Cap, CC.char7Cap, CC.char8Cap, CC.char9Cap, CC.char10Cap, CC.char11Cap, CC.char12Cap, CC.char13Cap, CC.char14Cap, CC.char15Cap, CC.char16Cap, 
		CC.dec1Cap, CC.dec2Cap, CC.dec3Cap, CC.dec4Cap, CC.int1Cap, CC.int2Cap, CC.int3Cap, CC.int4Cap, CC.multi1Cap, CC.multi2Cap, CC.multi3Cap, CC.multi4Cap, CC.TypeId, 
		AC.Name AS CategoryName
	FROM AssetTypes AT 
	LEFT OUTER JOIN AssetTypeCustCap CC ON CC.Typeid = AT.id 
	JOIN AssetCategories AC ON AC.id=AT.CategoryId
	WHERE AT.DepartmentId = @DepartmentId AND AT.id = @TypeId
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetTypeExportHeader]...';


GO
CREATE PROCEDURE dbo.sp_SelectAssetTypeExportHeader
	(
		@DId int,
		@TypeId int,
		@vchAssetName nvarchar(50)=null OUTPUT
	)
AS
	SET @vchAssetName = (SELECT Name FROM AssetTypes WHERE DepartmentId=@DId AND id=@TypeId)
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectAssetTypeFields]...';


GO

CREATE PROCEDURE sp_SelectAssetTypeFields 
	(
	@DepartmentId int,
	@Mode bit,
	@AssetType int,
	@AssetId int = null
	/* mode=0 just fields mode=1 fields with data.*/
)
AS
	IF @Mode = 0
		SELECT * FROM AssetTypeCustCap WHERE TypeId=@AssetType
	ELSE
		SELECT AC.*, AF.* FROM AssetTypeCustCap AC LEFT OUTER JOIN AssetTypeCustFields AF ON AF.DepartmentId = @DepartmentId AND AF.TypeId = @AssetType AND AF.AssetId = @AssetId WHERE AC.TypeId=@AssetType
		
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetTypeMultiOptions]...';


GO

Create Procedure sp_SelectAssetTypeMultiOptions
	(
		@AssetTypeId int
	)
As
	SELECT * FROM AssetTypeMultiChoices WHERE TypeId = @AssetTypeId
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetTypeProperties]...';


GO
CREATE Procedure dbo.sp_SelectAssetTypeProperties
	(
		@DId int,
		@AssetTypeId int,
		@Id int = null
	)
As
	IF @Id IS NULL
		SELECT * FROM AssetTypeProperties WHERE DId=@DId  AND AssetTypeId=@AssetTypeId ORDER BY Name, DataType
	ELSE
		SELECT * FROM AssetTypeProperties WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_SelectAssetTypePropertyNameExists]...';


GO
CREATE Procedure dbo.sp_SelectAssetTypePropertyNameExists
	(
		@DId int,
		@AssetTypeId int,
		@Name nvarchar(50),
		@Id int = null
	)
As
	IF @Id IS NULL OR @Id=0
	BEGIN	
		IF NOT EXISTS(SELECT 'true' FROM AssetTypeProperties WHERE DId=@DId  AND AssetTypeId=@AssetTypeId AND Name=@Name)
			RETURN 0
		ELSE
			RETURN 1
	END
	ELSE
	BEGIN	
		IF NOT EXISTS(SELECT 'true' FROM AssetTypeProperties WHERE DId=@DId AND AssetTypeId=@AssetTypeId AND Name=@Name AND Id<>@Id)
			RETURN 0
		ELSE
			RETURN 1
	END
GO
PRINT N'Creating [dbo].[sp_SelectAssetTypes]...';


GO
CREATE Procedure dbo.sp_SelectAssetTypes
	(
		@DepartmentId int
	)
As
	Select id, Name FROM AssetTypes WHERE DepartmentId = @DepartmentId ORDER BY Name
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetTypesWithCount]...';


GO
CREATE Procedure [dbo].[sp_SelectAssetTypesWithCount]
	(
		@DepartmentId int,
		@CategoryId int
	)
As
	Select AT.CategoryId,  AT.id as TypeId,  AT.id, AT.Name,  AT.configCustFields, AT.AssetProfileId , (SELECT Count(*) FROM AssetMakes WHERE DepartmentId = @DepartmentId AND TypeId=AT.id) AS count 
	FROM AssetTypes AT
	WHERE AT.DepartmentId = @DepartmentId AND AT.CategoryId = @CategoryId ORDER BY AT.Name
	return
GO
PRINT N'Creating [dbo].[sp_SelectAssetUniqueCaptions]...';


GO
CREATE PROCEDURE dbo.sp_SelectAssetUniqueCaptions
	@DepartmentId int
AS
BEGIN
	SELECT CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique1Caption') AS nvarchar(100)) as AssetsUnique1Caption
	, CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique2Caption') AS nvarchar(100)) as AssetsUnique2Caption
	, CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique3Caption') AS nvarchar(100)) as AssetsUnique3Caption
	, CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique4Caption') AS nvarchar(100)) as AssetsUnique4Caption
	, CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique5Caption') AS nvarchar(100)) as AssetsUnique5Caption
	, CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique6Caption') AS nvarchar(100)) as AssetsUnique6Caption
	, CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'AssetsUnique7Caption') AS nvarchar(100)) as AssetsUnique7Caption
END
GO
PRINT N'Creating [dbo].[sp_SelectAssignedTaskTypes]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectAssignedTaskTypes]
	(
		@DepartmentID int,
		@TechID int,
		@ProjectID int = NULL,
		@TicketID int = NULL,
		@AcctID int = NULL
	)
AS	
					
	DECLARE @DisTask TABLE (TaskTypeID int)
	INSERT INTO @DisTask
	SELECT TaskTypeID FROM dbo.fxGetRepeatableTechTaskTypes(@DepartmentID)
	DELETE
		TaskTypeTech
	WHERE
		TaskTypeID IN (SELECT TaskTypeID FROM @DisTask) AND CompanyID = @DepartmentID AND (TechID IS NOT NULL)
SELECT DISTINCT * FROM dbo.fxSelectAssignedTaskTypes(@DepartmentID, @TechID, @ProjectID, @TicketID, @AcctID) ORDER BY TaskTypeName
GO
PRINT N'Creating [dbo].[sp_SelectBillingDataForInvoice]...';


GO
CREATE  PROCEDURE dbo.sp_SelectBillingDataForInvoice
	(
		@DId int,
		@AccountID int,
		@ProjectID int
	)
AS

	IF (@ProjectID IS NOT NULL)
		BEGIN
			SELECT
				Project.BillingMethodID,
				Project.FlatFee,
				ISNULL(BillingMethod.Name, '') AS BillingMethodName
			FROM 
				Project
			LEFT OUTER JOIN
                BillingMethod ON Project.BillingMethodID = BillingMethod.BillingMethodID
			WHERE 
				Project.CompanyID = @DId
				AND
				Project.ProjectID = @ProjectID
		END
		ELSE
		BEGIN
			SELECT 
				AccountRate.BillingMethodID,
				AccountRate.FlatFee,
				ISNULL(BillingMethod.Name, '') AS BillingMethodName
			FROM 
				AccountRate
			LEFT OUTER JOIN
                BillingMethod ON AccountRate.BillingMethodID = BillingMethod.BillingMethodID
			WHERE
				AccountRate.CompanyID = @DId
				AND (AccountRate.AccountID = @AccountID OR (AccountRate.AccountID IS NULL AND @AccountID IS NULL))
		END
GO
PRINT N'Creating [dbo].[sp_SelectBillingMethods]...';


GO
CREATE PROCEDURE dbo.sp_SelectBillingMethods
AS

	SELECT [BillingMethodID]
      ,[Name]
  FROM [BillingMethod]
GO
PRINT N'Creating [dbo].[sp_SelectBrowseKB]...';


GO
CREATE Procedure dbo.sp_SelectBrowseKB
(
	@DepartmentId int,
	@OnlyPublished bit,
	@KBCategoryID int,
	@KBType tinyint
)
As
	SELECT 
		tbl_ticket.id, 
		tbl_ticket.subject,
		CASE WHEN ISNULL(tbl_class.KBPortalAlias, '') = '' THEN
		tbl_class.Name
		ELSE tbl_class.KBPortalAlias END AS Category,
		tbl_ticket.TicketNumber,
		tbl_ticket.PseudoId,
		ISNULL(tbl_ticket.UpdatedTime, ISNULL(tbl_ticket.CreateTime, getutcdate())) AS LastMod
	FROM 
		tbl_ticket 
	LEFT OUTER JOIN
        tbl_class ON tbl_ticket.company_id = tbl_class.company_id AND tbl_ticket.class_id = tbl_class.id
	WHERE 
		tbl_ticket.company_id=@DepartmentId 
		AND
		tbl_ticket.KB = 1
		AND
		(tbl_ticket.KBType = @KBType OR @KBType = 0)
		AND
		((tbl_ticket.KBPublishLevel IN (1, 2) AND @OnlyPublished = 1) OR @OnlyPublished = 0)
		AND
		(tbl_ticket.class_id = @KBCategoryID OR @KBCategoryID = 0)
	ORDER BY 
		tbl_ticket.CreateTime DESC
GO
PRINT N'Creating [dbo].[sp_SelectCategories]...';


GO
CREATE Procedure dbo.sp_SelectCategories
	(
		@DId int,
		@Id int = null,
		@btInactive bit = null
	)

As
	IF @Id IS NULL	
		IF @btInactive IS NULL
			SELECT id, vchName as Name, btInactive FROM CreationCats WHERE DId = @DId ORDER BY vchName
		ELSE
			SELECT id, vchName as Name, btInactive FROM CreationCats WHERE DId = @DId AND btInactive=@btInactive ORDER BY vchName
	ELSE
		SELECT cats.id, cats.vchName as Name, cats.btInactive, cats.intCreated,  lo1.FirstName+' '+lo1.LastName as CreatedBy, dtCreated, intUpdatedBy, lo2.FirstName+' '+lo2.LastName as UpdatedBy, dtUpdated 
		FROM CreationCats cats
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj1 ON tlj1.company_id=@DId AND tlj1.id=cats.intCreated LEFT JOIN tbl_Logins lo1 ON lo1.id=tlj1.login_id
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj2 ON tlj2.company_id=@DId AND tlj2.id=cats.intUpdatedBy LEFT JOIN tbl_Logins lo2 ON lo2.id=tlj2.login_id
		WHERE cats.DId = @DId AND cats.Id = @Id
		ORDER BY Name
	return
GO
PRINT N'Creating [dbo].[sp_SelectClass]...';


GO

CREATE Procedure sp_SelectClass
	(
		@DId int,
		@ClassID int
	)
As
    SELECT * FROM tbl_class WHERE company_id=@DId AND id=@ClassId
	return
GO
PRINT N'Creating [dbo].[sp_SelectClassAssignedLvlTechs]...';


GO
CREATE PROCEDURE dbo.sp_SelectClassAssignedLvlTechs
	(
		@DId int,
		@intClassId int,
		@intClssLvlId int
	)
AS
	SELECT cltj.Id, cltj.intUId AS LoginCompanyJunc_id,  lo.lastname, lo.firstname, dbo.fxGetUserLocationName(@DId, cltj.LocationId) AS LocationName 
		FROM ClassLevelsTechJctn cltj
--		LEFT OUTER JOIN tbl_Locations l ON l.DId=@DId AND l.id=cltj.intLocationId
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=cltj.intUId JOIN tbl_Logins lo ON lo.id=tlj.login_id
		WHERE cltj.DId=@DId AND cltj.ClassId=@intClassId AND cltj.intClssLvlId=@intClssLvlId
		ORDER BY lo.lastname, lo.firstname
	
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectClassAssignedTechs]...';


GO
CREATE Procedure dbo.sp_SelectClassAssignedTechs
	(
		@DId int,
		@ClassId int
	)
As
	
	SELECT ctj.id, ctj.class_id, ctj.LoginCompanyJunc_id, ctj.locations_id, lo.firstname, lo.lastname, dbo.fxGetUserLocationName(@DId, ctj.LocationId) AS LocationName
	FROM tbl_classtechnicianjctn ctj
--	LEFT OUTER JOIN tbl_locations l ON l.DId = @DId AND ctj.locations_id = l.id
    LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId and tlj.id=ctj.LoginCompanyJunc_id JOIN tbl_Logins lo ON lo.id=tlj.login_id
	WHERE ctj.class_id = @ClassId
	ORDER BY lo.lastname, lo.firstname
	return
GO
PRINT N'Creating [dbo].[sp_SelectClassDetail]...';


GO

Create Procedure sp_SelectClassDetail

	(
		@companyId int,
		@id int
	)

As
	/* set nocount on */
	SELECT * FROM tbl_class WHERE company_id = @companyId AND id = @id
	return
GO
PRINT N'Creating [dbo].[sp_SelectClassesDynamicWhere]...';


GO
-- Procedure
CREATE PROCEDURE [dbo].[sp_SelectClassesDynamicWhere]
(
	@DId int,
	@Where nvarchar(MAX) = null
)
AS
BEGIN
if @Where is null
begin

	with ClassTree(ParentId, id, Treelevel, SortName) as
	(
		select ParentId, id, 0,CAST(ISNULL(Name,'') as nvarchar(MAX))
		from tbl_class
		where ParentId is null and company_id=@DId
		
		UNION ALL
		
		select c.ParentId, c.id, t.Treelevel+1,t.SortName+CHAR(9)+ISNULL(c.Name,'')
		from ClassTree t
		join tbl_class c on c.company_id=@DId and c.ParentId=t.id

	)
	select c.*, t.Treelevel as HierarchyLevel, p.Name as PriorityName, 
		isnull(l.FirstName+' ','')+ISNULL(l.LastName,'') as LastResortTechName
	from ClassTree t
	join tbl_class c on c.company_id=@DId and t.id=c.id
	left join Priorities p on p.DId=@DId and p.Id=c.intPriorityId
	left join tbl_LoginCompanyJunc j on j.company_id=@DId and j.id=c.LastResortTechId
	left join tbl_Logins l on l.id=j.login_id
	order by c.company_id, SortName
	
end else begin	

	declare @SqlQuery nvarchar(MAX)
	SET  @SqlQuery = 'with ClassTree(ParentId, id, Treelevel, SortName) as
	(
		select ParentId, id, 0,CAST(ISNULL(Name,'''') as nvarchar(MAX))
		from tbl_class
		where ParentId is null and company_id='+convert(nvarchar(MAX),@DId)+'
		
		UNION ALL
		
		select c.ParentId, c.id, t.Treelevel+1,t.SortName+CHAR(9)+ISNULL(c.Name,'''')
		from ClassTree t
		join tbl_class c on c.company_id='+convert(nvarchar(MAX),@DId)+' and c.ParentId=t.id

	)
	select c.*, t.Treelevel as HierarchyLevel, p.Name as PriorityName, 
		isnull(l.FirstName+'' '','''')+ISNULL(l.LastName,'''') as LastResortTechName
	from ClassTree t
	join tbl_class c on c.company_id='+convert(nvarchar(MAX),@DId)+' and t.id=c.id
	left join Priorities p on p.DId='+convert(nvarchar(MAX),@DId)+' and p.Id=c.intPriorityId
	left join tbl_LoginCompanyJunc j on j.company_id='+convert(nvarchar(MAX),@DId)+' and j.id=c.LastResortTechId
	left join tbl_Logins l on l.id=j.login_id
	'+ ISNULL(' where '+@Where,'') + '
	order by c.company_id, SortName'

	EXEC (@SqlQuery)
	
end
		
END
GO
PRINT N'Creating [dbo].[sp_SelectClassesLocationAware]...';


GO

CREATE Procedure sp_SelectClassesLocationAware
	(
		@DId int
	)

As
	
	SELECT id FROM tbl_class WHERE company_id = @DId AND (tintClassType = 1 OR tintClassType = 2)
	return
GO
PRINT N'Creating [dbo].[sp_SelectClassLevels]...';


GO

CREATE PROCEDURE sp_SelectClassLevels
	(
		@DId int,
		@ClassId int
	)
AS
	SELECT * FROM ClassLevels WHERE DId=@DId AND ClassId=@ClassId
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectClassList]...';


GO
CREATE Procedure dbo.sp_SelectClassList
	(
		@DId int,
		@btInactive bit = NULL,
		@ParentId int = NULL,
		@bitRestrictToTechs bit = NULL
	)
As
	IF @ParentId IS NULL
	BEGIN
		IF @bitRestrictToTechs IS NULL
			SELECT C.*, CC.Level, CC.IsLastChild, CC.InactiveCalculated FROM dbo.fxGetAllChildClasses(@DId, NULL, @btInactive) CC INNER JOIN tbl_class C  ON C.company_id = @DId AND C.id=CC.Id WHERE C.company_id = @DId
		ELSE
			SELECT C.*, CC.Level, CC.IsLastChild, CC.InactiveCalculated FROM dbo.fxGetAllChildClasses(@DId, NULL, @btInactive) CC INNER JOIN tbl_class C  ON C.company_id = @DId AND C.id=CC.Id WHERE C.company_id = @DId AND C.bitRestrictToTechs=@bitRestrictToTechs
	END
	ELSE
	BEGIN
		IF @bitRestrictToTechs IS NULL
			SELECT C.*, CC.Level, CC.IsLastChild, CC.InactiveCalculated FROM dbo.fxGetAllChildClasses(@DId, @ParentId, @btInactive) CC INNER JOIN tbl_class C  ON C.company_id = @DId AND C.id=CC.Id WHERE C.company_id = @DId AND ISNULL(C.ParentId,0)=@ParentId
		ELSE
			SELECT C.*, CC.Level, CC.IsLastChild, CC.InactiveCalculated FROM dbo.fxGetAllChildClasses(@DId, @ParentId, @btInactive) CC INNER JOIN tbl_class C  ON C.company_id = @DId AND C.id=CC.Id WHERE C.company_id = @DId AND ISNULL(C.ParentId,0)=@ParentId AND C.bitRestrictToTechs=@bitRestrictToTechs
	END
GO
PRINT N'Creating [dbo].[sp_SelectClassList2]...';


GO

CREATE PROCEDURE sp_SelectClassList2
	(
		@DId int
	)
AS
	SELECT id, Name FROM tbl_class WHERE company_id=@DId ORDER BY Name
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectClassListForUsers]...';


GO


CREATE Procedure sp_SelectClassListForUsers
	(
		@DId int,
		@btInactive bit = NULL
	)
As
	IF @btInactive IS NULL
		SELECT id, company_id, name, LastResortTechId, tintClassType FROM tbl_class WHERE company_id = @DId AND bitRestrictToTechs = 0 ORDER BY name
	ELSE
		SELECT id, company_id, name, LastResortTechId, tintClassType FROM tbl_class WHERE company_id = @DId AND bitRestrictToTechs = 0 AND btInactive=@btInactive ORDER BY name		
	return
GO
PRINT N'Creating [dbo].[sp_SelectCompany]...';


GO
CREATE Procedure [dbo].[sp_SelectCompany]
	(
		@CompanyId int,
		@CompanyName nvarchar(150) = null
	)

As
	IF @CompanyName IS NULL
		SELECT 
		C.[company_id],
		C.[company_name],
		I.CreatedTime as dtAccountCreated,
		I.Active as ActiveStatus,
		I.CanceledTime as dtCancelled,
		I.WorkingDays as charWDays,
		I.ExternalId as BWADepartmentId,
		C.[company_guid],
		I.PseudoId,
		I.TimeZoneId
		FROM tbl_company C 
		INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid 
		WHERE C.company_id = @CompanyId
	ELSE
		SELECT 
		C.[company_id],
		C.[company_name],
		I.CreatedTime as dtAccountCreated,
		I.Active as ActiveStatus,
		I.CanceledTime as dtCancelled,
		I.WorkingDays as charWDays,
		I.ExternalId as BWADepartmentId,
		C.[company_guid],
		I.PseudoId,
		I.TimeZoneId
		FROM tbl_company C 
		INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid 
		WHERE C.company_id = @CompanyId AND company_name=@CompanyName		
	return
GO
PRINT N'Creating [dbo].[sp_SelectCompanyByGuid]...';


GO
CREATE Procedure [dbo].[sp_SelectCompanyByGuid]
	(
		@CompanyGuid uniqueidentifier
	)

As
	SELECT 
		C.[company_id],
		C.[company_name],
		I.CreatedTime as dtAccountCreated,
		I.Active as ActiveStatus,
		I.CanceledTime as dtCancelled,
		I.WorkingDays as charWDays,
		I.ExternalId as BWADepartmentId,
		C.[company_guid]
	FROM tbl_company C 
	INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid 
	WHERE C.company_guid = @CompanyGuid
	return
GO
PRINT N'Creating [dbo].[sp_SelectCompanyCustomNames]...';


GO
CREATE Procedure sp_SelectCompanyCustomNames
	(
		@DId int
	)
As
	select n.CompanyId, t.TermId, t.TermDesc, t.TermNodeName, n.CustomNameId, n.TermVariantId 
		from Terms t left join CustomNames n on (t.TermId = n.TermId) and (n.CompanyId = @DId)
	return
GO
PRINT N'Creating [dbo].[sp_SelectCustomField]...';


GO

Create Procedure sp_SelectCustomField
	(
		@DepartmentId int,
		@FieldId int
	)
As
	SELECT * FROM CustomFields WHERE Id = @FieldId AND DepartmentId = @DepartmentId
	return
GO
PRINT N'Creating [dbo].[sp_SelectCustomFields]...';


GO
CREATE Procedure dbo.sp_SelectCustomFields
	(
		@DepartmentId int,
		@ClassID int = NULL
	)
As
	SELECT [id]
      ,[DepartmentId]
      ,[Caption]
      ,[Type]
      ,[Choices]
      ,[required]
      ,[DefaultValue]
      ,[Position]
      ,[DisableUserEditing]
      ,[IsForTech]
      ,dbo.fxGetFullClassName(@DepartmentId, [class_id]) AS ClassName,
      ISNULL([class_id], 0) AS ClassID
    FROM 
		CustomFields 
	WHERE 
		DepartmentId = @DepartmentId 
		AND
		(@ClassID = -1 OR class_id IS NULL OR dbo.fxIsChildClass(@DepartmentId, @ClassID, ISNULL(class_id, 0)) = '1')
	ORDER BY 
		Position
		
	return
GO
PRINT N'Creating [dbo].[sp_SelectCustomNames]...';


GO
CREATE Procedure dbo.sp_SelectCustomNames
	(
		@CompanyId int
	)

As
	SELECT t.*,c.CustomNameId, c.CompanyId, c.TermVariantId, ISNULL(cs.FullSingular, cs1.FullSingular) AS FullSingular, ISNULL(cs.FullPlural, cs1.FullPlural) AS FullPlural, ISNULL(cs.AbbreviatedSingular, cs1.AbbreviatedSingular) AS AbbreviatedSingular, ISNULL(cs.AbbreviatedPlural, cs1.AbbreviatedPlural) AS AbbreviatedPlural FROM Terms t 
	LEFT OUTER JOIN CustomNames c ON t.TermId = c.TermId AND c.CompanyId = @CompanyId 
	LEFT OUTER JOIN CustomNamesStore cs ON cs.TermId = c.TermId AND cs.TermVariantId = c.TermVariantId 
	INNER JOIN CustomNamesStore cs1 ON cs1.TermId = t.TermId AND cs1.TermVariantId = 1
	ORDER BY t.TermId
	return
GO
PRINT N'Creating [dbo].[sp_SelectCustomNamesStore]...';


GO

CREATE Procedure dbo.sp_SelectCustomNamesStore
As
	SELECT * FROM CustomNamesStore t ORDER BY t.TermId, t.TermVariantId
	return
GO
PRINT N'Creating [dbo].[sp_SelectCustomText]...';


GO

CREATE PROCEDURE sp_SelectCustomText
	(
		@DId int,
		@Type nvarchar(25)
	)
AS
	SELECT txtText FROM CustomText WHERE DId=@DId AND Type=@Type
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectCustomTexts]...';


GO

CREATE PROCEDURE sp_SelectCustomTexts
	(
		@DId int
	)
AS
	SELECT * FROM CustomText WHERE DId = @DId
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectCustXML]...';


GO

Create Procedure sp_SelectCustXML
	(
		@DepartmentId int,
		@TicketId int
	)
As
	SELECT CustomXML FROM tbl_ticket WHERE id = @TicketId AND company_id = @DepartmentId
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectDayReports]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectDayReports]
	(
		@CompanyID int,
		@UserID int,
		@CalendarView smalldatetime,
		@SelectedDate smalldatetime
	)
AS

	SELECT Id, Date, StartTime, StopTime, ISNULL([TimeOut], 0) AS [TimeOut], TotalDayTime, ISNULL(LocalTimeZoneOffset, 0) AS LocalTimeZoneOffset, DAY(DaySummaryTime.Date) AS tDay, MONTH(DaySummaryTime.Date) AS tMonth, YEAR(DaySummaryTime.Date) AS tYear
	FROM DaySummaryTime
	WHERE (DaySummaryTime.DepartmentId = @CompanyID AND DaySummaryTime.UserId = @UserID AND DaySummaryTime.Deleted = 0
	AND MONTH(DaySummaryTime.Date) = MONTH(@CalendarView) 
	AND YEAR(DaySummaryTime.Date) = YEAR(@CalendarView))
	UNION
	SELECT Id, Date, StartTime, StopTime, ISNULL([TimeOut], 0), TotalDayTime, ISNULL(LocalTimeZoneOffset, 0), DAY(DaySummaryTime.Date) AS tDay, MONTH(DaySummaryTime.Date) AS tMonth, YEAR(DaySummaryTime.Date) AS tYear
	FROM DaySummaryTime
	WHERE (DaySummaryTime.DepartmentId = @CompanyID AND DaySummaryTime.UserId = @UserID AND DaySummaryTime.Deleted = 0
	AND DAY(DaySummaryTime.Date) = DAY(@SelectedDate) 
	AND MONTH(DaySummaryTime.Date) = MONTH(@SelectedDate) 
	AND YEAR(DaySummaryTime.Date) = YEAR(@SelectedDate))
GO
PRINT N'Creating [dbo].[sp_SelectDayTimeProjectNotes]...';


GO
CREATE PROCEDURE dbo.sp_SelectDayTimeProjectNotes
	(
		@CompanyID int,
		@AccountID int,
		@ProjectID int,
		@Date smalldatetime,
		@UserId int
	)
AS

	SELECT
		dbo.fxGetAccountName(@CompanyID, dtpn.AccountId) AS AccountName,
		REPLACE(dbo.fxGetFullProjectName(@CompanyID, dtpn.ProjectId), '  >  ', ':') AS ProjectName,
		ISNULL(dtpn.CompletedNotes, '') AS CompletedNotes,
		ISNULL(dtpn.NextStepsNotes, '') AS NextStepsNotes
	FROM 
		DayTimeProjectNotes dtpn 
		WHERE 
			dtpn.DId = @CompanyID 
			AND dtpn.UserId = @UserId
			AND ISNULL(dtpn.AccountId, 0) = @AccountID
			AND ISNULL(dtpn.ProjectId, 0) = @ProjectID
			AND MONTH(dtpn.Date) = MONTH(@Date) 
			AND YEAR(dtpn.Date) = YEAR(@Date) 
			AND DAY(dtpn.Date) = DAY(@Date)
GO
PRINT N'Creating [dbo].[sp_SelectDefaultTimeLogsCount]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectDefaultTimeLogsCount]
		(
		@DepartmentID int		
	)
AS
	DECLARE @TicketLogsDefaultCount int, @ProjectLogsDefaultCount int
	SET @TicketLogsDefaultCount = 0
	SET @ProjectLogsDefaultCount = 0
	SELECT 
		@TicketLogsDefaultCount = COUNT(Id)
	FROM
		TicketTime tt
	WHERE
		tt.DepartmentId = @DepartmentID
		AND
		tt.TaskTypeId IS NULL
		AND
		tt.BillId IS NULL	
		AND
		tt.Deleted = 0

	SELECT 
		@ProjectLogsDefaultCount = COUNT(Id)
	FROM
		ProjectTime pt
	WHERE
		pt.DepartmentId = @DepartmentID
		AND
		pt.TaskTypeId IS NULL
		AND
		pt.BillId IS NULL
		AND
		pt.Deleted = 0
	
	SELECT ISNULL(@ProjectLogsDefaultCount, 0) + ISNULL(@TicketLogsDefaultCount, 0) AS DefaultCount
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectDepartmentLogin]...';


GO
CREATE Procedure [dbo].[sp_SelectDepartmentLogin]
	(
		@DId int,
		@vchName nvarchar(150)
	)
As
	SELECT * FROM tbl_company WHERE company_id=@DId AND company_name=@vchName
	return
GO
PRINT N'Creating [dbo].[sp_SelectDetailTimeReport]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectDetailTimeReport]
(
		@CompanyID int,		
		@DateStart smalldatetime,
		@DateEnd smalldatetime,
		@GroupByField int,		
		@AccountIDs nvarchar(max),
		@AccountOnlyIDs nvarchar(max),
		@ProjectIDs nvarchar(max),
		@TechsIDs nvarchar(max)
	)
AS

	DECLARE @query nvarchar(max)	

	SET @query = '(SELECT	
	
		ISNULL(ISNULL(Project.AccountID, ProjectTime.AccountID), -1) AS AccountID,
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '''') + '' (Internal)''
			ELSE Accounts.vchName
      		END AS AccountName,
      		
		ISNULL(Project.ProjectID, -1) AS ProjectID,
		dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS ProjectName,
		
		NULL AS TicketId,
		NULL AS StartTime, 
		NULL AS StopTime, 
		NULL AS TicketNumber,
		NULL AS Subject,		
		
		ISNULL(TaskType.TaskTypeId, -1) AS TaskTypeId, 
		CASE 
			WHEN TaskType.TaskTypeId IS NULL THEN ''Default''
			ELSE TaskType.TaskTypeName
		END AS TaskTypeName,
		
		ProjectTime.UserId,
		dbo.fxGetUserName(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email) AS userFullName,
		
		ProjectTime.Date,
		ProjectTime.Hours,
		ProjectTime.Note,
		ProjectTime.BillId,
		ProjectTime.LocalTimeZoneOffset,
		''PT'' AS Type
	FROM         
		ProjectTime LEFT OUTER JOIN
        Project ON ProjectTime.DepartmentId = Project.CompanyID AND ProjectTime.ProjectId = Project.ProjectID
		INNER JOIN tbl_company ON ProjectTime.DepartmentId = tbl_company.company_id
		LEFT OUTER JOIN Accounts ON ProjectTime.DepartmentId = Accounts.DId AND ISNULL(Project.AccountID, ProjectTime.AccountID) = Accounts.Id		
		LEFT OUTER JOIN TaskType ON ProjectTime.TaskTypeId = TaskType.TaskTypeId AND ProjectTime.DepartmentId = TaskType.DepartmentID
		LEFT OUTER JOIN tbl_LoginCompanyJunc ON ProjectTime.DepartmentId = tbl_LoginCompanyJunc.company_id AND ProjectTime.UserId = tbl_LoginCompanyJunc.id 
		LEFT OUTER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
	WHERE 
		ProjectTime.DepartmentId = ' + CAST(@CompanyID as nvarchar) + '		
		AND 
		ProjectTime.Deleted = 0
		AND 
		ProjectTime.Date >= ''' + CONVERT(nvarchar, @DateStart, 126) + '''
		AND
		ProjectTime.Date <= ''' + CONVERT(nvarchar, @DateEnd, 126) + '''' 

		IF ((@AccountIDs <> '') OR (@AccountOnlyIDs <> '') OR (@ProjectIDs <> ''))
		BEGIN
			SET @query = @query + ' AND ('
			
			IF (@AccountIDs <> '')		
			BEGIN
				SET @query = @query + 
				'(ISNULL(Project.AccountID, ProjectTime.AccountID) IN (' + @AccountIDs + ')'
				IF PATINDEX('%-1%', @AccountIDs) <> 0
					SET @query = @query + ' OR ISNULL(Project.AccountID, ProjectTime.AccountID) IS NULL)'
				ELSE
					SET @query = @query + ')'
			END
			
			IF (@AccountOnlyIDs <> '')		
			BEGIN
				IF (@AccountIDs <> '')
					SET @query = @query + ' OR '
				SET @query = @query + '((ISNULL(Project.AccountID, ProjectTime.AccountID) IN (' + @AccountOnlyIDs + ')'
				IF PATINDEX('%-1%', @AccountOnlyIDs) <> 0
					SET @query = @query + ' OR ISNULL(Project.AccountID, ProjectTime.AccountID) IS NULL)'				
				ELSE				
					SET @query = @query + ')'				
				SET @query = @query + ' AND Project.ProjectID IS NULL)'
			END			
			
			IF (@ProjectIDs <> '')
			BEGIN
				IF ((@AccountIDs <> '') OR (@AccountOnlyIDs <> ''))
					SET @query = @query + ' OR '
				SET @query = @query + '(Project.ProjectID IN (' + @ProjectIDs + '))'
			END
				
			SET @query = @query + ')'
		END
		
		IF @TechsIDs <> ''		
			SET @query = @query + ' AND ProjectTime.UserId IN (' + @TechsIDs + ')'


	SET @query = @query + ' UNION All
		SELECT 
		
		ISNULL(tbl_ticket.intAcctId, CASE WHEN ISNULL(tbl_ticket.btNoAccount, 0) = 0 THEN -1 ELSE -2 END) AS AccountID,		
		CASE 
			WHEN Accounts.DId IS NULL THEN CASE WHEN ISNULL(tbl_ticket.btNoAccount, 0) = 0 THEN 
				ISNULL(tbl_company.company_name, '''') + '' (Internal)'' ELSE '''' END
			ELSE Accounts.vchName
      		END AS AccountName,
      		      		
		ISNULL(Project.ProjectID, -1) AS ProjectID,
		dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS ProjectName,
		
		TicketTime.TicketId,
		TicketTime.StartTime, 
		TicketTime.StopTime, 
		tbl_ticket.TicketNumber,
		tbl_ticket.Subject,
		
		
		ISNULL(TaskType.TaskTypeId, -1) AS TaskTypeId, 
		CASE 
			WHEN TaskType.TaskTypeId IS NULL THEN ''Default''
			ELSE TaskType.TaskTypeName
		END AS TaskTypeName,
		
		TicketTime.UserId,
		dbo.fxGetUserName(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email) AS userFullName,
		
		TicketTime.Date,
		TicketTime.Hours,
		TicketTime.Note,
		TicketTime.BillId,		
		TicketTime.UTCOffset AS LocalTimeZoneOffset,
		''TT'' AS Type
		FROM TicketTime
        INNER JOIN tbl_ticket ON TicketTime.DepartmentId = tbl_ticket.company_id AND TicketTime.TicketId = tbl_ticket.Id
		INNER JOIN tbl_company ON TicketTime.DepartmentId = tbl_company.company_id
		LEFT OUTER JOIN Project ON tbl_ticket.company_id = Project.CompanyID AND tbl_ticket.ProjectID = Project.ProjectID
		LEFT OUTER JOIN Accounts ON tbl_ticket.company_id = Accounts.DId AND tbl_ticket.intAcctId = Accounts.Id
		LEFT OUTER JOIN TaskType ON TicketTime.TaskTypeId = TaskType.TaskTypeId AND TicketTime.DepartmentId = TaskType.DepartmentID
		LEFT OUTER JOIN tbl_LoginCompanyJunc ON TicketTime.DepartmentId = tbl_LoginCompanyJunc.company_id AND TicketTime.UserId = tbl_LoginCompanyJunc.id 
		LEFT OUTER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
		WHERE 
		TicketTime.DepartmentId = ' + CAST(@CompanyID as nvarchar) + '		
		AND 
		TicketTime.Deleted = 0
		AND 
		TicketTime.Date >= ''' + CONVERT(nvarchar, @DateStart, 126) + '''
		AND
		TicketTime.Date <= ''' + CONVERT(nvarchar, @DateEnd, 126) + ''''
		
		IF ((@AccountIDs <> '') OR (@AccountOnlyIDs <> '') OR (@ProjectIDs <> ''))
		BEGIN
			SET @query = @query + ' AND ('
			
			IF (@AccountIDs <> '')		
			BEGIN
				SET @query = @query + 
				'(tbl_ticket.intAcctId IN (' + @AccountIDs + ')'
				IF PATINDEX('%-1%', @AccountIDs) <> 0
					SET @query = @query + ' OR (tbl_ticket.intAcctId IS NULL AND ISNULL(tbl_ticket.btNoAccount, 0) = 0))'
				ELSE
					SET @query = @query + ')'
			END
			
			IF (@AccountOnlyIDs <> '')		
			BEGIN
				IF (@AccountIDs <> '')
					SET @query = @query + ' OR '
				SET @query = @query + '((tbl_ticket.intAcctId IN (' + @AccountOnlyIDs + ')'
				IF PATINDEX('%-1%', @AccountOnlyIDs) <> 0
					SET @query = @query + ' OR (tbl_ticket.intAcctId IS NULL AND ISNULL(tbl_ticket.btNoAccount, 0) = 0)'				
				ELSE				
					SET @query = @query + ')'				
				SET @query = @query + ' AND tbl_ticket.ProjectID IS NULL)'
			END			
			
			IF (@ProjectIDs <> '')
			BEGIN
				IF ((@AccountIDs <> '') OR (@AccountOnlyIDs <> ''))
					SET @query = @query + ' OR '
				SET @query = @query + '(tbl_ticket.ProjectID IN (' + @ProjectIDs + '))'
			END
				
			SET @query = @query + ')'
		END
		
		IF @TechsIDs <> ''		
			SET @query = @query + ' AND TicketTime.UserId IN (' + @TechsIDs + ')'
		

	SET @query = @query + CASE (@GroupByField)
		WHEN 1 THEN ') ORDER BY userFullName, UserId, Date, AccountName, AccountID, ProjectName, ProjectID, TaskTypeName, TaskTypeId, Type, TicketId, TicketNumber, Subject, BillId, Hours'
		WHEN 2 THEN ') ORDER BY AccountName, AccountID, Date, userFullName, UserId, ProjectName, ProjectID, TaskTypeName, TaskTypeId, Type, TicketId, TicketNumber, Subject, BillId, Hours'
		WHEN 3 THEN ') ORDER BY AccountName, AccountID, ProjectName, ProjectID, Date, userFullName, UserId, TaskTypeName, TaskTypeId, Type, TicketId, TicketNumber, Subject, BillId, Hours'
		WHEN 4 THEN ') ORDER BY TaskTypeName, TaskTypeId, Date, userFullName, UserId, AccountName, AccountID, ProjectName, ProjectID, Type, TicketId, TicketNumber, Subject, BillId, Hours'
		WHEN 5 THEN ') ORDER BY TicketId, TicketNumber, Subject, Date, userFullName, UserId, AccountName, AccountID, ProjectName, ProjectID, TaskTypeName, TaskTypeId, Type, BillId, Hours'
		WHEN 6 THEN ') ORDER BY TicketId, TicketNumber, Subject, Date, userFullName, UserId, AccountName, AccountID, ProjectName, ProjectID, TaskTypeName, TaskTypeId, Type, BillId, Hours'
		ELSE ') ORDER BY Date, userFullName, UserId, AccountName, AccountID, ProjectName, ProjectID, TaskTypeName, TaskTypeId, Type, TicketId, TicketNumber, Subject, BillId, Hours'
	END
	

	EXEC(@query)
GO
PRINT N'Creating [dbo].[sp_SelectDomainUsers]...';


GO
CREATE PROCEDURE dbo.sp_SelectDomainUsers 
	@domainName nvarchar(255)
AS
BEGIN
	DECLARE @domainWildCard nvarchar(260)
	SET @domainWildCard = @domainName + '\%'

	SELECT LdapUserAccount, LdapUserSID
	FROM tbl_logins
	WHERE LdapUserAccount LIKE @domainWildCard
END
GO
PRINT N'Creating [dbo].[sp_SelectDupeAssets]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectDupeAssets]
(
	@DepartmentId int
)
AS
BEGIN
	WITH DepartmentActiveSatuses(StatusId) AS 
		(
			SELECT AssetStatusID
			FROM AssetStatusCompany
			WHERE
				DId=@DepartmentId
				AND
				AssetStatusID<>17
				AND (NonActive=0 OR (NonActive IS NULL))				
		)
		
	SELECT a.* ,
	
		  '<br>'+c.MotherboardSerial +'<br>'+c.BiosSerial as ComputerProfileUniques, c.AssetId as ComputerProfileAssetId,

		  ac.Name AS Category,
          at.Name AS [Type], at.AssetProfileId,
          make.Make AS Make,
          model.Model AS Model,
          l.Address1 + ', ' + l.City + ', ' + l.[State] AS Location,
          v.Name AS VendorName,
          wv.Name AS WarrantyVendorName,
          acc.VchName AS Account,
          ol.FirstName + ' ' + ol.LastName AS [owner],
          cl.FirstName + ' ' + cl.LastName AS CheckedOut,
          ac.Name + '&nbsp;<br/>' + at.Name + '&nbsp;<br/>' + make.Make + '&nbsp;<br/>' + model.Model AS FullModelName

				

		 FROM Assets a
		 
	LEFT JOIN AssetComputers	   c		on c	.DepartmentId=@DepartmentId AND c.AssetId=a.Id

		 JOIN AssetCategories	   ac		on ac	.DepartmentId=@DepartmentId AND ac.Id	=a.CategoryId
		 JOIN AssetTypes		   at		on at	.DepartmentId=@DepartmentId AND at.Id	=a.TypeId
	LEFT JOIN AssetMakes		   make		on make	.DepartmentId=@DepartmentId AND make.Id	=a.MakeId
	LEFT JOIN AssetModels		   model	on model.DepartmentId=@DepartmentId AND model.Id=a.ModelId
	LEFT JOIN Locations			   l		on l	.DId		 =@DepartmentId AND l.Id	=a.LocationId
	LEFT JOIN Tbl_vendors		   v		on v	.Company_id	 =@DepartmentId	AND v.Id	=a.VendorId
	LEFT JOIN Tbl_vendors		   wv		on wv	.Company_id	 =@DepartmentId	AND wv.Id	=a.WarrantyVendor
	LEFT JOIN Accounts			   acc		on acc	.DId		 =@DepartmentId	AND acc.Id  =a.AccountId
	LEFT JOIN Tbl_LoginCompanyJunc [owner]	on [owner].Company_id	 =@DepartmentId AND [owner].Id=a.ownerId
		 JOIN Tbl_Logins		   ol       on										ol.Id	=[owner].Login_id
	LEFT JOIN Tbl_LoginCompanyJunc checked  on checked.Company_id=@DepartmentId AND checked.Id=CheckedOutId
         JOIN Tbl_Logins		   cl       on										cl.Id	=checked.Login_id

	INNER JOIN DepartmentActiveSatuses das ON a.StatusId = das.StatusId
	WHERE a.DepartmentId=@DepartmentId AND --a.StatusId=1 AND
	(
		a.SerialNumber in (
			select a3.SerialNumber FROM Assets a3 INNER JOIN DepartmentActiveSatuses das ON a3.StatusId = das.StatusId
			where  a3.DepartmentId=@DepartmentId AND a3.SerialNumber is not NULL AND a3.SerialNumber<>''-- AND a3.StatusId=1
			group by a3.SerialNumber having count(*)>1
		) OR
		a.Unique1 in (
			select a3.Unique1 FROM Assets a3 INNER JOIN DepartmentActiveSatuses das ON a3.StatusId = das.StatusId
			where  a3.DepartmentId=@DepartmentId AND a3.Unique1 is not NULL AND a3.Unique1<>''-- AND a3.StatusId=1
			group by a3.Unique1 having count(*)>1
		) OR
		a.Unique2 in (
			select a3.Unique2 FROM Assets a3 INNER JOIN DepartmentActiveSatuses das ON a3.StatusId = das.StatusId
			where  a3.DepartmentId=@DepartmentId AND a3.Unique2 is not NULL AND a3.Unique2<>''-- AND a3.StatusId=1
			group by a3.Unique2 having count(*)>1
		) OR
		a.Unique3 in (
			select a3.Unique3 FROM Assets a3 INNER JOIN DepartmentActiveSatuses das ON a3.StatusId = das.StatusId
			where  a3.DepartmentId=@DepartmentId AND a3.Unique3 is not NULL AND a3.Unique3<>''-- AND a3.StatusId=1
			group by a3.Unique3 having count(*)>1
		) OR
		a.Unique4 in (
			select a3.Unique4 FROM Assets a3 INNER JOIN DepartmentActiveSatuses das ON a3.StatusId = das.StatusId
			where  a3.DepartmentId=@DepartmentId AND a3.Unique4 is not NULL AND a3.Unique4<>''-- AND a3.StatusId=1
			group by a3.Unique4 having count(*)>1
		) OR
		a.Unique5 in (
			select a3.Unique5 FROM Assets a3 INNER JOIN DepartmentActiveSatuses das ON a3.StatusId = das.StatusId
			where  a3.DepartmentId=@DepartmentId AND a3.Unique5 is not NULL AND a3.Unique5<>''-- AND a3.StatusId=1
			group by a3.Unique5 having count(*)>1
		) OR
		a.Unique6 in (
			select a3.Unique6 FROM Assets a3 INNER JOIN DepartmentActiveSatuses das ON a3.StatusId = das.StatusId
			where  a3.DepartmentId=@DepartmentId AND a3.Unique6 is not NULL AND a3.Unique6<>''-- AND a3.StatusId=1
			group by a3.Unique6 having count(*)>1
		) OR
		a.Unique7 in (
			select a3.Unique7 FROM Assets a3 INNER JOIN DepartmentActiveSatuses das ON a3.StatusId = das.StatusId
			where  a3.DepartmentId=@DepartmentId AND a3.Unique7 is not NULL AND a3.Unique7<>''-- AND a3.StatusId=1
			group by a3.Unique7 having count(*)>1
		)
	)
END
GO
PRINT N'Creating [dbo].[sp_SelectEmailByUserId]...';


GO

Create Procedure sp_SelectEmailByUserId
	(
		@DepartmentId int,
		@UserId int
	)

As
	SELECT email FROM tbl_Logins L 
	JOIN tbl_LoginCompanyJunc LJ ON LJ.login_id = L.id
	WHERE LJ.id = @UserId AND LJ.company_id = @DepartmentId
	return
GO
PRINT N'Creating [dbo].[sp_SelectEmailDropBoxes]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_SelectEmailDropBoxes]
	-- Add the parameters for the stored procedure here
	@DId int, 
	@Id int = null,
	@PseudoId char(6) = null
AS
BEGIN
	IF @Id IS NOT NULL
		SELECT * FROM EMailParserDropBoxes WHERE DId=@DId AND Id=@Id
	ELSE IF @PseudoId IS NOT NULL
		SELECT * FROM EMailParserDropBoxes WHERE DId=@DId AND PseudoId=@PseudoId
	ELSE
		SELECT edb.*, 
			dbo.fxGetUserName2(l.FirstName, l.LastName, l.Email) AS TechName,
			dbo.fxGetFullClassName(@DId, edb.ClassId) AS ClassName, 
			STR(edb.tintLevel)+CASE WHEN LEN(tl.LevelName)>0 THEN ' - '+tl.LevelName ELSE '' END AS LevelName,
			STR(pn.tintPriority)+CASE WHEN LEN(pn.Name)>0 THEN ' - '+pn.Name ELSE '' END AS NormalPriorityName,
			STR(ph.tintPriority)+CASE WHEN LEN(ph.Name)>0 THEN ' - '+ph.Name ELSE '' END AS HighPriorityName,
			STR(pl.tintPriority)+CASE WHEN LEN(pl.Name)>0 THEN ' - '+pl.Name ELSE '' END AS LowPriorityName
		FROM EMailParserDropBoxes edb
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=edb.TechnicianId
		LEFT JOIN tbl_Logins l ON l.id=tlj.login_id
		LEFT OUTER JOIN Priorities pn ON pn.DId=@DId AND pn.id = edb.NormalPriorityId
		LEFT OUTER JOIN Priorities ph ON ph.DId=@DId AND ph.id = edb.HighPriorityId
		LEFT OUTER JOIN Priorities pl ON pl.DId=@DId AND pl.id = edb.LowPriorityId		
		LEFT OUTER JOIN TktLevels tl ON tl.DId=@DId AND tl.tintLevel=edb.tintLevel
		WHERE edb.DId=@DId
END
GO
PRINT N'Creating [dbo].[sp_SelectEmailForKnowledgebaseResponse]...';


GO
CREATE Procedure dbo.sp_SelectEmailForKnowledgebaseResponse

	(
		@DId int,
		@KBId int
	)

As
	SELECT DISTINCT lo.email, lo.FirstName, lo.LastName
	FROM tbl_KnowledgebaseResponses kr
	JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=kr.LoginCompanyJunc_Id JOIN tbl_Logins lo ON lo.id=tlj.login_id
	WHERE kr.knowledgebase_Id=@KBId
	
	UNION
	
	SELECT DISTINCT lo2.email, lo2.FirstName, lo2.LastName
	FROM tbl_Knowledgebase kb
	JOIN tbl_LoginCompanyJunc tlj2 ON tlj2.company_id=@DId AND tlj2.id=kb.LoginCompanyJunc_Id JOIN tbl_Logins lo2 ON lo2.id=tlj2.login_id
	WHERE kb.DepartmentId=@DId AND kb.id=@KBId
	
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectEmailPref]...';


GO

CREATE Procedure sp_SelectEmailPref
	(
		@DepartmentId int,
		@UserId int
	)
As
	SELECT L.FirstName, L.LastName, LJ.UserType_id, LJ.configEmailNewTicket, LJ.configEmailTicketResponse, LJ.configEmailUserTicketResponse, LJ.configEmailUserNewTicket
	FROM tbl_LoginCompanyJunc LJ LEFT OUTER JOIN tbl_Logins L ON L.id = LJ.login_id
	WHERE LJ.company_id = @DepartmentId AND LJ.id = @UserId
	return
GO
PRINT N'Creating [dbo].[sp_SelectEscalationServiceRep]...';


GO
CREATE PROCEDURE dbo.sp_SelectEscalationServiceRep
	(
		@DId int
	)
AS --MRUDKOVSKI: 18-DEC-2005 - Ticket #3107 - added usertype_id = 4 property to the query.
	SELECT lj.id, lj.tintLevel, l.firstname, l.lastname, l.email FROM tbl_LoginCompanyJunc LJ 
	JOIN tbl_Logins l ON l.id = LJ.login_id 
	WHERE LJ.company_id=@DId AND (usertype_id = 2 OR usertype_id = 3 OR usertype_id = 4) and LJ.btUserInactive=0 --MRUDKOVSKI: 14-NOV-2005 - Ticket #3054 - Inactive Technicians still showing up in lists.
	ORDER BY l.lastname, l.firstname
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectExportTimeLogs]...';


GO
CREATE  PROCEDURE [dbo].[sp_SelectExportTimeLogs]
(
	@CompanyID int,
	@DateStart smalldatetime,
	@DateEnd smalldatetime
)
AS
	
	(SELECT  
		ProjectTime.Id,
		Accounts.Guid AS AccountGuid,
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END AS AccountName,
		Accounts.intBWDAcctNum AS BWAAcctId,
		Accounts.vchAcctNum AS InternalAcctId,
		Accounts.vchRef1Num AS RefN1,
		Accounts.vchRef2Num AS RefN2,
		ProjectTime.Date,
		ProjectTime.StartTimeUTC AS StartTime,
		ProjectTime.StopTimeUTC AS StopTime,
		ProjectTime.Hours AS LoggedHours,
		ProjectTime.LocalTimeZoneOffset,
		'' AS TicketNumber,
		'' AS TicketSubject,
		dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS Project,
		dbo.fxGetUserName(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email) AS Technician,
		CASE 
			WHEN TaskType.TaskTypeId IS NULL THEN 'Default'
			ELSE TaskType.TaskTypeName
		END AS TaskType,
		ProjectTime.Note
	FROM         
		ProjectTime LEFT OUTER JOIN
        Project ON ProjectTime.DepartmentId = Project.CompanyID AND ProjectTime.ProjectId = Project.ProjectID
		INNER JOIN tbl_company ON ProjectTime.DepartmentId = tbl_company.company_id
		LEFT OUTER JOIN Accounts ON ProjectTime.DepartmentId = Accounts.DId AND ISNULL(Project.AccountID, ProjectTime.AccountID) = Accounts.Id		
		LEFT OUTER JOIN TaskType ON ProjectTime.TaskTypeId = TaskType.TaskTypeId AND ProjectTime.DepartmentId = TaskType.DepartmentID
		LEFT OUTER JOIN tbl_LoginCompanyJunc ON ProjectTime.DepartmentId = tbl_LoginCompanyJunc.company_id AND ProjectTime.UserId = tbl_LoginCompanyJunc.id 
		LEFT OUTER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
	WHERE 
		ProjectTime.DepartmentId = @CompanyID
		AND 
		ProjectTime.Deleted = 0
		AND 
		ProjectTime.Date >= @DateStart
		AND
		ProjectTime.Date <= @DateEnd
	UNION All
		SELECT 
		TicketTime.Id,
		Accounts.Guid AS AccountGuid,
		CASE 
			WHEN Accounts.DId IS NULL THEN CASE WHEN ISNULL(tbl_ticket.btNoAccount, 0) = 0 THEN
				ISNULL(tbl_company.company_name, '') + ' (Internal)' ELSE '' END
			ELSE Accounts.vchName
      		END AS AccountName,
		Accounts.intBWDAcctNum AS BWAAcctId,
		Accounts.vchAcctNum AS InternalAcctId,
		Accounts.vchRef1Num AS RefN1,
		Accounts.vchRef2Num AS RefN2,
		TicketTime.Date,
		TicketTime.StartTime,
		TicketTime.StopTime,
		TicketTime.Hours AS LoggedHours,
		TicketTime.UTCOffset AS LocalTimeZoneOffset,
		CAST(tbl_ticket.TicketNumber AS nvarchar(50)) AS TicketNumber,
		tbl_ticket.Subject AS TicketSubject,
		dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS Project,
		dbo.fxGetUserName(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email) AS Technician,
		CASE 
			WHEN TaskType.TaskTypeId IS NULL THEN 'Default'
			ELSE TaskType.TaskTypeName
		END AS TaskType,
		TicketTime.Note
		FROM TicketTime
        INNER JOIN tbl_ticket ON TicketTime.DepartmentId = tbl_ticket.company_id AND TicketTime.TicketId = tbl_ticket.Id
		INNER JOIN tbl_company ON TicketTime.DepartmentId = tbl_company.company_id
		LEFT OUTER JOIN Project ON tbl_ticket.company_id = Project.CompanyID AND tbl_ticket.ProjectID = Project.ProjectID
		LEFT OUTER JOIN Accounts ON tbl_ticket.company_id = Accounts.DId AND tbl_ticket.intAcctId = Accounts.Id
		LEFT OUTER JOIN TaskType ON TicketTime.TaskTypeId = TaskType.TaskTypeId AND TicketTime.DepartmentId = TaskType.DepartmentID
		LEFT OUTER JOIN tbl_LoginCompanyJunc ON TicketTime.DepartmentId = tbl_LoginCompanyJunc.company_id AND TicketTime.UserId = tbl_LoginCompanyJunc.id 
		LEFT OUTER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
		WHERE 
		TicketTime.DepartmentId = @CompanyID
		AND 
		TicketTime.Deleted = 0
		AND 
		TicketTime.Date >= @DateStart 
		AND
		TicketTime.Date <= @DateEnd
	) ORDER BY Date
GO
PRINT N'Creating [dbo].[sp_SelectFolder]...';


GO

CREATE Procedure sp_SelectFolder

	(
		@DId int,
		@FolderId int
	)

As
	SELECT * FROM Folders WHERE DId=@DId AND id=@FolderId
	return
GO
PRINT N'Creating [dbo].[sp_SelectFolderCount]...';


GO

Create Procedure sp_SelectFolderCount
	(
		@DepartmentId int,
		@FolderId int
	)

As
	DECLARE @count int
	
	SET @count = (SELECT count(id) as TicketCount FROM tbl_ticket WHERE company_id = @DepartmentId AND folder_id = @FolderId AND status <> 'Closed')
	
	return @count
GO
PRINT N'Creating [dbo].[sp_SelectFolderList]...';


GO
CREATE Procedure dbo.sp_SelectFolderList
	(
		@DId int
	)
As
	SELECT t1.id, t1.vchName, t2.Children, t1.ParentId, (select count(*) from tbl_ticket where company_id=@DId and folder_id=t1.id and Status<>'Closed') as TicketAllOpen, (select count(*) from tbl_ticket where company_id=@DId and folder_id=t1.id) as TicketAll  FROM Folders t1
	LEFT OUTER JOIN (SELECT ParentId, count(id) as Children FROM Folders GROUP BY ParentId) as t2 ON t1.id = t2.parentid
	WHERE DId = @DId
	ORDER BY t1.vchName
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectFolders]...';


GO
CREATE PROCEDURE dbo.sp_SelectFolders
	(
		@DId int,
		@SearchString nvarchar(250)
	)
AS

	SELECT 
		id, 
		dbo.fxGetFullFolderName(@DId, id) AS FolderFullName
	FROM Folders 
	WHERE 
		DId = @DId
		AND
		vchName LIKE @SearchString + '%'
	ORDER BY FolderFullName
GO
PRINT N'Creating [dbo].[sp_SelectFollowUpList]...';


GO
CREATE PROCEDURE dbo.sp_SelectFollowUpList
(
		@DId int,
		@UId int,
		@tintListType tinyint,
		@sintDayAdvance smallint,
		@intAcctId int
	)
AS
	DECLARE @dtTemp smalldatetime
	SET @dtTemp=''+DATENAME(m, getutcdate())+' '+DATENAME(d, getutcdate())+' '+DATENAME(yy, getutcdate())+' 11:59 PM'
	DECLARE @btConfirmed bit
	IF @tintListType=6
		SET @btConfirmed=1 --SELECT Confirmed tickets
	ELSE IF @tintListType=7 OR @tintListType=8
		SET @btConfirmed=0 --SELECT UnConfirmed tickets		
	IF @intAcctId IS NOT NULL
		BEGIN
			IF @tintListType=1
				BEGIN
					SELECT t.id, t.dtFollowUp as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, t.FollowUpNote as vchNote, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
					FROM tbl_ticket t
					JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
					JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
					LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--					LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
					WHERE t.company_id=@DId AND t.intAcctId=@intAcctId AND t.dtFollowUp IS NOT NULL
					AND t.dtFollowUp < DATEADD(d, @sintDayAdvance, @dtTemp)
					ORDER BY t.dtFollowUp
				END
				
			IF @tintListType=2
				BEGIN
					SELECT t.id, t.dtReqComp as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, t.ReqCompNote as vchNote, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
					FROM tbl_ticket t
					JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
					JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
					LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--					LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
					WHERE t.company_id=@DId AND t.intAcctId=@intAcctId AND t.Status <> 'Closed' AND t.dtReqComp IS NOT NULL
					AND t.dtReqComp < DATEADD(d, @sintDayAdvance, @dtTemp)
					ORDER BY t.dtReqComp
				END
				
			IF @tintListType=3
				BEGIN
					SELECT t.id, t.dtSLAResponse as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, 'SLA Initial Response' as vchNote, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
					FROM tbl_ticket t
					JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
					JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
					LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--					LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
					WHERE t.company_id=@DId AND t.intAcctId=@intAcctId AND t.Status <> 'Closed' AND t.dtSLAResponse IS NOT NULL AND btInitResponse=0
					AND t.dtSLAResponse < DATEADD(d, @sintDayAdvance, @dtTemp)
					ORDER BY t.dtSLAResponse
				END
				
			IF @tintListType=4
				BEGIN
					SELECT t.id, t.dtSLAComplete as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, 'SLA Completion' as vchNote, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
					FROM tbl_ticket t
					JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
					JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
					LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--					LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
					WHERE t.company_id=@DId AND t.intAcctId=@intAcctId AND t.Status <> 'Closed' AND t.dtSLAComplete IS NOT NULL
					AND t.dtSLAComplete < DATEADD(d, @sintDayAdvance, @dtTemp)
					ORDER BY t.dtSLAComplete
				END
			/* VGOOZ: 21-DEC-2004: Added confirmations support */
			IF @tintListType=5
				BEGIN
					SELECT t.id, t.ClosedTime as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, CASE t.btConfirmed WHEN 1 THEN 'Confirmed' ELSE 'UnConfirmed' END as Status, t.vchConfirmedNote as vchNote, rc.vchName as Resolution, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
					FROM tbl_ticket t
					JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
					JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
					LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--					LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
					LEFT OUTER JOIN ResolutionCats rc ON rc.DId=@DId AND rc.Id=t.ResolutionCatsId
					WHERE t.company_id=@DId AND t.intAcctId=@intAcctId AND t.Status = 'Closed' AND t.btResolved=1 AND t.ClosedTime > DATEADD(d, -@sintDayAdvance, @dtTemp)
					ORDER BY t.ClosedTime DESC
				END
			IF @tintListType=6 OR @tintListType=7 OR @tintListType=8
				BEGIN
					SELECT t.id, t.ClosedTime as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, CASE t.btConfirmed WHEN 1 THEN 'Confirmed' ELSE 'UnConfirmed' END as Status, t.vchConfirmedNote as vchNote, rc.vchName as Resolution, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
					FROM tbl_ticket t
					JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
					JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
					LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--					LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
					LEFT OUTER JOIN ResolutionCats rc ON rc.DId=@DId AND rc.Id=t.ResolutionCatsId
					WHERE t.company_id=@DId AND t.intAcctId=@intAcctId AND t.Status = 'Closed' AND t.btResolved=1 AND ISNULL(t.btConfirmed,0)=@btConfirmed AND t.ClosedTime > DATEADD(d, -@sintDayAdvance, @dtTemp)
					ORDER BY t.ClosedTime DESC
				END		
			IF @tintListType=9
				BEGIN
					SELECT t.id, t.NextStepDate as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, t.NextStep as vchNote, rc.vchName as Resolution, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
					FROM tbl_ticket t
					JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
					JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
					LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--					LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
					LEFT OUTER JOIN ResolutionCats rc ON rc.DId=@DId AND rc.Id=t.ResolutionCatsId
					WHERE 
						t.company_id=@DId 
						AND t.intAcctId=@intAcctId 
						AND ISNULL(t.NextStep, '') <> '' 
						AND t.NextStepDate > DATEADD(d, -@sintDayAdvance, @dtTemp)
					ORDER BY t.NextStepDate DESC
				END	
		END
	ELSE
		BEGIN
			IF @UId=-1
				BEGIN
					IF @tintListType=1
						BEGIN
							SELECT t.id, t.dtFollowUp as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, t.FollowUpNote as vchNote, lg.vchFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							WHERE t.company_id=@DId AND t.dtFollowUp IS NOT NULL
							AND t.dtFollowUp < DATEADD(d, @sintDayAdvance, @dtTemp)
							ORDER BY t.dtFollowUp
						END
						
					IF @tintListType=2
						BEGIN
							SELECT t.id, t.dtReqComp as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, t.ReqCompNote as vchNote, lg.vchFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							WHERE t.company_id=@DId AND t.Status <> 'Closed' AND t.dtReqComp IS NOT NULL
							AND t.dtReqComp < DATEADD(d, @sintDayAdvance, @dtTemp)
							ORDER BY t.dtReqComp
						END
						
					IF @tintListType=3
						BEGIN
							SELECT t.id, t.dtSLAResponse as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, 'SLA Initial Response' as vchNote, lg.vchFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							WHERE t.company_id=@DId AND t.Status <> 'Closed' AND t.dtSLAResponse IS NOT NULL AND btInitResponse=0
							AND t.dtSLAResponse < DATEADD(d, @sintDayAdvance, @dtTemp)
							ORDER BY t.dtSLAResponse
						END
						
					IF @tintListType=4
						BEGIN
							SELECT t.id, t.dtSLAComplete as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, 'SLA Completion' as vchNote, lg.vchFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							WHERE t.company_id=@DId AND t.Status <> 'Closed' AND t.dtSLAComplete IS NOT NULL
							AND t.dtSLAComplete < DATEADD(d, @sintDayAdvance, @dtTemp)
							ORDER BY t.dtSLAComplete
						END
					/* VGOOZ: 21-DEC-2004: Added confirmations support */
					IF @tintListType=5
						BEGIN
							SELECT t.id, t.ClosedTime as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, CASE t.btConfirmed WHEN 1 THEN 'Confirmed' ELSE 'UnConfirmed' END as Status, t.vchConfirmedNote as vchNote, rc.vchName as Resolution, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							LEFT OUTER JOIN ResolutionCats rc ON rc.DId=@DId AND rc.Id=t.ResolutionCatsId
							WHERE t.company_id=@DId AND t.Status = 'Closed' AND t.btResolved=1 AND t.ClosedTime > DATEADD(d, -@sintDayAdvance, @dtTemp)
							ORDER BY t.ClosedTime DESC
						END
					IF @tintListType=6 OR @tintListType=7 OR @tintListType=8
						BEGIN
							SELECT t.id, t.ClosedTime as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, CASE t.btConfirmed WHEN 1 THEN 'Confirmed' ELSE 'UnConfirmed' END as Status, t.vchConfirmedNote as vchNote, rc.vchName as Resolution, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							LEFT OUTER JOIN ResolutionCats rc ON rc.DId=@DId AND rc.Id=t.ResolutionCatsId
							WHERE t.company_id=@DId AND t.Status = 'Closed' AND t.btResolved=1 AND ISNULL(t.btConfirmed,0)=@btConfirmed AND t.ClosedTime > DATEADD(d, -@sintDayAdvance, @dtTemp)
							ORDER BY t.ClosedTime DESC
						END		
					
					IF @tintListType=9
						BEGIN
							SELECT t.id, t.NextStepDate as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, t.NextStep as vchNote, lg.vchFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							WHERE t.company_id=@DId 
							AND ISNULL(t.NextStep, '') <> '' 
							AND t.NextStepDate > DATEADD(d, -@sintDayAdvance, @dtTemp)
							ORDER BY t.NextStepDate DESC
						END		
				END
			ELSE
				BEGIN
					IF @tintListType=1
						BEGIN
							SELECT t.id, t.dtFollowUp as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, t.FollowUpNote as vchNote, lg.vchFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							WHERE t.company_id=@DId AND t.Technician_id=@UId AND t.dtFollowUp IS NOT NULL
							AND t.dtFollowUp < DATEADD(d, @sintDayAdvance, @dtTemp)
							ORDER BY t.dtFollowUp
						END
						
					IF @tintListType=2
						BEGIN
							SELECT t.id, t.dtReqComp as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, t.ReqCompNote as vchNote, lg.vchFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							WHERE t.company_id=@DId AND t.Technician_id=@UId AND t.Status <> 'Closed' AND t.dtReqComp IS NOT NULL
							AND t.dtReqComp < DATEADD(d, @sintDayAdvance, @dtTemp)
							ORDER BY t.dtReqComp
						END
						
					IF @tintListType=3
						BEGIN
							SELECT t.id, t.dtSLAResponse as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, 'SLA Initial Response' as vchNote, lg.vchFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							WHERE t.company_id=@DId AND t.Technician_id=@UId AND t.Status <> 'Closed' AND t.dtSLAResponse IS NOT NULL AND btInitResponse=0
							AND t.dtSLAResponse < DATEADD(d, @sintDayAdvance, @dtTemp)
							ORDER BY t.dtSLAResponse
						END
						
					IF @tintListType=4
						BEGIN
							SELECT t.id, t.dtSLAComplete as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, 'SLA Completion' as vchNote, lg.vchFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							WHERE t.company_id=@DId AND t.Technician_id=@UId AND t.Status <> 'Closed' AND t.dtSLAComplete IS NOT NULL
							AND t.dtSLAComplete < DATEADD(d, @sintDayAdvance, @dtTemp)
							ORDER BY t.dtSLAComplete
						END
					/* VGOOZ: 21-DEC-2004: Added confirmations support */
					IF @tintListType=5
						BEGIN
							SELECT t.id, t.ClosedTime as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, CASE t.btConfirmed WHEN 1 THEN 'Confirmed' ELSE 'UnConfirmed' END as Status, t.vchConfirmedNote as vchNote, rc.vchName as Resolution, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							LEFT OUTER JOIN ResolutionCats rc ON rc.DId=@DId AND rc.Id=t.ResolutionCatsId
							WHERE t.company_id=@DId AND t.Technician_id=@UId AND t.Status = 'Closed' AND t.btResolved=1 AND t.ClosedTime > DATEADD(d, -@sintDayAdvance, @dtTemp)
							ORDER BY t.ClosedTime DESC
						END
					IF @tintListType=6 OR @tintListType=7
						BEGIN
							SELECT t.id, t.ClosedTime as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, CASE t.btConfirmed WHEN 1 THEN 'Confirmed' ELSE 'UnConfirmed' END as Status, t.vchConfirmedNote as vchNote, rc.vchName as Resolution, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							LEFT OUTER JOIN ResolutionCats rc ON rc.DId=@DId AND rc.Id=t.ResolutionCatsId
							WHERE t.company_id=@DId AND t.Technician_id=@UId AND t.Status = 'Closed' AND t.btResolved=1 AND ISNULL(t.btConfirmed,0)=@btConfirmed  AND t.ClosedTime > DATEADD(d, -@sintDayAdvance, @dtTemp)
							ORDER BY t.ClosedTime DESC
						END
					IF @tintListType=8
						BEGIN
							SELECT t.id, t.ClosedTime as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, CASE t.btConfirmed WHEN 1 THEN 'Confirmed' ELSE 'UnConfirmed' END as Status, t.vchConfirmedNote as vchNote, rc.vchName as Resolution, lg.vchFullName, lg2.vchFullName as vchTechFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							JOIN vw_Logins lg2 ON lg2.DId=@DId AND lg2.id=t.Technician_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
							LEFT OUTER JOIN ResolutionCats rc ON rc.DId=@DId AND rc.Id=t.ResolutionCatsId
							WHERE t.company_id=@DId AND t.User_id=@UId AND t.Status = 'Closed' AND t.btResolved=1 AND ISNULL(t.btConfirmed,0)=@btConfirmed AND t.ClosedTime > DATEADD(d, -@sintDayAdvance, @dtTemp)
							ORDER BY t.ClosedTime DESC
						END
					IF @tintListType=9
						BEGIN
							SELECT t.id, t.NextStepDate as dtDate, t.TicketNumber, t.TicketNumberPrefix, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.Status, t.NextStep as vchNote, lg.vchFullName, cl.Name as ClassName, dbo.fxGetUserLocationName(@DId, t.LocationId) as LocationName
							FROM tbl_ticket t
							JOIN vw_Logins lg ON lg.DId=@DId AND lg.id=t.User_id
							LEFT OUTER JOIN tbl_class cl ON cl.company_id=@DId and cl.id=t.class_id
--							LEFT OUTER JOIN tbl_Locations loc ON loc.DId=@DId AND loc.id=t.location_id
							WHERE t.company_id=@DId AND t.Technician_id=@UId 
							AND ISNULL(t.NextStep, '') <> '' 
							AND t.NextStepDate > DATEADD(d, -@sintDayAdvance, @dtTemp)
							ORDER BY t.NextStepDate DESC
						END
				END
		END
GO
PRINT N'Creating [dbo].[sp_SelectFreetextKnowledgebase]...';


GO
CREATE Procedure dbo.sp_SelectFreetextKnowledgebase
(
		@DepartmentId int,
		@text nvarchar(100),
		@KBCategoryID int,
		@KBType tinyint
)

AS 

	SELECT 
		x.id, 
		sum(x.rank_total) as rank,
		tbl_ticket.subject,
		CASE WHEN ISNULL(tbl_class.KBPortalAlias, '') = '' THEN
		tbl_class.Name
		ELSE tbl_class.KBPortalAlias END AS Category,
		tbl_ticket.TicketNumber,
		tbl_ticket.PseudoId,
		ISNULL(tbl_ticket.UpdatedTime, ISNULL(tbl_ticket.CreateTime, getutcdate())) AS LastMod
		FROM
		(
			SELECT t.id, 4 AS rank_total, t.company_id
				FROM tbl_ticket t 
				WHERE 
					t.company_id = @DepartmentId 
					AND
					t.KB = 1
					AND
					(t.KBType = @KBType OR @KBType = 0)
					AND 
					t.subject LIKE '%' + @text + '%'
					AND
					(t.class_id = @KBCategoryID OR @KBCategoryID = 0)
			UNION
			SELECT t.id, 3 AS rank_total, t.company_id
				FROM tbl_ticket t 
				WHERE 
					t.company_id = @DepartmentId 
					AND
					t.KB = 1
					AND
					(t.KBType = @KBType OR @KBType = 0)
					AND 
					t.KBSearchDesc LIKE '%' + @text + '%'
					AND
					(t.class_id = @KBCategoryID OR @KBCategoryID = 0)
			UNION
			SELECT t.id,2 AS rank_total, t.company_id
				FROM tbl_ticket t
				WHERE 
					t.company_id = @DepartmentId 
					AND
					t.KB = 1
					AND
					(t.KBType = @KBType OR @KBType = 0)
					AND 
					t.Workpad LIKE '%' + @text + '%'
					AND
					(t.class_id = @KBCategoryID OR @KBCategoryID = 0)
			UNION
			SELECT tl.TId , 1 AS rank_total , tl.DId FROM TicketLogs tl 
				INNER JOIN
					tbl_ticket t ON tl.DId = t.company_id AND tl.TId = t.Id 
				WHERE 
					tl.DId = @DepartmentId
					AND
					t.KB = 1
					AND
					(t.KBType = @KBType OR @KBType = 0)
					AND 
					tl.vchNote LIKE '%' + @text + '%'
					AND
					(t.class_id = @KBCategoryID OR @KBCategoryID = 0)
		)
		AS x INNER JOIN tbl_ticket ON x.id = tbl_ticket.Id 
			LEFT OUTER JOIN
				tbl_class ON tbl_ticket.company_id = tbl_class.company_id AND tbl_ticket.class_id = tbl_class.id
		GROUP BY x.id, tbl_ticket.TicketNumber, tbl_ticket.subject, tbl_class.Name, tbl_ticket.PseudoId, tbl_ticket.intAcctId,
			tbl_ticket.UpdatedTime, tbl_ticket.CreateTime, tbl_class.KBPortalAlias
		ORDER BY rank DESC
GO
PRINT N'Creating [dbo].[sp_SelectHoliday]...';


GO

CREATE PROCEDURE sp_SelectHoliday
	(
		@DId int,
		@Id int
	)
AS
	SELECT * FROM Holidays WHERE DId=@DId AND Id=@Id
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectHolidays]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectHolidays]
	(
		@DId int,
		@vchYear varchar(4)
	)
AS
	SELECT * FROM Holidays WHERE DId=@DId and dtStart BETWEEN @vchYear+'0101 00:00' and @vchYear+'1231 23:59'
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectInvoice]...';


GO


CREATE PROCEDURE [dbo].[sp_SelectInvoice]
	(
		@DId int,
		@InvoiceId int
	)
AS

	DECLARE @AccountID int
	DECLARE @AccountName nvarchar(100)
	DECLARE @AccountFBId int
	DECLARE @Addr1 nvarchar(510)
	DECLARE @Addr2 nvarchar(120)
	DECLARE @LocationID int
	DECLARE @email nvarchar(50)
	DECLARE @FirstName nvarchar(50)
	DECLARE @LastName nvarchar(50)
	DECLARE @btCfgAcctMngr nvarchar(255),
		@btCfgProject bit
	SET @btCfgAcctMngr = dbo.fxGetConfigValueStr(@DId, 'btCfgAcctMngr')
	SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	SET @AccountID = NULL
	SET @AccountName = NULL
	SET @AccountFBId = NULL
	SET @Addr1 = NULL
	SET @Addr2 = NULL
	SET @LocationID = NULL
	SET @email = NULL
	SET @FirstName = NULL
	SET @LastName = NULL
	SELECT @AccountID = Invoice.AccountId FROM Invoice WHERE Invoice.DId = @DId AND Invoice.Id = @InvoiceId
	SET @AccountName =	CASE
							WHEN @AccountID IS NULL
							THEN (SELECT company_name FROM tbl_company WHERE company_id = @DId) + ' (Internal)'
							ELSE (SELECT vchName FROM Accounts a WHERE a.DId = @DId AND a.Id = @AccountID)
						END
	SET @AccountFBId =	CASE
							WHEN @AccountID IS NULL
							THEN (SELECT CAST(dbo.fxGetConfigValueStr(@DId, 'FBClientId') as int))
							ELSE (SELECT FBClientId FROM Accounts a WHERE a.DId = @DId AND a.Id = @AccountID)
						END

	IF (@AccountID IS NOT NULL) 
		SELECT @LocationID = LocationId FROM Accounts WHERE DId = @DId AND Id = @AccountID
	IF (@LocationID IS NULL)		
		SELECT 
			@LocationID = l.Id 
		FROM 
			Locations l
		WHERE
			l.DId = @DId
			AND
			(l.AccountId = @AccountID OR (l.AccountId IS NULL AND @AccountID IS NULL))
			AND l.IsDefault = 1
			AND
			l.ParentId IS NULL
	IF (@LocationID IS NULL)		
		SELECT TOP 1 
			@LocationID = l.Id 
		FROM 
			Locations l
		WHERE
			l.DId = @DId
			AND
			(l.AccountId = @AccountID OR (l.AccountId IS NULL AND @AccountID IS NULL))
			AND
			l.ParentId IS NULL
		ORDER BY LocationTypeId


	DECLARE @Address1 nvarchar(255)
	DECLARE @Address2 nvarchar(255)
	DECLARE @City nvarchar(50)
	DECLARE @State nvarchar(50)
	DECLARE @Country nvarchar(50)
	DECLARE @ZipCode nvarchar(20)
	
	IF (@LocationID IS NULL)
	BEGIN
		SET @Addr1 = '---'
		SET @Addr2 = '---'
	END
	ELSE
		SELECT
			@Addr1 = l.Address1 + ', ' + l.Address2,
			@Addr2 = 
				l.City + ', ' + l.State +
				CASE WHEN l.Country IS NULL OR l.Country = '' THEN '' ELSE ', ' + l.Country END + ' ' + l.ZipCode,
			@Address1 = l.Address1,
			@Address2 = l.Address2,
			@City = l.City,
			@State = l.State,
			@Country = l.Country,
			@ZipCode = l.ZipCode
		FROM 
			Locations l
		WHERE
			l.DId = @DId
			AND
			l.Id = @LocationID		
	
	SELECT @FirstName = lo.FirstName, @LastName = lo.LastName, @email = lo.Email	
	FROM 
		tbl_LoginCompanyJunc lj 
		INNER JOIN UserAccounts AS UA ON UA.DepartmentId = lj.company_id AND lj.Id = UA.UserId
		INNER JOIN tbl_Logins lo ON lo.id=lj.login_id		
	WHERE
		UA.DepartmentId=@DId
		AND 
		(ISNULL(UA.AccountId, -1) = ISNULL(@AccountID, -1))
		AND
		lj.btUserInactive = 0
		AND
		UA.AccountingContactPrimary = 1			


	SELECT  
		i.Id,
		i.Date,
		i.BeginDate,
		i.EndDate,
		i.QBExported,
		i.FBExported,
		ISNULL(i.TimeLogsCount, 0) AS TimeLogsCount,		
		CASE 
			WHEN i.TotalHours IS NULL
			THEN
				ISNULL((SELECT SUM(tt.Hours) FROM TicketTime tt WHERE  tt.DepartmentId = @DId AND tt.InvoiceId = i.Id), 0) +
					ISNULL((SELECT SUM(pt.Hours) FROM ProjectTime pt WHERE  pt.DepartmentId = @DId AND pt.InvoiceId = i.Id), 0)
			ELSE i.TotalHours
		END AS TotalHours,
		ISNULL(i.Amount, -1) AS Amount,		
		CASE 
			WHEN i.CreatedBy IS NULL
			THEN '---'
			ELSE
				dbo.fxGetUserName(lo1.FirstName, lo1.LastName, lo1.Email)
		END AS CreatedByFullName,
		dbo.fxGetCustomerName(@DId, i.AccountId, i.ProjectId, @btCfgAcctMngr, @btCfgProject) AS Customer,
		ISNULL(@AccountID, -1) AS AccountId,
		@AccountName AS AccountName,
		ISNULL(@AccountFBId, -1) AS FBClientId,
		@Addr1 AS Addr1,
		@Addr2 AS Addr2,
		@Address1 AS Address1,
		@Address2 AS Address2,
		@City AS City,
		@State AS State,
		@Country AS Country,
		@ZipCode AS ZipCode,
		@email AS Email,
		@FirstName AS FirstName,
		@LastName AS LastName,
		i.BillingMethodID,
		i.FlatFeeNextDate,
		QBAccountAlias,
		QBItemAlias,
		i.TravelCost
	FROM       
		Invoice i		
			LEFT OUTER JOIN tbl_LoginCompanyJunc tlj1 
				ON tlj1.company_id=i.DId AND tlj1.id=i.CreatedBy 
			LEFT OUTER JOIN tbl_Logins lo1 ON lo1.id=tlj1.login_id			
	WHERE
		i.DId = @DId
		AND
		i.Id = @InvoiceId
GO
PRINT N'Creating [dbo].[sp_SelectInvoiceForExport]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectInvoiceForExport]
	(
		@DId int,
		@InvoiceID int
	)
AS
	SELECT 
		tt.Id,
		tt.TicketId,
		CAST(t.TicketNumber AS nvarchar(50)) AS TicketNumber,
		tt.Hours,
		tt.Note,
		tt.BillRate,
		tt.Date,
		tt.StartTime,
		tt.StopTime,		
		ISNULL(tt.UTCOffset, 0) AS LoggedTimeOffset,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		ISNULL(TaskType.QBAccountAlias, '') AS QBAccountAlias,
		CASE 
			WHEN (TaskType.QBItemAlias IS NULL OR TaskType.QBItemAlias = '')
			THEN ISNULL(TaskType.TaskTypeName, 'Default')
			ELSE TaskType.QBItemAlias
		END AS QBItemAlias,
		ISNULL((SELECT TOP 1 ISNULL(vchNote, '') FROM TicketLogs WHERE DId = @DId AND TId = tt.TicketId AND TicketTimeId = tt.Id ORDER BY Id DESC), '') AS TktLog,
		'T' AS EntityFlag,
		CASE 
			WHEN lo.FirstName IS NULL 
			THEN lo.LastName
			ELSE lo.LastName+', '+lo.FirstName
		END AS TechName,
		(tt.Hours * ISNULL(tt.BillRate, 0)) AS Amount
	FROM 
		TicketTime tt
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=tt.UserId 
		LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id
		LEFT OUTER JOIN TaskType ON tt.TaskTypeId = TaskType.TaskTypeId
		LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id
	WHERE 
		tt.DepartmentId = @DId AND tt.InvoiceId = @InvoiceId AND tt.BillRate >=0
	UNION ALL
	SELECT
		pt.Id,
		pt.ProjectId,
		p.Name,
		pt.Hours,
		pt.Note,
		pt.BillRate,
		pt.Date,
		pt.StartTimeUTC,
		pt.StopTimeUTC,
		ISNULL(pt.LocalTimeZoneOffset, 0) AS LoggedTimeOffset,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		ISNULL(TaskType.QBAccountAlias, '') AS QBAccountAlias,
		CASE 
			WHEN (TaskType.QBItemAlias IS NULL OR TaskType.QBItemAlias = '')
			THEN ISNULL(TaskType.TaskTypeName, 'Default')
			ELSE TaskType.QBItemAlias
		END AS QBItemAlias,
		'', 'P' AS EntityFlag,
		CASE 
			WHEN lo.FirstName IS NULL 
			THEN lo.LastName
			ELSE lo.LastName+', '+lo.FirstName
		END AS TechName,
		(pt.Hours * ISNULL(pt.BillRate, 0)) AS Amount
	FROM 
		ProjectTime pt		
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=pt.DepartmentId AND tlj.id=pt.UserId 
		LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id
		LEFT OUTER JOIN tbl_company C ON tlj.company_id=C.company_id
		LEFT OUTER JOIN TaskType ON pt.TaskTypeId = TaskType.TaskTypeId
		LEFT OUTER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID
	WHERE 
		pt.DepartmentId = @DId AND pt.InvoiceId = @InvoiceId AND pt.BillRate >=0
	ORDER BY tt.TicketId, tt.Date, TaskTypeName
GO
PRINT N'Creating [dbo].[sp_SelectInvoiceLastDRRange]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectInvoiceLastDRRange]
	(
		@DId int
	)
AS
	SELECT TOP 1 
		i.Id,		
		i.BeginDate,
		i.EndDate
	FROM       
		Invoice i
	WHERE
		i.DId = @DId		
	ORDER BY i.EndDate DESC, i.BeginDate DESC




SET QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_SelectInvoiceRetainers]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectInvoiceRetainers]
	(
		@CompanyID int,
		@InvoiceID int
	)
AS

	SELECT
		dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) AS FullName,
		Amount, TechStart, TechEnd, LoggedHours, LogsCount, FullAmount
	FROM         
		InvoiceRetainer
			LEFT OUTER JOIN
				tbl_LoginCompanyJunc ON InvoiceRetainer.DId = tbl_LoginCompanyJunc.company_id 
				AND 
				InvoiceRetainer.TechId = tbl_LoginCompanyJunc.id 
				LEFT OUTER JOIN
					tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id						
							
	WHERE
		InvoiceRetainer.DId = @CompanyID
		AND
		InvoiceRetainer.InvoiceId = @InvoiceID




set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON



set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_SelectInvoices]...';


GO
CREATE PROCEDURE dbo.sp_SelectInvoices
(
	@DId int,
	@BeginDate smalldatetime,
	@EndDate smalldatetime,
	@Archived bit
)
AS
	DECLARE @btCfgAcctMngr nvarchar(255),
		@btCfgProject bit
	SET @btCfgAcctMngr = dbo.fxGetConfigValueStr(@DId, 'btCfgAcctMngr')
	SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	
	SELECT  
		i.Id,
		i.Date,
		i.BeginDate,
		i.EndDate,
		i.QBExported,
		i.FBExported,
		ISNULL(i.Amount, 0) AS Amount,
		ISNULL(i.TotalHours, 0) AS TotalHours,
		ISNULL(i.TimeLogsCount, 0) AS TimeLogsCount,		
		ISNULL(i.AccountId, -1) AS AccountId,
		ISNULL(i.ProjectId, -1) AS ProjectId,
		CASE WHEN i.ProjectId IS NULL AND @btCfgAcctMngr <> 'true' THEN '' ELSE 
			dbo.fxGetCustomerName(@DId, i.AccountId, i.ProjectId, @btCfgAcctMngr, @btCfgProject) END AS Customer,
		ISNULL(i.TravelCost, 0) AS TravelCost,
		ISNULL(i.Amount, 0) + ISNULL(i.TravelCost, 0) AS TotalCost
	FROM       
		Invoice i
			LEFT OUTER JOIN Accounts a ON i.DId = a.DId AND i.AccountId = a.Id			
	WHERE
		i.DId = @DId
		AND
		i.Date >= @BeginDate
		AND 
		i.Date <= @EndDate
		AND
		i.Archived = @Archived
		AND
		((@btCfgAcctMngr = 'true' AND (i.AccountID IS NULL OR a.btActive = 1)) OR (@btCfgAcctMngr <> 'true' AND i.AccountID IS NULL))	
		AND
		(@btCfgProject = 1 OR (@btCfgProject <> 1 AND i.ProjectId IS NULL))
	ORDER BY i.Date DESC, i.Id
GO
PRINT N'Creating [dbo].[sp_SelectInvoiceTicketTravelCosts]...';


GO
CREATE Procedure dbo.sp_SelectInvoiceTicketTravelCosts
	(
		@CompanyID int,
		@InvoiceID int
	)
AS

	SELECT
		ttc.Id,
		ttc.TicketId,
		CAST(t.TicketNumber AS nvarchar(50)) AS TicketNumber, 
		ttc.StartLocation,
		ttc.EndLocation,
		ttc.Distance,
		ttc.DistanceRate,
		ttc.Total,
		t.Status,
		ttc.Date
	FROM 
		TicketTravelCosts ttc
	INNER JOIN tbl_ticket t ON ttc.DepartmentId = t.company_id AND ttc.TicketId = t.Id								
	WHERE 
		ttc.DepartmentId = @CompanyID 
		AND 
		ttc.InvoiceId = @InvoiceID
	ORDER BY ttc.TicketId
GO
PRINT N'Creating [dbo].[sp_SelectInvoiceTimeLogs]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectInvoiceTimeLogs]
		(
		@DId int,
		@InvoiceId int
	)
AS

	SELECT 
		tt.Id,
		tt.TicketId,
		CAST(t.TicketNumber AS nvarchar(50)) AS TicketNumber, -- ? достатньо
		tt.Hours,
		tt.Note,
		tt.BillRate,
		tt.Date,
		tt.StartTime,
		tt.StopTime,		
		ISNULL(tt.UTCOffset, 0) AS LoggedTimeOffset,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		ISNULL((SELECT TOP 1 ISNULL(vchNote, '') FROM TicketLogs WHERE DId = @DId AND TId = tt.TicketId AND TicketTimeId = tt.Id ORDER BY Id DESC), '') AS TktLog,
		'T' AS EntityFlag,
		dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) AS TechName,
		'' AS AccountID,
		'' AccountName
	FROM 
		TicketTime tt
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=tt.UserId 
		LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id
		LEFT OUTER JOIN TaskType ON tt.TaskTypeId = TaskType.TaskTypeId
		LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id
	WHERE 
		tt.DepartmentId = @DId AND tt.InvoiceId = @InvoiceId AND tt.BillRate >= 0
	UNION
	SELECT
		pt.Id,
		pt.ProjectId,
		p.Name,
		pt.Hours,
		pt.Note,
		pt.BillRate,
		pt.Date,
		pt.StartTimeUTC,
		pt.StopTimeUTC,
		ISNULL(pt.LocalTimeZoneOffset, 0) AS LoggedTimeOffset,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		'', 'P' AS EntityFlag,
		dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) AS TechName,
		ISNULL(p.AccountID, pt.AccountID) AS AccountID,
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(c.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END AS AccountName
	FROM 
		ProjectTime pt		
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=pt.DepartmentId AND tlj.id=pt.UserId 
		LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id
		LEFT OUTER JOIN tbl_company C ON tlj.company_id=C.company_id
		LEFT OUTER JOIN TaskType ON pt.TaskTypeId = TaskType.TaskTypeId
		LEFT OUTER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID
		LEFT OUTER JOIN Accounts ON pt.DepartmentId = Accounts.DId AND ISNULL(p.AccountID, pt.AccountID) = Accounts.Id
	WHERE 
		pt.DepartmentId = @DId AND pt.InvoiceId = @InvoiceId AND pt.BillRate >= 0
	ORDER BY tt.TicketId, tt.Date, TaskTypeName
GO
PRINT N'Creating [dbo].[sp_SelectJunkEmail]...';


GO
CREATE PROCEDURE dbo.sp_SelectJunkEmail
	(
		@DId int,
		@vchEmail nvarchar(100) = null,
		@vchSubject nvarchar(150) = null
	)
AS
	IF EXISTS(SELECT 'true' FROM JunkMailRules 
			WHERE DId=@DId 
			AND (
				(@vchEmail like '%'+vchEmail+'%' OR vchEmail IS NULL) 
				AND 
				(@vchSubject like '%'+vchSubject+'%' OR vchSubject IS NULL)
			)
			AND NOT (vchSubject IS NULL AND vchEmail IS NULL)
		)
		RETURN 1
	ELSE
		RETURN 0
GO
PRINT N'Creating [dbo].[sp_SelectJunkMailRule]...';


GO

CREATE PROCEDURE sp_SelectJunkMailRule
	(
		@DId int,
		@Id int
	)

AS
	SELECT vchEmail, vchSubject FROM JunkMailRules WHERE DId=@DId AND Id=@Id
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectJunkMailRules]...';


GO

CREATE PROCEDURE sp_SelectJunkMailRules
	(
		@DId int
	)
AS
	SET NOCOUNT ON
	SELECT * FROM JunkMailRules WHERE DId=@DId
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectKBAutocomplete]...';


GO
CREATE PROCEDURE dbo.sp_SelectKBAutocomplete
	(
		@DId int,
		@text nvarchar(100),
		@AccID int
	)
AS
	
	SELECT TOP 6
		t.id, 
		t.KBType,
		t.Subject,
		CAST(t.Workpad as nvarchar(250)) AS body,
		t.PseudoId
	FROM 
		tbl_ticket t 
	WHERE 
		t.company_id = @DId 
		AND
		t.KB = 1
		AND
		((t.KBPublishLevel = 1 AND @AccID = 0) OR (t.KBPublishLevel IN (1, 2) AND @AccID > 0))
		AND
		(t.intAcctId = @AccID OR @AccID = 0)
		AND 
		t.subject LIKE '%' + @text + '%'
GO
PRINT N'Creating [dbo].[sp_SelectKBBestAnswer]...';


GO
CREATE PROCEDURE dbo.sp_SelectKBBestAnswer
	(
		@DId int,
		@TktID int
	)
AS
	
	SELECT TOP 1
		tl.Id,
		tl.dtDate, 
		tl.vchNote,
		CASE WHEN tl.UId IS NULL THEN ISNULL(tl.UserName, '') ELSE
		RTRIM(ISNULL(l.FirstName, '') + ' ' + ISNULL(l.LastName, '')) END AS CreatedByUser,
		CASE WHEN tl.UId IS NULL THEN ISNULL(tl.UserEmail, '') ELSE l.Email END AS CreatedEmail,
		ISNULL(tbl_UserType.Name, '') AS UserType,
		ISNULL(tl.KBRateSum, 0) AS KBRateSum
	FROM 
		TicketLogs tl 
	LEFT OUTER JOIN 
		tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=tl.UId 
	LEFT OUTER JOIN 
		tbl_Logins l ON l.id=tlj.login_id
	LEFT OUTER JOIN
		tbl_UserType ON tlj.UserType_Id = tbl_UserType.id
	WHERE 
		tl.DId=@DId 
		AND 
		tl.TId=@TktID
		AND 
		ISNULL(tl.Hidden, 0) = 0
		AND
		tl.vchType IN ('Response', 'Tkt Response')
		AND
		ISNULL(tl.KBRateSum , 0) > 0
	ORDER BY 
		ISNULL(tl.KBRateSum , 0) DESC, tl.Id ASC
GO
PRINT N'Creating [dbo].[sp_SelectKBByAlternateId]...';


GO
CREATE Procedure [dbo].sp_SelectKBByAlternateId
(
	@DepartmentId int,
	@KBAlternateId nvarchar(255),
	@KBType tinyint
)
As
	SELECT TOP 10
		tbl_ticket.id AS TktId, 
		tbl_ticket.subject AS KBSubject,
		tbl_ticket.PseudoId,
		tbl_ticket.KBType
	FROM 
		tbl_ticket 
	WHERE 
		tbl_ticket.company_id=@DepartmentId 
		AND
		tbl_ticket.KB = 1
		AND
		(tbl_ticket.KBType = @KBType OR @KBType = 0)
		AND
		tbl_ticket.KBAlternateId = @KBAlternateId
		AND
		ISNULL(tbl_ticket.KBPublishLevel, 0) <> 0
	ORDER BY 
		tbl_ticket.CreateTime DESC
GO
PRINT N'Creating [dbo].[sp_SelectKBByDate]...';


GO
CREATE Procedure [dbo].[sp_SelectKBByDate]
	(
		@DId int,
		@StartDate smalldatetime,
		@EndDate smalldatetime
	)
As

		SELECT 
			tbl_ticket.company_id,
			tbl_ticket.id,
			tbl_ticket.User_id,
			tbl_ticket.Subject,
			tbl_ticket.Workpad,
			ISNULL(tbl_ticket.UpdatedTime, ISNULL(tbl_ticket.CreateTime, getutcdate())) AS dtDate,
			dbo.fxGetUserName(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email) AS UserFullName,
			tbl_ticket.TicketNumber
		FROM 
			tbl_ticket 
		INNER JOIN
			tbl_LoginCompanyJunc ON tbl_ticket.company_id = tbl_LoginCompanyJunc.company_id AND tbl_ticket.User_id = tbl_LoginCompanyJunc.id 
		INNER JOIN
			tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
		WHERE 
			tbl_ticket.company_id = @DId 
			AND 
			ISNULL(tbl_ticket.UpdatedTime, ISNULL(tbl_ticket.CreateTime, getutcdate())) BETWEEN @StartDate AND @EndDate
			AND
			tbl_ticket.KB = 1
			AND
			tbl_ticket.KBType = 1
GO
PRINT N'Creating [dbo].[sp_SelectKBCategoryList]...';


GO
CREATE Procedure dbo.sp_SelectKBCategoryList
(
		@DepartmentId int
	)
As
	SELECT 
		[id],
		CASE WHEN ISNULL(KBPortalAlias, '') <> '' THEN [KBPortalAlias] ELSE [Name] END AS KBCategoryName
	FROM [tbl_class]
	WHERE
		[company_id] = @DepartmentId
		AND
		[KBPortal] = 1
		AND
		[btInactive] = 0
	ORDER BY
		KBCategoryName
GO
PRINT N'Creating [dbo].[sp_SelectKBCountByDate]...';


GO
CREATE Procedure dbo.sp_SelectKBCountByDate
	(
		@DId int,
		@StartDate smalldatetime,
		@EndDate smalldatetime
	)
As
	
	return (
		SELECT 
			count(id) 
		FROM 
			tbl_ticket 
		WHERE 
			company_id = @DId 
			AND 
			ISNULL(tbl_ticket.UpdatedTime, ISNULL(tbl_ticket.CreateTime, getutcdate())) BETWEEN @StartDate AND @EndDate
			AND
			tbl_ticket.KB = 1
			AND
			tbl_ticket.KBType = 1
		)
GO
PRINT N'Creating [dbo].[sp_SelectKBDetail]...';


GO

CREATE Procedure [sp_SelectKBDetail]
		(
			@DepartmentId int,
			@KBId int
		)
	As
		SELECT * FROM tbl_Knowledgebase WHERE id=@KBId AND DepartmentId = @DepartmentId
GO
PRINT N'Creating [dbo].[sp_SelectKBPortslSearch]...';


GO



CREATE PROCEDURE [dbo].[sp_SelectKBPortslSearch]
	(
		@DId int,
		@text nvarchar(100),
		@AccID int,
		@ClassID int,
		@PageHelp bit
	)
AS
	DECLARE @KB TABLE(	
		TktId int,
		ClassID int,
		SearchRank bigint,
		KBSubject nvarchar(100),
		KBType tinyint,
		PseudoId char(6),
		ClassName nvarchar(50),
		KBHelpfulCount int,
		KBPortalOrder int)
	DECLARE @SearchRankLimit int
	
	SET @SearchRankLimit = 6
	IF @ClassID IS NOT NULL
	 BEGIN
		SET @SearchRankLimit = 0
	 END
	
	IF @text = ''
	 BEGIN
	  INSERT INTO @KB
		(TktId,
		ClassID,
		SearchRank,
		KBSubject,
		KBType,
		PseudoId,
		ClassName,
		KBHelpfulCount,
		KBPortalOrder)
	  SELECT
		Id,
		[class_id],
		SearchRank,
		Subject,
		KBType,
		PseudoId,
		ClassName,
		KBHelpfulCount,
		KBPortalOrder
      FROM (
        SELECT 
			ISNULL(tkt.[class_id], 0) AS [class_id], 
			tkt.PseudoId, 
			tkt.KBType, 
			tkt.Subject, 
			tkt.Id, 
			ROW_NUMBER() over (Partition BY ISNULL(tkt.[class_id], 0) ORDER BY ISNULL(tkt.UpdatedTime, tkt.CreateTime) DESC, tkt.Id ASC  ) AS SearchRank,
			CASE WHEN ISNULL(tbl_class.KBPortalAlias, '') = '' THEN
			ISNULL(tbl_class.Name, 'Other')
			ELSE tbl_class.KBPortalAlias END AS ClassName,
			tkt.KBHelpfulCount,
			ISNULL(tbl_class.KBPortalOrder, 255)AS KBPortalOrder
        FROM 
			[tbl_ticket] tkt
        LEFT OUTER JOIN
			tbl_class ON tkt.company_id = tbl_class.company_id AND tkt.class_id = tbl_class.id
        WHERE
        tkt.[company_id] = @DId
        AND
        tkt.[KB] = 1
        AND
        ((tkt.KBPublishLevel = 1 AND @AccID = 0) OR (tkt.KBPublishLevel IN (1, 2) AND @AccID > 0))
        AND
        (tkt.intAcctId = @AccID OR @AccID = 0)
        AND
        (ISNULL(tkt.[class_id], 0) = @ClassID OR @ClassID IS NULL)
        ) rs WHERE (SearchRank <= @SearchRankLimit OR @SearchRankLimit = 0)
     END
    ELSE
     BEGIN
		INSERT INTO @KB
		(TktId,
		ClassID,
		SearchRank,
		KBSubject,
		KBType,
		PseudoId,
		ClassName,
		KBHelpfulCount,
		KBPortalOrder)
	  SELECT
		Id,
		[class_id],
		SearchRank,
		Subject,
		KBType,
		PseudoId,
		ClassName,
		KBHelpfulCount,
		KBPortalOrder
      FROM (
		SELECT
			tt.[class_id], 
			tt.PseudoId, 
			tt.KBType, 
			tt.Subject, 
			tt.Id AS Id, 
			ROW_NUMBER() over (Partition BY ISNULL(tt.[class_id], 0) ORDER BY tt.rank DESC, tt.Id ASC  ) AS SearchRank,
			tt.ClassName AS ClassName,
			tt.KBHelpfulCount AS KBHelpfulCount,
			tt.KBPortalOrder AS KBPortalOrder
		FROM
		(
		SELECT
			ISNULL(tbl_ticket.[class_id], 0) AS [class_id],
			tbl_ticket.PseudoId, 
			tbl_ticket.KBType, 
			tbl_ticket.Subject, 
			x.id, 
			sum(x.rank_total) as rank,
			CASE WHEN ISNULL(tbl_class.KBPortalAlias, '') = '' THEN
			ISNULL(tbl_class.Name, 'Other')
			ELSE tbl_class.KBPortalAlias END AS ClassName,
			tbl_ticket.KBHelpfulCount AS KBHelpfulCount,
			ISNULL(tbl_class.KBPortalOrder, 255)AS KBPortalOrder
		FROM
		(
			SELECT t.id, 4 AS rank_total, t.company_id
				FROM tbl_ticket t 
				WHERE 
					t.company_id = @DId 
					AND
					t.KB = 1
					AND
					((t.KBPublishLevel = 1 AND @AccID = 0) OR (t.KBPublishLevel IN (1, 2) AND @AccID > 0))
					AND
					(t.intAcctId = @AccID OR @AccID = 0)
					AND
					(ISNULL(t.[class_id], 0) = @ClassID OR @ClassID IS NULL)
					AND 
					t.subject LIKE '%' + @text + '%'
			UNION
			SELECT t.id, 3 AS rank_total, t.company_id
				FROM tbl_ticket t 
				WHERE 
					t.company_id = @DId 
					AND
					t.KB = 1
					AND
					((t.KBPublishLevel = 1 AND @AccID = 0) OR (t.KBPublishLevel IN (1, 2) AND @AccID > 0))
					AND
					(t.intAcctId = @AccID OR @AccID = 0)
					AND
					(ISNULL(t.[class_id], 0) = @ClassID OR @ClassID IS NULL)
					AND 
					t.KBSearchDesc LIKE '%' + @text + '%'
			UNION
			SELECT t.id,2 AS rank_total, t.company_id
				FROM tbl_ticket t
				WHERE 
					t.company_id = @DId 
					AND
					t.KB = 1
					AND
					((t.KBPublishLevel = 1 AND @AccID = 0) OR (t.KBPublishLevel IN (1, 2) AND @AccID > 0))
					AND
					(t.intAcctId = @AccID OR @AccID = 0)
					AND
					(ISNULL(t.[class_id], 0) = @ClassID OR @ClassID IS NULL)
					AND 
					t.Workpad LIKE '%' + @text + '%'
			UNION
			SELECT tl.TId , 1 AS rank_total , tl.DId FROM TicketLogs tl 
				INNER JOIN
					tbl_ticket t ON tl.DId = t.company_id AND tl.TId = t.Id 
				WHERE 
					tl.DId = @DId
					AND
					t.KB = 1
					AND
					((t.KBPublishLevel = 1 AND @AccID = 0) OR (t.KBPublishLevel IN (1, 2) AND @AccID > 0))
					AND
					(t.intAcctId = @AccID OR @AccID = 0)
					AND
					(ISNULL(t.[class_id], 0) = @ClassID OR @ClassID IS NULL)
					AND 
					tl.vchNote LIKE '%' + @text + '%'
			) AS x  INNER JOIN tbl_ticket ON x.id = tbl_ticket.Id 
			LEFT OUTER JOIN
				tbl_class ON tbl_ticket.company_id = tbl_class.company_id AND tbl_ticket.class_id = tbl_class.id
			GROUP BY x.id, tbl_ticket.[class_id], tbl_ticket.subject, tbl_class.Name, tbl_ticket.PseudoId, 
				tbl_ticket.KBType, tbl_class.KBPortalAlias, tbl_ticket.KBHelpfulCount, tbl_class.KBPortalOrder
			) AS tt
			) rs WHERE (SearchRank <= @SearchRankLimit OR @SearchRankLimit = 0)
					
     END
    
    IF @PageHelp = 0
     BEGIN
      INSERT INTO @KB
		(TktId,
		ClassID,
		SearchRank,
		KBSubject,
		KBType,
		PseudoId,
		ClassName,
		KBHelpfulCount,
		KBPortalOrder)
	  SELECT 
		0,
		kb.ClassID,
		0,
		'',
		0,
		'',
		CASE WHEN ISNULL(tbl_class.KBPortalAlias, '') = '' THEN
			ISNULL(tbl_class.Name, 'Other')
			ELSE tbl_class.KBPortalAlias END AS ClassName,
		0,
		kb.KBPortalOrder
	  FROM
		@KB kb
	  LEFT OUTER JOIN
		tbl_class ON tbl_class.company_id = @DId AND kb.ClassID = tbl_class.id
	  GROUP BY
		ClassID, ISNULL(tbl_class.Name, 'Other'), tbl_class.KBPortalAlias, kb.KBPortalOrder
	END
	
	IF @ClassID IS NULL AND @PageHelp = 0
	 BEGIN
	  INSERT INTO @KB
		(TktId,
		ClassID,
		SearchRank,
		KBSubject,
		KBType,
		PseudoId,
		ClassName,
		KBHelpfulCount,
		KBPortalOrder)
	  SELECT 
		0,
		kb.ClassID,
		7,
		'',
		0,
		'',
		CASE WHEN ISNULL(tbl_class.KBPortalAlias, '') = '' THEN
			ISNULL(tbl_class.Name, 'Other')
			ELSE tbl_class.KBPortalAlias END AS ClassName,
		0,
		kb.KBPortalOrder
	  FROM
		@KB kb
	  LEFT OUTER JOIN
		tbl_class ON tbl_class.company_id = @DId AND kb.ClassID = tbl_class.id
	  GROUP BY
		ClassID, ISNULL(tbl_class.Name, 'Other'), tbl_class.KBPortalAlias, kb.KBPortalOrder
	 END
		
    IF @PageHelp = 1
     BEGIN
	  SELECT TOP 10
		kb.TktId,
		kb.KBSubject,
		kb.KBType,
		kb.PseudoId
	  FROM
		@KB kb
	  ORDER BY
		SearchRank
     END
    ELSE
     BEGIN
	  SELECT
		kb.TktId,
		kb.ClassID,
		kb.SearchRank,
		kb.KBSubject,
		kb.KBType,
		kb.PseudoId,
		(SELECT COUNT(*) FROM TicketLogs WHERE DId = @DId AND TId = kb.TktId AND vchType IN ('Response', 'Tkt Response') AND ISNULL(Hidden, 0) = 0) AS CountComments,
		kb.ClassName,
		kb.KBHelpfulCount
	  FROM
		@KB kb
	  ORDER BY
		KBPortalOrder, ClassName, SearchRank
	 END
GO
PRINT N'Creating [dbo].[sp_SelectKBRelatedArticles]...';


GO
CREATE PROCEDURE dbo.sp_SelectKBRelatedArticles
	(
		@DId int,
		@AccID int,
		@TktID int
	)
AS
	
	SELECT     
		tkt.Subject, 
		tkt.Id, 
        tkt.PseudoId
	FROM         
		RelatedTickets 
	INNER JOIN
		tbl_ticket tkt ON RelatedTickets.DId = tkt.company_id AND RelatedTickets.RelatedTicketId = tkt.Id
	WHERE   
		RelatedTickets.DId = @DId 
		AND
		RelatedTickets.TicketId = @TktID
		AND
		RelatedTickets.RelationType = 2
		AND
		tkt.[KB] = 1
        AND
        ((tkt.KBPublishLevel = 1 AND @AccID = 0) OR (tkt.KBPublishLevel IN (1, 2) AND @AccID > 0))
        AND
        (tkt.intAcctId = @AccID OR @AccID = 0)
GO
PRINT N'Creating [dbo].[sp_SelectKBResponses]...';


GO
CREATE PROCEDURE dbo.sp_SelectKBResponses
	(
		@DId int,
		@TktID int
	)
AS
	
	SELECT 
		tl.Id,
		tl.dtDate, 
		tl.vchNote,
		CASE WHEN tl.UId IS NULL THEN ISNULL(tl.UserName, '') ELSE
		RTRIM(ISNULL(l.FirstName, '') + ' ' + ISNULL(l.LastName, '')) END AS CreatedByUser,
		CASE WHEN tl.UId IS NULL THEN ISNULL(tl.UserEmail, '') ELSE l.Email END AS CreatedEmail,
		ISNULL(tbl_UserType.Name, '') AS UserType,
		ISNULL(tl.KBRateSum, 0) AS KBRateSum
	FROM 
		TicketLogs tl 
	LEFT OUTER JOIN 
		tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=tl.UId 
	LEFT OUTER JOIN 
		tbl_Logins l ON l.id=tlj.login_id
	LEFT OUTER JOIN
		tbl_UserType ON tlj.UserType_Id = tbl_UserType.id
	WHERE 
		tl.DId=@DId 
		AND 
		tl.TId=@TktID
		AND 
		ISNULL(tl.Hidden, 0) = 0
		AND
		tl.vchType IN ('Response', 'Tkt Response')
	ORDER BY 
		tl.Id DESC
GO
PRINT N'Creating [dbo].[sp_SelectKnowledgebaseResponse]...';


GO


CREATE Procedure [sp_SelectKnowledgebaseResponse]

		(
			@Id int,
			@DepartmentId int
		)

	As
		/* set nocount on */
		SELECT * FROM tbl_knowledgebaseResponses WHERE DepartmentId = @DepartmentId AND knowledgebase_Id = @id ORDER BY dtDate
GO
PRINT N'Creating [dbo].[sp_SelectLevelMax]...';


GO

CREATE PROCEDURE sp_SelectLevelMax
	(
		@DId int,
		@tintMaxLevel tinyint OUTPUT
	)
AS
	SET @tintMaxLevel = (SELECT Max(tintLevel) FROM TktLevels WHERE DId=@DId)
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectLevels]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectLevels]
	(
		@DId int,
		@tintLevel tinyint = null
	)
AS
--VGOOZ 13-JAN-2006: tkt #3107 - Level Last Resort blank when it is a queue.
--MRUDKOVSKI: 17-MAY-2006 - Ticket #3403 - Add Field - Level Name
	SELECT tl.*, 
	HighLevel=(SELECT MAX(tintLevel) FROM TktLevels WHERE DId=@DId),
	LowLevel=(SELECT MIN(tintLevel) FROM TktLevels WHERE DId=@DId),
	dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) AS LastResortName,
	tl.LevelName
	FROM TktLevels tl
	LEFT OUTER JOIN tbl_LoginCompanyJunc lj ON lj.company_id=@DId AND lj.id=tl.intLastResortId 
	LEFT OUTER JOIN tbl_Logins l ON l.id=lj.login_id 
	WHERE tl.DId=@DId AND (ISNULL(@tintLevel,0) = 0 OR @tintLevel = tl.tintLevel)
	ORDER BY tl.tintLevel
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectLevelsLite]...';


GO


CREATE PROCEDURE [dbo].[sp_SelectLevelsLite]
	(
		@DId int,
		@tintLevel tinyint = null	
	)
AS
	IF @tintLevel IS NULL OR @tintLevel=0
		SELECT LTRIM(RTRIM(STR(tintLevel)))+ISNULL(' - '+LevelName, '') AS LevelName, tintLevel, CAST(tintLevel AS int) AS Id, Description FROM TktLevels WHERE DId=@DId ORDER BY tintLevel
	ELSE
		SELECT LTRIM(RTRIM(STR(tintLevel)))+ISNULL(' - '+LevelName, '') AS LevelName, tintLevel, CAST(tintLevel AS int) AS Id, Description FROM TktLevels WHERE DId=@DId AND tintLevel=@tintLevel
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectLocationAliases]...';


GO
CREATE Procedure dbo.sp_SelectLocationAliases
	(
		@DId int,
		@LocationId int = null,
		@Id int = null
	)
As
	SELECT * FROM LocationAliases
	WHERE DId=@DId AND 
		(LocationId=@LocationId OR @LocationId is null) AND
		(Id=@Id OR @Id is null)
	ORDER BY LocationAliasName
GO
PRINT N'Creating [dbo].[sp_SelectLocationAssets]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectLocationAssets]
	(
		@DId int,
		@LocationId int		
	)
AS
	select a.DepartmentId, a.Id, a.CheckedOutId, 
		a.SerialNumber, a.Unique1, a.Unique2, a.Unique3, a.Unique4, a.Unique5, a.Unique6, a.Unique7,
		m.Make as MakeName, mm.Model as ModelName,
		isnull(l.FirstName,'') + ISNULL(' > '+l.LastName,'') as CheckedOutName,
		isnull(c.Name,'') + ISNULL(' > '+t.Name,'') as CategoryType,
		dbo.fxGetUserLocationName(@DId, a.LocationId) AS LocationName
	from Assets a
	left join AssetCategories c on c.DepartmentId=@DId and c.id=a.CategoryId
	left join AssetTypes t on t.DepartmentId=@DId and t.id=a.TypeId
	left join AssetMakes m on m.DepartmentId=@DId and m.id=a.MakeId
	left join AssetModels mm on mm.DepartmentId=@DId and mm.id=a.ModelId
	left join tbl_LoginCompanyJunc j on j.company_id=@DId and j.id=a.CheckedOutId
	left join tbl_Logins l on l.id = j.login_id
	where a.DepartmentId=@DId and 
		a.LocationId in (SELECT Id FROM dbo.fxGetAllChildLocations(@DId, @LocationId))
GO
PRINT N'Creating [dbo].[sp_SelectLocationAssignedLvlTechs]...';


GO

CREATE PROCEDURE sp_SelectLocationAssignedLvlTechs
	(
		@DId int,
		@intLocationId int,
		@intLctLvlId int
	)
AS
	SELECT lltj.Id, lg.lastname, lg.firstname
	FROM LocationLevelsTechJctn lltj
	LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=lltj.intUId JOIN tbl_Logins lg ON lg.id=tlj.login_id
	WHERE lltj.DId=@DId AND lltj.LocationId=@intLocationId AND lltj.intLctLvlId=@intLctLvlId
	ORDER BY lg.lastname, lg.firstname
	
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectLocationAssignedTechs]...';


GO

CREATE PROCEDURE sp_SelectLocationAssignedTechs
	(
		@DId int,
		@LocationId int
	)
AS
	SELECT ltj.id, lo.LastName+', '+lo.FirstName AS vchFullName
	FROM LocationTechJctn ltj
	LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=ltj.intUId JOIN tbl_Logins lo ON lo.id=tlj.login_Id
	WHERE ltj.DId=@DId AND ltj.LocationId=@LocationId
	ORDER BY lo.Lastname, lo.Firstname
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectLocationAudit]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationAudit]
	(
		@DId int,
		@AuditId int
	)
As
	
		SELECT  lah.LocationId, lah.AuditDate, lah.Completed, lah.AuditorId, lo.FirstName+' '+lo.LastName AS AuditorName,
				dbo.fxGetLocationName(@DId, L.Id) AS LocationName
		FROM
			LocationAuditHistory lah
				LEFT OUTER JOIN Locations L ON L.DId = lah.DId AND L.Id = lah.LocationId				
				LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON L.DId = tlj.company_id AND lah.AuditorId = tlj.id
						LEFT OUTER JOIN tbl_Logins lo ON lo.id = tlj.login_Id
		WHERE
			lah.DId = @DId			
			AND
			lah.Id = @AuditId
		ORDER BY L.Name
GO
PRINT N'Creating [dbo].[sp_SelectLocationAuditAssetsBulk]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationAuditAssetsBulk]
	(
		@DepartmentId int,		
		@LocationId int
	)

AS

	SELECT
			a.Id, a.Name, a.[Description], a.CategoryId, a.TypeId, ac.Name AS CategoryName, at.Name AS TypeName,
			al1.Quantity AS LocQuantity1, al1.ExcessQuantity AS LocExcess1, al1.AuditDate AS AuditDate1,
			al2.Quantity AS LocQuantity2, al2.ExcessQuantity AS LocExcess2, al2.AuditDate AS AuditDate2,
			al3.Quantity AS LocQuantity3, al3.ExcessQuantity AS LocExcess3, al3.AuditDate AS AuditDate3
	FROM
		AssetBulk a
			LEFT OUTER JOIN AssetCategories ac ON a.DepartmentId = ac.DepartmentId AND a.CategoryId = ac.id
			LEFT OUTER JOIN AssetTypes at ON a.DepartmentId = at.DepartmentId AND a.TypeId = at.id
			LEFT OUTER JOIN AssetBulkLocation al1 ON al1.DId = a.DepartmentId AND al1.AssetBulkId = a.Id
				AND al1.LocationId = @LocationId
				AND al1.AuditDate = (SELECT TOP 1 AuditDate FROM AssetBulkLocation abl WHERE abl.DId = al1.DId AND abl.AssetBulkId = al1.AssetBulkId AND abl.LocationId = al1.LocationId  ORDER BY abl.AuditDate DESC)
			LEFT OUTER JOIN AssetBulkLocation al2 ON al2.DId = a.DepartmentId AND al2.AssetBulkId = a.Id
				AND al2.LocationId = @LocationId
				AND al2.AuditDate = (SELECT TOP 1 AuditDate FROM AssetBulkLocation abl WHERE abl.DId = al2.DId AND abl.AssetBulkId = al2.AssetBulkId AND abl.LocationId = al2.LocationId AND abl.AuditDate < al1.AuditDate ORDER BY abl.AuditDate DESC)				
			LEFT OUTER JOIN AssetBulkLocation al3 ON al3.DId = a.DepartmentId AND al3.AssetBulkId = a.Id
				AND al3.LocationId = @LocationId
				AND al3.AuditDate = (SELECT TOP 1 AuditDate FROM AssetBulkLocation abl WHERE abl.DId = al3.DId AND abl.AssetBulkId = al3.AssetBulkId AND abl.LocationId = al3.LocationId AND abl.AuditDate < al2.AuditDate ORDER BY abl.AuditDate DESC)
		
	WHERE
		a.DepartmentId = @DepartmentId 
		AND
		a.Active = 1
	
	ORDER BY LocQuantity1 DESC, a.Name, a.Id, ac.Name, a.CategoryId, at.Name, a.TypeId
GO
PRINT N'Creating [dbo].[sp_SelectLocationAuditAssetsBulkSet]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationAuditAssetsBulkSet]
	(
		@DId int,		
		@AuditId int
	)

AS

	SELECT
			a.Id, a.Name, a.CategoryId, a.TypeId, ISNULL(al.Quantity, 0) AS Quantity, ISNULL(al.ExcessQuantity, 0) AS ExcessQuantity
	FROM
		AssetBulkLocation al 
			INNER JOIN AssetBulk a ON al.DId = a.DepartmentId AND al.AssetBulkId = a.Id
	WHERE
		al.DId = @DId
		AND
		al.AuditId = @AuditId
		AND
		a.Active = 1
		AND
		(NOT ((al.Quantity IS NULL OR al.Quantity = 0) AND (al.ExcessQuantity IS NULL OR al.ExcessQuantity = 0)))
	
	ORDER BY a.Name, a.Id
GO
PRINT N'Creating [dbo].[sp_SelectLocationAuditAssetsPortable]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationAuditAssetsPortable]
	(
		@DepartmentId int,		
		@UserId int
	)

AS
	
	SELECT Assets.Id, Assets.Name, Assets.Description, Assets.Lost, Assets.AuditNote AS Note,
		Assets.CategoryId as AssetCategoryId, AssetCategories.Name as AssetCategoryName, 
		Assets.TypeId as AssetTypeId, AssetTypes.Name as AssetTypeName,
		Assets.MakeId as AssetMakeId, AssetMakes.Make as AssetMakeName,
		Assets.ModelId as AssetModelId, AssetModels.Model as AssetModelName,
		Assets.SerialNumber, Assets.Unique1, Assets.Unique2, Assets.Unique3, Assets.Unique4, Assets.Unique5, Assets.Unique6, Assets.Unique7,
		dbo.fxGetLocationName(@DepartmentId, l.Id)  AS LocationName
    FROM Assets
		INNER JOIN AssetCategories ON AssetCategories.DepartmentId=@DepartmentId and Assets.CategoryId = AssetCategories.Id
		INNER JOIN AssetTypes ON AssetTypes.DepartmentId=@DepartmentId and Assets.TypeId = AssetTypes.Id
		INNER JOIN AssetMakes ON AssetMakes.DepartmentId=@DepartmentId and Assets.MakeId = AssetMakes.Id
		INNER JOIN AssetModels ON AssetModels.DepartmentId=@DepartmentId and Assets.ModelId = AssetModels.Id
		LEFT OUTER JOIN AssetStatusCompany ON AssetStatusCompany.DId=@DepartmentId and AssetStatusCompany.AssetStatusID=Assets.StatusId
		LEFT OUTER JOIN Locations l ON Assets.DepartmentId = l.DId AND Assets.LocationId = l.Id
    WHERE Assets.DepartmentId=@DepartmentId AND Assets.StatusId<>17
    AND Assets.AccountId IS NULL
    AND Assets.CheckedOutId = @UserId
    AND AssetTypes.cfgPortable = 1    
    AND (AssetStatusCompany.NonActive=0 OR (AssetStatusCompany.NonActive IS NULL)) 
    ORDER BY LocationName, AssetCategoryName, AssetTypeName, AssetMakeName, AssetModelName
GO
PRINT N'Creating [dbo].[sp_SelectLocationAuditAssetsTagged]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationAuditAssetsTagged]
	(
		@DepartmentId int,		
		@LocationId int,
		@WithPortable bit,
		@UserId int
	)

AS
	
	DECLARE @SubLocCount int, @GenLocationName nvarchar(50)	
	SELECT @SubLocCount=COUNT(*) FROM dbo.fxGetAllChildLocationsForAudit(@DepartmentId, @LocationId)
	SELECT @GenLocationName = Name FROM Locations WHERE DId = @DepartmentId AND Id = @LocationId
	
	
	SELECT Assets.Id, Assets.Name, Assets.Description, Assets.Lost, Assets.AuditNote AS Note,
		Assets.CategoryId as AssetCategoryId, AssetCategories.Name as AssetCategoryName, 
		Assets.TypeId as AssetTypeId, AssetTypes.Name as AssetTypeName,
		Assets.MakeId as AssetMakeId, AssetMakes.Make as AssetMakeName,
		Assets.ModelId as AssetModelId, AssetModels.Model as AssetModelName,
		Assets.SerialNumber, Assets.Unique1, Assets.Unique2, Assets.Unique3, Assets.Unique4, Assets.Unique5, Assets.Unique6, Assets.Unique7,
		CASE WHEN @SubLocCount  = 0
		THEN ''
		ELSE
			CASE
			WHEN Assets.LocationId = @LocationId
			THEN l.Name
			ELSE @GenLocationName + ' > ' + dbo.fxGetLocationShortName(@DepartmentId, @LocationId, l.Id)
			END 
		END AS LocationName
    FROM Assets
		INNER JOIN AssetCategories ON AssetCategories.DepartmentId=@DepartmentId and Assets.CategoryId = AssetCategories.Id
		INNER JOIN AssetTypes ON AssetTypes.DepartmentId=@DepartmentId and Assets.TypeId = AssetTypes.Id
		INNER JOIN AssetMakes ON AssetMakes.DepartmentId=@DepartmentId and Assets.MakeId = AssetMakes.Id
		INNER JOIN AssetModels ON AssetModels.DepartmentId=@DepartmentId and Assets.ModelId = AssetModels.Id
		LEFT OUTER JOIN AssetStatusCompany ON AssetStatusCompany.DId=@DepartmentId and AssetStatusCompany.AssetStatusID=Assets.StatusId
		LEFT OUTER JOIN Locations l ON Assets.DepartmentId = l.DId AND Assets.LocationId = l.Id
    WHERE Assets.DepartmentId=@DepartmentId AND Assets.StatusId<>17
    AND Assets.AccountId IS NULL
    AND (Assets.LocationID = @LocationId OR Assets.LocationID IN (SELECT Id FROM dbo.fxGetAllChildLocationsForAudit(@DepartmentId, @LocationId)))
    AND (AssetStatusCompany.NonActive=0 OR (AssetStatusCompany.NonActive IS NULL)) 
    AND (@WithPortable = 1 OR (NOT (Assets.CheckedOutId = @UserId AND AssetTypes.cfgPortable = 1)))
    ORDER BY LocationName, AssetCategoryName, AssetTypeName, AssetMakeName, AssetModelName
GO
PRINT N'Creating [dbo].[sp_SelectLocationAuditAssetsTaggedSet]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationAuditAssetsTaggedSet]
	(
		@DId int,		
		@AuditId int
	)

AS
			SELECT
	            Assets.Id, Assets.Name, Assets.Description,
		        Assets.CategoryId as AssetCategoryId, AssetCategories.Name as AssetCategoryName,
			    Assets.TypeId as AssetTypeId, AssetTypes.Name as AssetTypeName,
				Assets.MakeId as AssetMakeId, AssetMakes.Make as AssetMakeName,
				Assets.ModelId as AssetModelId, AssetModels.Model as AssetModelName,
				Assets.SerialNumber, Assets.Unique1, Assets.Unique2, Assets.Unique3, Assets.Unique4, Assets.Unique5, Assets.Unique6, Assets.Unique7,
				CASE lat.[Status]
				WHEN 0 THEN 'No'
				WHEN 1 THEN 'Yes'
				ELSE 'Other'
				END AS [Status], lat.Note, lat.AddedAsset, lat.Transferred,
				CASE
				WHEN lat.SourceLocationId IS NULL
				THEN ''
				ELSE dbo.fxGetLocationName(@DId, lat.SourceLocationId)
				END AS SourceLocationName
            FROM
				LocationAuditTaggedAssets lat 
				INNER JOIN Assets ON lat.DId = Assets.DepartmentId AND lat.AssetId = Assets.Id
	            INNER JOIN AssetCategories ON AssetCategories.DepartmentId=@DId and Assets.CategoryId = AssetCategories.Id
		        INNER JOIN AssetTypes ON AssetTypes.DepartmentId=@DId and Assets.TypeId = AssetTypes.Id
			    INNER JOIN AssetMakes ON AssetMakes.DepartmentId=@DId and Assets.MakeId = AssetMakes.Id
				INNER JOIN AssetModels ON AssetModels.DepartmentId=@DId and Assets.ModelId = AssetModels.Id				
            WHERE Assets.DepartmentId=@DId AND Assets.StatusId<>17				
				AND lat.AuditId = @AuditId
            ORDER BY
				 AssetCategoryName, AssetTypeName, AssetMakeName, AssetModelName
GO
PRINT N'Creating [dbo].[sp_SelectLocationAuditor]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationAuditor]
	(
		@DId int,
		@LocationId int,
		@UserId int
	)
As

DECLARE @retChildLocations TABLE (Id int) 
INSERT INTO @retChildLocations 
SELECT Id FROM dbo.fxGetAllChildLocationsForAudit(@DId, @LocationId)	

DECLARE @Id int, @SubLocations nvarchar(max)
SET @SubLocations = ''
	
	DECLARE l_cursor CURSOR FOR SELECT Id FROM @retChildLocations
	OPEN l_cursor
	FETCH NEXT FROM l_cursor INTO @Id
	WHILE @@FETCH_STATUS = 0
	BEGIN		
		IF (@SubLocations <> '')
			SET @SubLocations = @SubLocations + ', '
		SET @SubLocations = @SubLocations + dbo.fxGetLocationShortName(@DId, @LocationId, @Id)
		FETCH NEXT FROM l_cursor INTO @Id
	END
	CLOSE l_cursor
	DEALLOCATE l_cursor
	
	
	DECLARE @PortableAssetsCount int, @IsPortableDevices bit
	SET @PortableAssetsCount = 0
	SET @IsPortableDevices = 0
	
	SELECT @PortableAssetsCount = COUNT(*)
    FROM Assets		
		INNER JOIN AssetTypes ON AssetTypes.DepartmentId=Assets.DepartmentId and Assets.TypeId = AssetTypes.Id		
		LEFT OUTER JOIN AssetStatusCompany ON AssetStatusCompany.DId=Assets.DepartmentId and AssetStatusCompany.AssetStatusID=Assets.StatusId		
    WHERE
    Assets.DepartmentId=@DId AND Assets.StatusId<>17
    AND Assets.AccountId IS NULL    
    AND (AssetStatusCompany.NonActive=0 OR (AssetStatusCompany.NonActive IS NULL)) 
    AND Assets.CheckedOutId = @UserId
    AND AssetTypes.cfgPortable = 1
    
    
    
	IF (((SELECT COUNT(*) FROM Locations WHERE DId = @DId AND AuditorId = @UserId AND CfgEnableAudit = 1) = 1)
			AND @PortableAssetsCount > 0)
			SET @IsPortableDevices = 1
	
	
			SELECT L.Id, L.Name, [dbo].[fxGetLocationName](@DId, @LocationId) AS LocationFullName, @SubLocations AS SubLocationsNames,
				AuditorId, lo.LastName+', '+lo.FirstName AS AuditorName,
				AuditPeriodDays,
				(SELECT TOP 1 al.AuditDate FROM AssetBulkLocation al WHERE al.DId = @DId AND al.LocationId = @LocationId ORDER BY AuditDate DESC) AS AuditDate,
				@IsPortableDevices AS ExtendedAudit
			FROM Locations L
					LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON L.DId = tlj.company_id AND L.AuditorId = tlj.id
						LEFT OUTER JOIN tbl_Logins lo ON lo.id = tlj.login_Id
				
			WHERE L.DId=@DId AND L.Id = @LocationId
GO
PRINT N'Creating [dbo].[sp_SelectLocationAuditors]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationAuditors]
(
	@DId int
)
As
	
	SELECT tlj.id, tlj.usertype_id as UserTypeId, tlj.CheckinStatus,
		lo.FirstName, lo.LastName, lo.LastName+', '+lo.FirstName + ' (' + lo.Email + ')' as FullName	
	FROM tbl_LoginCompanyJunc tlj
	JOIN tbl_Logins lo ON lo.id=tlj.login_id
	WHERE tlj.company_id=@DId AND tlj.btUserInactive=0
		AND (tlj.UserType_Id=2 OR tlj.UserType_Id=3 OR tlj.UserType_Id=4)
	ORDER BY lo.LastName, lo.FirstName
GO
PRINT N'Creating [dbo].[sp_SelectLocationBulkAssets]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectLocationBulkAssets]
(
	@DId int,
	@LocationId int
)
AS
    SELECT a.Id, a.CategoryId, a.TypeId, a.Name, a.[Description],  
	ac.Name AS CategoryName, at.Name AS TypeName, 
	SUM(al.Quantity) AS QuantityCount, 
	SUM(al.ExcessQuantity) AS ExcessCount 
	FROM AssetBulk a 
	LEFT OUTER JOIN AssetCategories ac ON a.DepartmentId = ac.DepartmentId AND a.CategoryId = ac.id 
	LEFT OUTER JOIN AssetTypes at ON a.DepartmentId = at.DepartmentId AND a.TypeId = at.id 
	LEFT OUTER JOIN AssetBulkLocation al ON a.DepartmentId = al.DId AND a.Id = al.AssetBulkId  
		AND al.Id IN ( 
			SELECT Id 
			FROM AssetBulkLocation abl 
			INNER JOIN ( SELECT DISTINCT ll.LocationId FROM AssetBulkLocation ll WHERE ll.DId = al.DId AND ll.AssetBulkId = al.AssetBulkId) o 
				ON abl.DId = al.DId AND abl.AssetBulkId = al.AssetBulkId AND abl.LocationId = o.LocationId AND 
					abl.AuditDate = (
						SELECT TOP 1 AuditDate FROM AssetBulkLocation tt WHERE tt.DId = abl.DId AND tt.AssetBulkId = abl.AssetBulkId AND tt.LocationId = o.LocationId ORDER BY tt.AuditDate DESC))
	WHERE a.DepartmentId=@DId AND a.Active = 1 and al.LocationId=@LocationId
	GROUP BY a.Id, a.Name, a.[Description], a.CategoryId, a.TypeId, ac.Name, at.Name 
	ORDER BY ac.Name, a.CategoryId, at.Name, a.TypeId, a.Name, a.Id
GO
PRINT N'Creating [dbo].[sp_SelectLocationDetail]...';


GO
CREATE Procedure dbo.sp_SelectLocationDetail

	(
		@DId int,
		@LocationId int
	)

As
	SELECT l.*, t.Name as TypeName, 
	lo.LastName+', '+lo.FirstName + ' (' + lo.Email + ')' as AuditorFullName
	FROM locations l
	left join LocationTypes t on t.DId=@DId and t.Id=l.LocationTypeId
	LEFT JOIN tbl_LoginCompanyJunc lj ON lj.id=L.AuditorId
	LEFT JOIN tbl_Logins lo ON lo.id=lj.login_id
	WHERE l.DId=@DId AND l.id = @LocationId
GO
PRINT N'Creating [dbo].[sp_SelectLocationLevels]...';


GO

CREATE PROCEDURE sp_SelectLocationLevels
	(
		@DId int,
		@LocationId int
	)
AS
	SELECT * FROM LocationLevels WHERE DId=@DId AND LocationId=@LocationId
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectLocationNameExists]...';


GO
CREATE Procedure dbo.sp_SelectLocationNameExists
	(
		@DId int,
		@AccountId int,
		@ParentId int,
		@TypeId int=null,
		@Name nvarchar(50),
		@Id int = null
	)
As
	IF @AccountId < 0
		SET @AccountId = 0

	IF @Id IS NULL OR @Id=0
	BEGIN	
		IF NOT EXISTS(SELECT 'true' FROM Locations WHERE DId=@DId AND Status<>0 AND ISNULL(AccountId,0)=ISNULL(@AccountId,0) AND ISNULL(ParentId,0)=ISNULL(@ParentId,0) AND (LocationTypeId=@TypeId OR ((LocationTypeId is null) and @TypeId is null)) AND Name=@Name)
			RETURN 0
		ELSE
			RETURN 1
	END
	ELSE
	BEGIN	
		IF NOT EXISTS(SELECT 'true' FROM Locations WHERE DId=@DId AND Status<>0 AND ISNULL(AccountId,0)=ISNULL(@AccountId,0) AND ISNULL(ParentId,0)=ISNULL(@ParentId,0) AND (LocationTypeId=@TypeId OR ((LocationTypeId is null) and @TypeId is null)) AND Name=@Name AND Id<>@Id)
			RETURN 0
		ELSE
			RETURN 1
	END
GO
PRINT N'Creating [dbo].[sp_SelectLocationRouteLevels]...';


GO
CREATE Procedure dbo.sp_SelectLocationRouteLevels
	(
		@DId int,
		@LocationId int
	)
As
	DECLARE @cfgTktLevels bit
	SELECT @cfgTktLevels = dbo.fxGetConfigValueBit(@DId, 'configLVL')
	
	IF @cfgTktLevels=1
		SELECT TL.*, LRL.* FROM TktLevels TL 
		LEFT OUTER JOIN LocationRouteLevels LRL ON TL.tintLevel = LRL.TicketLevel AND LRL.LocationId=@LocationId
		WHERE TL.DId=@DId
	ELSE 
		SELECT 1 AS tintLevel, '' AS LevelName, LRL.* FROM LocationRouteLevels LRL 
		WHERE LRL.DId=@DId AND LRL.LocationId=@LocationId AND LRL.TicketLevel=1
GO
PRINT N'Creating [dbo].[sp_SelectLocationRouteLevelTechs]...';


GO
CREATE Procedure dbo.sp_SelectLocationRouteLevelTechs
	(
		@DId int,
		@LocationRouteLevelId int
	)
As
	SELECT LRLT.*,  LCJ.login_id, L.LastName+', '+L.FirstName AS FullName FROM LocationRouteLevelTechs LRLT 
	INNER JOIN tbl_LoginCompanyJunc LCJ ON LRLT.TechId = LCJ.Id 
	INNER JOIN tbl_Logins L ON LCJ.login_id=L.id  
	WHERE LRLT.DId=@DId AND LRLT.LocationRouteLevelId=@LocationRouteLevelId
GO
PRINT N'Creating [dbo].[sp_SelectLocations]...';


GO
CREATE Procedure dbo.sp_SelectLocations
	(
		@DId int,
		@btInactive bit = NULL
	)
As
	IF @btInactive IS NULL
		SELECT id, Name FROM tbl_locations WHERE DId=@DId ORDER BY Name
	ELSE
		SELECT id, Name FROM tbl_locations WHERE DId=@DId AND btInactive=@btInactive ORDER BY Name	
	return
GO
PRINT N'Creating [dbo].[sp_SelectLocationsByAccountID]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectLocationsByAccountID]
	(
		@DId int,
		@AccId int = null
	)
AS

	IF @AccId < 0
		SET @AccId = 0
		
	SELECT
      Locations.*
	FROM 
		Locations
	WHERE 
		DId=@DId 
		AND 
		ISNULL(AccountId,0)=@AccId
		ORDER BY Name
GO
PRINT N'Creating [dbo].[sp_SelectLocationsFilteredTree]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationsFilteredTree]
	(
		@DId int,
		@AccId int,
		@NameFilter nvarchar(255)=null,
		@ShowInactive bit = 0
	)
As
	SELECT A.vchName AS AccountName, L.*, LT.Name AS TypeName, LT.HierarchyLevel,
			at.OpenTickets AS TicketCount,
			CASE WHEN L.Name like @NameFilter THEN CAST(1 as bit) ELSE CAST(0 as bit) END as MatchFiter,
			lo.LastName+', '+lo.FirstName + ' (' + lo.Email + ')' as AuditorFullName
	FROM Locations L
	LEFT OUTER JOIN Accounts A ON A.DId=@DId AND A.Id=L.AccountId
	left JOIN LocationTypes LT ON L.LocationTypeId = LT.Id 					
	LEFT OUTER JOIN (SELECT t.AccountLocationId AS LocationId, t.intAcctId AS tAccountId, COUNT(*) AS OpenTickets FROM tbl_ticket t WHERE t.company_id=@DId AND t.[Status]<>'Closed' GROUP BY t.AccountLocationId, t.intAcctId) at ON at.LocationId=L.Id AND ISNULL(at.tAccountId, -1) = ISNULL(L.AccountId, -1)
	LEFT JOIN tbl_LoginCompanyJunc lj ON lj.id=L.AuditorId
	LEFT JOIN tbl_Logins lo ON lo.id=lj.login_id
	WHERE L.DId=@DId AND (L.[Status] = 1 OR (@ShowInactive = 1 AND L.[Status] IS NULL))  AND ISNULL(L.AccountId,0)=@AccId 
	      AND (L.ParentId IS NULL OR L.ParentId IN (
			SELECT L.Id
			FROM Locations L
			LEFT OUTER JOIN Accounts A ON A.DId=@DId AND A.Id=L.AccountId
			left JOIN LocationTypes LT ON L.LocationTypeId = LT.Id 					
			LEFT OUTER JOIN (SELECT t.AccountLocationId AS LocationId, t.intAcctId AS tAccountId, COUNT(*) AS OpenTickets FROM tbl_ticket t WHERE t.company_id=@DId AND t.[Status]<>'Closed' GROUP BY t.AccountLocationId, t.intAcctId) at ON at.LocationId=L.Id AND ISNULL(at.tAccountId, -1) = ISNULL(L.AccountId, -1)
			LEFT JOIN tbl_LoginCompanyJunc lj ON lj.id=L.AuditorId
			LEFT JOIN tbl_Logins lo ON lo.id=lj.login_id
			WHERE L.DId=@DId AND (L.[Status] = 1 OR (@ShowInactive = 1 AND L.[Status] IS NULL))  AND ISNULL(L.AccountId,0)=@AccId)) 	      
	ORDER BY L.Name
GO
PRINT N'Creating [dbo].[sp_SelectLocationsSearch]...';


GO
CREATE Procedure dbo.sp_SelectLocationsSearch
	(
		@DId int,
		@ParentId int,
		@AccId int,
		@Search nvarchar(50),
		@Inactive bit = null		
	)
As

	IF @ParentId IS NULL
		SELECT dbo.fxGetUserLocationName(@DId, L.Id) AS Name, L.*, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode, at.OpenTickets AS TicketCount
		FROM Locations L 
		left JOIN LocationTypes LT ON L.LocationTypeId = LT.Id 
		LEFT OUTER JOIN (SELECT t.AccountLocationId AS LocationId, t.intAcctId AS tAccountId, COUNT(*) AS OpenTickets FROM tbl_ticket t WHERE t.company_id=@DId AND t.[Status]<>'Closed' GROUP BY t.AccountLocationId, t.intAcctId) at ON at.LocationId=L.Id AND ISNULL(at.tAccountId, -1) = ISNULL(L.AccountId, -1)
		WHERE L.DId=@DId AND ISNULL(L.AccountId,0)=@AccId AND (L.Inactive=@Inactive OR @Inactive IS NULL) AND L.Name LIKE @Search ORDER BY L.Name
	ELSE 
		SELECT L.*, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode, at.OpenTickets AS TicketCount
		FROM Locations L 
		left JOIN LocationTypes LT ON L.LocationTypeId = LT.Id 
		LEFT OUTER JOIN (SELECT t.AccountLocationId AS LocationId, t.intAcctId AS tAccountId, COUNT(*) AS OpenTickets FROM tbl_ticket t WHERE t.company_id=@DId AND t.[Status]<>'Closed' GROUP BY t.AccountLocationId, t.intAcctId) at ON at.LocationId=L.Id AND ISNULL(at.tAccountId, -1) = ISNULL(L.AccountId, -1)
		WHERE L.DId=@DId AND ISNULL(L.AccountId,0)=@AccId AND (L.Inactive=@Inactive OR @Inactive IS NULL) AND ISNULL(L.ParentId,0)=@ParentId  AND L.Name LIKE @Search ORDER BY L.Name
GO
PRINT N'Creating [dbo].[sp_SelectLocationsSearchForUser]...';


GO
CREATE Procedure dbo.sp_SelectLocationsSearchForUser
	(
		@DId int,
		@UId int,
		@ParentId int,
		@Search nvarchar(50)
	)
As
	IF @ParentId IS NULL
		SELECT L.Id, L.ParentId, L.Description, dbo.fxGetUserLocationName(@DId, L.Id) AS Name, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode FROM Locations L LEFT JOIN LocationTypes LT ON L.LocationTypeId = LT.Id WHERE L.DId=@DId AND L.AccountId IS NULL AND L.Inactive=0 AND L.Name LIKE '%'+@Search+'%' ORDER BY L.Name
	ELSE
		SELECT L.*, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode FROM Locations L LEFT JOIN LocationTypes LT ON L.LocationTypeId = LT.Id WHERE L.DId=@DId AND L.AccountId IS NULL AND L.Inactive=0 AND ISNULL(L.ParentId,0)=@ParentId  AND L.Name LIKE '%'+@Search+'%' ORDER BY L.Name
GO
PRINT N'Creating [dbo].[sp_SelectLocationsTree]...';


GO
CREATE Procedure dbo.sp_SelectLocationsTree
	(
		@DId int,
		@Id int = null,
		@AccId int = null,
		@ParentId int = null, 
		@Inactive bit = null
	)
As
	IF @AccId < 0
		SET @AccId = 0
	IF @Id IS NULL
	BEGIN
		IF @AccId=-1
			SELECT A.vchName AS AccountName,
					L.Id, L.DId, L.ParentId, L.AccountId, L.LocationTypeId, L.Name, L.Inactive, L.Description, L.IsDefault, L.AuditorId, L.AuditPeriodDays,L.CfgEnableAudit,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Country'     where v.LocationId=L.Id AND LT.Name='Building') as Country,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='State'       where v.LocationId=L.Id AND LT.Name='Building') as State,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='City'        where v.LocationId=L.Id AND LT.Name='Building') as City,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Address1'    where v.LocationId=L.Id AND LT.Name='Building') as Address1,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Address2'    where v.LocationId=L.Id AND LT.Name='Building') as Address2,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Zip Code'    where v.LocationId=L.Id AND LT.Name='Building') as ZipCode,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Phone1'      where v.LocationId=L.Id AND LT.Name='Building') as Phone1,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Phone2'      where v.LocationId=L.Id AND LT.Name='Building') as Phone2,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Work Places' where v.LocationId=L.Id AND LT.Name='Room'    ) as WorkPlaces,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Room Number' where v.LocationId=L.Id AND LT.Name='Room'    ) as RoomNumber,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Size(sq.f)'  where v.LocationId=L.Id AND LT.Name='Room'    ) as RoomSize,
					LT.Name AS TypeName, LT.HierarchyLevel,
					CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND ISNULL(@Inactive,Inactive) = Inactive)
					WHEN 0 THEN Cast(1 As bit)
					ELSE Cast(0 As bit)
					END AS IsLastChildNode
			FROM Locations L
					INNER JOIN Accounts A ON A.DId=@DId AND L.AccountId = A.Id
					left JOIN LocationTypes LT ON L.LocationTypeId = LT.Id
			WHERE L.DId=@DId AND NOT L.AccountId IS NULL ORDER BY A.vchName, L.Name
			
		ELSE
			SELECT A.vchName AS AccountName,
					L.Id, L.DId, L.ParentId, L.AccountId, L.LocationTypeId, L.Name, L.Inactive, L.Description, L.IsDefault, L.AuditorId, L.AuditPeriodDays,L.CfgEnableAudit,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Country' where v.LocationId=L.Id AND LT.Name='Building') as Country,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='State' where v.LocationId=L.Id AND LT.Name='Building') as State,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='City' where v.LocationId=L.Id AND LT.Name='Building') as City,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Address1' where v.LocationId=L.Id AND LT.Name='Building') as Address1,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Address2' where v.LocationId=L.Id AND LT.Name='Building') as Address2,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Zip Code' where v.LocationId=L.Id AND LT.Name='Building') as ZipCode,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Phone1' where v.LocationId=L.Id AND LT.Name='Building') as Phone1,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Phone2' where v.LocationId=L.Id AND LT.Name='Building') as Phone2,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Work Places' where v.LocationId=L.Id AND LT.Name='Room') as WorkPlaces,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Room Number' where v.LocationId=L.Id AND LT.Name='Room') as RoomNumber,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Size(sq.f)' where v.LocationId=L.Id AND LT.Name='Room') as RoomSize,
					LT.Name AS TypeName, LT.HierarchyLevel,
					CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND ISNULL(@Inactive,Inactive) = Inactive)
					WHEN 0 THEN Cast(1 As bit)
					ELSE Cast(0 As bit)
					END AS IsLastChildNode,
					0 AS TicketCount
			FROM Locations L
					LEFT OUTER JOIN Accounts A ON A.DId=@DId AND A.Id=L.AccountId
					left JOIN LocationTypes LT ON L.LocationTypeId = LT.Id 					
--					LEFT OUTER JOIN (SELECT t.AccountLocationId AS LocationId, t.intAcctId AS tAccountId, COUNT(*) AS OpenTickets FROM tbl_ticket t WHERE t.company_id=@DId AND t.[Status]<>'Closed' GROUP BY t.AccountLocationId, t.intAcctId) at ON at.LocationId=L.Id AND ISNULL(at.tAccountId, -1) = ISNULL(L.AccountId, -1)
			WHERE L.DId=@DId AND ISNULL(L.AccountId,0)=@AccId
				AND (L.Inactive=@Inactive OR @Inactive IS NULL)
				AND (ISNULL(L.ParentId,0)=@ParentId OR @ParentId IS NULL)			
			ORDER BY L.Name	
		
		/*IF @Inactive IS NULL AND @ParentId IS NULL
			SELECT A.vchName AS AccountName, L.*, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND ISNULL(@Inactive,Inactive) = Inactive)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode FROM Locations L LEFT OUTER JOIN Accounts A ON A.DId=@DId AND A.Id=L.AccountId INNER JOIN LocationTypes LT ON L.LocationTypeId = LT.Id WHERE L.DId=@DId AND ISNULL(AccountId,0)=@AccId ORDER BY L.Name
		ELSE IF NOT @Inactive IS NULL AND @ParentId IS NULL
			SELECT A.vchName AS AccountName, L.*, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND ISNULL(@Inactive,Inactive) = Inactive)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode FROM Locations L LEFT OUTER JOIN Accounts A ON A.DId=@DId AND A.Id=L.AccountId INNER JOIN LocationTypes LT ON L.LocationTypeId = LT.Id WHERE L.DId=@DId AND L.Inactive=@Inactive AND ISNULL(AccountId,0)=@AccId ORDER BY L.Name
		ELSE IF @Inactive IS NULL AND NOT @ParentId IS NULL
			SELECT A.vchName AS AccountName, L.*, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND ISNULL(@Inactive,Inactive) = Inactive)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode FROM Locations L LEFT OUTER JOIN Accounts A ON A.DId=@DId AND A.Id=L.AccountId INNER JOIN LocationTypes LT ON L.LocationTypeId = LT.Id WHERE L.DId=@DId AND ISNULL(AccountId,0)=@AccId AND ISNULL(L.ParentId,0)=@ParentId ORDER BY L.Name
		ELSE IF NOT @Inactive IS NULL AND NOT @ParentId IS NULL
			SELECT A.vchName AS AccountName, L.*, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND ISNULL(@Inactive,Inactive) = Inactive)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode FROM Locations L LEFT OUTER JOIN Accounts A ON A.DId=@DId AND A.Id=L.AccountId INNER JOIN LocationTypes LT ON L.LocationTypeId = LT.Id WHERE L.DId=@DId AND L.Inactive=@Inactive AND ISNULL(AccountId,0)=@AccId AND ISNULL(L.ParentId,0)=@ParentId ORDER BY L.Name*/
	END
	ELSE
		SELECT A.vchName AS AccountName,
		L.Id, L.DId, L.ParentId, L.AccountId, L.LocationTypeId, L.Name, L.Inactive, L.Description, L.IsDefault, L.AuditorId, L.AuditPeriodDays,L.CfgEnableAudit,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Country' where v.LocationId=L.Id AND LT.Name='Building') as Country,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='State' where v.LocationId=L.Id AND LT.Name='Building') as State,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='City' where v.LocationId=L.Id AND LT.Name='Building') as City,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Address1' where v.LocationId=L.Id AND LT.Name='Building') as Address1,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Address2' where v.LocationId=L.Id AND LT.Name='Building') as Address2,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Zip Code' where v.LocationId=L.Id AND LT.Name='Building') as ZipCode,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Phone1' where v.LocationId=L.Id AND LT.Name='Building') as Phone1,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Phone2' where v.LocationId=L.Id AND LT.Name='Building') as Phone2,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Work Places' where v.LocationId=L.Id AND LT.Name='Room') as WorkPlaces,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Room Number' where v.LocationId=L.Id AND LT.Name='Room') as RoomNumber,
					(select top 1 v.PropertyValue from LocationPropertyValues v join LocationTypeProperties p on p.Id=v.LocationTypePropertyId and p.DId=v.DId and p.Name='Size(sq.f)' where v.LocationId=L.Id AND LT.Name='Room') as RoomSize,
		dbo.fxGetUserLocationName(@DId, L.Id) AS LocationFullName, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND ISNULL(@Inactive,Inactive) = Inactive)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode FROM Locations L LEFT OUTER JOIN Accounts A ON A.DId=@DId AND A.Id=L.AccountId left JOIN LocationTypes LT ON L.LocationTypeId = LT.Id WHERE L.DId=@DId AND L.Id=@Id
GO
PRINT N'Creating [dbo].[sp_SelectLocationsTreeForUser]...';


GO
CREATE Procedure dbo.sp_SelectLocationsTreeForUser
	(
		@DId int,
		@UId int, 
		@ParentId int
	)
As
	IF @ParentId IS NULL
		SELECT L.*, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode 
		FROM Locations L 
		left JOIN LocationTypes LT ON L.LocationTypeId = LT.Id 
		WHERE L.DId=@DId AND L.Inactive=0 AND L.AccountId IS NULL ORDER BY L.Name
	ELSE IF @ParentId=0
		SELECT L.*, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode 
		FROM Locations L 
		left JOIN LocationTypes LT ON L.LocationTypeId = LT.Id 
		WHERE L.DId=@DId AND L.ParentId IS NULL AND L.Inactive=0 AND L.AccountId IS NULL ORDER BY L.Name
	ELSE
		SELECT L.*, LT.Name AS TypeName, LT.HierarchyLevel, CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id)  WHEN 0 THEN Cast(1 As bit)  ELSE Cast(0 As bit) END AS IsLastChildNode 
		FROM Locations L 
		left JOIN LocationTypes LT ON L.LocationTypeId = LT.Id 
		WHERE L.DId=@DId AND L.ParentId=@ParentId AND L.Inactive=0 AND L.AccountId IS NULL ORDER BY L.Name
GO
PRINT N'Creating [dbo].[sp_SelectLocationsUpTree]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationsUpTree]
	(
		@DId int,		
		@AccId int,
		@LocationId int
		
	)
AS

	DECLARE @LocationUpWay TABLE
	(
		DId int,
		Id int,
		ParentId int,
		Name nvarchar(50),
		IsLastChildNode bit
	)
	DECLARE @LocId int, @LocParentId int
	
	SELECT @LocParentId = l.ParentId
	FROM Locations l
	WHERE l.DId = @DId AND l.Id = @LocationId
	
	IF (@LocParentId IS NOT NULL)
		INSERT INTO @LocationUpWay
		SELECT @DId, l.Id, l.ParentId, l.Name,
			CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND Inactive = 0)
			WHEN 0 THEN Cast(1 As bit) ELSE Cast(0 As bit) END
		FROM Locations l
		WHERE l.DId = @DId AND l.ParentId = @LocParentId AND l.Inactive=0
		
	WHILE (@LocParentId IS NOT NULL)
	BEGIN
		INSERT INTO @LocationUpWay
		SELECT @DId, l.Id, l.ParentId, l.Name,
			CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND Inactive = 0)
			WHEN 0 THEN Cast(1 As bit) ELSE Cast(0 As bit) END
		FROM Locations l
		WHERE l.DId = @DId AND l.ParentId = @LocParentId AND l.Inactive=0
		
		SELECT @LocParentId = l.ParentId
		FROM Locations l
		WHERE l.DId = @DId AND l.Id = @LocParentId AND l.Inactive=0			
	END

	SELECT  L.DId, L.Id, L.ParentId, L.Name, 
			CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND Inactive = 0)
			WHEN 0 THEN Cast(1 As bit) ELSE Cast(0 As bit) END AS IsLastChildNode
	FROM Locations L
	WHERE L.DId=@DId
		AND ISNULL(L.AccountId, -1)=@AccId
		AND (L.Inactive=0)
		AND (L.ParentId IS NULL)-- for main list
		
	UNION
		SELECT * FROM @LocationUpWay l
	ORDER BY Name
GO
PRINT N'Creating [dbo].[sp_SelectLocationsWithTechName]...';


GO
CREATE Procedure dbo.sp_SelectLocationsWithTechName
	(
		@DId int, 
		@btInactive bit = NULL
	)
As
	IF @btInactive IS NULL
		SELECT L.id, L.Name, lo.LastName+', '+lo.FirstName AS vchFullName, L.btInactive
		FROM tbl_locations L
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=L.intLastResortId LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id
		WHERE L.DId = @DId
		ORDER BY Name
	ELSE
		SELECT L.id, L.Name, lo.LastName+', '+lo.FirstName AS vchFullName, L.btInactive
		FROM tbl_locations L
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=L.intLastResortId LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id
		WHERE L.DId = @DId AND L.btInactive=@btInactive
		ORDER BY Name
	return
GO
PRINT N'Creating [dbo].[sp_SelectLocationsWithTicketCount]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE Procedure [dbo].[sp_SelectLocationsWithTicketCount]
	(
		@DId int,
		@Id int = null,
		@AccId int = null,
		@ParentId int = null, 
		@Search nvarchar(50),
		@Inactive bit = null
	)
As
	IF @AccId = -1
		BEGIN
			SET @AccId = 0
		END
--ghjhgj	
	IF @Id IS NULL
	BEGIN
		WITH LocationTree(LocationID, SubLocationID) AS 
		(
			SELECT L.ParentId AS LocationID, L.Id AS SubLocationID
			FROM Locations L
			WHERE --L.ParentId IS NULL
				L.DId = @DId AND ISNULL(L.AccountId, 0) = @AccId
				AND (L.Inactive = @Inactive OR @Inactive IS NULL)
				AND (ISNULL(L.ParentId, 0) = @ParentId OR @ParentId IS NULL OR @Search IS NOT NULL)
				AND (L.Name LIKE @Search OR @Search IS NULL)
			UNION ALL
			SELECT L.ParentId AS LocationID, L.Id AS SubLocationID
			FROM Locations L
				INNER JOIN LocationTree lt
				ON L.ParentId = lt.SubLocationID
		)
		--SELECT * FROM LocationTree

			SELECT  L.Id,
					CASE
					WHEN @Search IS NULL
					THEN L.Name
					ELSE dbo.fxGetUserLocationName(@DId, L.Id)
					END AS Name, L.CfgEnableAudit, L.AuditorId, L.AuditPeriodDays, lo.FirstName+' '+lo.LastName AS AuditorName,
					CASE
					WHEN @Search IS NULL
					THEN
						CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND ISNULL(@Inactive,Inactive) = Inactive)
						WHEN 0 THEN Cast(1 As bit) ELSE Cast(0 As bit) END 
					ELSE Cast(1 As bit)
					END AS IsLastChildNode,
					ISNULL(at.OpenTickets, 0) AS TicketCount,
					ISNULL(SUM(sat.OpenTickets), 0) AS SubLocationsTicketCount,					
					--dbo.fxGetLocationTicketCount(@DId, L.Id) AS TicketCount,
					--dbo.fxGetSubLocationsTicketCount(@DId, L.Id) AS SubLocationsTicketCount,
					dbo.fxGetLocationAliasesAsString(L.DId, L.Id) AS LocationsAliases,
					al.AuditDate AS LastAuditDate, al.Completed,
					loL.FirstName+' '+loL.LastName AS LastAuditorName
					
			FROM Locations L
					LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON L.DId = tlj.company_id AND L.AuditorId = tlj.id
						LEFT OUTER JOIN tbl_Logins lo ON lo.id = tlj.login_Id
					LEFT OUTER JOIN LocationAuditHistory al ON L.DId = al.DId AND L.Id = al.LocationId AND
						al.AuditDate = (SELECT TOP 1 al.AuditDate FROM LocationAuditHistory al WHERE al.DId = @DId AND al.LocationId = L.Id ORDER BY AuditDate DESC)						
					LEFT OUTER JOIN tbl_LoginCompanyJunc tljL ON tljL.company_id = @DId AND al.AuditorId = tljL.id
						LEFT OUTER JOIN tbl_Logins loL ON loL.id = tljL.login_Id
					
					LEFT OUTER JOIN
						(	
							SELECT t.LocationId AS LocationId, COUNT(*) AS OpenTickets 
							FROM tbl_ticket t WHERE t.company_id = @DId AND t.Status<>'Closed' 
							GROUP BY t.LocationId 
						) at ON at.LocationId = L.Id
					
					LEFT OUTER JOIN LocationTree lt ON L.Id = lt.LocationID
					LEFT OUTER JOIN
						(	
							SELECT t.LocationId AS LocationId, COUNT(*) AS OpenTickets 
							FROM tbl_ticket t WHERE t.company_id = @DId AND t.Status<>'Closed' 
							GROUP BY t.LocationId 
						) sat ON sat.LocationId = lt.SubLocationID
						
					
			WHERE L.DId = @DId AND ISNULL(L.AccountId, 0) = @AccId
				AND (L.Inactive = @Inactive OR @Inactive IS NULL)
				AND (ISNULL(L.ParentId, 0) = @ParentId OR @ParentId IS NULL OR @Search IS NOT NULL)
				AND (L.Name LIKE @Search OR @Search IS NULL)
			GROUP BY L.Id, L.Name, L.CfgEnableAudit, L.AuditorId, L.AuditPeriodDays, lo.FirstName, lo.LastName, at.OpenTickets, L.DId, al.AuditDate,
			al.Completed, loL.FirstName, loL.LastName
			ORDER BY L.Name
			
	
	END
	ELSE
		SELECT A.vchName AS AccountName, L.*, dbo.fxGetUserLocationName(@DId, L.Id) AS LocationFullName, LT.Name AS TypeName, LT.HierarchyLevel,
			CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND ISNULL(@Inactive,Inactive) = Inactive)
			WHEN 0 THEN Cast(1 As bit) ELSE Cast(0 As bit) END AS IsLastChildNode
		FROM Locations L LEFT OUTER JOIN Accounts A ON A.DId=@DId AND A.Id=L.AccountId left JOIN LocationTypes LT ON L.LocationTypeId = LT.Id
		WHERE L.DId=@DId AND L.Id=@Id
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[sp_SelectLocationTypeNameExists]...';


GO
CREATE Procedure dbo.sp_SelectLocationTypeNameExists
	(
		@DId int,
		@Name nvarchar(50),
		@Id int = null
	)
As
	IF @Id IS NULL OR @Id=0
	BEGIN	
		IF NOT EXISTS(SELECT 'true' FROM LocationTypes WHERE (DId IS NULL OR DId=@DId) AND Name=@Name)
			RETURN 0
		ELSE
			RETURN 1
	END
	ELSE
	BEGIN	
		IF NOT EXISTS(SELECT 'true' FROM LocationTypes WHERE (DId IS NULL OR DId=@DId) AND Name=@Name AND Id<>@Id)
			RETURN 0
		ELSE
			RETURN 1
	END
GO
PRINT N'Creating [dbo].[sp_SelectLocationTypePropertieGroup]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationTypePropertieGroup]
	(
		@DId int,
		@GroupId int = null,
		@LocationTypeId int = null
	)
As
		select distinct g.*, t.Name as TypeName
		from LocationTypePropertiesGroup g
		left join LocationTypes t on t.DId=@DId and g.LocationTypeId=t.Id
		where g.DId=@DId and 
		(@GroupId is NULL OR @GroupId=0 OR g.Id=@GroupId) and
		(@LocationTypeId is null or @LocationTypeId=0 or g.LocationTypeId=@LocationTypeId)
GO
PRINT N'Creating [dbo].[sp_SelectLocationTypeProperties]...';


GO
CREATE Procedure dbo.sp_SelectLocationTypeProperties
	(
		@DId int,
		@LocationTypeId int,
		@Id int = null
	)
As
		SELECT p.DId, p.Id, p.LocationTypeId, p.Name as Name, p.Enumeration, p.Description, p.Deleted, p.DataType, p.SortOrder,
			g.Name as GroupName, g.Id as GroupId, g.SortOrder as GroupSortOrder
		FROM LocationTypeProperties as p
		FULL JOIN LocationTypePropertiesGroup as g on g.Id=p.GroupId and g.DId=p.DId
		WHERE (p.DId=@DId OR g.DId=@DId) AND
		((@Id is NULL) OR  p.Id=@Id) AND
		((@LocationTypeId IS NULL) OR p.LocationTypeId=@LocationTypeId or g.LocationTypeId=@LocationTypeId)
		order by g.SortOrder, g.Name, p.SortOrder, p.Name
GO
PRINT N'Creating [dbo].[sp_SelectLocationTypePropertiesAndGroups]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationTypePropertiesAndGroups]
	(
		@DId int,
		@LocationTypeId int,
		@Id int = null
	)
As
		SELECT p.DId, p.Id, p.LocationTypeId, p.Name, p.Enumeration, p.Description, p.Deleted, p.DataType, g.Name as GroupName, g.Id as GroupId
		FROM LocationTypeProperties as p
		FULL JOIN LocationTypePropertiesGroup as g on g.Id=p.GroupId and g.DId=p.DId
		WHERE (p.DId=@DId OR g.DId=@DId) AND
		((@Id is NULL) OR  p.Id=@Id) AND
		((@LocationTypeId IS NULL) OR p.LocationTypeId=@LocationTypeId or g.LocationTypeId=@LocationTypeId)
		order by g.Name, p.GroupId, p.Name
GO
PRINT N'Creating [dbo].[sp_SelectLocationTypePropertieValues]...';


GO
CREATE Procedure [dbo].[sp_SelectLocationTypePropertieValues]
	(
		@DId int,
		@LocationId int
	)
As
		SELECT p.*, v.Id as PropertyValueId, v.PropertyValue, g.Name as GroupName
		FROM Locations l
		JOIN LocationTypeProperties p on l.LocationTypeId=p.LocationTypeId
		LEFT JOIN LocationPropertyValues v on p.Id=v.LocationTypePropertyId AND v.LocationId=l.Id
		LEFT JOIN LocationTypePropertiesGroup g on l.DId=g.DId and g.Id=p.GroupId
		WHERE p.DId=@DId AND l.Id=@LocationId
		order by g.Name, g.Id, p.Name
GO
PRINT N'Creating [dbo].[sp_SelectLocationTypePropertyNameExists]...';


GO
CREATE Procedure dbo.sp_SelectLocationTypePropertyNameExists
	(
		@DId int,
		@LocationTypeId int=null,
		@Name nvarchar(50),
		@Id int = null
	)
As
	IF @Id IS NULL OR @Id=0
	BEGIN	
		IF NOT EXISTS(SELECT 'true' FROM LocationTypeProperties WHERE DId=@DId  AND (LocationTypeId=@LocationTypeId or(LocationTypeId is null and @LocationTypeId is null)) AND Name=@Name)
			RETURN 0
		ELSE
			RETURN 1
	END
	ELSE
	BEGIN	
		IF NOT EXISTS(SELECT 'true' FROM LocationTypeProperties WHERE DId=@DId AND (LocationTypeId=@LocationTypeId or (LocationTypeId is null or @LocationTypeId is null)) AND Name=@Name AND Id<>@Id)
			RETURN 0
		ELSE
			RETURN 1
	END
GO
PRINT N'Creating [dbo].[sp_SelectLocationTypes]...';


GO
CREATE Procedure dbo.sp_SelectLocationTypes
	(
		@DId int,
		@Id int = null
	)
As
	IF @Id IS NULL
		SELECT * FROM LocationTypes WHERE (DId IS NULL) OR (DId=@DId) ORDER BY HierarchyLevel, Name
	ELSE
		SELECT * FROM LocationTypes WHERE (DId IS NULL OR DId=@DId) AND Id=@Id ORDER BY HierarchyLevel, Name
GO
PRINT N'Creating [dbo].[sp_SelectLocationUsers]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectLocationUsers]
(
		@DId int,
		@LocationId int
)
AS

SELECT LJ.id, LJ.vchOrganization, LJ.btLimitToAssignedTkts, LJ.btGlobalFilterEnabled, LJ.btDisabledReports, LJ.dtLastLogin, LJ.btUserInactive,
	L.id as LoginId, L.FirstName, L.LastName, L.Email, L.Phone, isnull(L.LastName,'')+', '+ isnull(L.FirstName,'') as FullName,
	U.Name AS UserTypeName,  
	dbo.fxGetUserLocationName(@DId, LJ.LocationId) AS LocationName, 
	ACT.vchName as AccountName, 
	dbo.fxGetUserLocationName(@DId, LJ.AccountLocationId) AS AccLocationName 

FROM tbl_LoginCompanyJunc LJ 
JOIN tbl_Logins L ON L.id=LJ.login_id 
LEFT OUTER JOIN Locations LOC ON LOC.DId=@DId AND LJ.LocationId = LOC.Id 
LEFT OUTER JOIN Accounts ACT ON ACT.DId=@DId AND ACT.id=LJ.intAccountId 
JOIN tbl_UserType U ON LJ.UserType_Id = U.id 

WHERE LJ.company_id = @DId AND 
	(L.firstname LIKE '%' AND L.lastname LIKE '%' AND L.email LIKE '%')  AND 
	LJ.btUserInactive = 0  AND 
	LJ.LocationId IN (SELECT Id FROM dbo.fxGetAllChildLocations(@DId, @LocationId)) AND 
	U.id <> 4

ORDER BY L.FirstName, L.LastName
GO
PRINT N'Creating [dbo].[sp_SelectLogin]...';


GO
CREATE Procedure dbo.sp_SelectLogin
	(
		@Email nvarchar(50),
		@LoginToken nvarchar(50)
	)
As
	
	
	SELECT *, (SELECT TOP 1 Seed FROM LoginTokens WHERE Token=@LoginToken AND dtExpires > dateadd(n, -2, getutcdate())) as Seed FROM tbl_logins WHERE email = @Email
	
	DELETE FROM LoginTokens WHERE dtExpires < dateadd(n, -2, getutcdate()) OR Token=@LoginToken
	return
GO
PRINT N'Creating [dbo].[sp_SelectLoginChooseOrganization]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_SelectLoginChooseOrganization] 
	-- Add the parameters for the stored procedure here
		@LoginEmail nvarchar(50) = null,
		@DbNumber int = null,
		@LoginId int = null
AS
BEGIN
if @LoginEmail IS NOT NULL
BEGIN
	SELECT C.company_id, C.company_guid, C.company_name 
	FROM tbl_LoginCompanyJunc LJ 
	INNER JOIN tbl_company C ON C.company_id = LJ.company_id
	INNER JOIN tbl_Logins L ON L.id=LJ.login_id
	WHERE L.Email = @LoginEmail and LJ.btUserInactive=0 --VGOOZ 21-OCT-2005 Tkt #3033: Inactive users still able to access.
END
ELSE BEGIN -- AndrewM: this is made for backward compatibility for the old AD Replicator code
	SELECT C.company_id, C.company_guid, C.company_name
	FROM tbl_LoginCompanyJunc LJ 
	INNER JOIN tbl_company C ON C.company_id = LJ.company_id
	INNER JOIN tbl_Logins L ON L.id=LJ.login_id
	WHERE L.id = @LoginId AND LJ.btUserInactive=0 --VGOOZ 21-OCT-2005 Tkt #3033: Inactive users still able to access.
END
END
GO
PRINT N'Creating [dbo].[sp_SelectLoginCompanyJunc]...';


GO

Create Procedure sp_SelectLoginCompanyJunc
	(
		@DepartmentId int,
		@LoginId int
	)
As
	SELECT * FROM tbl_LoginCompanyJunc WHERE company_id = @DepartmentId AND login_id = @LoginId
	return
GO
PRINT N'Creating [dbo].[sp_SelectLoginDetailbyEmail]...';


GO
CREATE Procedure dbo.sp_SelectLoginDetailbyEmail
	(
		@Email nvarchar(50)
	)
As
	--Valeriy Gooz: DO NOT CHANGE EXISTING COLUMNS ORDER ( THIS IS REQUIREMENT FOR LDAP PROJECT )
	--IF NEED ADDITIONAL COLUMNS THEN ADD NEW COLUMNS TO END OF LIST

	SELECT id, Email, FirstName, LastName, Password, Title, Phone, '' AS Phone2, MobilePhone, '' AS Pager, '' AS MobileEmail, 0 AS MobileEmailType
	FROM tbl_Logins WHERE Email = @Email AND ConfigUnassignedQue = 0

	return
GO
PRINT N'Creating [dbo].[sp_SelectLoginExists]...';


GO
CREATE Procedure dbo.sp_SelectLoginExists
	(
		@DId int,
		@vchEmailAddress nvarchar(50),
		@UId int=null OUTPUT,
		@AcctId int=null OUTPUT
	)
As
	/*
	1- Email not found
	2- Found global not local
	3- Found global and local
	*/
	
	
	IF NOT EXISTS(SELECT 'true' FROM tbl_Logins WHERE Email=@vchEmailAddress)
		return 1
	ELSE
		BEGIN
			DECLARE @LoginId int
			SELECT @LoginId = (SELECT id FROM tbl_Logins WHERE Email=@vchEmailAddress)
			
--VGOOZ 26-SEP-2005: tkt #2951 - Inactive users functionality	
			SELECT @UId=id,@AcctId=intAccountId FROM tbl_LoginCompanyJunc WHERE login_id=@LoginId AND company_id=@DId AND btUserInactive=0
			
			IF @UId IS NULL
				RETURN 2
			ELSE
				RETURN 3
			
		END
GO
PRINT N'Creating [dbo].[sp_SelectLoginIdFromUserId]...';


GO

CREATE Procedure sp_SelectLoginIdFromUserId
	(
		@DId int,
		@UId int
	)
As
	return (SELECT login_id FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id = @UId)
GO
PRINT N'Creating [dbo].[sp_SelectLoginInfo]...';


GO
CREATE PROCEDURE dbo.sp_SelectLoginInfo
	(
		@DId int,
		@LId int,
		@EMail nvarchar(50) = null
	)
AS
	IF @LId IS NULL AND @EMail IS NOT NULL
		SELECT @LId=id FROM tbl_Logins WHERE Email=@EMail
	SELECT L.Email, L.FirstName, L.LastName, LJ.id, 
		LJ.UserType_id, LJ.configPartialSetup, LJ.SupGroupId, LJ.btGlobalFilterEnabled, LJ.btLimitToAssignedTkts, LJ.btDisabledReports, LJ.tintTicketTimer, CAST(dbo.fxGetConfigValueStr(@DId, 'tintTicketTimer') AS tinyint) AS tintDTicketTimer, C.company_guid
	FROM tbl_Logins L 
	JOIN tbl_LoginCompanyJunc LJ ON LJ.company_id=@DId AND LJ.login_id=L.id AND LJ.btUserInactive=0 -- MRUDKOVSKI: 08-JAN-2006 - Ticket #3123 - Still able to log in even though I am inactive.
	JOIN tbl_company C ON C.company_id=@DId 
	JOIN Mc_Instance I ON I.InstanceId = C.company_guid 
	WHERE L.id = @LId AND LJ.company_id=@DId
		
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectLoginOrganizationCount]...';


GO
CREATE Procedure [dbo].[sp_SelectLoginOrganizationCount]
	(
		@Email nvarchar(50)
	)

As
	
	SELECT count(LJ.id) AS RecordCount 
	FROM tbl_LoginCompanyJunc LJ 
	INNER JOIN tbl_company C ON C.company_id=LJ.company_id 
	INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid 
	INNER JOIN tbl_Logins L ON L.id=LJ.login_id
	WHERE L.Email = @Email AND I.Active = 1 AND LJ.btUserInactive=0
	return
GO
PRINT N'Creating [dbo].[sp_SelectLoginsDynamicWhere]...';


GO
-- Procedure
CREATE PROCEDURE [dbo].[sp_SelectLoginsDynamicWhere]
(
	@DId int,
	@Where nvarchar(MAX) = null
)
AS
BEGIN
if @Where is null
begin

	select j.id, l.FirstName, l.LastName, l.Email, l.Title, j.tintLevel,
		j.vchOrganization as Organization, l.Phone, l.MobilePhone, j.location_id, 
		lv.LocationName, lv.LocationFullName, j.UserType_Id, t.Name as UserTypeName
	from tbl_LoginCompanyJunc j
	join tbl_Logins l on j.login_id=l.id
	left join rpt_Locations lv on lv.DId=j.company_id and lv.Id=j.location_id
	left join tbl_UserType t on t.id=j.UserType_Id
	where j.btUserInactive=0 and j.company_id=@DId
	
end else begin	

	declare @SqlQuery nvarchar(MAX)
	SET  @SqlQuery = 'select j.id, l.FirstName, l.LastName, l.Email, l.Title, j.tintLevel,
		j.vchOrganization as Organization, l.Phone, l.MobilePhone, j.location_id, 
		lv.LocationName, lv.LocationFullName, j.UserType_Id, t.Name as UserTypeName
	from tbl_LoginCompanyJunc j
	join tbl_Logins l on j.login_id=l.id
	left join rpt_Locations lv on lv.DId=j.company_id and lv.Id=j.location_id
	left join tbl_UserType t on t.id=j.UserType_Id
	where j.btUserInactive=0 and j.company_id='+convert(nvarchar(MAX),@DId) + ISNULL(' and ('+@Where+')','')

	EXEC (@SqlQuery)
	
end
		
END
GO
PRINT N'Creating [dbo].[sp_SelectMailGroups]...';


GO
CREATE Procedure dbo.sp_SelectMailGroups
	(
		@DepartmentId int,
		@MailGroupName nvarchar(50) = null,
		@MailGroupId int = null		
	)

As
	IF @MailGroupId IS NULL	
		IF @MailGroupName IS NULL
			SELECT * FROM MailGroups WHERE DepartmentId = @DepartmentId ORDER BY Name
		ELSE
			SELECT * FROM MailGroups WHERE DepartmentId = @DepartmentId AND Name = @MailGroupName ORDER BY Name
	ELSE
		SELECT * FROM MailGroups WHERE DepartmentId = @DepartmentId and Id=@MailGroupId ORDER BY Name
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectMailGroupUsers]...';


GO
CREATE Procedure dbo.sp_SelectMailGroupUsers
	(
		@DepartmentId int,
		@MailGroupId int 
	)

As

	SELECT mgu.Id as MailGroupUserId, mgu.DepartmentId, lo.* FROM MailGroupUsers mgu JOIN tbl_Logins lo ON lo.id=mgu.LoginId WHERE DepartmentId = @DepartmentId and MailGroupId=@MailGroupId 
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectMoveAssetType]...';


GO

CREATE Procedure sp_SelectMoveAssetType
	(
		@DId int,
		@CategoryId int,
		@TypeId int,
		@NewCategoryId int = null
	)
As
	/*	return -1 = renamed
		return -2 = moved
	*/
	if @NewCategoryId is null
		BEGIN
			SELECT id, Name FROM AssetCategories WHERE DepartmentId=@DId AND id <> @CategoryId ORDER BY Name
			return -1
		END
	ELSE
		BEGIN
			DECLARE @TypeName nvarchar(50)
			SET @TypeName = (SELECT Name FROM AssetTypes WHERE DepartmentId=@DId AND id=@TypeId)
			
			IF EXISTS(SELECT 'true' FROM AssetTypes WHERE DepartmentId=@DId AND CategoryId=@NewCategoryId AND Name=@TypeName)
				SET @TypeName = @TypeName+' (Copy)'
			
			BEGIN TRANSACTION
				UPDATE Assets SET CategoryId=@NewCategoryId WHERE DepartmentId=@DId AND TypeId=@TypeId
				UPDATE AssetTypes SET Name=@TypeName, CategoryId=@NewCategoryId WHERE DepartmentId=@DId AND id=@TypeId
			COMMIT TRANSACTION
			return -2
		END
GO
PRINT N'Creating [dbo].[sp_SelectNotificationEventFiles]...';


GO


CREATE Procedure [dbo].[sp_SelectNotificationEventFiles]
	(
		@DId int,
		@NotificationEventsQueueId int,
		@ScheduledTicketId int=null
	)
As
IF NOT @ScheduledTicketId IS NULL AND @ScheduledTicketId<>0
	SELECT @NotificationEventsQueueId=Id FROM NotificationEventsQueue WHERE DId=@DId AND ScheduledTicketId=@ScheduledTicketId
SELECT * FROM NotificationEventsQueueFiles WHERE DId=@DId AND NotificationEventsQueueId=@NotificationEventsQueueId ORDER BY FileName
GO
PRINT N'Creating [dbo].[sp_SelectNotificationEventRecipients]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectNotificationEventRecipients]
	(
		@DId int,
		@TktEvent tinyint,
		@TktPTechId int,
		@TktUsers nvarchar(max),
		@TktTechs nvarchar(max),
		@TktLocationId int,
		@TktClassId int,
		@TktPriorityId int,
		@TktLevel tinyint,
		@TktAccountId int,
		@TktSupGroupId int,
		@TktEventUserId int,
		@btViaEmailParser bit,
		@TktTechIdOld int = null
	)
AS

DECLARE @Recipients TABLE (UserId int NOT NULL, NotificationEmail tinyint NOT NULL, UserEmail nvarchar(255))

DECLARE @cfgLocations bit
DECLARE @cfgClasses bit
DECLARE @cfgPriorities bit
DECLARE @cfgLevels bit
DECLARE @cfgAcounts bit
DECLARE @cfgSupGroups bit
DECLARE @cfgUnassignedQueues bit
DECLARE @cfgTechCheckin tinyint
DECLARE @btCfgSentEmailsToCheckedOutTechs bit

SELECT @cfgLocations = dbo.fxGetConfigValueBit(@DId, 'configLocationTracking'), 
	@cfgClasses = dbo.fxGetConfigValueBit(@DId, 'configClassTracking'), 
	@cfgPriorities = dbo.fxGetConfigValueBit(@DId, 'configPriorities'),
	@cfgLevels = dbo.fxGetConfigValueBit(@DId, 'configLVL'),
	@cfgAcounts = dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr'),
	@cfgSupGroups = dbo.fxGetConfigValueBit(@DId, 'btCfgESG'),
	@cfgUnassignedQueues = dbo.fxGetConfigValueBit(@DId, 'configUAQ'),
	@cfgTechCheckin = CAST(dbo.fxGetConfigValueBit(@DId, 'configTechCheckin') AS tinyint),
	@btCfgSentEmailsToCheckedOutTechs=dbo.fxGetConfigValueBit(@DId, 'btCfgSentEmailsToCheckedOutTechs')

DECLARE @TktUserIdOld int
IF @TktEvent=26 -- Change Ticket End User
BEGIN
	SET @TktUserIdOld=@TktTechIdOld
	SET @TktTechIdOld=NULL
END
ELSE
	SET @TktUserIdOld=NULL
--IF @cfgNRAdmin=0
--	GOTO UserSection

--Check Admin Settings
DECLARE @NotificationRuleId int
DECLARE @TCNoFilter bit
DECLARE @LFound bit
DECLARE @CFound bit
DECLARE nr_cursor CURSOR FOR
	SELECT NR.Id 
	FROM NotificationRules NR
	WHERE NR.DId=@DId AND NR.btInactive=0 AND NR.btBuiltIn=0 AND NR.UserId IS NULL
OPEN nr_cursor
FETCH NEXT FROM nr_cursor INTO @NotificationRuleId
WHILE @@FETCH_STATUS = 0
BEGIN
	IF NOT EXISTS(SELECT * FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@TktEvent)
		GOTO NextRecord
	SELECT @TCNoFilter=btNoFilter FROM TicketCriterias WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId
	IF @TCNoFilter=1
		GOTO AddUsers
	IF @cfgPriorities=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=7 AND TCD.FilterDataId=0) 
		AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=7 AND TCD.FilterDataId=@TktPriorityId)
		GOTO NextRecord
	IF @cfgLevels=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=5 AND TCD.FilterDataId=0) 
		AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=5 AND TCD.FilterDataId=@TktLevel)
		GOTO NextRecord
	IF @cfgAcounts=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=6 AND TCD.FilterDataId=0) 
		AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=6 AND TCD.FilterDataId=@TktAccountId)
		GOTO NextRecord
	IF @cfgUnassignedQueues=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND TCD.FilterDataId=0) 
		AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND TCD.FilterDataId=@TktPTechId)
		GOTO NextRecord
	IF @cfgSupGroups=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=4 AND TCD.FilterDataId=0) 
		AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=4 AND TCD.FilterDataId=@TktSupGroupId)
		GOTO NextRecord
	IF @cfgClasses=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=2 AND TCD.FilterDataId=0) 
	BEGIN
		SET @CFound=0
		DECLARE @ClassId int
		DECLARE c_cursor CURSOR FOR 
		SELECT TCD.FilterDataId AS ClassId FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=2 AND TCD.FilterDataId<>0
		OPEN c_cursor
		FETCH NEXT FROM c_cursor INTO @ClassId
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF EXISTS(SELECT * FROM dbo.fxGetAllChildClasses(@DId, @ClassId, 0) WHERE Id=@TktClassId)
			BEGIN
				SET @CFound=1
				BREAK
			END
			FETCH NEXT FROM c_cursor INTO @ClassId
		END
		CLOSE c_cursor
		DEALLOCATE c_cursor
		IF @CFound=0
			GOTO NextRecord
	END
	IF @cfgLocations=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=1 AND TCD.FilterDataId=0)
	BEGIN
		SET @LFound=0
		DECLARE @LocationId int
		DECLARE l_cursor CURSOR FOR 
		SELECT TCD.FilterDataId AS LocationId FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=1 AND TCD.FilterDataId<>0
		OPEN l_cursor
		FETCH NEXT FROM l_cursor INTO @LocationId
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF EXISTS(SELECT * FROM dbo.fxGetAllChildLocations(@DId, @LocationId) WHERE Id=@TktLocationId)
			BEGIN
				SET @LFound=1
				BREAK
			END
			FETCH NEXT FROM l_cursor INTO @LocationId
		END
		CLOSE l_cursor
		DEALLOCATE l_cursor
		IF @LFound=0
			GOTO NextRecord
	END	
--	GOTO NextRecord
AddUsers:
	INSERT INTO @Recipients 
		SELECT DISTINCT ISNULL(NRU.UserId, LCJ.Id) AS UserId, NRU.NotificationEmail, NULL  
		FROM NotificationRuleUsers NRU
		LEFT OUTER JOIN MailGroupUsers MGU ON MGU.DepartmentId=@DId AND NRU.UserGroupId=MGU.MailGroupId 
		LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND LCJ.login_id=MGU.LoginId
		WHERE NRU.DId=@DId AND NRU.NotificationRuleId=@NotificationRuleId AND NOT ISNULL(NRU.UserId, LCJ.Id) IS NULL
NextRecord:
	FETCH NEXT FROM nr_cursor INTO @NotificationRuleId
END
CLOSE nr_cursor
DEALLOCATE nr_cursor

DECLARE @chrIndex int
DECLARE @chrStart int
DECLARE @btReceiveTriggerEvents bit
SET @btReceiveTriggerEvents=NULL

UserSection:
DECLARE @TktUserId int
SET @chrStart=1
IF CHARINDEX(',',@TktUsers,LEN(@TktUsers))=0
	SET @TktUsers=@TktUsers+','
IF NOT @TktUserIdOld IS NULL AND @TktUserIdOld<>0
	SET @TktUsers=@TktUsers+STR(@TktUserIdOld)+','
SET @chrIndex=CHARINDEX(',',@TktUsers,@chrStart)

DECLARE @NotificationEmail tinyint

WHILE @chrIndex>@chrStart 
BEGIN
	SET @TktUserId=CAST(LTRIM(RTRIM(SUBSTRING(@TktUsers, @chrStart, @chrIndex-@chrStart))) AS int)
	SET @chrStart=@chrIndex+1
	SET @chrIndex=CHARINDEX(',',@TktUsers,@chrStart)

	--Check User Built-In Rules
	SET @NotificationRuleId=NULL
	SELECT TOP 1 @NotificationRuleId=Id FROM NotificationRules WHERE DId=@DId AND UserId=@TktUserId AND btInactive=0 AND btBuiltIn=1 AND btForTech=0
	IF @NotificationRuleId IS NULL
	BEGIN
		SELECT TOP 1 @NotificationRuleId=Id FROM NotificationRules WHERE DId=@DId AND UserId IS NULL AND btInactive=0 AND btBuiltIn=1 AND btForTech=0
		IF @NotificationRuleId IS NULL
			INSERT INTO @Recipients (UserId, NotificationEmail) VALUES (@TktUserId, 0)
		ELSE
		BEGIN
			IF EXISTS(SELECT * FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@TktEvent)
			BEGIN
				SET @NotificationEmail=0
				SELECT TOP 1 @NotificationEmail=NotificationEmail FROM NotificationRuleUsers WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND UserId IS NULL AND UserGroupId IS NULL
				INSERT INTO @Recipients (UserId, NotificationEmail) VALUES (@TktUserId, @NotificationEmail)
			END
		END
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT * FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@TktEvent)
		BEGIN
			SET @NotificationEmail=0
			SELECT TOP 1 @NotificationEmail=NotificationEmail FROM NotificationRuleUsers WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND UserId=@TktUserId
			INSERT INTO @Recipients (UserId, NotificationEmail) VALUES (@TktUserId, @NotificationEmail)
		END
	END
	--Check Tech Custom Rules
	--Check User Part Custom Rules
	DECLARE nr2_cursor CURSOR FOR 
		SELECT NRU.NotificationRuleId, NRU.NotificationEmail
		FROM NotificationRuleUsers NRU 
		INNER JOIN NotificationRules NR ON NR.DId=@DId AND NRU.NotificationRuleId=NR.Id
		WHERE NRU.DId=@DId AND NR.UserId=@TktUserId AND NR.btInactive=0 AND NR.btBuiltIn=0 AND btForTech=0
	OPEN nr2_cursor
	FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF NOT EXISTS(SELECT * FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@TktEvent)
			GOTO NextRecordUser
		SELECT @TCNoFilter=btNoFilter FROM TicketCriterias WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId
		IF @TCNoFilter=1
			GOTO AddUser
		IF @cfgPriorities=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=7 AND TCD.FilterDataId=0) 
			AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=7 AND TCD.FilterDataId=@TktPriorityId)
			GOTO NextRecordUser
		IF @cfgLevels=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=5 AND TCD.FilterDataId=0) 
			AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=5 AND TCD.FilterDataId=@TktLevel)
			GOTO NextRecordUser
		IF @cfgAcounts=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=6 AND TCD.FilterDataId=0) 
			AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=6 AND TCD.FilterDataId=@TktAccountId)
			GOTO NextRecordUser
		IF @cfgUnassignedQueues=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND TCD.FilterDataId=0) 
			AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND TCD.FilterDataId=@TktPTechId)
			GOTO NextRecordUser
		IF @cfgSupGroups=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=4 AND TCD.FilterDataId=0) 
			AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=4 AND TCD.FilterDataId=@TktSupGroupId)
			GOTO NextRecordUser
		IF @cfgClasses=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=2 AND TCD.FilterDataId=0) 
		BEGIN
			SET @CFound=0
			DECLARE @ClassId2 int
			DECLARE c2_cursor CURSOR FOR 
			SELECT TCD.FilterDataId AS ClassId FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=2 AND TCD.FilterDataId<>0
			OPEN c2_cursor
			FETCH NEXT FROM c2_cursor INTO @ClassId2
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF EXISTS(SELECT * FROM dbo.fxGetAllChildClasses(@DId, @ClassId2, 0) WHERE Id=@TktClassId)
				BEGIN
					SET @CFound=1
					BREAK
				END
				FETCH NEXT FROM c2_cursor INTO @ClassId2
			END
			CLOSE c2_cursor
			DEALLOCATE c2_cursor
			IF @CFound=0
				GOTO NextRecordUser
		END
		IF @cfgLocations=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=1 AND TCD.FilterDataId=0)
		BEGIN
			SET @LFound=0
			DECLARE @LocationId2 int
			DECLARE l2_cursor CURSOR FOR 
			SELECT TCD.FilterDataId AS LocationId FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=1 AND TCD.FilterDataId<>0
			OPEN l2_cursor
			FETCH NEXT FROM l2_cursor INTO @LocationId2
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF EXISTS(SELECT * FROM dbo.fxGetAllChildLocations(@DId, @LocationId2) WHERE Id=@TktLocationId)
				BEGIN
					SET @LFound=1
					BREAK
				END
				FETCH NEXT FROM l2_cursor INTO @LocationId2
			END
			CLOSE l2_cursor
			DEALLOCATE l2_cursor
			IF @LFound=0
				GOTO NextRecordUser
		END
	--	GOTO NextRecordTech
	AddUser:
		INSERT INTO @Recipients (UserId, NotificationEmail) VALUES (@TktUserId, @NotificationEmail)
	NextRecordUser:
		FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
	END
	CLOSE nr2_cursor
	DEALLOCATE nr2_cursor
	--Check User Trigger Event Option
	IF @TktUserId=@TktEventUserId AND (@btReceiveTriggerEvents IS NULL OR @btReceiveTriggerEvents=0)
	BEGIN
		SELECT TOP 1 @btReceiveTriggerEvents=btReceiveTriggerEvents FROM NotificationRules WHERE DId=@DId AND UserId=@TktUserId AND btInactive=0 AND btForTech=0
		IF @btReceiveTriggerEvents IS NULL
			SELECT TOP 1 @btReceiveTriggerEvents=btReceiveTriggerEvents FROM NotificationRules WHERE DId=@DId AND UserId IS NULL AND btInactive=0 AND btBuiltIn=1 AND btForTech=0
		IF @btReceiveTriggerEvents IS NULL
			SET @btReceiveTriggerEvents=1
	END
END


DECLARE @TktTechId int
SET @chrStart=1
IF CHARINDEX(',',@TktTechs,LEN(@TktTechs))=0
	SET @TktTechs=@TktTechs+','
IF NOT @TktTechIdOld IS NULL AND @TktTechIdOld<>0
	SET @TktTechs=@TktTechs+STR(@TktTechIdOld)+','	
SET @chrIndex=CHARINDEX(',',@TktTechs,@chrStart)

WHILE @chrIndex>@chrStart 
BEGIN
	SET @TktTechId=CAST(LTRIM(RTRIM(SUBSTRING(@TktTechs, @chrStart, @chrIndex-@chrStart))) AS int)
	SET @chrStart=@chrIndex+1
	SET @chrIndex=CHARINDEX(',',@TktTechs,@chrStart)

	--Check Tech Built-In Rules
	SET @NotificationRuleId=NULL
	SELECT TOP 1 @NotificationRuleId=Id FROM NotificationRules WHERE DId=@DId AND UserId=@TktTechId AND btInactive=0 AND btBuiltIn=1 AND btForTech=1
	IF @NotificationRuleId IS NULL
	BEGIN
		SELECT TOP 1 @NotificationRuleId=Id FROM NotificationRules WHERE DId=@DId AND UserId IS NULL AND btInactive=0 AND btBuiltIn=1 AND btForTech=1
		IF @NotificationRuleId IS NULL
			INSERT INTO @Recipients (UserId, NotificationEmail) VALUES (@TktTechId, 0)
		ELSE
		BEGIN
			IF EXISTS(SELECT * FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@TktEvent)
			BEGIN
				SET @NotificationEmail=0
				SELECT TOP 1 @NotificationEmail=NotificationEmail FROM NotificationRuleUsers WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND UserId IS NULL AND UserGroupId IS NULL
				INSERT INTO @Recipients (UserId, NotificationEmail) VALUES (@TktTechId, @NotificationEmail)
			END
		END
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT * FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@TktEvent)
		BEGIN
			SET @NotificationEmail=0
			SELECT TOP 1 @NotificationEmail=NotificationEmail FROM NotificationRuleUsers WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND UserId=@TktTechId
			INSERT INTO @Recipients (UserId, NotificationEmail) VALUES (@TktTechId, @NotificationEmail)
		END
	END
	
	--Check Tech Custom Rules
	--Check Tech Part Custom Rules
	DECLARE nr3_cursor CURSOR FOR 
		SELECT NRU.NotificationRuleId, NRU.NotificationEmail 
		FROM NotificationRuleUsers NRU 
		INNER JOIN NotificationRules NR ON NR.DId=@DId AND NRU.NotificationRuleId=NR.Id
		WHERE NRU.DId=@DId AND NR.UserId=@TktTechId AND NR.btInactive=0 AND NR.btBuiltIn=0 AND btForTech=1
	OPEN nr3_cursor
	FETCH NEXT FROM nr3_cursor INTO @NotificationRuleId, @NotificationEmail
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF NOT EXISTS(SELECT * FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@TktEvent)
			GOTO NextRecordTech
		SELECT @TCNoFilter=btNoFilter FROM TicketCriterias WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId
		IF @TCNoFilter=1
			GOTO AddTech
		IF @cfgPriorities=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=7 AND TCD.FilterDataId=0) 
			AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=7 AND TCD.FilterDataId=@TktPriorityId)
			GOTO NextRecordTech
		IF @cfgLevels=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=5 AND TCD.FilterDataId=0) 
			AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=5 AND TCD.FilterDataId=@TktLevel)
			GOTO NextRecordTech
		IF @cfgAcounts=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=6 AND TCD.FilterDataId=0) 
			AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=6 AND TCD.FilterDataId=@TktAccountId)
			GOTO NextRecordTech
		IF @cfgUnassignedQueues=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND TCD.FilterDataId=0) 
			AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND TCD.FilterDataId=@TktTechId)
			GOTO NextRecordTech
		IF @cfgSupGroups=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=4 AND TCD.FilterDataId=0) 
			AND NOT EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=4 AND TCD.FilterDataId=@TktSupGroupId)
			GOTO NextRecordTech
		IF @cfgClasses=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=2 AND TCD.FilterDataId=0) 
		BEGIN
			SET @CFound=0
			DECLARE @ClassId3 int
			DECLARE c3_cursor CURSOR FOR 
			SELECT TCD.FilterDataId AS ClassId FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=2 AND TCD.FilterDataId<>0
			OPEN c3_cursor
			FETCH NEXT FROM c3_cursor INTO @ClassId3
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF EXISTS(SELECT * FROM dbo.fxGetAllChildClasses(@DId, @ClassId3, 0) WHERE Id=@TktClassId)
				BEGIN
					SET @CFound=1
					BREAK
				END
				FETCH NEXT FROM c3_cursor INTO @ClassId3
			END
			CLOSE c3_cursor
			DEALLOCATE c3_cursor
			IF @CFound=0
				GOTO NextRecordTech
		END
		IF @cfgLocations=1
			AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=1 AND TCD.FilterDataId=0)
		BEGIN
			SET @LFound=0
			DECLARE @LocationId3 int
			DECLARE l3_cursor CURSOR FOR 
			SELECT TCD.FilterDataId AS LocationId FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=1 AND TCD.FilterDataId<>0
			OPEN l3_cursor
			FETCH NEXT FROM l3_cursor INTO @LocationId3
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF EXISTS(SELECT * FROM dbo.fxGetAllChildLocations(@DId, @LocationId3) WHERE Id=@TktLocationId)
				BEGIN
					SET @LFound=1
					BREAK
				END
				FETCH NEXT FROM l3_cursor INTO @LocationId3
			END
			CLOSE l3_cursor
			DEALLOCATE l3_cursor
			IF @LFound=0
				GOTO NextRecordTech
		END
	--	GOTO NextRecordTech
	AddTech:
		INSERT INTO @Recipients (UserId, NotificationEmail) VALUES (@TktTechId, @NotificationEmail)
	NextRecordTech:
		FETCH NEXT FROM nr3_cursor INTO @NotificationRuleId, @NotificationEmail
	END
	CLOSE nr3_cursor
	DEALLOCATE nr3_cursor
	
	--Check Tech Trigger Event Option
	IF @TktTechId=@TktEventUserId AND (@btReceiveTriggerEvents IS NULL OR @btReceiveTriggerEvents=0)
	BEGIN
		SELECT TOP 1 @btReceiveTriggerEvents=btReceiveTriggerEvents FROM NotificationRules WHERE DId=@DId AND UserId=@TktTechId AND btInactive=0 AND btForTech=1
		IF @btReceiveTriggerEvents IS NULL
			SELECT TOP 1 @btReceiveTriggerEvents=btReceiveTriggerEvents FROM NotificationRules WHERE DId=@DId AND UserId IS NULL AND btInactive=0 AND btBuiltIn=1 AND btForTech=1
		IF @btReceiveTriggerEvents IS NULL
			SET @btReceiveTriggerEvents=1
	END
END

IF @TktEvent=2 OR @TktEvent=12 OR @TktEvent=22 OR @TktEvent=23 OR @TktEvent=24--PartsOnOrderTicket OR EnterParts
	INSERT INTO @Recipients 
		SELECT DISTINCT PRNT.LoginCompanyJunc_id AS UserId, 0 AS NotificationEmail, NULL 
		FROM tbl_PartsRequestNotifyTechs PRNT
		WHERE PRNT.DepartmentId=@DId
IF EXISTS(SELECT DISTINCT R.UserId AS id FROM @Recipients R INNER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND LCJ.Id=R.UserId WHERE LCJ.UserType_Id=4)
BEGIN
	DECLARE @QId int
	DECLARE q_cursor CURSOR FOR 
		SELECT DISTINCT R.UserId AS id 
		FROM @Recipients R 
		INNER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND LCJ.Id=R.UserId 
		WHERE LCJ.UserType_Id=4
	OPEN q_cursor
	FETCH NEXT FROM q_cursor INTO @QId
	WHILE @@FETCH_STATUS = 0
	BEGIN
		INSERT INTO @Recipients
			SELECT CASE WHEN QM.UserId IS NULL THEN @QId ELSE QM.UserId END, 0, QM.UserEmail
			FROM QueueMembers QM
			LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND LCJ.Id=QM.UserId
			WHERE QM.DepartmentId=@DId AND QM.QueueId=@QId AND (@cfgTechCheckin=0 OR (@cfgTechCheckin=1 AND @btCfgSentEmailsToCheckedOutTechs=1) OR LCJ.CheckinStatus=1)
		FETCH NEXT FROM q_cursor INTO @QId
	END
	CLOSE q_cursor
	DEALLOCATE q_cursor
	DELETE @Recipients 
		FROM @Recipients R
		INNER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND LCJ.Id=R.UserId
		WHERE LCJ.UserType_Id=4 AND R.UserEmail IS NULL
END
--IF @btViaEmailParser=1 OR @btReceiveTriggerEvents=1
IF @btReceiveTriggerEvents=1 --VGOOZ 11-DEC-2008: Tkt #7180 - Email replies - should not receive iwith current settings
	SELECT DISTINCT R.UserId AS id, CASE WHEN L.MobileEmail IS NULL OR LCJ.UserType_Id=4 THEN CAST(0 AS tinyint) ELSE  R.NotificationEmail END AS NotificationEmail, CASE WHEN LCJ.UserType_Id=4 THEN R.UserEmail ELSE L.Email END AS Email, L.Password, L.MobileEmail, L.MobileEmailType, L.FirstName, L.LastName, U.TimeZoneId, U.TimeFormat, LCJ.UserType_Id, I.TimeZoneId as InstanceTimeZoneId, I.TimeFormat as InstanceTimeFormat
	FROM @Recipients R
	INNER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND LCJ.Id=R.UserId
	INNER JOIN tbl_Logins L ON L.id=LCJ.login_id 
	LEFT OUTER JOIN Mc_User U ON U.Email=L.Email 
	INNER JOIN tbl_company C ON C.company_id=@DId
	INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid
	WHERE LCJ.UserType_Id=1 OR LCJ.UserType_Id=5 OR LCJ.CheckinStatus=1 OR @cfgTechCheckin=0 OR (@cfgTechCheckin=1 AND @btCfgSentEmailsToCheckedOutTechs=1)
ELSE
	SELECT DISTINCT R.UserId AS id, CASE WHEN L.MobileEmail IS NULL OR LCJ.UserType_Id=4 THEN CAST(0 AS tinyint) ELSE  R.NotificationEmail END AS NotificationEmail, CASE WHEN LCJ.UserType_Id=4 THEN R.UserEmail ELSE L.Email END AS Email, L.Password, L.MobileEmail, L.MobileEmailType, L.FirstName, L.LastName, U.TimeZoneId, U.TimeFormat, LCJ.UserType_Id, I.TimeZoneId as InstanceTimeZoneId, I.TimeFormat as InstanceTimeFormat
	FROM @Recipients R
	INNER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND LCJ.Id=R.UserId
	INNER JOIN tbl_Logins L ON L.id=LCJ.login_id
	LEFT OUTER JOIN Mc_User U ON U.Email=L.Email 
	INNER JOIN tbl_company C ON C.company_id=@DId
	INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid
	WHERE R.UserId<>@TktEventUserId AND (LCJ.UserType_Id=1 OR LCJ.UserType_Id=5 OR LCJ.CheckinStatus=1 OR @cfgTechCheckin=0 OR (@cfgTechCheckin=1 AND @btCfgSentEmailsToCheckedOutTechs=1))

SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[sp_SelectNotificationEventsQueue]...';


GO


CREATE Procedure [dbo].[sp_SelectNotificationEventsQueue]
	(
		@RunTime smalldatetime
	)
As
	SELECT * FROM NotificationEventsQueue WHERE RunTime<@RunTime ORDER BY DId, CreatedByUserId
GO
PRINT N'Creating [dbo].[sp_SelectNotificationRuleEvents]...';


GO
CREATE  Procedure dbo.sp_SelectNotificationRuleEvents
	(
		@DId int,
		@NotificationRuleId int,
		@btForTech bit = null
	)
As
	IF @NotificationRuleId IS NULL
		SELECT @NotificationRuleId=Id FROM NotificationRules WHERE DId=@DId AND btBuiltIn=1 AND btForTech=@btForTech AND UserId IS NULL

	SELECT * FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId
GO
PRINT N'Creating [dbo].[sp_SelectNotificationRules]...';


GO
CREATE    Procedure dbo.sp_SelectNotificationRules
	(
		@DId int,
		@Id int = null,
		@btInactive bit = null,
		@UserId int = null,
		@btForTech bit = null
	)
As
	IF @Id IS NULL
		IF @UserId IS NULL
			IF @btInactive IS NULL
				SELECT NR.*,  L.FirstName, L.LastName, CASE WHEN NR.btInactive=0 THEN 'Active' ELSE 'InActive' END AS RuleStatus, CAST(0 AS bit) AS ReadOnly 
				FROM NotificationRules NR
				LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND NR.UpdatedByUserId = LCJ.id 
				LEFT OUTER JOIN tbl_Logins L ON LCJ.login_id = L.id
				WHERE NR.DId=@DId  AND NR.UserId IS NULL ORDER BY NR.btBuiltIn DESC, NR.btForTech, NR.RuleName
			ELSE
				SELECT NR.*,  L.FirstName, L.LastName, CASE WHEN NR.btInactive=0 THEN 'Active' ELSE 'InActive' END AS RuleStatus, CAST(0 AS bit) AS ReadOnly
				FROM NotificationRules NR
				LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND NR.UpdatedByUserId = LCJ.id 
				LEFT OUTER JOIN tbl_Logins L ON LCJ.login_id = L.id
				WHERE NR.DId=@DId  AND NR.btInactive=@btInactive AND NR.UserId IS NULL ORDER BY NR.btBuiltIn DESC, NR.btForTech, NR.RuleName
		ELSE
			IF @btInactive IS NULL
			BEGIN
				SELECT NR.*, L.FirstName, L.LastName, CASE WHEN NR.btInactive=0 THEN 'Active' ELSE 'InActive' END AS RuleStatus, CAST(0 AS bit) AS ReadOnly 
				FROM NotificationRules NR
				LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND NR.UpdatedByUserId = LCJ.id 
				LEFT OUTER JOIN tbl_Logins L ON LCJ.login_id = L.id
				WHERE NR.DId=@DId  AND NR.UserId=@UserId 
				UNION
				SELECT NR.DId, NR.Id, @UserId AS UserId, NR.RuleName, NR.dtUpdated, NR.UpdatedByUserId, NR.btInactive, NR.btForTech, NR.btBuiltIn, NR.btReceiveTriggerEvents, L.FirstName, L.LastName, CASE WHEN NR.btInactive=0 THEN 'Active' ELSE 'InActive' END AS RuleStatus, CAST(1 AS bit) AS ReadOnly 
				FROM NotificationRules NR
				LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND NR.UpdatedByUserId = LCJ.id 
				LEFT OUTER JOIN tbl_Logins L ON LCJ.login_id = L.id
				WHERE NR.DId=@DId AND NR.UserId IS NULL AND NR.btBuiltIn=0 AND @UserId IN (SELECT DISTINCT ISNULL(NRU.UserId, LCJ.Id) AS UserId  FROM NotificationRuleUsers NRU LEFT OUTER JOIN MailGroupUsers MGU ON MGU.DepartmentId=@DId AND NRU.UserGroupId=MGU.MailGroupId LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND LCJ.login_id=MGU.LoginId WHERE NRU.DId=@DId AND NRU.NotificationRuleId=NR.Id AND NOT ISNULL(NRU.UserId, LCJ.Id) IS NULL)
				ORDER BY NR.btBuiltIn DESC, ReadOnly, NR.btForTech, NR.RuleName
			END
			ELSE
				SELECT NR.*, L.FirstName, L.LastName, CASE WHEN NR.btInactive=0 THEN 'Active' ELSE 'InActive' END AS RuleStatus, CAST(0 AS bit) AS ReadOnly 
				FROM NotificationRules NR
				LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND NR.UpdatedByUserId = LCJ.id 
				LEFT OUTER JOIN tbl_Logins L ON LCJ.login_id = L.id
				WHERE NR.DId=@DId  AND NR.UserId=@UserId AND NR.btInactive=@btInactive
				UNION
				SELECT NR.DId, NR.Id, @UserId AS UserId, NR.RuleName, NR.dtUpdated, NR.UpdatedByUserId, NR.btInactive, NR.btForTech, NR.btBuiltIn, NR.btReceiveTriggerEvents, L.FirstName, L.LastName, CASE WHEN NR.btInactive=0 THEN 'Active' ELSE 'InActive' END AS RuleStatus, CAST(1 AS bit) AS ReadOnly 
				FROM NotificationRules NR
				LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND NR.UpdatedByUserId = LCJ.id 
				LEFT OUTER JOIN tbl_Logins L ON LCJ.login_id = L.id
				WHERE NR.DId=@DId AND NR.UserId IS NULL AND NR.btBuiltIn=0 AND NR.btInactive=@btInactive AND @UserId IN (SELECT DISTINCT ISNULL(NRU.UserId, LCJ.Id) AS UserId  FROM NotificationRuleUsers NRU LEFT OUTER JOIN MailGroupUsers MGU ON MGU.DepartmentId=@DId AND NRU.UserGroupId=MGU.MailGroupId LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND LCJ.login_id=MGU.LoginId WHERE NRU.DId=@DId AND NRU.NotificationRuleId=NR.Id AND NOT ISNULL(NRU.UserId, LCJ.Id) IS NULL)
				ORDER BY NR.btBuiltIn DESC, ReadOnly, NR.btForTech, NR.RuleName

	ELSE
	BEGIN
		IF @Id=0
			SELECT @Id=Id FROM NotificationRules WHERE DId=@DId AND btBuiltIn=1 AND btForTech=@btForTech AND UserId IS NULL

			SELECT NR.*, L.FirstName, L.LastName, CASE WHEN NR.btInactive=0 THEN 'Active' ELSE 'InActive' END AS RuleStatus, CAST(0 AS bit) AS ReadOnly 
			FROM NotificationRules NR
			LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND NR.UpdatedByUserId = LCJ.id 
			LEFT OUTER JOIN tbl_Logins L ON LCJ.login_id = L.id
			WHERE NR.DId=@DId AND NR.Id=@Id
	END
GO
PRINT N'Creating [dbo].[sp_SelectNotificationRuleState]...';


GO
CREATE     PROCEDURE [dbo].[sp_SelectNotificationRuleState]
	(
		@DId int,
		@TicketId int,
		@ToUserId int,
		@TktEvent tinyint,
		@State tinyint OUTPUT -- 0-Not Send, 1-Normal Email, 2-Mobile Email, 3-Both Email
	)
AS

SET @State=0
DECLARE @IsForTech bit
DECLARE @TktUserId int
DECLARE @TktTechId int
DECLARE @TktLocationId int
DECLARE @TktClassId int
DECLARE @TktPriorityId int
DECLARE @TktLevel tinyint
DECLARE @TktAccountId int
DECLARE @TktSupGroupId int
SET @IsForTech=0

SELECT @TktUserId=T.User_id, 
	@TktTechId=T.Technician_id, 
	@TktLocationId=T.LocationId, 
	@TktClassId=T.class_id, 
	@TktPriorityId=T.PriorityId,
	@TktLevel=T.tintLevel,
	@TktAccountId=T.intAcctId,
	@TktSupGroupId=LJ.SupGroupId
FROM tbl_ticket T
LEFT OUTER JOIN tbl_LoginCompanyJunc LJ On LJ.company_id=@DId AND T.Technician_id=LJ.Id 
WHERE T.company_id=@DId AND T.Id=@TicketId

DECLARE @UserType int
SET @UserType=0

IF @ToUserId=@TktTechId
	SET @IsForTech=1
ELSE IF @ToUserId<>@TktUserId AND @ToUserId<>@TktTechId
BEGIN
	SELECT @UserType=UserType_Id FROM tbl_LoginCompanyJunc WHERE Id=@ToUserId
	IF @UserType=0
		RETURN
	ELSE IF @UserType=2 OR @UserType=3 OR @UserType=4
		SET @IsForTech=1	
END

DECLARE @cfgLocations bit
DECLARE @cfgClasses bit
DECLARE @cfgPriorities bit
DECLARE @cfgLevels bit
DECLARE @cfgAcounts bit
DECLARE @cfgSupGroups bit
DECLARE @cfgUnassignedQueues bit

SELECT @cfgLocations = dbo.fxGetConfigValueBit(@DId, 'configLocationTracking')
SELECT @cfgClasses = dbo.fxGetConfigValueBit(@DId, 'configClassTracking')
SELECT @cfgPriorities = dbo.fxGetConfigValueBit(@DId, 'configPriorities')
SELECT @cfgLevels = dbo.fxGetConfigValueBit(@DId, 'configLVL')
SELECT @cfgAcounts = dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr')
SELECT @cfgSupGroups = dbo.fxGetConfigValueBit(@DId, 'btCfgESG')
SELECT @cfgUnassignedQueues = dbo.fxGetConfigValueBit(@DId, 'configUAQ')

--Check Admin Settings
DECLARE @NRTemp TABLE (NotificationRuleId int PRIMARY KEY, NotificationEmail tinyint NOT NULL)
DECLARE @LFound bit
DECLARE @TCNoFilter bit

DECLARE @NotificationRuleId int
DECLARE @NotificationEmail tinyint
DECLARE nr_cursor CURSOR FOR 
	SELECT NRU.NotificationRuleId, NRU.NotificationEmail 
	FROM NotificationRuleUsers NRU 
	INNER JOIN NotificationRules NR ON NR.DId=@DId AND NRU.NotificationRuleId=NR.Id
	WHERE NRU.DId=@DId AND NR.btInactive=0 AND NR.UserId IS NULL AND ((NRU.UserId IS NULL AND NRU.UserGroupId IS NULL) OR NRU.UserId=@ToUserId OR (NOT NRU.UserGroupId IS NULL AND @ToUserId IN (SELECT LoginId FROM MailGroupUsers WHERE DepartmentId=@DId AND MailGroupId=NRU.UserGroupId)))
OPEN nr_cursor
FETCH NEXT FROM nr_cursor INTO @NotificationRuleId, @NotificationEmail
WHILE @@FETCH_STATUS = 0
BEGIN
	IF NOT EXISTS(SELECT * FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@TktEvent)
	BEGIN
		FETCH NEXT FROM nr_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	SELECT @TCNoFilter=btNoFilter FROM TicketCriterias WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId
	IF @TCNoFilter=1
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgLocations=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=1 AND TCD.FilterDataId=0)
	BEGIN
		SET @LFound=0
		DECLARE @LocationId int
		DECLARE l_cursor CURSOR FOR 
		SELECT TCD.FilterDataId AS LocationId FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=1
		OPEN l_cursor
		FETCH NEXT FROM l_cursor INTO @LocationId
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF EXISTS(SELECT * FROM dbo.fxGetAllChildLocations(@DId, @LocationId) WHERE Id=@TktLocationId)
			BEGIN
				SET @LFound=1
				BREAK
			END
			FETCH NEXT FROM l_cursor INTO @LocationId
		END
		CLOSE l_cursor
		DEALLOCATE l_cursor
		IF @LFound=1
		BEGIN
			INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
			FETCH NEXT FROM nr_cursor INTO @NotificationRuleId, @NotificationEmail
			CONTINUE
		END
	END
	IF @cfgClasses=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=2 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=2 AND @TktClassId=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgPriorities=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=7 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=7 AND @TktPriorityId=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgLevels=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=5 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=5 AND @TktLevel=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgAcounts=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=6 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=6 AND @TktAccountId=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgUnassignedQueues=3
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND @TktTechId=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgUnassignedQueues=3
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND @TktSupGroupId=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	FETCH NEXT FROM nr_cursor INTO @NotificationRuleId, @NotificationEmail
END
CLOSE nr_cursor
DEALLOCATE nr_cursor

--Check User Built-In Rules
SET @NotificationRuleId=NULL
SELECT TOP 1 @NotificationRuleId=Id FROM NotificationRules WHERE DId=@DId AND UserId=@ToUserId AND btInactive=0 AND btBuiltIn=1 AND btForTech=@IsForTech
IF @NotificationRuleId IS NULL
	INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (0, 0)
ELSE
BEGIN
	IF EXISTS(SELECT * FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@TktEvent)
	BEGIN
		SET @NotificationEmail=0
		SELECT TOP 1 @NotificationEmail=NotificationEmail FROM NotificationRuleUsers WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND UserId=@ToUserId
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
	END
END

--Check Tech Custom Rules
DECLARE nr2_cursor CURSOR FOR 
	SELECT NRU.NotificationRuleId, NRU.NotificationEmail 
	FROM NotificationRuleUsers NRU 
	INNER JOIN NotificationRules NR ON NR.DId=@DId AND NRU.NotificationRuleId=NR.Id
	WHERE NRU.DId=@DId AND NR.UserId=@ToUserId AND NR.btInactive=0 AND NR.btBuiltIn=0 AND btForTech=@IsForTech
OPEN nr2_cursor
FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
WHILE @@FETCH_STATUS = 0
BEGIN
	IF NOT EXISTS(SELECT * FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@TktEvent)
	BEGIN
		FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	SELECT @TCNoFilter=btNoFilter FROM TicketCriterias WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId
	IF @TCNoFilter=1
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgLocations=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=1 AND TCD.FilterDataId=0)
	BEGIN
		SET @LFound=0
		DECLARE @LocationId2 int
		DECLARE l2_cursor CURSOR FOR 
		SELECT TCD.FilterDataId AS LocationId FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=1
		OPEN l2_cursor
		FETCH NEXT FROM l2_cursor INTO @LocationId2
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF EXISTS(SELECT * FROM dbo.fxGetAllChildLocations(@DId, @LocationId2) WHERE Id=@TktLocationId)
			BEGIN
				SET @LFound=1
				BREAK
			END
			FETCH NEXT FROM l2_cursor INTO @LocationId2
		END
		CLOSE l2_cursor
		DEALLOCATE l2_cursor
		IF @LFound=1
		BEGIN
			INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
			FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
			CONTINUE
		END
	END
	IF @cfgClasses=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=2 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=2 AND @TktClassId=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgPriorities=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=7 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=7 AND @TktPriorityId=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgLevels=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=5 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=5 AND @TktLevel=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgAcounts=1
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=6 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=6 AND @TktAccountId=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgUnassignedQueues=3
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND @TktTechId=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	IF @cfgUnassignedQueues=3
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND TCD.FilterDataId=0) 
		AND EXISTS(SELECT * FROM TicketCriteriaData TCD INNER JOIN TicketCriterias TC ON TC.DId=@DId AND TCD.TicketCriteriaId=TC.Id WHERE TCD.DId=@DId AND TC.NotificationRuleId=@NotificationRuleId AND TCD.FilterType=3 AND @TktSupGroupId=TCD.FilterDataId)
	BEGIN
		INSERT INTO @NRTemp (NotificationRuleId, NotificationEmail) VALUES (@NotificationRuleId, @NotificationEmail)
		FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
		CONTINUE
	END
	FETCH NEXT FROM nr2_cursor INTO @NotificationRuleId, @NotificationEmail
END
CLOSE nr2_cursor
DEALLOCATE nr2_cursor


IF EXISTS(SELECT * FROM @NRTemp WHERE NotificationEmail=0) AND EXISTS(SELECT * FROM @NRTemp WHERE NotificationEmail=1)
	SET @State=3
ELSE IF EXISTS(SELECT * FROM @NRTemp WHERE NotificationEmail=1)
	SET @State=2
ELSE IF EXISTS(SELECT * FROM @NRTemp WHERE NotificationEmail=0)
	SET @State=1
GO
PRINT N'Creating [dbo].[sp_SelectNotificationRuleUsers]...';


GO
CREATE  Procedure [dbo].[sp_SelectNotificationRuleUsers]
	(
		@DId int,
		@NotificationRuleId int,
		@UserId int = null
	)
As
	IF @UserId IS NULL
		SELECT NRU.*, L.FirstName, L.LastName, L.Email, L.MobileEmail, L.MobileEmailType, 
		CASE L.MobileEmailType WHEN 0 THEN 'HTML' WHEN 1 THEN 'Text' WHEN 2 THEN 'Short Text' ELSE 'Undefined' END AS MobileEmailTypeName, 
		MG.Name AS GroupName, 
		CASE WHEN NRU.UserId IS NULL AND NRU.UserGroupId IS NULL THEN 'All Users' ELSE 
		CASE WHEN NRU.UserId IS NULL THEN MG.Name ELSE L.LastName+', '+L.FirstName END 
		+CASE WHEN NRU.NotificationEmail=0 THEN ' (normal email)' ELSE ' (mobile email' 
		+CASE L.MobileEmailType WHEN 0 THEN ' - html)' WHEN 1 THEN ' - text)'  WHEN 2 THEN ' - short text)' ELSE ')' END END END AS RuleUser 
		FROM NotificationRuleUsers NRU 
		LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND NRU.UserId = LCJ.id 
		LEFT OUTER JOIN tbl_Logins L ON LCJ.login_id = L.id
		LEFT OUTER JOIN MailGroups MG ON MG.DepartmentId=@DId AND NRU.UserGroupId = MG.Id
		WHERE NRU.DId=@DId AND NRU.NotificationRuleId=@NotificationRuleId
	ELSE
		SELECT DISTINCT NRU.*, ISNULL(L.FirstName,L2.FirstName) AS FirstName, ISNULL(L.LastName, L2.LastName) AS LastName, ISNULL(L.Email, L2.Email) AS Email, ISNULL(L.MobileEmail, L2.MobileEmail) AS MobileEmail, ISNULL(L.MobileEmailType, L2.MobileEmailType) AS MobileEmailType, 
		CASE ISNULL(L.MobileEmailType,L2.MobileEmailType) WHEN 0 THEN 'HTML' WHEN 1 THEN 'Text' WHEN 2 THEN 'Short Text' ELSE 'Undefined' END AS MobileEmailTypeName, 
		'' AS GroupName, 
		CASE WHEN NRU.NotificationEmail=0 THEN ISNULL(L.Email, L2.Email)+' (normal email - html)' ELSE ISNULL(L.MobileEmail, L2.MobileEmail)+' (mobile email' 
		+CASE L.MobileEmailType WHEN 0 THEN ' - html)' WHEN 1 THEN ' - text)'  WHEN 2 THEN ' - short text)' ELSE ')' END END AS RuleUser 
		FROM NotificationRuleUsers NRU 
		LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND NRU.UserId = LCJ.id 
		LEFT OUTER JOIN tbl_Logins L ON LCJ.login_id = L.id
		LEFT OUTER JOIN MailGroups MG ON MG.DepartmentId=@DId AND NRU.UserGroupId = MG.Id
		LEFT OUTER JOIN MailGroupUsers MGU ON MGU.DepartmentId=@DId AND MGU.MailGroupId=MG.Id
		LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ2 ON LCJ2.company_id=@DId AND MGU.LoginId = LCJ2.login_id
		LEFT OUTER JOIN tbl_Logins L2 ON MGU.LoginId = L2.id
		WHERE NRU.DId=@DId AND NRU.NotificationRuleId=@NotificationRuleId AND (NRU.UserId=@UserId OR LCJ2.id=@UserId)


SET ANSI_NULLS OFF
GO
PRINT N'Creating [dbo].[sp_Selectpart]...';


GO
CREATE Procedure dbo.sp_Selectpart
	(
		@DId int,
		@PartId int
	)
As
	SELECT * FROM tbl_part WHERE company_id=@DId AND id=@PartId
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectPartsAwaitingArrival]...';


GO
CREATE Procedure dbo.sp_SelectPartsAwaitingArrival
	(
		@CompanyId int
	)
As
	SELECT p.id, p.VendorDescription, p.Qty4Tkt, p.Qty2Inv, p.ExpectedArrivalDate, p.ticket_id, p.PartsOrder_id, v.name, t.TicketNumber, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull 
		FROM tbl_part p
		LEFT OUTER JOIN tbl_PartsOrder po ON po.company_id=@CompanyId AND po.id=p.PartsOrder_id
		LEFT OUTER JOIN tbl_vendors v ON v.company_id=@CompanyId AND v.id=po.VendorId
		LEFT OUTER JOIN tbl_ticket t ON t.company_id=@CompanyId AND t.id = p.ticket_id
	WHERE p.company_id = @CompanyId AND p.Status = 'Awaiting Arrival'
	ORDER BY p.ExpectedArrivalDate
	return
GO
PRINT N'Creating [dbo].[sp_SelectPartsByMode]...';


GO

CREATE PROCEDURE sp_SelectPartsByMode
	(
		@DId int,
		@TId int,
		@Mode tinyint /*1=ToBeOrdered, 2=ToPickup*/
	)
AS
	DECLARE @vchStatus nvarchar(25)
	IF @Mode = 1
		SET @vchStatus = 'To Be Ordered'
	ELSE
		SET @vchStatus = 'To Pickup'
	
	SELECT id,Qty4Tkt,Description,Status FROM tbl_part WHERE company_id=@DId AND ticket_id=@TId AND Status = @vchStatus
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectPartsMyParts]...';


GO
CREATE PROCEDURE dbo.sp_SelectPartsMyParts
	(
		@DId int,
		@UId int
	)
AS
	SELECT p.*, t.TicketNumber, ISNULL(t.TicketNumberPrefix,'')+CAST(t.TicketNumber AS nvarchar(10)) AS TicketNumberFull, t.Subject, t.id as TktId FROM tbl_part p LEFT OUTER JOIN tbl_ticket t ON t.company_id=@DId AND t.id=p.ticket_id WHERE p.company_id=@DId AND p.intRequestedBy=@UId AND ((p.status<>'Lost' AND p.status<>'Arrived') OR (p.status='Arrived' AND p.ExpectedArrivalDate > getutcdate()-30))
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectPartsNotifyTechs]...';


GO
CREATE Procedure dbo.sp_SelectPartsNotifyTechs
	(
		@DId int
	)
As

	Declare @AccountEnabled bit

	Select @AccountEnabled = dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr')

	if @@RowCount=0 
		Select @AccountEnabled=0

	if @AccountEnabled=0 
	Begin
		SELECT P.LoginCompanyJunc_id, lo.FirstName AS vchFirstname, lo.LastName AS vchLastname, lo.Email AS vchEmail, tlj.UserType_id AS UserTypeId, ut.Name as UserTypeName, NULL as AccountId, NULL as AccountName 
			FROM tbl_PartsRequestNotifyTechs P
			INNER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=p.LoginCompanyJunc_id JOIN tbl_Logins lo ON lo.id=tlj.login_id
			INNER JOIN tbl_UserType ut ON ut.id=tlj.UserType_id
			ORDER BY lo.LastName, lo.FirstName
	End
	Else
	Begin
		SELECT P.LoginCompanyJunc_id, lo.FirstName AS vchFirstname, lo.LastName AS vchLastname, lo.Email AS vchEmail, tlj.UserType_id AS UserTypeId, ut.Name as UserTypeName, acc.Id as AccountId, acc.vchName as AccountName 
			FROM tbl_PartsRequestNotifyTechs P
			INNER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=p.LoginCompanyJunc_id JOIN tbl_Logins lo ON lo.id=tlj.login_id
			INNER JOIN tbl_UserType ut ON ut.id=tlj.UserType_id
			LEFT JOIN Accounts acc ON acc.DId=@DId and tlj.intAccountId=acc.Id
			ORDER BY lo.LastName, lo.FirstName

	End

	return
GO
PRINT N'Creating [dbo].[sp_SelectPartsOrderDisTickIds]...';


GO

Create Procedure sp_SelectPartsOrderDisTickIds
	(
		@CompanyId int
	)
As
	SELECT DISTINCT ticket_id FROM tbl_part WHERE company_id = @CompanyId AND status = 'Staging'
	return
GO
PRINT N'Creating [dbo].[sp_SelectPartsOther]...';


GO
CREATE Procedure [dbo].[sp_SelectPartsOther]
	(
		@DId int,
		@TId int
	)
As
	
	SELECT	p.id,
			p.PartsOrder_id,
			p.Qty4Tkt,
			p.Cost,
			p.ShippingCost,
			p.Description,
			p.VendorDescription,
			l.LastName+', '+l.FirstName AS vchFullName,
			p.Status,
			p.ExpectedArrivalDate,
			dbo.fxGetUserLocationName(@DId, po.LocationId) AS ShipTo,
			ISNULL(ExternalOrderId, 0) as ExternalOrderId
	FROM tbl_part p 
	LEFT OUTER JOIN tbl_LoginCompanyJunc lj ON lj.company_id=@DId AND lj.id=p.intReceivedBy
	LEFT OUTER JOIN tbl_Logins l ON l.id=lj.login_id 
	LEFT OUTER JOIN tbl_PartsOrder po ON po.company_id=@DId AND p.PartsOrder_id = po.id
	WHERE 
		p.company_id = @DId AND
		p.ticket_id = @TId AND
		p.status <> 'To Be Ordered' AND p.status <> 'To Pickup'	
	ORDER BY ExternalOrderId ASC
GO
PRINT N'Creating [dbo].[sp_SelectPartsToBeOrdered]...';


GO

CREATE Procedure [dbo].[sp_SelectPartsToBeOrdered]
	(
		@DId int
	)
As
	SELECT P.id, P.ticket_id, P.Description, P.Qty4Tkt, l.LastName+', '+l.FirstName AS vchFullName, T.TicketNumber, ISNULL(T.TicketNumberPrefix,'')+CAST(T.TicketNumber AS nvarchar(10)) AS TicketNumberFull 
	FROM tbl_part P
	LEFT OUTER JOIN tbl_LoginCompanyJunc lj ON lj.company_id=@DId AND lj.id=p.intRequestedBy
	LEFT OUTER JOIN tbl_Logins l ON l.id=lj.login_id 
	JOIN tbl_ticket T ON T.company_id=@DId AND T.id = P.ticket_id
	WHERE P.company_id = @DId AND P.Status = 'To Be Ordered'
	return
GO
PRINT N'Creating [dbo].[sp_SelectPriorities]...';


GO

CREATE PROCEDURE sp_SelectPriorities
	(
		@DId int
	)
AS
	
	SELECT *, (SELECT TOP 1 id FROM Priorities WHERE DId=@DId ORDER BY tintPriority ASC) as HighPriority, (SELECT TOP 1 id FROM Priorities WHERE DId=@DId ORDER BY tintPriority DESC) as LowPriority FROM Priorities WHERE DId = @DId ORDER BY tintPriority
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectPrioritiesCount]...';


GO

CREATE PROCEDURE sp_SelectPrioritiesCount
	(
		@DId int
	)
AS
	SELECT count(id) as NumPriorities FROM Priorities WHERE DId=@DId
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectPrioritiesLite]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectPrioritiesLite]
	(
		@DId int
	)
AS
	SELECT Id, CAST(tintPriority as nvarchar(3))+' - '+Name as 'Name', tintPriority, Description, btRstrctUsr, ISNULL(bitDefault, 0) AS bitDefault FROM Priorities WHERE DId=@DId ORDER BY tintPriority
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectPriority]...';


GO

CREATE PROCEDURE sp_SelectPriority
	(
		@DId int,
		@Id int
	)
AS
	SELECT *, (SELECT count(id) FROM Priorities WHERE DId=@DId) as NumPriorities FROM Priorities WHERE DId=@DId AND Id=@Id
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectProject]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectProject]
	(
		@CompanyID int,
		@ProjectID int
	)
AS

	SELECT 
	  [ProjectID]
      ,[CompanyID]
      ,[AccountID]
      ,[ParentID]
      ,[Name]
      ,[Description]
      ,[InternalPMID]
      ,[ClientPMID]
      ,[Active]
      ,[BillingMethodID]
      ,[FlatFee]
      ,[HourlyBlendedRate]
      ,dbo.fxGetProjectRatePlan(@CompanyID, ProjectID) AS [RatePlanID]
	  ,dbo.fxGetProjectBillingMethod(@CompanyID, ProjectID) AS [BillingMethodName]
	  ,ISNULL(FlatFeeMode, 0) AS FlatFeeMode
	  ,FlatFeeNextDate
	  ,QBAccountAlias
	  ,QBItemAlias
	  ,dbo.fxGetFullProjectName(@CompanyID, @ProjectID) AS ProjectFullName
	  ,EstimatedHours
	  ,EstimatedCost
	  ,EstimatedInvoicedAmount
	  ,[vchCust1]
      ,[vchCust2]
      ,[vchCust3]
      ,[vchCust4]
      ,[vchCust5]
      ,[vchCust6]
      ,[vchCust7]
      ,[vchCust8]
      ,[vchCust9]
      ,[vchCust10]
      ,[vchCust11]
      ,[vchCust12]
      ,[vchCust13]
      ,[vchCust14]
      ,[vchCust15]
      ,[dtCust1]
      ,[dtCust2]
      ,[SupGroupId]
      ,PriorityId
     FROM 
		[Project]
	 WHERE
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID
GO
PRINT N'Creating [dbo].[sp_SelectProjectBlendedRate]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectBlendedRate]
(
		@DId int,
		@ProjectID int		
	)
AS

	SELECT dbo.fxGetProjectBlendedRate(@DId, @ProjectID) AS HourlyBlendedRate

	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectProjectDayTimeByProject]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectDayTimeByProject]
(
		@CompanyID int,
		@UserID int,
		@Date smalldatetime,
		@AccountID int,
		@ProjectID int
	)
AS
	
		SELECT
			pt.Hours,
			pt.Note,
			ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
			pt.StartTimeUTC, 
			pt.StopTimeUTC,
			LocalTimeZoneOffset
		FROM 
			ProjectTime pt
				LEFT OUTER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID								
			LEFT OUTER JOIN TaskType ON pt.DepartmentId = TaskType.DepartmentID AND pt.TaskTypeId = TaskType.TaskTypeId
		WHERE 
			pt.DepartmentId = @CompanyID 
			AND pt.Deleted = 0
			AND pt.UserId = @UserID
			AND MONTH(pt.Date) = MONTH(@Date) 
			AND YEAR(pt.Date) = YEAR(@Date) 
			AND DAY(pt.Date) = DAY(@Date)
			AND ISNULL(ISNULL(p.AccountID, pt.AccountID), 0) = @AccountID
			AND ISNULL(pt.ProjectId, 0) = @ProjectID
		ORDER BY
			pt.Date
GO
PRINT N'Creating [dbo].[sp_SelectProjectDetail]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectProjectDetail]
(
		@CompanyID int,
		@ProjectID int
	)
AS
	DECLARE @btCfgToDo bit
	SET @btCfgToDo = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgToDo')

	SELECT 
	  ISNULL(Project.AccountID, -1) AS AccountID
      ,Project.[Name]
	  ,dbo.fxGetFullProjectName(@CompanyID, @ProjectID) AS ProjectFullName
	  ,EstimatedHours
	  ,EstimatedCost
	  ,CASE 
			WHEN Project.InternalPMID IS NULL THEN '' 
			ELSE dbo.fxGetUserName(internalPML.FirstName, internalPML.LastName, internalPML.Email) END AS InternalPM,
	  CASE 
			WHEN Project.ClientPMID IS NULL THEN ''
			ELSE dbo.fxGetUserName(clientPML.FirstName, clientPML.LastName, clientPML.Email) END AS ClientPM,
	  CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END AS AccountName,
      ISNULL(prt.TotalHours, 0) AS ProjectHours,
      ISNULL(ptkt.TicketHours, 0) AS TicketHours,
      Project.EstimatedInvoicedAmount,
      ISNULL(ptkt.TicketRemainingHours,0) AS TicketRemainingHours,
      ISNULL(invC.TotalInvoiceAmount,0) AS TotalInvoiceAmount,
      ISNULL(ttInv.TicketInvoiceAmount,0) AS TicketInvoiceAmount,
      ISNULL(prjt.ProjectInvoiceAmount,0) AS ProjectInvoiceAmount,
      ISNULL(ttInv.TicketBillAmount,0) AS TicketBillAmount,
      ISNULL(prjt.ProjectBillAmount,0) AS ProjectBillAmount,
      ISNULL(ttInv.TicketNonInvoicedAmount,0) AS TicketNonInvoicedAmount,
      ISNULL(prjt.ProjectNonInvoicedAmount,0) AS ProjectNonInvoicedAmount,
      ISNULL(ttInv.TicketUnBilledAmount,0) AS TicketUnBilledAmount,
      ISNULL(prjt.ProjectUnBilledAmount,0) AS ProjectUnBilledAmount,
      ISNULL(prtd.ToDoProjectEstimated, 0) AS ToDoProjectEstimated,
		Project.vchCust1,  
		Project.vchCust2, 
		Project.vchCust3,  
		Project.vchCust4,  
		Project.vchCust5,  
		Project.vchCust6,  
		Project.vchCust7,  
		Project.vchCust8,  
		Project.vchCust9,  
		Project.vchCust10,  
		Project.vchCust11,  
		Project.vchCust12,  
		Project.vchCust13,  
		Project.vchCust14,  
		Project.vchCust15,  
		Project.dtCust1,
		ISNULL(SupportGroups.vchName, '') AS SupportGroupName,
		ProjectPriority.tintPriority, 
		ProjectPriority.Name AS PriorityName, 
		ProjectPriority.Description AS PriorityDescription
     FROM 
		Project
	 INNER JOIN
        tbl_company ON Project.CompanyID = tbl_company.company_id
     LEFT OUTER JOIN
        Accounts ON Project.CompanyID = Accounts.DId AND Project.AccountID = Accounts.Id
	 LEFT OUTER JOIN
		tbl_LoginCompanyJunc tbl_LoginCompanyJuncInternal ON Project.CompanyID = tbl_LoginCompanyJuncInternal.company_id AND Project.InternalPMID = tbl_LoginCompanyJuncInternal.id 
	 LEFT OUTER JOIN
        tbl_Logins internalPML ON tbl_LoginCompanyJuncInternal.login_id = internalPML.id
	 LEFT OUTER JOIN
		tbl_LoginCompanyJunc ON Project.CompanyID = tbl_LoginCompanyJunc.company_id AND Project.ClientPMID = tbl_LoginCompanyJunc.id 
	 LEFT OUTER JOIN
        tbl_Logins clientPML ON tbl_LoginCompanyJunc.login_id = clientPML.id
	 LEFT OUTER JOIN 
		(SELECT pt.ProjectId AS ProjectId, ISNULL(SUM(pt.Hours), 0) AS TotalHours FROM ProjectTime pt WHERE pt.DepartmentId=@CompanyID AND pt.Deleted=0 GROUP BY pt.ProjectId) prt ON prt.ProjectId = Project.ProjectID
	 LEFT OUTER JOIN 
		(SELECT t.ProjectID AS ProjectID, SUM(ISNULL(TotalHours, 0)) AS TicketHours, SUM(ISNULL(RemainingHours, 0)) AS TicketRemainingHours FROM tbl_ticket t WHERE t.company_id=@CompanyID GROUP BY t.ProjectID) ptkt ON ptkt.ProjectID = Project.ProjectID
	 LEFT OUTER JOIN 
		(SELECT inv.ProjectId AS ProjectID, SUM(ISNULL(Amount, 0)) AS TotalInvoiceAmount FROM Invoice inv WHERE inv.DId=@CompanyID GROUP BY inv.ProjectId) invC ON invC.ProjectID = Project.ProjectID
	 LEFT OUTER JOIN
		(SELECT tbl_ticket.ProjectID AS ProjectID, SUM(CASE WHEN tt.InvoiceId IS NULL THEN 0 ELSE tt.Hours*ISNULL(tt.BillRate, 0) END) AS TicketInvoiceAmount, SUM(CASE WHEN tt.InvoiceId IS NOT NULL THEN 0 ELSE tt.Hours*ISNULL(dbo.fxGetTimeLogBillableRate(@CompanyID, tbl_ticket.intAcctId, tbl_ticket.ProjectID, tt.TaskTypeId, tt.UserId), 0) END) AS TicketNonInvoicedAmount, SUM(CASE WHEN tt.BillId IS NULL THEN 0 ELSE tt.Hours*ISNULL(tt.HourlyRate, 0) END) AS TicketBillAmount, SUM(CASE WHEN tt.BillId IS NOT NULL THEN 0 ELSE tt.Hours*ISNULL(tt.HourlyRate, 0) END) AS TicketUnBilledAmount FROM TicketTime tt INNER JOIN tbl_ticket ON tt.DepartmentId = tbl_ticket.company_id AND tt.TicketId = tbl_ticket.Id WHERE tt.DepartmentId=@CompanyID and tt.Deleted=0 GROUP BY tbl_ticket.ProjectID) ttInv ON ttInv.ProjectID = Project.ProjectID
	 LEFT OUTER JOIN
		(SELECT pt.ProjectID AS ProjectID, SUM(CASE WHEN pt.InvoiceId IS NULL THEN 0 ELSE pt.Hours*ISNULL(pt.BillRate, 0) END) AS ProjectInvoiceAmount, SUM(CASE WHEN pt.InvoiceId IS NOT NULL THEN 0 ELSE pt.Hours*ISNULL(dbo.fxGetTimeLogBillableRate(@CompanyID, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId, pt.TaskTypeId, pt.UserId), 0) END) AS ProjectNonInvoicedAmount, SUM(CASE WHEN pt.BillId IS NULL THEN 0 ELSE pt.Hours*ISNULL(pt.HourlyRate, 0) END) AS ProjectBillAmount, SUM(CASE WHEN pt.BillId IS NOT NULL THEN 0 ELSE pt.Hours*ISNULL(pt.HourlyRate, 0) END) AS ProjectUnBilledAmount FROM ProjectTime pt INNER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID WHERE pt.DepartmentId=@CompanyID GROUP BY pt.ProjectID) prjt ON prjt.ProjectID = Project.ProjectID
	 LEFT OUTER JOIN
		(SELECT ToDoList.ProjectId, SUM(ISNULL(ToDoItem.HoursEstimatedRemaining, 0)) AS ToDoProjectEstimated FROM ToDoItem INNER JOIN ToDoList ON ToDoItem.DId = ToDoList.DId AND ToDoItem.ToDoListId = ToDoList.Id WHERE ToDoList.DId=@CompanyID AND ToDoItem.Completed = 0 AND ToDoList.ProjectId IS NOT NULL AND @btCfgToDo = 1 GROUP BY ToDoList.ProjectId) prtd ON prtd.ProjectID = Project.ProjectID
	 LEFT OUTER JOIN
		SupportGroups ON Project.CompanyID = SupportGroups.DId AND Project.SupGroupId = SupportGroups.Id
	 LEFT OUTER JOIN
		ProjectPriority ON Project.CompanyID = ProjectPriority.DId AND Project.PriorityId = ProjectPriority.Id
	 WHERE
		Project.CompanyID = @CompanyID
		AND
		Project.ProjectID = @ProjectID
GO
PRINT N'Creating [dbo].[sp_SelectProjectFlatFee]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectFlatFee]
	(
		@DId int,
		@ProjectID int		
	)
AS


--	SELECT dbo.fxGetProjectFlatFee(@DId, @ProjectID) AS FlatFee
		DECLARE @BillingMethod int
		DECLARE @Mode int
		DECLARE @NextDate smalldatetime		
		SET @BillingMethod = NULL
		SET @Mode = 0
		SET @NextDate = NULL
		DECLARE @ParentId int, @pAccountID int, @ActualProjectID int, @ActualFlatFee money		
		
		SELECT 
			@ParentId = ParentId, 
			@BillingMethod = BillingMethodID,
			@pAccountID = AccountID,
			@ActualProjectID = ProjectID,
			@ActualFlatFee = FlatFee,
			@Mode = FlatFeeMode,
			@NextDate = FlatFeeNextDate
		FROM 
			Project 
		WHERE 
			CompanyID = @DId
			AND
			ProjectID = @ProjectID


		WHILE (NOT @ParentId IS NULL) AND (@BillingMethod IS NULL)
		 BEGIN
			SELECT 
				@ParentId = ParentId, 
				@BillingMethod = BillingMethodID,
				@ActualProjectID = ProjectID,
				@ActualFlatFee = FlatFee,
				@Mode = FlatFeeMode,
				@NextDate = FlatFeeNextDate
			FROM 
				Project 
			WHERE 
				CompanyID = @DId
				AND
				ProjectID = @ParentId
		 END

		IF @BillingMethod IS NULL
		 BEGIN
			SET @ActualProjectID = NULL
			SELECT 
				@BillingMethod = BillingMethodID,
				@ActualFlatFee = FlatFee,
				@Mode = FlatFeeMode,
				@NextDate = FlatFeeNextDate
			FROM 
				AccountRate
			WHERE
				CompanyID = @DId
				AND (AccountRate.AccountID = @pAccountID OR (AccountRate.AccountID IS NULL AND @pAccountID IS NULL))
		 END
		IF (@BillingMethod <> 1)
		BEGIN
			SET @ActualFlatFee = 0
			SET @Mode = 0
			SET @NextDate = NULL
		END

		SELECT
			ISNULL(@ActualFlatFee, 0) AS FlatFee,
			ISNULL(@Mode, 0) AS FlatFeeMode,
			@NextDate AS FlatFeeNextDate
GO
PRINT N'Creating [dbo].[sp_SelectProjectHierarchy]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectHierarchy]
	(
		@CompanyID int,
		@AccountID int,
		@ParentID int,
		@Active bit		
	)
AS
		SELECT P.*, PC.Level, PC.IsLastChild 
		FROM dbo.fxGetAllChildProjects(@CompanyID, @ParentID, @Active) PC 
		INNER JOIN Project P  ON P.CompanyID = @CompanyID AND P.ProjectID=PC.Id
		WHERE P.CompanyID = @CompanyID 
				AND ((@AccountID=-1 AND P.AccountID IS NULL)OR(P.AccountID=@AccountID)OR(@AccountID=0))
				AND ((@ParentID IS NULL)OR(ISNULL(P.ParentId,0)=@ParentID))
GO
PRINT N'Creating [dbo].[sp_SelectProjectList]...';


GO
CREATE PROCEDURE dbo.sp_SelectProjectList
(
		@CompanyID int,
		@AccountID int,
		@Active bit = NULL,
		@UserID int,
		@MyProjects bit,
		@btCfgAcctMngr bit
	)
AS
	IF @btCfgAcctMngr = 0
		BEGIN
			SET @AccountID = -1
		END
	DECLARE @btCfgESG bit 
	SET @btCfgESG = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgESG')
	
	SELECT  
		Project.ProjectID, 
		CASE 
			WHEN Accounts.DId IS NULL THEN '(Internal)' ELSE Accounts.vchName END AS AccountName,
		dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS Name, 
		CASE 
			WHEN Project.InternalPMID IS NULL THEN '' 
			ELSE internalPML.LastName + ', ' + internalPML.FirstName END  
			+ CASE 
				WHEN Project.ClientPMID IS NULL THEN ''
				ELSE ' / ' + clientPML.LastName + ', ' + clientPML.FirstName END AS PMFullName,
		ISNULL(Project.AccountID, -1) AS AccountID
	FROM       
		Project 
	LEFT OUTER JOIN
		tbl_LoginCompanyJunc tbl_LoginCompanyJuncInternal ON Project.CompanyID = tbl_LoginCompanyJuncInternal.company_id AND Project.InternalPMID = tbl_LoginCompanyJuncInternal.id 
	LEFT OUTER JOIN
        tbl_Logins internalPML ON tbl_LoginCompanyJuncInternal.login_id = internalPML.id
	LEFT OUTER JOIN
		tbl_LoginCompanyJunc ON Project.CompanyID = tbl_LoginCompanyJunc.company_id AND Project.ClientPMID = tbl_LoginCompanyJunc.id 
	LEFT OUTER JOIN
        tbl_Logins clientPML ON tbl_LoginCompanyJunc.login_id = clientPML.id
	LEFT OUTER JOIN
        Accounts ON Project.CompanyID = Accounts.DId AND Project.AccountID = Accounts.Id
	WHERE
		Project.CompanyID = @CompanyID 
		AND 
		((@AccountID=-1 AND Project.AccountID IS null) 
			OR 
			Project.AccountID=@AccountID 
			OR
			@AccountID=0
		)
		AND
		((Project.Active = @Active) OR (@Active IS NULL AND Project.Active IS NULL))
		AND
		ISNULL(Accounts.btActive, 1) = 1
		AND 
		(@UserID = 0 
			OR @UserID IS NULL 
			--OR @Active = 0 
			OR (@MyProjects = 0 AND dbo.fxIsTechAssignedToProject(Project.CompanyID, Project.AccountID, Project.ProjectID, @UserID, @btCfgESG) = 1)
			OR (@MyProjects = 1 AND (Project.ClientPMID = @UserID OR Project.InternalPMID = @UserID))
		)
	ORDER  BY 
		AccountName,
		Project.Name
GO
PRINT N'Creating [dbo].[sp_SelectProjectListWithHours]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectListWithHours]
(
		@CompanyID int,
		@AccountID int,
		@Active bit = NULL,
		@UserID int,
		@MyProjects bit,
		@btCfgAcctMngr bit
	)
AS
	IF @btCfgAcctMngr = 0
		BEGIN
			SET @AccountID = -1
		END
	DECLARE @btCfgToDo bit,
		@btCfgESG bit 
	SET @btCfgToDo = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgToDo')
	SET @btCfgESG = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgESG')

	SELECT  
		Project.ProjectID, 
		CASE 
			WHEN Accounts.DId IS NULL THEN '(Internal)' ELSE Accounts.vchName END AS AccountName,
		dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS Name, 
		CASE 
			WHEN Project.InternalPMID IS NULL THEN '' 
			ELSE dbo.fxGetUserName(internalPML.FirstName, internalPML.LastName, internalPML.Email) END  
			+ CASE 
				WHEN Project.ClientPMID IS NULL THEN ''
				ELSE ' / ' + dbo.fxGetUserName(clientPML.FirstName, clientPML.LastName, clientPML.Email) END AS PMFullName,
		ISNULL(prt.TotalHours, 0) + ISNULL(ptkt.TicketHours, 0) AS TotalHours,
		ISNULL(Project.AccountID, -1) AS AccountID,
		ISNULL(ptkt.OpenTickets, 0) AS OpenTickets,
		ISNULL(ptkt.CountTickets, 0) - ISNULL(ptkt.OpenTickets, 0) AS ClosedTickets,
		ISNULL(ptkt.TicketRemainingHours, 0) + ISNULL(prtd.ToDoProjectRemaining, 0) AS RemainingHours,
		ProjectPriority.tintPriority, 
		ProjectPriority.Name AS PriorityName, 
		ProjectPriority.Description AS PriorityDescription
	FROM       
		Project 
	LEFT OUTER JOIN
		tbl_LoginCompanyJunc tbl_LoginCompanyJuncInternal ON Project.CompanyID = tbl_LoginCompanyJuncInternal.company_id AND Project.InternalPMID = tbl_LoginCompanyJuncInternal.id 
	LEFT OUTER JOIN
        tbl_Logins internalPML ON tbl_LoginCompanyJuncInternal.login_id = internalPML.id
	LEFT OUTER JOIN
		tbl_LoginCompanyJunc ON Project.CompanyID = tbl_LoginCompanyJunc.company_id AND Project.ClientPMID = tbl_LoginCompanyJunc.id 
	LEFT OUTER JOIN
        tbl_Logins clientPML ON tbl_LoginCompanyJunc.login_id = clientPML.id
	LEFT OUTER JOIN
        Accounts ON Project.CompanyID = Accounts.DId AND Project.AccountID = Accounts.Id
    LEFT OUTER JOIN 
		(SELECT pt.ProjectId AS ProjectId, ISNULL(SUM(pt.Hours), 0) AS TotalHours FROM ProjectTime pt WHERE pt.DepartmentId=@CompanyID AND pt.Deleted=0 GROUP BY pt.ProjectId) prt ON prt.ProjectId = Project.ProjectID
	LEFT OUTER JOIN 
		(SELECT t.ProjectID AS ProjectID, SUM(CASE WHEN t.Status<>'Closed' THEN 1 ELSE 0 END) AS OpenTickets, COUNT(*) AS CountTickets, SUM(ISNULL(TotalHours, 0)) AS TicketHours, SUM(ISNULL(RemainingHours, 0)) AS TicketRemainingHours FROM tbl_ticket t WHERE t.company_id=@CompanyID GROUP BY t.ProjectID) ptkt ON ptkt.ProjectID = Project.ProjectID
	LEFT OUTER JOIN
		(SELECT ToDoList.ProjectId, SUM(ISNULL(ToDoItem.HoursEstimatedRemaining, 0)) AS ToDoProjectRemaining FROM ToDoItem INNER JOIN ToDoList ON ToDoItem.DId = ToDoList.DId AND ToDoItem.ToDoListId = ToDoList.Id WHERE ToDoList.DId=@CompanyID AND ToDoItem.Completed = 0 AND ToDoList.ProjectId IS NOT NULL AND @btCfgToDo = 1 GROUP BY ToDoList.ProjectId) prtd ON prtd.ProjectID = Project.ProjectID
	LEFT OUTER JOIN
		ProjectPriority ON Project.CompanyID = ProjectPriority.DId AND Project.PriorityId = ProjectPriority.Id
	WHERE
		Project.CompanyID = @CompanyID 
		AND 
		((@AccountID=-1 AND Project.AccountID IS null) 
			OR 
			Project.AccountID=@AccountID 
			OR
			@AccountID=0
		)
		AND
		((Project.Active = @Active) OR (@Active IS NULL AND Project.Active IS NULL))
		AND
		ISNULL(Accounts.btActive, 1) = 1
		AND 
		(@UserID = 0 
			OR @UserID IS NULL 
			--OR @Active = 0 
			OR (@MyProjects = 0 AND dbo.fxIsTechAssignedToProject(Project.CompanyID, Project.AccountID, Project.ProjectID, @UserID, @btCfgESG) = 1)
			OR (@MyProjects = 1 AND (Project.ClientPMID = @UserID OR Project.InternalPMID = @UserID))
		)
	ORDER  BY 
		ISNULL(ProjectPriority.tintPriority, 255),
		AccountName,
		Project.Name
GO
PRINT N'Creating [dbo].[sp_SelectProjectPriorities]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectProjectPriorities]
(
	@DId int
)
AS
BEGIN
	
	SELECT 
		Id, 
		tintPriority,
		Name,
		bitDefault,
		(SELECT TOP 1 tintPriority FROM ProjectPriority WHERE DId=@DId ORDER BY tintPriority ASC) as HighPriority, 
		(SELECT TOP 1 tintPriority FROM ProjectPriority WHERE DId=@DId ORDER BY tintPriority DESC) as LowPriority 
	FROM 
		ProjectPriority 
	WHERE 
		DId = @DId 
	ORDER BY 
		tintPriority
		
END
GO
PRINT N'Creating [dbo].[sp_SelectProjectPriority]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectPriority] 
(
	@DId int,
	@ProjectPriorityID int
)
AS
BEGIN

	SELECT 
		Name,
		Description
	FROM 
		ProjectPriority 
	WHERE 
		DId = @DId 
		AND
		Id = @ProjectPriorityID

END
GO
PRINT N'Creating [dbo].[sp_SelectProjectRatesHierarchy]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectRatesHierarchy]
(
		@ProjectTaskTypeRateID int,
		@CompanyID int
	)
AS

DECLARE @RateHierarchy TABLE(
  	ID int,
	RateObject nvarchar(50),
  	ObjectName nvarchar(100),
  	ObjectRate smallmoney,
	Active bit)

DECLARE @ProjectID int, 
		@Level int, 
		@TaskTypeID int, 
		@RatePlanID int, 
		@ProjectHourlyRate smallmoney, 
		@ParentId int, 
		@AccountID int, 
		@IsBillable bit,
		@ProjectName nvarchar(50), 
		@ProjectStatus bit


SET @ParentId = NULL
SET @AccountID = NULL


SET @ProjectHourlyRate = NULL
SET @Level = 100

SELECT @ProjectID = PTTR.ProjectID, @TaskTypeID = PTTR.TaskTypeID, @ProjectHourlyRate = PTTR.HourlyRate
FROM ProjectTaskTypeRate PTTR
WHERE PTTR.CompanyID = @CompanyID AND PTTR.ProjectTaskTypeRateID = @ProjectTaskTypeRateID

SELECT @RatePlanID = dbo.fxGetProjectRatePlan(@CompanyID, @ProjectID)
SET @IsBillable = 0

IF @ProjectHourlyRate = -1
BEGIN
	SET @IsBillable = 1
	SET @ProjectHourlyRate = NULL
END


SELECT @ParentId = ParentId, @AccountID = AccountID, @ProjectName = Name, @ProjectStatus = Active
FROM Project 
WHERE CompanyID = @CompanyID AND ProjectID = @ProjectID


IF (@ProjectHourlyRate IS NOT NULL)
	INSERT INTO @RateHierarchy VALUES (@Level, 'Project', @ProjectName, @ProjectHourlyRate, @ProjectStatus)



WHILE (@ParentId IS NOT NULL)
BEGIN
	SET @ProjectHourlyRate = NULL
	SELECT TOP 1
			@ParentId = Project.ParentId, 
			@ProjectHourlyRate = ProjectTaskTypeRate.HourlyRate,
			@ProjectName = Name, 
			@ProjectStatus = Active
		FROM 
			Project 
		LEFT OUTER JOIN
            ProjectTaskTypeRate ON Project.ProjectID = ProjectTaskTypeRate.ProjectID
			AND
			ProjectTaskTypeRate.TaskTypeID = @TaskTypeID
		WHERE 
			Project.CompanyID = @CompanyID
			AND
			Project.ProjectID = @ParentId

		IF @ProjectHourlyRate = -1
		 BEGIN
			SET @IsBillable = 1
			SET @ProjectHourlyRate = NULL
		 END
	
		IF @IsBillable = 1 AND @ProjectHourlyRate = 0
		 BEGIN
			SET @ProjectHourlyRate = NULL
		 END

		
		IF (@ProjectHourlyRate IS NOT NULL)
		BEGIN
			SET @Level = @Level - 1
			INSERT INTO @RateHierarchy VALUES (@Level, 'Project', @ProjectName, @ProjectHourlyRate, @ProjectStatus)
		END
END

DECLARE @AccountActiveStatus bit
SET @ProjectHourlyRate = NULL


	SELECT @ProjectHourlyRate = CASE  
			WHEN (AccountTaskTypeRate.HourlyRate IS NULL 
					OR (AccountTaskTypeRate.HourlyRate = 0 AND @IsBillable = 1)
					OR AccountTaskTypeRate.HourlyRate = -1)
			THEN NULL 
			ELSE AccountTaskTypeRate.HourlyRate END
		FROM AccountTaskTypeRate
		WHERE			
			AccountTaskTypeRate.CompanyID = @CompanyID
			AND
			AccountTaskTypeRate.TaskTypeID = @TaskTypeID
			AND 
			(AccountTaskTypeRate.AccountID = @AccountID OR (AccountTaskTypeRate.AccountID IS NULL AND @AccountID IS NULL))

	IF (@ProjectHourlyRate IS NOT NULL)
	BEGIN		
		DECLARE @AccountName nvarchar(100)
		IF (@AccountID IS NULL)
		BEGIN
			SELECT @AccountName=(company_name + ' (Internal)') FROM tbl_company WHERE company_id = @CompanyID			
			SET @AccountActiveStatus = 1
		END
		ELSE SELECT @AccountName = vchName, @AccountActiveStatus = btActive FROM Accounts WHERE DId = @CompanyID  AND Id=@AccountID
		SET @Level = @Level - 1
		INSERT INTO @RateHierarchy VALUES (@Level, 'Account', @AccountName, @ProjectHourlyRate, @AccountActiveStatus)
	END

	-- Rate Plan ID
	IF (@RatePlanID IS NOT NULL)
	BEGIN
		SELECT     
			@ProjectHourlyRate = CASE  
						WHEN (RatePlanRates.HourlyRate IS NULL 
							OR (RatePlanRates.HourlyRate = 0 AND @IsBillable = 1)
							OR RatePlanRates.HourlyRate = -1)
							THEN NULL
						ELSE RatePlanRates.HourlyRate END			
		FROM  RatePlanRates
		WHERE RatePlanRates.DepartmentId = @CompanyID AND RatePlanRates.RatePlanId = @RatePlanID AND RatePlanRates.TaskTypeId = @TaskTypeID
		DECLARE @RatePlanName nvarchar(100)		
		SELECT @RatePlanName = RP.Name
		FROM RatePlan RP
		WHERE RP.DepartmentId = @CompanyID AND RP.Id = @RatePlanID		
		IF (@ProjectHourlyRate IS NOT NULL)
		BEGIN
			SET @Level = @Level - 1
			INSERT INTO @RateHierarchy VALUES (@Level, 'Rate Plan', @RatePlanName, @ProjectHourlyRate, 1)		
		END
	END
	
	-- Task Type
	DECLARE @TaskTypeName nvarchar(50)
	DECLARE @TaskTypeRate smallmoney
	DECLARE @TaskTypeActiveStatus bit

	SELECT @TaskTypeName = TT.TaskTypeName, @TaskTypeRate = ISNULL(TT.HourlyRate, 0), @TaskTypeActiveStatus = TT.Active
	FROM TaskType TT
	WHERE TT.DepartmentID = @CompanyID AND TT.TaskTypeId= @TaskTypeID
	IF ((@ProjectHourlyRate IS NULL) AND (@RatePlanID IS NOT NULL))
	BEGIN
		SET @Level = @Level - 1
		INSERT INTO @RateHierarchy VALUES (@Level, 'Rate Plan', @RatePlanName, @TaskTypeRate, 1)
	END
	SET @Level = @Level - 1
	INSERT INTO @RateHierarchy VALUES (@Level, 'Task Type', @TaskTypeName, @TaskTypeRate, @TaskTypeActiveStatus)

	SELECT * FROM @RateHierarchy ORDER BY ID
GO
PRINT N'Creating [dbo].[sp_SelectProjectRecipients]...';


GO
CREATE PROCEDURE dbo.sp_SelectProjectRecipients
	(
		@ProjectID int,
		@CompanyID int
	)
AS
	DECLARE @ProjectRecipients TABLE(
  		id int,
		vchFullName nvarchar(100),  		
		SubscribeEmail bit,
		Email nvarchar(50))

	INSERT INTO @ProjectRecipients
	SELECT     
		tbl_LoginCompanyJunc.id,
		l.LastName+', '+l.FirstName AS vchFullName,
		UserProjects.SubscribeEmail,
		l.Email
	FROM         
		UserProjects 
	INNER JOIN
        tbl_LoginCompanyJunc ON UserProjects.DepartmentId = tbl_LoginCompanyJunc.company_id 
		AND 
        UserProjects.UserId = tbl_LoginCompanyJunc.id 
	INNER JOIN
		tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
	WHERE
		UserProjects.ProjectID = @ProjectID
		AND
		UserProjects.DepartmentId = @CompanyID
		
	INSERT INTO @ProjectRecipients
	SELECT
		tbl_LoginCompanyJunc.id,
		l.LastName+', '+l.FirstName AS vchFullName,
		1,
		l.Email
	FROM
		Project
	LEFT OUTER JOIN
		tbl_LoginCompanyJunc ON Project.CompanyID = tbl_LoginCompanyJunc.company_id 
			AND Project.ClientPMID = tbl_LoginCompanyJunc.id
	LEFT OUTER JOIN
		tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
	LEFT OUTER JOIN
		@ProjectRecipients pr ON Project.ClientPMID = pr.id
	WHERE
		Project.CompanyID = @CompanyID
		AND
		Project.ProjectID = @ProjectID
		AND
		pr.vchFullName IS NULL
		AND
		Project.ClientPMID IS NOT NULL
		
	INSERT INTO @ProjectRecipients
	SELECT
		tbl_LoginCompanyJunc.id,
		l.LastName+', '+l.FirstName AS vchFullName,
		1,
		l.Email
	FROM
		Project
	LEFT OUTER JOIN
		tbl_LoginCompanyJunc ON Project.CompanyID = tbl_LoginCompanyJunc.company_id 
			AND Project.InternalPMID = tbl_LoginCompanyJunc.id
	LEFT OUTER JOIN
		tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
	LEFT OUTER JOIN
		@ProjectRecipients pr ON Project.InternalPMID = pr.id
	WHERE
		Project.CompanyID = @CompanyID
		AND
		Project.ProjectID = @ProjectID
		AND
		pr.vchFullName IS NULL
		AND
		Project.InternalPMID IS NOT NULL
		
		
	SELECT * FROM @ProjectRecipients
GO
PRINT N'Creating [dbo].[sp_SelectProjectRetainers]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectRetainers]
	(
		@CompanyID int,
		@ProjectID int
	)
AS

	SELECT     
		ProjectRetainer.Id,
		TechId,
		dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) AS FullName,
		Amount,
		StartDate,
		EndDate
	FROM         
		ProjectRetainer
	LEFT OUTER JOIN
        tbl_LoginCompanyJunc ON ProjectRetainer.DId = tbl_LoginCompanyJunc.company_id 
		AND 
        ProjectRetainer.TechId = tbl_LoginCompanyJunc.id 
	LEFT OUTER JOIN
		tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
	LEFT OUTER JOIN 
		tbl_company ON tbl_LoginCompanyJunc.company_id=tbl_company.company_id
	WHERE
		ProjectRetainer.DId = @CompanyID
		AND
		ProjectRetainer.ProjectId = @ProjectID		




set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON



set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_SelectProjectsDayTime]...';


GO
CREATE PROCEDURE dbo.sp_SelectProjectsDayTime
(
		@CompanyID int,
		@AccountID int,
		@UserID int,
		@Date smalldatetime
	)
AS
	SELECT  
		ISNULL(Project.ProjectID, -1) AS ProjectID, 
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END AS AccountName,
		dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS Name,
		tblProjectHours.ProjectHours,
		tblTicketHours.TicketHours,
		ISNULL(Accounts.Id, -1) AS AccountID
	FROM       
		(SELECT 
			ISNULL(ProjectTime.ProjectID, -1) ProjectID, 
			ISNULL(SUM(ProjectTime.Hours), 0) AS ProjectHours,
			ISNULL(ProjectTime.AccountID, ISNULL(Project.AccountID, -1)) AccountID
		FROM 
			ProjectTime
		LEFT OUTER JOIN Project ON ProjectTime.ProjectId = Project.ProjectID AND ProjectTime.DepartmentId = Project.CompanyID
		INNER JOIN tbl_company ON ProjectTime.DepartmentId = tbl_company.company_id
		WHERE 
			ProjectTime.DepartmentId = @CompanyID AND ProjectTime.UserId = @UserID AND ProjectTime.Deleted = 0
			AND MONTH(ProjectTime.Date) = MONTH(@Date)
			AND YEAR(ProjectTime.Date) = YEAR(@Date) 
			AND DAY(ProjectTime.Date) = DAY(@Date)
		GROUP BY 
			ProjectTime.ProjectID, ProjectTime.AccountID, Project.AccountID
		) tblProjectHours
		FULL JOIN 
		(SELECT
			ISNULL(tbl_ticket.ProjectID, -1) AS ProjectID, 
			ISNULL(SUM(TicketTime.Hours), 0) AS TicketHours,
			ISNULL(tbl_ticket.intAcctId, -1) AS AccountID
		FROM
			TicketTime
		INNER JOIN 
			tbl_ticket ON TicketTime.DepartmentId = tbl_ticket.company_id AND TicketTime.TicketId = tbl_ticket.Id 
		INNER JOIN tbl_company ON TicketTime.DepartmentId = tbl_company.company_id
		LEFT OUTER JOIN
			Project ON TicketTime.DepartmentId = Project.CompanyID AND tbl_ticket.ProjectId = Project.ProjectID
		WHERE 
			TicketTime.DepartmentId = @CompanyID AND TicketTime.UserId = @UserID AND TicketTime.Deleted = 0
			AND MONTH(TicketTime.Date) = MONTH(@Date) 
			AND YEAR(TicketTime.Date) = YEAR(@Date) 
			AND DAY(TicketTime.Date) = DAY(@Date)
			GROUP BY tbl_ticket.ProjectID, tbl_ticket.intAcctId
		) tblTicketHours
		ON  tblProjectHours.ProjectID = tblTicketHours.ProjectID AND tblProjectHours.AccountID = tblTicketHours.AccountID
		LEFT OUTER JOIN Project ON Project.ProjectID = tblProjectHours.ProjectID OR Project.ProjectID = tblTicketHours.ProjectID
		INNER JOIN tbl_company ON tbl_company.company_id = @CompanyID
		LEFT OUTER JOIN Accounts ON Accounts.DId = @CompanyID AND (tblProjectHours.AccountID = Accounts.Id OR tblTicketHours.AccountID = Accounts.Id)
	WHERE
		((@AccountID=-1 AND Accounts.Id IS null) 
			OR 
			Accounts.Id=@AccountID 
			OR
			@AccountID=0
		)
GO
PRINT N'Creating [dbo].[sp_SelectProjectsTree]...';


GO
CREATE  PROCEDURE dbo.sp_SelectProjectsTree
(
	@CompanyID int,
	@AccountID int
)
AS
	(SELECT
		'A-1' AS ID,
		NULL AS ParentID,
		company_name + ' (Internal)' As [Name],
		1 AS Active
	FROM 
		tbl_company 
	WHERE 
		company_id = @CompanyID AND @AccountID = -1
		
	UNION
	
	SELECT
		'A' + CAST(Accounts.Id AS nvarchar) AS ID, 
		NULL AS ParentID,
		Accounts.vchName as [Name],
		1 AS Active
	FROM 
		Accounts 
	WHERE 
		DId = @CompanyID 
		AND
		Accounts.Id = @AccountID
	
	UNION
	
	SELECT 
		CAST(Project.ProjectID AS nvarchar) AS ID, 
		ISNULL(CAST(Project.ParentID AS nvarchar), 'A' + CAST(ISNULL(Project.AccountID, '-1') as nvarchar)) AS ParentID,
		Project.Name AS [Name],
		Project.Active
	FROM 
		Project 
	LEFT OUTER JOIN 
		Accounts ON Project.CompanyID = Accounts.DId AND Project.AccountID = Accounts.Id
	WHERE 
		Project.CompanyID = @CompanyID
		AND 
		((@AccountID=-1 AND Project.AccountID IS null) 
			OR 
			Project.AccountID=@AccountID 
		)
	) ORDER BY Name
GO
PRINT N'Creating [dbo].[sp_SelectProjectTaskTypeRates]...';


GO
CREATE PROCEDURE dbo.sp_SelectProjectTaskTypeRates
	(
		@ProjectID int,
		@CompanyID int,
		@RatePlanID int = NULL
	)
AS
	IF @RatePlanID > 0
	 BEGIN
		SELECT
			TaskType.TaskTypeName,
			'' AS HourlyRateLabel, 
			'' AS HourlyTaskRateLabel,
			ISNULL(ProjectTaskTypeRate.HourlyRate, ISNULL(RatePlanRates.HourlyRate, ISNULL(TaskType.HourlyRate, 0))) AS HourlyRateInherited,
			ProjectTaskTypeRate.HourlyRate AS HourlyRateOverrided,
			ProjectTaskTypeRate.ProjectTaskTypeRateID,
			TaskType.TaskTypeId
		FROM  
			TaskType       
		LEFT OUTER JOIN
			RatePlanRates ON RatePlanRates.DepartmentId = TaskType.DepartmentID 
			AND 
			RatePlanRates.TaskTypeId = TaskType.TaskTypeId 
			AND
			RatePlanRates.RatePlanId = @RatePlanID
		LEFT OUTER JOIN
            ProjectTaskTypeRate ON TaskType.DepartmentID = ProjectTaskTypeRate.CompanyID 
            AND TaskType.TaskTypeId = ProjectTaskTypeRate.TaskTypeID 
            AND ProjectTaskTypeRate.ProjectID = @ProjectID
        WHERE
			TaskType.DepartmentID = @CompanyID
			AND
			TaskType.Active = 1
	 END
	ELSE
	 BEGIN
		SELECT     
			TaskType.TaskTypeName,
			'' AS HourlyRateLabel, 
			'' AS HourlyTaskRateLabel,
			dbo.fxGetProjectHourlyRate(@CompanyID, @ProjectID, ProjectTaskTypeRate.TaskTypeID, @RatePlanID) AS HourlyRateInherited,
			ProjectTaskTypeRate.HourlyRate AS HourlyRateOverrided,
			ProjectTaskTypeRate.ProjectTaskTypeRateID,
			TaskType.TaskTypeId
		FROM         
			ProjectTaskTypeRate
		INNER JOIN
			TaskType ON ProjectTaskTypeRate.TaskTypeID = TaskType.TaskTypeId AND ProjectTaskTypeRate.CompanyID = TaskType.DepartmentID 
		WHERE
			ProjectTaskTypeRate.CompanyID = @CompanyID
			AND
			ProjectTaskTypeRate.ProjectID = @ProjectID
			AND
			TaskType.Active = 1
	 END
GO
PRINT N'Creating [dbo].[sp_SelectProjectTaskTypes]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectTaskTypes]
	(
		@DepartmentID int,
		@ProjectID int		
	)
AS



DECLARE @EntityTaskTypes TABLE(	TaskTypeID int )


DECLARE @BillingMethodID int
DECLARE @ActualProjectID int
DECLARE @ParentID int
DECLARE @AccountID int
DECLARE @IsGoupCompleted bit
SET @BillingMethodID = NULL
SET @ParentID = NULL
SET @AccountID = NULL
SET @ActualProjectID = NULL
SET @IsGoupCompleted = 0


	SELECT @ActualProjectID = P.ProjectID, @AccountID = P.AccountID, @ParentID = P.ParentID, @BillingMethodID = P.BillingMethodID
	FROM Project P
	WHERE P.ProjectID = @ProjectID AND P.CompanyID = @DepartmentID


	IF (@BillingMethodID IS NULL)
	BEGIN
		WHILE ((@BillingMethodID IS NULL) AND (@ParentID IS NOT NULL))
		BEGIN
			SELECT @ActualProjectID = P.ProjectID, @AccountID = P.AccountID, @ParentID = P.ParentID, @BillingMethodID = P.BillingMethodID
			FROM Project P
			WHERE P.ProjectID = @ParentID AND P.CompanyID = @DepartmentID
		END
	END

	IF (@BillingMethodID IS NOT NULL)
	BEGIN		
		SELECT     
			ProjectTaskTypeRate.TaskTypeID,
			TaskType.TaskTypeName		
		FROM         
			ProjectTaskTypeRate
			INNER JOIN
			TaskType ON ProjectTaskTypeRate.TaskTypeID = TaskType.TaskTypeId AND ProjectTaskTypeRate.CompanyID = TaskType.DepartmentID 
		WHERE
			ProjectTaskTypeRate.CompanyID = @DepartmentID
			AND
			ProjectTaskTypeRate.ProjectID = @ActualProjectID
			AND
			TaskType.Active = 1
	END
	ELSE
	BEGIN
		SELECT @BillingMethodID = AR.BillingMethodID
		FROM AccountRate AR
		WHERE AR.AccountID = @AccountID AND AR.CompanyID = @DepartmentID
		IF (@BillingMethodID IS NOT NULL) 
		BEGIN	
			SELECT  
				AccountTaskTypeRate.TaskTypeID,   
				TaskType.TaskTypeName		
			FROM         
				AccountTaskTypeRate
			INNER JOIN
				TaskType ON AccountTaskTypeRate.TaskTypeID = TaskType.TaskTypeId AND AccountTaskTypeRate.CompanyID = TaskType.DepartmentID
			
			WHERE
				AccountTaskTypeRate.CompanyID = @DepartmentID
				AND
				TaskType.Active = 1
				AND
				(AccountTaskTypeRate.AccountID = @AccountID
				OR
				(@AccountID IS NULL AND AccountTaskTypeRate.AccountID IS null))
		END
		ELSE 
		BEGIN
			SELECT 0 AS TaskTypeID, '' AS TaskTypeName WHERE 0 = 1
		END
	END
GO
PRINT N'Creating [dbo].[sp_SelectProjectTechs]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectTechs]
	(
		@ProjectID int,
		@CompanyID int
	)
AS

	SELECT     
		tbl_LoginCompanyJunc.id,
		CASE  
			WHEN ProjectTech.TechID IS NULL
				THEN 'All Technicians' 
			ELSE dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) END AS FullName,
		CASE  
			WHEN tbl_LoginCompanyJunc.configHourlyBillableRate IS NULL 
				THEN ISNULL(CAST(dbo.fxGetConfigValueStr(@CompanyID, 'configHourlyBillableRate') as smallmoney), 0) 
			ELSE tbl_LoginCompanyJunc.configHourlyBillableRate END AS HourlyRate,
		ProjectTech.ProjectTechID
	FROM         
		ProjectTech 
	LEFT OUTER JOIN
        tbl_LoginCompanyJunc ON ProjectTech.CompanyID = tbl_LoginCompanyJunc.company_id 
		AND 
        ProjectTech.TechID = tbl_LoginCompanyJunc.id 
	LEFT OUTER JOIN
		tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
	LEFT OUTER JOIN 
		tbl_company ON tbl_LoginCompanyJunc.company_id=tbl_company.company_id
	WHERE
		ProjectTech.ProjectID = @ProjectID
		AND
		ProjectTech.CompanyID = @CompanyID
GO
PRINT N'Creating [dbo].[sp_SelectProjectTicketTimes]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectTicketTimes]
(
	@DId int,
	@Date smalldatetime,
	@ProjectID int,
	@TechID int,
	@AccountID int,
	@TaskTypeId int
)
AS
	SELECT
		t.Id AS TicketID,
		tt.Id,
		tt.Hours,
		tt.HoursRemaining, 
		tt.Note,
		tt.HourlyRate,
		tt.Date,
		tt.StartTime,
		tt.StopTime,
		dbo.fxGetUserName2(lo.FirstName, lo.LastName, lo.Email) AS vchFullName,
		ISNULL(tt.UTCOffset, 0) AS LoggedTimeOffset,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		ISNULL((SELECT TOP 1 ISNULL(vchNote, '') FROM TicketLogs WHERE DId = @DId AND TId = tt.TicketId  AND TicketTimeId = tt.Id ORDER BY Id DESC), '') AS TktLog,
		CAST(t.TicketNumber AS nvarchar(50)) AS TicketNumber,
		ISNULL(t.TotalHours, 0) AS TotalHours,
		CASE 
			WHEN t.intAcctId IS NULL THEN CASE WHEN ISNULL(t.btNoAccount, 0) = 0 THEN
				ISNULL(C.company_name, '') + ' (Internal)'
				ELSE '' END
			ELSE Accounts.vchName
      		END AS AccountName,
		dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS ProjectName,
		ISNULL(t.Subject, '') AS TicketSubject,
		t.RemainingHours AS TicketRemainingHours
	FROM TicketTime tt
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=tt.UserId LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id
		LEFT OUTER JOIN tbl_company C ON tlj.company_id=C.company_id
		LEFT OUTER JOIN TaskType ON tt.TaskTypeId = TaskType.TaskTypeId
		LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id
		LEFT OUTER JOIN Project ON t.company_id = Project.CompanyID AND t.ProjectID = Project.ProjectID
		LEFT OUTER JOIN Accounts ON t.company_id = Accounts.DId AND t.intAcctId = Accounts.Id
	WHERE 
		tt.DepartmentId=@DId
		AND
		(tt.UserId = @TechID OR @TechID = 0)
		AND 
		(tt.TaskTypeId = @TaskTypeId OR @TaskTypeId = 0)
		AND
		(t.ProjectID = @ProjectID OR (@ProjectID = -1 AND t.ProjectId IS NULL) OR @ProjectID = -2)
		AND
		(t.intAcctId = @AccountID 
			OR 
			(@AccountID = -1 AND t.intAcctId IS NULL AND ISNULL(t.btNoAccount, 0)=0 AND 
				(@ProjectID <> -2 OR (@ProjectID = -2 AND 
				(t.ProjectId IS NULL OR t.ProjectId IN (SELECT ProjectID FROM Project WHERE Project.CompanyID = @DId AND (Project.AccountID = @AccountID OR (@AccountID = -1 AND Project.AccountID IS NULL))))))) 
			OR 
			(@ProjectID = -2 AND @AccountID = -2)
			OR 
			(@ProjectID = -2 AND @AccountID <> -2 
				AND 
				t.ProjectId IN (SELECT ProjectID FROM Project WHERE Project.CompanyID = @DId AND (Project.AccountID = @AccountID OR (@AccountID = -1 AND Project.AccountID IS NULL))))
		)
		AND
		tt.Deleted = 0
		AND		
		(@Date IS NULL OR (MONTH(tt.Date) = MONTH(@Date)
		AND
		YEAR(tt.Date) = YEAR(@Date)
		AND
		DAY(tt.Date) = DAY(@Date)))
	ORDER BY t.Id, tt.Date, vchFullName, TaskTypeName
GO
PRINT N'Creating [dbo].[sp_SelectProjectTime]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectTime]
(
		@CompanyID int,
		@ProjectID int,
		@ProjectTimeId int
	)
AS

	SELECT ISNULL(TaskTypeId, 2147483647) AS TaskTypeId,ProjectTime.UserId, Date, Hours, Note, StartTimeUTC, StopTimeUTC, LocalTimeZoneOffset
	FROM ProjectTime
	WHERE 
	ProjectTime.DepartmentId = @CompanyID 
	AND 
	(ProjectTime.ProjectId = @ProjectID OR (@ProjectID = -1 AND ProjectTime.ProjectId IS NULL))
	AND 
	ProjectTime.Id = @ProjectTimeId
GO
PRINT N'Creating [dbo].[sp_SelectProjectTimeByID]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectTimeByID]
(
		@CompanyID int,
		@ProjectTimeId int
)
AS
BEGIN
	
	DECLARE @FBClientId int,
		@FBDefaultProjectId int
		
	SET @FBClientId = CAST(dbo.fxGetConfigValueStr(@CompanyID, 'FBClientId') AS int)
	SET @FBDefaultProjectId = CAST(dbo.fxGetConfigValueStr(@CompanyID, 'FBDefaultProjectId') AS int)
	
	SELECT 
		pt.Id AS projecttimeid,
		ISNULL(pt.TaskTypeId, 0) AS TaskTypeId,
		pt.UserId, 
		pt.Date, 
		pt.Hours, 
		pt.Note, 
		pt.StartTimeUTC, 
		pt.StopTimeUTC, 
		pt.LocalTimeZoneOffset,
		ISNULL(pt.FBTimeEntryID, 0) AS FBTimeEntryID,
        ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
        ISNULL(TaskType.FBTaskTypeID, 0) AS FBTaskTypeID,
        ISNULL(dbo.fxGetUserName2(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email), '') AS user_fullname,
        ISNULL(tbl_LoginCompanyJunc.FBStaffID, 0) AS FBStaffID,
		ISNULL(Accounts.Id, -1) AS AccountID,
		ISNULL(Accounts.vchName, ISNULL(C.company_name, '')) AS AccountName,
		CASE WHEN Accounts.Id IS NULL THEN @FBClientId ELSE ISNULL(Accounts.FBClientId, 0) END AS FBClientId,
		ISNULL(Project.ProjectID, 0) AS ProjectID,
		dbo.fxGetFullProjectName(@CompanyID, ISNULL(Project.ProjectID, 0)) AS ProjectName,
		CASE WHEN Project.ProjectID IS NULL THEN 
			CASE WHEN Accounts.Id IS NULL THEN @FBDefaultProjectId ELSE ISNULL(Accounts.FBDefaultProjectId, 0) END
		ELSE ISNULL(Project.FBProjectID, 0) END AS FBProjectID
	FROM 
		ProjectTime pt
	LEFT OUTER JOIN
		Project ON pt.DepartmentId = Project.CompanyID AND pt.ProjectId = Project.ProjectID
	LEFT OUTER JOIN 
		Accounts ON pt.DepartmentId = Accounts.DId AND ISNULL(Project.AccountID, pt.AccountID) = Accounts.Id
	INNER JOIN 
		tbl_LoginCompanyJunc ON pt.DepartmentId = tbl_LoginCompanyJunc.company_id AND pt.UserId = tbl_LoginCompanyJunc.id 
	INNER JOIN
		tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
	INNER JOIN 
		tbl_company C ON pt.DepartmentId=C.company_id
	LEFT OUTER JOIN
		TaskType ON pt.DepartmentId = TaskType.DepartmentID AND pt.TaskTypeId = TaskType.TaskTypeId
	WHERE 
		pt.DepartmentId = @CompanyID 
		AND 
		pt.Id = @ProjectTimeId
	
END
GO
PRINT N'Creating [dbo].[sp_SelectProjectTimeForInvoice]...';


GO
CREATE  PROCEDURE [dbo].[sp_SelectProjectTimeForInvoice]
		(
		@DId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime,
		@AccountID int,
		@ProjectID int
	)
AS
BEGIN
	DECLARE @btCfgProject bit
	SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	
	SELECT
		pt.Id,
		pt.ProjectId,
		p.Name,
		pt.Hours,
		pt.Note,
		CASE WHEN dbo.fxGetIsTimeLogBillable(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId, pt.TaskTypeId, pt.UserId, 1, 0, 1) <> dbo.fxGetIsTimeLogBillable(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId, pt.TaskTypeId, pt.UserId, 1, 0, 0) THEN -1 ELSE dbo.fxGetTimeLogBillableRate(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId, pt.TaskTypeId, pt.UserId) END AS BillRate,
		pt.Date,
		pt.StartTimeUTC,
		pt.StopTimeUTC,
		ISNULL(pt.LocalTimeZoneOffset, 0) AS LoggedTimeOffset,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) AS TechName,
		ISNULL(p.AccountID, pt.AccountID) AS AccountID,
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(c.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END AS AccountName
	FROM 
		ProjectTime pt		
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=pt.DepartmentId AND tlj.id=pt.UserId 
		LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id
		LEFT OUTER JOIN tbl_company C ON tlj.company_id=C.company_id
		LEFT OUTER JOIN TaskType ON pt.TaskTypeId = TaskType.TaskTypeId
		LEFT OUTER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID
		LEFT OUTER JOIN Accounts ON pt.DepartmentId = Accounts.DId AND ISNULL(p.AccountID, pt.AccountID) = Accounts.Id
	WHERE 
		pt.DepartmentId = @DId 
		AND 
		pt.InvoiceId IS NULL
		AND 
		pt.Deleted = 0
		AND 
		pt.Date >= @BeginDate
		AND 
		pt.Date <= @EndDate
		AND
		ISNULL(ISNULL(p.AccountID, pt.AccountID), -1) = ISNULL(@AccountID, -1)
		AND
			CASE 
				WHEN (dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectID) > 0)
				THEN 
					CASE 
						WHEN (dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectID) = @ProjectID)
						THEN 1 ELSE 0
					END
				ELSE CASE
					WHEN @ProjectID IS NULL
					THEN 1 ELSE 0
				END
			END = 1
		AND
		(dbo.fxGetIsTimeLogBillable(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId, pt.TaskTypeId, pt.UserId, 1, 0, 1) = 1)
		AND
		(@btCfgProject = 1 OR (@btCfgProject <> 1 AND pt.ProjectId IS NULL))
	ORDER BY pt.Date, TaskTypeName
END
GO
PRINT N'Creating [dbo].[sp_SelectProjectTimeList]...';


GO



CREATE PROCEDURE [dbo].[sp_SelectProjectTimeList]
(
	@CompanyID int,
	@ProjectID int,
	@Date smalldatetime,
	@TechID int,
	@AccountID int,
	@TaskTypeId int 	
)
AS

	SELECT ProjectTime.Id AS ProjectTimeId, lo.Title AS user_title, lo.firstname AS user_firstname, lo.lastname AS user_lastname,
		dbo.fxGetUserName2(lo.FirstName, lo.LastName, lo.Email) AS user_fullname, lo.Email AS user_email, ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName, Date, Hours, Note, StartTimeUTC, StopTimeUTC, LocalTimeZoneOffset,
		ProjectTime.BillId, 
		ProjectTime.InvoiceId,
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END AS AccountName,
      	dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID) AS ProjectName,
      	ISNULL(ProjectTime.ProjectId, -1) AS ProjectId,
      	ISNULL(Accounts.Id, -1) AS AccountID,
      	ProjectTime.UserId,
      	ProjectTime.FBTimeEntryID
	FROM ProjectTime 
	INNER JOIN 
		tbl_company ON ProjectTime.DepartmentId = tbl_company.company_id
	LEFT OUTER JOIN 
		TaskType ON ProjectTime.TaskTypeId = TaskType.TaskTypeId
	LEFT OUTER JOIN 
		tbl_LoginCompanyJunc tlj ON tlj.company_Id=ProjectTime.DepartmentId AND tlj.id=ProjectTime.UserId
	LEFT OUTER JOIN 
		tbl_Logins lo ON lo.id=tlj.login_id
	LEFT OUTER JOIN
        Project ON ProjectTime.DepartmentId = Project.CompanyID AND ProjectTime.ProjectId = Project.ProjectID
    LEFT OUTER JOIN 
		Accounts ON ProjectTime.DepartmentId = Accounts.DId AND ISNULL(Project.AccountID, ProjectTime.AccountID) = Accounts.Id
	WHERE 
		ProjectTime.DepartmentId = @CompanyID 
		AND 
		(ProjectTime.ProjectId = @ProjectID 
			OR 
			(@ProjectID = -1 AND ProjectTime.ProjectId IS NULL) 
			OR 
			@ProjectID = -2
		)
		AND
		(ProjectTime.AccountID = @AccountID 
			OR 
			(@AccountID = -1 AND ProjectTime.AccountID IS NULL AND 
				(@ProjectID <> -2 OR (@ProjectID = -2 AND 
				(ProjectTime.ProjectId IS NULL OR ProjectTime.ProjectId IN (SELECT ProjectID FROM Project WHERE Project.CompanyID = @CompanyID AND (Project.AccountID = @AccountID OR (@AccountID = -1 AND Project.AccountID IS NULL))))))) 
			OR 
			(@ProjectID = -2 AND @AccountID = -2)
			OR 
			(@ProjectID = -2 AND @AccountID <> -2 
				AND ProjectTime.ProjectId IN (SELECT ProjectID FROM Project WHERE Project.CompanyID = @CompanyID AND (Project.AccountID = @AccountID OR (@AccountID = -1 AND Project.AccountID IS NULL))))
			
		)
		AND 
		ProjectTime.Deleted = 0
		AND 
		(@Date IS NULL OR (MONTH(ProjectTime.Date) = MONTH(@Date) AND 
		YEAR(ProjectTime.Date) = YEAR(@Date) AND 
		DAY(ProjectTime.Date) = DAY(@Date))) 
		AND 
		(ProjectTime.UserId = @TechID OR @TechID = 0)
		AND 
		(ProjectTime.TaskTypeId = @TaskTypeId OR @TaskTypeId = 0)
	ORDER BY ProjectTime.StartTimeUTC
GO
PRINT N'Creating [dbo].[sp_SelectProjectTotalTime]...';


GO



CREATE PROCEDURE [dbo].[sp_SelectProjectTotalTime]
(
	@CompanyID int,
	@ProjectID int,
	@Time smalldatetime,
	@TechID int,
	@AccountID int 	,
	@TaskTypeId int,
	@TicketAccountID int
)
AS

	SELECT DAY(ProjectTime.Date) AS tDAY, SUM(ProjectTime.Hours) AS TotalHours
	FROM ProjectTime
	WHERE (
		ProjectTime.DepartmentId = @CompanyID 
		AND 
		(ProjectTime.ProjectId = @ProjectID 
			OR 
			(@ProjectID = -1 AND ProjectTime.ProjectId IS NULL) 
			OR 
			@ProjectID = -2
		)
		AND
		(ProjectTime.AccountID = @AccountID 
			OR 
			(@AccountID = -1 AND ProjectTime.AccountID IS NULL
				 AND 
				(@ProjectID <> -2 OR (@ProjectID = -2 AND 
				(ProjectTime.ProjectId IS NULL OR ProjectTime.ProjectId IN (SELECT ProjectID FROM Project WHERE Project.CompanyID = @CompanyID AND (Project.AccountID = @AccountID OR (@AccountID = -1 AND Project.AccountID IS NULL))))))) 
			OR 
			(@ProjectID = -2 AND @AccountID = -2)
			OR 
			(@ProjectID = -2 AND @AccountID <> -2 
				AND 
				ProjectTime.ProjectId IN (SELECT ProjectID FROM Project WHERE Project.CompanyID = @CompanyID AND (Project.AccountID = @AccountID OR (@AccountID = -1 AND Project.AccountID IS NULL))))
		) 
		AND 
		MONTH(ProjectTime.Date) = MONTH(@Time) 
		AND 
		YEAR(ProjectTime.Date) = YEAR(@Time))
		AND 
		(ProjectTime.UserId = @TechID OR @TechID = 0)
		AND 
		(ProjectTime.TaskTypeId = @TaskTypeId OR @TaskTypeId = 0)
		AND 
		ProjectTime.Deleted = 0
	GROUP BY DAY(ProjectTime.Date)
	
	UNION ALL
	
	SELECT
		DAY(tt.Date) AS tDAY,
		SUM(tt.Hours) AS TotalHours
	FROM TicketTime tt
		LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id
	WHERE 
		tt.DepartmentId=@CompanyID
		AND
		(tt.UserId = @TechID OR @TechID = 0)
		AND 
		(tt.TaskTypeId = @TaskTypeId OR @TaskTypeId = 0)
		AND
		(t.ProjectID = @ProjectID 
			OR 
			(@ProjectID = -1 AND t.ProjectId IS NULL) 
			OR 
			@ProjectID = -2
		)
		AND
		(t.intAcctId = @TicketAccountID 
			OR 
			(@TicketAccountID = -1 AND t.intAcctId IS NULL AND ISNULL(t.btNoAccount, 0)=0 AND 
				(@ProjectID <> -2 OR (@ProjectID = -2 AND 
				(t.ProjectId IS NULL OR t.ProjectId IN (SELECT ProjectID FROM Project WHERE Project.CompanyID = @CompanyID AND (Project.AccountID = @TicketAccountID OR (@TicketAccountID = -1 AND Project.AccountID IS NULL))))))) 
			OR 
			@TicketAccountID = -2
			OR 
			(@ProjectID = -2 AND @TicketAccountID = -2)
			OR 
			(@ProjectID = -2 AND @TicketAccountID <> -2 
				AND 
				t.ProjectId IN (SELECT ProjectID FROM Project WHERE Project.CompanyID = @CompanyID AND (Project.AccountID = @TicketAccountID OR (@TicketAccountID = -1 AND Project.AccountID IS NULL))))
		)
		AND
		tt.Deleted = 0
		AND		
		MONTH(tt.Date) = MONTH(@Time)
		AND
		YEAR(tt.Date) = YEAR(@Time)
	GROUP BY DAY(tt.Date)
GO
PRINT N'Creating [dbo].[sp_SelectProjectUsers]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectProjectUsers]
	(
		@ProjectID int,
		@CompanyID int
	)
AS

	SELECT     
		tbl_LoginCompanyJunc.id,
		dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) AS vchFullName,
		UserProjects.Id AS UserProjectsID,
		UserProjects.SubscribeEmail,
		l.Email
	FROM         
		UserProjects 
	INNER JOIN
        tbl_LoginCompanyJunc ON UserProjects.DepartmentId = tbl_LoginCompanyJunc.company_id 
		AND 
        UserProjects.UserId = tbl_LoginCompanyJunc.id 
	INNER JOIN
		tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
	INNER JOIN 
		tbl_company ON tbl_LoginCompanyJunc.company_id=tbl_company.company_id
	WHERE
		UserProjects.ProjectID = @ProjectID
		AND
		UserProjects.DepartmentId = @CompanyID
GO
PRINT N'Creating [dbo].[sp_SelectQueueMembers]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_SelectQueueMembers]
	-- Add the parameters for the stored procedure here
	@DepartmentId int, 
	@QueueId int
AS
BEGIN
	SELECT QM.Id, QM.UserId, L.LastName+ ', ' +L.FirstName as UserName, CASE WHEN (QM.UserId IS NULL) THEN QM.UserEmail ELSE L.Email END AS UserEmail
	FROM QueueMembers AS QM
	LEFT JOIN tbl_LoginCompanyJunc AS LJ ON QM.DepartmentId = LJ.company_id AND LJ.id = QM.UserId
	LEFT JOIN tbl_Logins AS L ON L.id = LJ.login_id
	WHERE DepartmentId = @DepartmentId AND QueueId = @QueueId
	
END
GO
PRINT N'Creating [dbo].[sp_SelectRatePlan]...';


GO
CREATE  PROCEDURE dbo.sp_SelectRatePlan
	(
		@DepartmentID int,
		@RatePlanID int
	)
As
	SELECT RatePlan.Name, TaskType.TaskTypeId, TaskType.TaskTypeName, ISNULL(TaskType.HourlyRate, 0) AS DefHourlyRate, RatePlanRates.HourlyRate, ISNULL(RatePlanRates.Id, 0) AS RatePlanRateID
	FROM RatePlan CROSS JOIN TaskType
	LEFT OUTER JOIN RatePlanRates ON (TaskType.TaskTypeId = RatePlanRates.TaskTypeId AND RatePlan.Id = RatePlanRates.RatePlanId AND RatePlanRates.DepartmentId = @DepartmentID)
	WHERE RatePlan.Id=@RatePlanID AND RatePlan.DepartmentId = @DepartmentID AND TaskType.DepartmentId = @DepartmentID AND TaskType.Active = 1
	ORDER BY TaskType.TaskTypeName
	return
GO
PRINT N'Creating [dbo].[sp_SelectRatePlanName]...';


GO
CREATE Procedure [dbo].[sp_SelectRatePlanName]
	(
		@DepartmentID int,
		@RatePlanID int
	)
As
	SELECT RatePlan.Name
	FROM RatePlan
	WHERE RatePlan.Id=@RatePlanID AND RatePlan.DepartmentId = @DepartmentID	
	return
GO
PRINT N'Creating [dbo].[sp_SelectRatePlans]...';


GO
CREATE Procedure [dbo].[sp_SelectRatePlans]
(
		@DepartmentID int
)
As
	SELECT * FROM RatePlan WHERE DepartmentId = @DepartmentID
	return
GO
PRINT N'Creating [dbo].[sp_SelectReportAccCosts]...';


GO
CREATE PROCEDURE dbo.sp_SelectReportAccCosts
	@DId int,
	@dtStart datetime,
	@dtEnd datetime
AS

IF @dtStart IS NULL AND @dtEnd IS NULL
	SELECT ISNULL(acc.Id, 0) AS AccountId, ISNULL(MAX(acc.vchName), '(Unassigned Tickets)') AS AccountName, SUM(tt.Hours) AS TimeSpent, SUM(tkt.LaborCost) AS LaborCost,  SUM(tkt.PartsCost) AS PartsCost, SUM(tkt.MiscCost) AS MiscCost, SUM(tkt.TravelCost) AS TravelCost
	FROM tbl_ticket tkt LEFT OUTER JOIN TicketTime tt ON tkt.Id = tt.TicketId LEFT OUTER JOIN Accounts acc ON tkt.intAcctId = acc.Id
	WHERE tkt.company_id=@DId
	GROUP BY acc.Id
ELSE IF @dtStart IS NULL AND NOT @dtEnd IS NULL
	SELECT ISNULL(acc.Id, 0) AS AccountId, ISNULL(MAX(acc.vchName), '(Unassigned Tickets)') AS AccountName, SUM(tt.Hours) AS TimeSpent, SUM(tkt.LaborCost) AS LaborCost,  SUM(tkt.PartsCost) AS PartsCost, SUM(tkt.MiscCost) AS MiscCost, SUM(tkt.TravelCost) AS TravelCost
	FROM tbl_ticket tkt LEFT OUTER JOIN TicketTime tt ON tkt.Id = tt.TicketId LEFT OUTER JOIN Accounts acc ON tkt.intAcctId = acc.Id
	WHERE tkt.company_id=@DId AND tkt.ClosedTime<=@dtEnd
	GROUP BY acc.Id
ELSE IF NOT @dtStart IS NULL AND @dtEnd IS NULL
	SELECT ISNULL(acc.Id, 0) AS AccountId, ISNULL(MAX(acc.vchName), '(Unassigned Tickets)') AS AccountName, SUM(tt.Hours) AS TimeSpent, SUM(tkt.LaborCost) AS LaborCost,  SUM(tkt.PartsCost) AS PartsCost, SUM(tkt.MiscCost) AS MiscCost, SUM(tkt.TravelCost) AS TravelCost
	FROM tbl_ticket tkt LEFT OUTER JOIN TicketTime tt ON tkt.Id = tt.TicketId LEFT OUTER JOIN Accounts acc ON tkt.intAcctId = acc.Id
	WHERE tkt.company_id=@DId AND tkt.ClosedTime>=@dtStart
	GROUP BY acc.Id
ELSE
	SELECT ISNULL(acc.Id, 0) AS AccountId, ISNULL(MAX(acc.vchName), '(Unassigned Tickets)') AS AccountName, SUM(tt.Hours) AS TimeSpent, SUM(tkt.LaborCost) AS LaborCost,  SUM(tkt.PartsCost) AS PartsCost, SUM(tkt.MiscCost) AS MiscCost, SUM(tkt.TravelCost) AS TravelCost
	FROM tbl_ticket tkt LEFT OUTER JOIN TicketTime tt ON tkt.Id = tt.TicketId LEFT OUTER JOIN Accounts acc ON tkt.intAcctId = acc.Id
	WHERE tkt.company_id=@DId AND tkt.ClosedTime BETWEEN @dtStart AND @dtEnd
	GROUP BY acc.Id
GO
PRINT N'Creating [dbo].[sp_SelectReportAccMiscCosts]...';


GO
CREATE PROCEDURE sp_SelectReportAccMiscCosts
	@DId int,
	@AId int,
	@dtStart datetime,
	@dtEnd datetime
AS

IF @dtStart IS NULL AND @dtEnd IS NULL
	SELECT tkt.TicketNumber AS TicketNumber, tmc.Note AS Note, SUM(tmc.Amount) AS Amount, COUNT(tmc.Note) AS Count
	FROM TicketMiscCosts tmc 
	INNER JOIN tbl_ticket tkt ON tkt.Id = tmc.TicketId 
	WHERE tkt.company_id=@DId AND ISNULL(tkt.intAcctId, 0)=@AId
	GROUP BY tkt.TicketNumber, tmc.Note
	ORDER BY tkt.TicketNumber
ELSE IF @dtStart IS NULL AND NOT @dtEnd IS NULL
	SELECT tkt.TicketNumber AS TicketNumber, tmc.Note AS Note, SUM(tmc.Amount) AS Amount, COUNT(tmc.Note) AS Count
	FROM TicketMiscCosts tmc 
	INNER JOIN tbl_ticket tkt ON tkt.Id = tmc.TicketId 
	WHERE tkt.company_id=@DId AND ISNULL(tkt.intAcctId, 0)=@AId AND tkt.ClosedTime<=@dtEnd
	GROUP BY tkt.TicketNumber, tmc.Note
	ORDER BY tkt.TicketNumber
ELSE IF NOT @dtStart IS NULL AND @dtEnd IS NULL
	SELECT tkt.TicketNumber AS TicketNumber, tmc.Note AS Note, SUM(tmc.Amount) AS Amount, COUNT(tmc.Note) AS Count
	FROM TicketMiscCosts tmc 
	INNER JOIN tbl_ticket tkt ON tkt.Id = tmc.TicketId 
	WHERE tkt.company_id=@DId AND ISNULL(tkt.intAcctId, 0)=@AId AND tkt.ClosedTime>=@dtStart
	GROUP BY tkt.TicketNumber, tmc.Note
	ORDER BY tkt.TicketNumber
ELSE
	SELECT tkt.TicketNumber AS TicketNumber, tmc.Note AS Note, SUM(tmc.Amount) AS Amount, COUNT(tmc.Note) AS Count
	FROM TicketMiscCosts tmc 
	INNER JOIN tbl_ticket tkt ON tkt.Id = tmc.TicketId 
	WHERE tkt.company_id=@DId AND ISNULL(tkt.intAcctId, 0)=@AId AND tkt.ClosedTime BETWEEN @dtStart AND @dtEnd
	GROUP BY tkt.TicketNumber, tmc.Note
	ORDER BY tkt.TicketNumber
GO
PRINT N'Creating [dbo].[sp_SelectReportAccTechTimeDetail]...';


GO
CREATE PROCEDURE dbo.sp_SelectReportAccTechTimeDetail
	@DId int,
	@AId int,
	@TId int,
	@dtStart datetime,
	@dtEnd datetime
AS

IF @dtStart IS NULL AND @dtEnd IS NULL
	SELECT t.TicketId AS TicketId, t.Hours AS Hours, t.Date, t.Note AS Note, t.HourlyRate AS Rate, tkt.TicketNumber
	FROM TicketTime t
	LEFT OUTER JOIN tbl_ticket tkt ON tkt.id=t.TicketId
	WHERE tkt.company_id=@DId AND t.UserId = @TId  AND ISNULL(tkt.intAcctId, 0)=@AId
ELSE IF @dtStart IS NULL AND NOT @dtEnd IS NULL
	SELECT t.TicketId AS TicketId, t.Hours AS Hours, t.Date, t.Note AS Note, t.HourlyRate AS Rate, tkt.TicketNumber
	FROM TicketTime t
	LEFT OUTER JOIN tbl_ticket tkt ON tkt.id=t.TicketId
	WHERE tkt.company_id=@DId AND t.UserId = @TId  AND ISNULL(tkt.intAcctId, 0)=@AId  AND tkt.ClosedTime<=@dtEnd
ELSE IF NOT @dtStart IS NULL AND @dtEnd IS NULL
	SELECT t.TicketId AS TicketId, t.Hours AS Hours, t.Date, t.Note AS Note, t.HourlyRate AS Rate, tkt.TicketNumber
	FROM TicketTime t
	LEFT OUTER JOIN tbl_ticket tkt ON tkt.id=t.TicketId
	WHERE tkt.company_id=@DId AND t.UserId = @TId  AND ISNULL(tkt.intAcctId, 0)=@AId AND tkt.ClosedTime>=@dtStart
ELSE
	SELECT t.TicketId AS TicketId, t.Hours AS Hours, t.Date, t.Note AS Note, t.HourlyRate AS Rate, tkt.TicketNumber
	FROM TicketTime t
	LEFT OUTER JOIN tbl_ticket tkt ON tkt.id=t.TicketId
	WHERE tkt.company_id=@DId AND t.UserId = @TId  AND ISNULL(tkt.intAcctId, 0)=@AId AND tkt.ClosedTime BETWEEN @dtStart AND @dtEnd
GO
PRINT N'Creating [dbo].[sp_SelectReportAccTimeSpentCosts]...';


GO
CREATE PROCEDURE dbo.sp_SelectReportAccTimeSpentCosts
	@DId int,
	@AId int,
	@dtStart datetime,
	@dtEnd datetime
AS

IF @dtStart IS NULL AND @dtEnd IS NULL
	SELECT lj.id AS TechId, l.LastName+', '+l.FirstName AS Tech, SUM(tt.Hours) AS Hours, SUM(tt.HourlyRate) AS Rate, SUM(tt.Hours * tt.HourlyRate) AS Cost
	FROM tbl_ticket tkt 
	LEFT OUTER JOIN TicketTime tt ON tkt.Id = tt.TicketId 
	LEFT OUTER JOIN tbl_LoginCompanyJunc lj ON tt.UserId = lj.id
	LEFT OUTER JOIN tbl_Logins l ON lj.login_id=l.id 
	WHERE tkt.company_id=@DId AND ISNULL(tkt.intAcctId, 0)=@AId AND (lj.UserType_id = 2 OR lj.UserType_id = 3)
	GROUP BY lj.Id, l.LastName, l.FirstName
	ORDER BY l.LastName, l.FirstName
ELSE IF @dtStart IS NULL AND NOT @dtEnd IS NULL
	SELECT lj.id AS TechId, l.LastName+', '+l.FirstName AS Tech, SUM(tt.Hours) AS Hours, SUM(tt.HourlyRate) AS Rate, SUM(tt.Hours * tt.HourlyRate) AS Cost
	FROM tbl_ticket tkt 
	LEFT OUTER JOIN TicketTime tt ON tkt.Id = tt.TicketId 
	LEFT OUTER JOIN tbl_LoginCompanyJunc lj ON tt.UserId = lj.id
	LEFT OUTER JOIN tbl_Logins l ON lj.login_id=l.id 
	WHERE tkt.company_id=@DId AND ISNULL(tkt.intAcctId, 0)=@AId AND (lj.UserType_id = 2 OR lj.UserType_id = 3) AND tkt.ClosedTime<=@dtEnd
	GROUP BY lj.Id, l.LastName, l.FirstName
	ORDER BY l.LastName, l.FirstName
ELSE IF NOT @dtStart IS NULL AND @dtEnd IS NULL
	SELECT lj.id AS TechId, l.LastName+', '+l.FirstName AS Tech, SUM(tt.Hours) AS Hours, SUM(tt.HourlyRate) AS Rate, SUM(tt.Hours * tt.HourlyRate) AS Cost
	FROM tbl_ticket tkt 
	LEFT OUTER JOIN TicketTime tt ON tkt.Id = tt.TicketId 
	LEFT OUTER JOIN tbl_LoginCompanyJunc lj ON tt.UserId = lj.id
	LEFT OUTER JOIN tbl_Logins l ON lj.login_id=l.id 
	WHERE tkt.company_id=@DId AND ISNULL(tkt.intAcctId, 0)=@AId AND (lj.UserType_id = 2 OR lj.UserType_id = 3) AND tkt.ClosedTime>=@dtStart
	GROUP BY lj.Id, l.LastName, l.FirstName
	ORDER BY l.LastName, l.FirstName
ELSE
	SELECT lj.id AS TechId, l.LastName+', '+l.FirstName AS Tech, SUM(tt.Hours) AS Hours, SUM(tt.HourlyRate) AS Rate, SUM(tt.Hours * tt.HourlyRate) AS Cost
	FROM tbl_ticket tkt 
	LEFT OUTER JOIN TicketTime tt ON tkt.Id = tt.TicketId 
	LEFT OUTER JOIN tbl_LoginCompanyJunc lj ON tt.UserId = lj.id
	LEFT OUTER JOIN tbl_Logins l ON lj.login_id=l.id 
	WHERE tkt.company_id=@DId AND ISNULL(tkt.intAcctId, 0)=@AId AND (lj.UserType_id = 2 OR lj.UserType_id = 3) AND tkt.ClosedTime BETWEEN @dtStart AND @dtEnd
	GROUP BY lj.Id, l.LastName, l.FirstName
	ORDER BY l.LastName, l.FirstName
GO
PRINT N'Creating [dbo].[sp_SelectReportAltTechnicianStandard]...';


GO
CREATE Procedure [dbo].[sp_SelectReportAltTechnicianStandard]
(
		@DepartmentId int,
		@StartDate datetime,
		@EndDate datetime,
		@WorkDays char(7),
		@btSLA bit,
		@Active bit
	)
As

IF @btSLA=1
BEGIN
	DECLARE @StartBusinnessTime int
	DECLARE @EndBusinnessTime int
	SELECT @StartBusinnessTime = CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStart') as tinyint)*60 + CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStart') as tinyint), @EndBusinnessTime = CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStop') as tinyint)*60 + CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStop') as tinyint)
			
	IF @WorkDays IS NULL SET @WorkDays = '1111100'
	IF @StartBusinnessTime IS NULL SET @StartBusinnessTime = 0
	IF @EndBusinnessTime IS NULL SET @EndBusinnessTime = 1439
END

	
	SELECT TechId, MAX(FullName) AS FullName, SUM(OpenCount) AS OpenCount, SUM(ClosedCount) AS ClosedCount, SUM(HoldCount) AS HoldCount, SUM(PartsCount) AS PartsCount, AVG(cast(AvgOpen as bigint)) AS AvgOpen, AVG(cast(AvgClosed as bigint)) AS AvgClosed, AVG(cast(AvgHold as bigint)) AS AvgHold, AVG(cast(AvgParts as bigint)) AS AvgParts, '' as CreatedCount, '' as AvgCreated 
	FROM (SELECT LJ.id AS TechId, MAX(dbo.fxGetUserName(L.FirstName, L.LastName, L.Email)) AS FullName, 
	SUM(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS OpenCount, 
	SUM(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS ClosedCount, 
	SUM(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS HoldCount,  
	SUM(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS PartsCount, 
	ISNULL(AVG(cast(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END as bigint)),0) AS AvgOpen,  
	ISNULL(AVG(cast(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, T.ClosedTime, @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END as bigint)),0) AS AvgClosed, 
	ISNULL(AVG(cast(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END as bigint)),0) AS AvgHold, 
	ISNULL(AVG(cast(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END as bigint)),0) AS AvgParts
	FROM tbl_LoginCompanyJunc LJ
	LEFT JOIN tbl_Ticket T on T.Id in (select TicketId from TicketAssignment where LJ.id = UserId AND DepartmentId = T.company_id AND AssignmentType = 2 AND IsPrimary = 0 AND StopDate IS NULL AND NOT T.Technician_id = UserId)
	LEFT JOIN tbl_Logins L ON LJ.login_id = L.id 
	WHERE 
		T.company_id=@DepartmentId 
		AND LJ.company_id = @DepartmentId 
		AND (LJ.UserType_id = 2 OR LJ.UserType_id = 3) 
		AND NOT LJ.btUserInactive = @Active
	GROUP BY LJ.id) AS S 
	GROUP BY TechId
GO
PRINT N'Creating [dbo].[sp_SelectReportAverages]...';


GO
CREATE  PROCEDURE [dbo].[sp_SelectReportAverages]
	@DepartmentId int,
	@dtStart datetime,
	@dtEnd datetime,
	@btSLA bit
AS

DECLARE @Averages TABLE
(
  [AverageName] nvarchar(50),
  [Value] int
)

IF @btSLA=1
BEGIN
	DECLARE @WorkHourStart int,
		@WorkMinStart int,
		@WorkHourEnd int,
		@WorkMinEnd int
		
	SET @WorkHourStart=CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStart') AS int)
	SET @WorkMinStart=CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStart') AS int)
	SET @WorkHourEnd=CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStop') AS int) 
	SET @WorkMinEnd=CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStop') AS int)
	
	INSERT INTO @Averages ([AverageName], [Value])
		SELECT 'Open {0}', AVG(dbo.fxGetRealTicketTime(@DepartmentId,CreateTime, getutcdate(), @WorkHourStart, @WorkMinStart, @WorkHourEnd, @WorkMinEnd)) FROM tbl_ticket WHERE company_id = @DepartmentId AND status = 'Open' AND CreateTime BETWEEN @dtStart AND @dtEnd

	INSERT INTO @Averages ([AverageName], [Value])
		SELECT 'Closed {0}', AVG(dbo.fxGetRealTicketTime(@DepartmentId,CreateTime,ClosedTime, @WorkHourStart, @WorkMinStart, @WorkHourEnd, @WorkMinEnd)) FROM tbl_ticket WHERE company_id = @DepartmentId AND status = 'Closed' AND CreateTime BETWEEN @dtStart AND @dtEnd

	INSERT INTO @Averages ([AverageName], [Value])
		SELECT 'Awaiting Parts', AVG(dbo.fxGetRealTicketTime(@DepartmentId,CreateTime, getutcdate(), @WorkHourStart, @WorkMinStart, @WorkHourEnd, @WorkMinEnd)) FROM tbl_ticket WHERE company_id = @DepartmentId AND status = 'Parts On Order' AND CreateTime BETWEEN @dtStart AND @dtEnd

	INSERT INTO @Averages ([AverageName], [Value])
		SELECT 'On Hold', AVG(dbo.fxGetRealTicketTime(@DepartmentId,CreateTime, getutcdate(), @WorkHourStart, @WorkMinStart, @WorkHourEnd, @WorkMinEnd)) FROM tbl_ticket WHERE company_id = @DepartmentId AND status = 'On Hold' AND CreateTime BETWEEN @dtStart AND @dtEnd
END
ELSE
BEGIN
	INSERT INTO @Averages ([AverageName], [Value])
		SELECT 'Open {0}', AVG(DATEDIFF(minute, createtime, getutcdate())) FROM tbl_ticket WHERE company_id = @DepartmentId AND status = 'Open' AND CreateTime BETWEEN @dtStart AND @dtEnd

	INSERT INTO @Averages ([AverageName], [Value])
		SELECT 'Closed {0}', AVG(DATEDIFF(minute, createtime, closedtime)) FROM tbl_ticket WHERE company_id = @DepartmentId AND status = 'Closed' AND CreateTime BETWEEN @dtStart AND @dtEnd

	INSERT INTO @Averages ([AverageName], [Value])
		SELECT 'Awaiting Parts', AVG(DATEDIFF(minute, createtime, getutcdate())) FROM tbl_ticket WHERE company_id = @DepartmentId AND status = 'Parts On Order' AND CreateTime BETWEEN @dtStart AND @dtEnd

	INSERT INTO @Averages ([AverageName], [Value])
		SELECT 'On Hold', AVG(DATEDIFF(minute, createtime, getutcdate())) FROM tbl_ticket WHERE company_id = @DepartmentId AND status = 'On Hold' AND CreateTime BETWEEN @dtStart AND @dtEnd
END
select * from @Averages
GO
PRINT N'Creating [dbo].[sp_SelectReportCategoryStandard]...';


GO
CREATE Procedure dbo.sp_SelectReportCategoryStandard
	(
		@DepartmentId int,
		@StartDate datetime,
		@EndDate datetime,
		@WorkDays char(7),
		@btSLA bit
	)
As

DECLARE @TempTechReport1 TABLE (CreationCatsId int, TicketCount int, status varchar(15), AvgAge bigint)
IF @btSLA=1
BEGIN
	DECLARE @StartBusinnessTime int
	DECLARE @EndBusinnessTime int
	SELECT @StartBusinnessTime = CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStart') as tinyint)*60 + CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStart') as tinyint), @EndBusinnessTime = CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStop') as tinyint)*60 + CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStop') as tinyint)
			
	IF @WorkDays IS NULL SET @WorkDays = '1111100'
	IF @StartBusinnessTime IS NULL SET @StartBusinnessTime = 0
	IF @EndBusinnessTime IS NULL SET @EndBusinnessTime = 1439
	
	INSERT INTO @TempTechReport1 SELECT CreationCatsId, count(id) as TicketCount, status, AVG(CAST(dbo.fxGetOperationalMinutes(@DepartmentId,CreateTime, getutcdate(),@WorkDays, @StartBusinnessTime, @EndBusinnessTime) AS bigint)) as AvgAge
	FROM tbl_ticket
	WHERE company_id = @DepartmentId AND status <> 'Closed' AND CreateTime BETWEEN @StartDate AND @EndDate
	GROUP BY CreationCatsId, status

	INSERT INTO @TempTechReport1 SELECT CreationCatsId, count(id) as TicketCount, status, AVG(CAST(dbo.fxGetOperationalMinutes(@DepartmentId,CreateTime, ClosedTime, @WorkDays, @StartBusinnessTime, @EndBusinnessTime) AS bigint)) as AvgAge
	FROM tbl_ticket
	WHERE company_id = @DepartmentId AND status = 'Closed' AND ClosedTime BETWEEN @StartDate AND @EndDate
	GROUP BY CreationCatsId, status
END
ELSE
BEGIN	
	INSERT INTO @TempTechReport1 SELECT CreationCatsId, count(id) as TicketCount, status, AVG(CAST(DATEDIFF(minute, createtime, getutcdate()) AS bigint)) as AvgAge
	FROM tbl_ticket
	WHERE company_id = @DepartmentId AND status <> 'Closed' AND CreateTime BETWEEN @StartDate AND @EndDate
	GROUP BY CreationCatsId, status

	INSERT INTO @TempTechReport1 SELECT CreationCatsId, count(id) as TicketCount, status, AVG(CAST(DATEDIFF(minute, createtime, closedtime) AS bigint)) as AvgAge
	FROM tbl_ticket
	WHERE company_id = @DepartmentId AND status = 'Closed' AND ClosedTime BETWEEN @StartDate AND @EndDate
	GROUP BY CreationCatsId, status
END

	SELECT C.vchName as Name, C.id, 
		(SELECT TicketCount FROM @TempTechReport1 WHERE CreationCatsId = C.id AND status = 'Open') AS OpenCount,
		(SELECT TicketCount FROM @TempTechReport1 WHERE CreationCatsId = C.id AND status = 'Closed') AS ClosedCount,
		(SELECT TicketCount FROM @TempTechReport1 WHERE CreationCatsId = C.id AND status = 'On Hold') AS HoldCount,
		(SELECT TicketCount FROM @TempTechReport1 WHERE CreationCatsId = C.id AND status = 'Parts On Order') AS PartsCount,
		(SELECT AvgAge FROM @TempTechReport1 WHERE CreationCatsId = C.id AND status = 'Open') AS AvgOpen,
		(SELECT AvgAge FROM @TempTechReport1 WHERE CreationCatsId = C.id AND status = 'Closed') AS AvgClosed,
		(SELECT AvgAge FROM @TempTechReport1 WHERE CreationCatsId = C.id AND status = 'On Hold') AS AvgHold,
		(SELECT AvgAge FROM @TempTechReport1 WHERE CreationCatsId = C.id AND status = 'Parts On Order') AS AvgParts
		FROM CreationCats C WHERE C.DId = @DepartmentId 
	UNION SELECT '(NO CATEGORY)', '0',
		(SELECT TicketCount FROM @TempTechReport1 WHERE CreationCatsId is null AND status = 'Open') AS OpenCount,
		(SELECT TicketCount FROM @TempTechReport1 WHERE CreationCatsId is null AND status = 'Closed') AS ClosedCount,
		(SELECT TicketCount FROM @TempTechReport1 WHERE CreationCatsId is null AND status = 'On Hold') AS HoldCount,
		(SELECT TicketCount FROM @TempTechReport1 WHERE CreationCatsId is null AND status = 'Parts On Order') AS PartsCount,
		(SELECT AvgAge FROM @TempTechReport1 WHERE CreationCatsId is null AND status = 'Open') AS AvgOpen,
		(SELECT AvgAge FROM @TempTechReport1 WHERE CreationCatsId is null AND status = 'Closed') AS AvgClosed,
		(SELECT AvgAge FROM @TempTechReport1 WHERE CreationCatsId is null AND status = 'On Hold') AS AvgHold,
		(SELECT AvgAge FROM @TempTechReport1 WHERE CreationCatsId is null AND status = 'Parts On Order') AS AvgParts
	ORDER BY C.vchName
GO
PRINT N'Creating [dbo].[sp_SelectReportClassStandard]...';


GO
CREATE Procedure dbo.sp_SelectReportClassStandard
	(
		@DepartmentId int,
		@StartDate datetime,
		@EndDate datetime,
		@ClassLevel tinyint,
		@WorkDays char(7),
		@btSLA bit
	)
As
	DECLARE @TempTechReport1 TABLE (GroupId int, TicketCount int, Status varchar(15), AvgAge bigint)
	DECLARE @TempTechReport2 TABLE (GroupId int, TicketCount int, Status varchar(15), AvgAge bigint)
	IF @btSLA=1
	BEGIN
		DECLARE @StartBusinnessTime int
		DECLARE @EndBusinnessTime int
		SELECT @StartBusinnessTime = CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStart') as tinyint)*60 + CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStart') as tinyint), @EndBusinnessTime = CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStop') as tinyint)*60 + CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStop') as tinyint)
				
		IF @WorkDays IS NULL SET @WorkDays = '1111100'
		IF @StartBusinnessTime IS NULL SET @StartBusinnessTime = 0
		IF @EndBusinnessTime IS NULL SET @EndBusinnessTime = 1439
	
		INSERT @TempTechReport1 SELECT C.GroupId, Count(T.Id) as TicketCount, T.status, AVG(CAST(dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) AS bigint)) as AvgAge
		FROM tbl_ticket T
		LEFT OUTER JOIN dbo.fxMapClassesByLevel(@DepartmentId, @ClassLevel) C ON T.class_id=C.Id
		WHERE T.company_id = @DepartmentId AND T.status <> 'Closed' AND T.CreateTime BETWEEN @StartDate AND @EndDate
		GROUP BY C.GroupId, T.status

		INSERT @TempTechReport2 SELECT C.GroupId, Count(T.Id) as TicketCount, T.status, AVG(CAST(dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, T.ClosedTime, @WorkDays, @StartBusinnessTime, @EndBusinnessTime) AS bigint)) as AvgAge
		FROM tbl_ticket T
		LEFT OUTER JOIN dbo.fxMapClassesByLevel(@DepartmentId, @ClassLevel) C ON T.class_id=C.Id
		WHERE T.company_id = @DepartmentId AND T.status = 'Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate
		GROUP BY C.GroupId, T.status
	END
	ELSE
	BEGIN
		INSERT @TempTechReport1 SELECT C.GroupId, Count(T.Id) as TicketCount, T.status, AVG(CAST(DATEDIFF(minute, T.createtime, getutcdate()) AS bigint)) as AvgAge
		FROM tbl_ticket T
		LEFT OUTER JOIN dbo.fxMapClassesByLevel(@DepartmentId, @ClassLevel) C ON T.class_id=C.Id
		WHERE T.company_id = @DepartmentId AND T.status <> 'Closed' AND T.CreateTime BETWEEN @StartDate AND @EndDate
		GROUP BY C.GroupId, T.status

		INSERT @TempTechReport2 SELECT C.GroupId, Count(T.Id) as TicketCount, T.status, AVG(CAST(DATEDIFF(minute, T.createtime, T.closedtime) AS bigint)) as AvgAge
		FROM tbl_ticket T
		LEFT OUTER JOIN dbo.fxMapClassesByLevel(@DepartmentId, @ClassLevel) C ON T.class_id=C.Id
		WHERE T.company_id = @DepartmentId AND T.status = 'Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate
		GROUP BY C.GroupId, T.status
	END

	SELECT C.Name, C.GroupId AS Id, 
		(SELECT TicketCount FROM @TempTechReport1 WHERE GroupId = C.GroupId AND status = 'Open') AS OpenCount,
		(SELECT TicketCount FROM @TempTechReport2 WHERE GroupId = C.GroupId AND status = 'Closed') AS ClosedCount,
		(SELECT TicketCount FROM @TempTechReport1 WHERE GroupId = C.GroupId AND status = 'On Hold') AS HoldCount,
		(SELECT TicketCount FROM @TempTechReport1 WHERE GroupId = C.GroupId AND status = 'Parts On Order') AS PartsCount,
		(SELECT AvgAge FROM @TempTechReport1 WHERE GroupId = C.GroupId AND status = 'Open') AS AvgOpen,
		(SELECT AvgAge FROM @TempTechReport2 WHERE GroupId = C.GroupId AND status = 'Closed') AS AvgClosed,
		(SELECT AvgAge FROM @TempTechReport1 WHERE GroupId = C.GroupId AND status = 'On Hold') AS AvgHold,
		(SELECT AvgAge FROM @TempTechReport1 WHERE GroupId = C.GroupId AND status = 'Parts On Order') AS AvgParts
		FROM (SELECT  GroupId, Name FROM dbo.fxMapClassesByLevel(@DepartmentId, @ClassLevel) GROUP BY GroupId, Name) C 
	UNION SELECT '(NO CLASS)', '0',
		(SELECT TicketCount FROM @TempTechReport1 WHERE GroupId is null AND status = 'Open') AS OpenCount,
		(SELECT TicketCount FROM @TempTechReport2 WHERE GroupId is null AND status = 'Closed') AS ClosedCount,
		(SELECT TicketCount FROM @TempTechReport1 WHERE GroupId is null AND status = 'On Hold') AS HoldCount,
		(SELECT TicketCount FROM @TempTechReport1 WHERE GroupId is null AND status = 'Parts On Order') AS PartsCount,
		(SELECT AvgAge FROM @TempTechReport1 WHERE GroupId is null AND status = 'Open') AS AvgOpen,
		(SELECT AvgAge FROM @TempTechReport2 WHERE GroupId is null AND status = 'Closed') AS AvgClosed,
		(SELECT AvgAge FROM @TempTechReport1 WHERE GroupId is null AND status = 'On Hold') AS AvgHold,
		(SELECT AvgAge FROM @TempTechReport1 WHERE GroupId is null AND status = 'Parts On Order') AS AvgParts
	ORDER BY C.Name
GO
PRINT N'Creating [dbo].[sp_SelectReportFilters]...';


GO
CREATE Procedure dbo.sp_SelectReportFilters
	(
		@DId int,
		@UId int,
		@ReportType tinyint,
		@Id int = null
	)
As
	IF @Id IS NULL
		SELECT * FROM ReportFilters WHERE DId=@DId  AND UId=@UId AND ReportType=@ReportType ORDER BY Name
	ELSE
		SELECT * FROM ReportFilters WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_SelectReportLocationStandard]...';


GO
CREATE Procedure dbo.sp_SelectReportLocationStandard
	(
		@DepartmentId int,
		@LocationTypeId int,
		@StartDate datetime,
		@EndDate datetime,
		@WorkDays char(7),
		@btSLA bit
	)
As
-- MRUDKOVSKI: 09-JAN-2006 - Ticket #3130 - upgraded the location report 
-- added the CreatedCount and AvgCreated parameters
-- also got rid of the temporary tables and speed up building the report

IF @btSLA=1
BEGIN
	DECLARE @StartBusinnessTime int
	DECLARE @EndBusinnessTime int
	SELECT @StartBusinnessTime = CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStart') as tinyint)*60 + CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStart') as tinyint), @EndBusinnessTime = CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStop') as tinyint)*60 + CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStop') as tinyint)
			
	IF @WorkDays IS NULL SET @WorkDays = '1111100'
	IF @StartBusinnessTime IS NULL SET @StartBusinnessTime = 0
	IF @EndBusinnessTime IS NULL SET @EndBusinnessTime = 1439
		
	SELECT Name, Id, SUM(OpenCount) AS OpenCount, SUM(ClosedCount) AS ClosedCount, SUM(HoldCount) AS HoldCount, SUM(PartsCount) AS PartsCount, AVG(AvgOpen) AS AvgOpen, AVG(AvgClosed) AS AvgClosed, AVG(AvgHold) AS AvgHold, AVG(AvgParts) AS AvgParts, SUM(CreatedCount) AS CreatedCount, AVG(AvgCreated) AS AvgCreated 
	FROM (
	SELECT ISNULL(LC.GroupId, -@LocationTypeId) as Id, ISNULL(LC.Name, '(ANOTHER LOCATIONS)') as Name, 
		SUM(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS OpenCount, 
		SUM(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS ClosedCount, 
		SUM(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS HoldCount,  
		SUM(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS PartsCount, 
		ISNULL(AVG(CAST(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END AS bigint)),0) AS AvgOpen,  
		ISNULL(AVG(CAST(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, T.ClosedTime, @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END AS bigint)),0) AS AvgClosed, 
		ISNULL(AVG(CAST(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END AS bigint)),0) AS AvgHold, 
		ISNULL(AVG(CAST(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END AS bigint)),0) AS AvgParts, 
		SUM(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS CreatedCount,   
		ISNULL(AVG(CAST(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime,ISNULL(T.closedtime, getutcdate()), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END AS bigint)),0) AS AvgCreated 
	FROM fxMapLocationsByType(@DepartmentId, NULL, NULL, @LocationTypeId,NULL) LC 
	LEFT OUTER JOIN tbl_Ticket T ON T.company_id=@DepartmentId AND T.LocationId=LC.Id
	WHERE T.company_id = @DepartmentId 
	GROUP BY ISNULL(LC.GroupId, -@LocationTypeId), ISNULL(LC.Name, '(ANOTHER LOCATIONS)')
	
	UNION ALL
	
	SELECT ISNULL(T.LocationId, 0) as Id, MAX('(NO LOCATION)') as Name, 
		SUM(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS OpenCount, 
		SUM(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS ClosedCount, 
		SUM(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS HoldCount,  
		SUM(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS PartsCount, 
		ISNULL(AVG(CAST(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END AS bigint)),0) AS AvgOpen,  
		ISNULL(AVG(CAST(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, T.ClosedTime, @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END AS bigint)),0) AS AvgClosed, 
		ISNULL(AVG(CAST(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END AS bigint)),0) AS AvgHold, 
		ISNULL(AVG(CAST(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END AS bigint)),0) AS AvgParts, 
		SUM(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS CreatedCount,   
		ISNULL(AVG(CAST(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime,ISNULL(T.closedtime, getutcdate()), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END AS bigint)),0) AS AvgCreated 
	FROM tbl_Ticket T 
	WHERE T.company_id = @DepartmentId AND T.LocationId IS NULL
	GROUP BY ISNULL(T.LocationId, 0)
	) AS S
	GROUP BY Id, Name
END
ELSE
BEGIN
	SELECT Name, Id, SUM(OpenCount) AS OpenCount, SUM(ClosedCount) AS ClosedCount, SUM(HoldCount) AS HoldCount, SUM(PartsCount) AS PartsCount, AVG(AvgOpen) AS AvgOpen, AVG(AvgClosed) AS AvgClosed, AVG(AvgHold) AS AvgHold, AVG(AvgParts) AS AvgParts, SUM(CreatedCount) AS CreatedCount, AVG(AvgCreated) AS AvgCreated 
	FROM (
	SELECT ISNULL(LC.GroupId, -@LocationTypeId) as Id, ISNULL(LC.Name, '(ANOTHER LOCATIONS)') as Name, 
	SUM(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS OpenCount, 
	SUM(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS ClosedCount, 
	SUM(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS HoldCount,  
	SUM(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS PartsCount, 
	ISNULL(AVG(CAST(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, getutcdate()) ELSE NULL END AS bigint)),0) AS AvgOpen,  
	ISNULL(AVG(CAST(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, T.closedtime) ELSE NULL END AS bigint)),0) AS AvgClosed, 
	ISNULL(AVG(CAST(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, getutcdate()) ELSE NULL END AS bigint)),0) AS AvgHold, 
	ISNULL(AVG(CAST(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, getutcdate()) ELSE NULL END AS bigint)),0) AS AvgParts, 
	SUM(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS CreatedCount,   
	ISNULL(AVG(CAST(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, ISNULL(T.closedtime, getutcdate())) ELSE NULL END AS bigint)),0) AS AvgCreated 
	FROM fxMapLocationsByType(@DepartmentId, NULL, NULL, @LocationTypeId,NULL) LC 
	LEFT OUTER JOIN tbl_Ticket T ON T.company_id=@DepartmentId AND T.LocationId=LC.Id
	WHERE T.company_id = @DepartmentId 
	GROUP BY ISNULL(LC.GroupId, -@LocationTypeId), ISNULL(LC.Name, '(ANOTHER LOCATIONS)')
	UNION ALL
	SELECT ISNULL(T.LocationId, 0) as Id, MAX('(NO LOCATION)') as Name, 
	SUM(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS OpenCount, 
	SUM(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS ClosedCount, 
	SUM(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS HoldCount,  
	SUM(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS PartsCount, 
	ISNULL(AVG(CAST(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, getutcdate()) ELSE NULL END AS bigint)),0) AS AvgOpen,  
	ISNULL(AVG(CAST(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, T.closedtime) ELSE NULL END AS bigint)),0) AS AvgClosed, 
	ISNULL(AVG(CAST(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, getutcdate()) ELSE NULL END AS bigint)),0) AS AvgHold, 
	ISNULL(AVG(CAST(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, getutcdate()) ELSE NULL END AS bigint)),0) AS AvgParts, 
	SUM(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS CreatedCount,   
	ISNULL(AVG(CAST(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, ISNULL(T.closedtime, getutcdate())) ELSE NULL END AS bigint)),0) AS AvgCreated 
	FROM tbl_Ticket T 
	WHERE T.company_id = @DepartmentId AND T.LocationId IS NULL
	GROUP BY ISNULL(T.LocationId, 0)
	) AS S
	GROUP BY Id, Name
END
return
GO
PRINT N'Creating [dbo].[sp_SelectReportTechCheckIn]...';


GO
CREATE Procedure [dbo].[sp_SelectReportTechCheckIn]
	(
		@DId int
	)
As
	SELECT lcj.id, l.FirstName, l.LastName, lcj.CheckinStatus, l.Email
	FROM tbl_LoginCompanyJunc lcj
	JOIN tbl_Logins l ON l.id=lcj.login_id
	WHERE (lcj.UserType_Id=2 OR lcj.UserType_Id=3) AND lcj.company_id=@DId and lcj.btUserInactive = 0
	ORDER BY l.LastName, l.FirstName
	return
GO
PRINT N'Creating [dbo].[sp_SelectReportTechnicianStandard]...';


GO
CREATE Procedure [dbo].[sp_SelectReportTechnicianStandard]
(
		@DepartmentId int,
		@StartDate datetime,
		@EndDate datetime,
		@WorkDays char(7),
		@btSLA bit,
		@Active bit
	)
As
	--VGOOZ 27-AUG-2005: tkt #2820 - Tickets CREATED by Tech Report
	--Improved stored procedure performance, removed using temporary tables. 
IF @btSLA=1
BEGIN
	DECLARE @StartBusinnessTime int
	DECLARE @EndBusinnessTime int
	SELECT @StartBusinnessTime = CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStart') as tinyint)*60 + CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStart') as tinyint), @EndBusinnessTime = CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusHourStop') as tinyint)*60 + CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'tinyBusMinStop') as tinyint)
			
	IF @WorkDays IS NULL SET @WorkDays = '1111100'
	IF @StartBusinnessTime IS NULL SET @StartBusinnessTime = 0
	IF @EndBusinnessTime IS NULL SET @EndBusinnessTime = 1439
	
	SELECT TechId, MAX(FullName) AS FullName, SUM(OpenCount) AS OpenCount, SUM(ClosedCount) AS ClosedCount, SUM(HoldCount) AS HoldCount, SUM(PartsCount) AS PartsCount, AVG(cast(AvgOpen as bigint)) AS AvgOpen, AVG(cast(AvgClosed as bigint)) AS AvgClosed, AVG(cast(AvgHold as bigint)) AS AvgHold, AVG(cast(AvgParts as bigint)) AS AvgParts, SUM(CreatedCount) AS CreatedCount, AVG(cast(AvgCreated as bigint)) AS AvgCreated 
	FROM (SELECT LJ.id AS TechId, MAX(dbo.fxGetUserName(L.FirstName, L.LastName, L.Email)) AS FullName, 
	SUM(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS OpenCount, 
	SUM(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS ClosedCount, 
	SUM(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS HoldCount,  
	SUM(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS PartsCount, 
	ISNULL(AVG(cast(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END as bigint)),0) AS AvgOpen,  
	ISNULL(AVG(cast(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, T.ClosedTime, @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END as bigint)),0) AS AvgClosed, 
	ISNULL(AVG(cast(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END as bigint)),0) AS AvgHold, 
	ISNULL(AVG(cast(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime, getutcdate(), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END as bigint)),0) AS AvgParts, NULL AS CreatedCount, NULL AS AvgCreated
	FROM tbl_LoginCompanyJunc LJ
	INNER JOIN tbl_Logins L ON LJ.login_id = L.id 
	LEFT OUTER JOIN tbl_Ticket T ON T.company_id=@DepartmentId AND T.technician_id=LJ.id 
	WHERE LJ.company_id = @DepartmentId AND (LJ.UserType_id = 2 OR LJ.UserType_id = 3) AND NOT LJ.btUserInactive = @Active 
	GROUP BY LJ.id
	UNION ALL
	SELECT LJ.id AS TechId, MAX(dbo.fxGetUserName(L.FirstName, L.LastName, L.Email)) AS FullName, NULL AS OpenCount, NULL AS ClosedCount, NULL AS HoldCount, NULL AS PartsCount, NULL AS AvgOpen, NULL AS AvgClosed, NULL AS AvgHold, NULL AS AvgParts, 
	SUM(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS CreatedCount,   
	ISNULL(AVG(cast(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN dbo.fxGetOperationalMinutes(@DepartmentId,T.CreateTime,ISNULL(T.closedtime, getutcdate()), @WorkDays, @StartBusinnessTime, @EndBusinnessTime) ELSE NULL END as bigint)),0) AS AvgCreated 
	FROM tbl_LoginCompanyJunc LJ
	INNER JOIN tbl_Logins L ON LJ.login_id = L.id 
	LEFT OUTER JOIN tbl_Ticket T ON T.company_id=@DepartmentId AND T.User_id=LJ.id 
	WHERE LJ.company_id = @DepartmentId AND (LJ.UserType_id = 2 OR LJ.UserType_id = 3) AND NOT LJ.btUserInactive = @Active
	GROUP BY LJ.id) AS S 
	GROUP BY TechId
END
ELSE
BEGIN
	SELECT TechId, MAX(FullName) AS FullName, SUM(OpenCount) AS OpenCount, SUM(ClosedCount) AS ClosedCount, SUM(HoldCount) AS HoldCount, SUM(PartsCount) AS PartsCount, AVG(cast(AvgOpen as bigint)) AS AvgOpen, AVG(cast(AvgClosed as bigint)) AS AvgClosed, AVG(cast(AvgHold as bigint)) AS AvgHold, AVG(cast(AvgParts as bigint)) AS AvgParts, SUM(CreatedCount) AS CreatedCount, AVG(AvgCreated) AS AvgCreated 
	FROM (SELECT LJ.id AS TechId, MAX(dbo.fxGetUserName(L.FirstName, L.LastName, L.Email)) AS FullName, 
	SUM(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS OpenCount, 
	SUM(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS ClosedCount, 
	SUM(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS HoldCount,  
	SUM(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS PartsCount, 
	ISNULL(AVG(cast(CASE WHEN T.status='Open' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, getutcdate()) ELSE NULL END as bigint)),0) AS AvgOpen,  
	ISNULL(AVG(cast(CASE WHEN T.status='Closed' AND T.ClosedTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, T.closedtime) ELSE NULL END as bigint)),0) AS AvgClosed, 
	ISNULL(AVG(cast(CASE WHEN T.status='On Hold' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, getutcdate()) ELSE NULL END as bigint)),0) AS AvgHold, 
	ISNULL(AVG(cast(CASE WHEN T.status='Parts On Order' AND T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, getutcdate()) ELSE NULL END as bigint)),0) AS AvgParts, NULL AS CreatedCount, NULL AS AvgCreated
	FROM tbl_LoginCompanyJunc LJ
	INNER JOIN tbl_Logins L ON LJ.login_id = L.id 
	LEFT OUTER JOIN tbl_Ticket T ON T.company_id=@DepartmentId AND T.technician_id=LJ.id 
	WHERE LJ.company_id = @DepartmentId AND (LJ.UserType_id = 2 OR LJ.UserType_id = 3) AND NOT LJ.btUserInactive = @Active 
	GROUP BY LJ.id
	UNION ALL
	SELECT LJ.id AS TechId, MAX(dbo.fxGetUserName(L.FirstName, L.LastName, L.Email)) AS FullName, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
	SUM(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) AS CreatedCount,   
	ISNULL(AVG(cast(CASE WHEN T.CreateTime BETWEEN @StartDate AND @EndDate THEN DATEDIFF(minute, T.createtime, ISNULL(T.closedtime, getutcdate())) ELSE NULL END as bigint)),0) AS AvgCreated 
	FROM tbl_LoginCompanyJunc LJ
	INNER JOIN tbl_Logins L ON LJ.login_id = L.id 
	LEFT OUTER JOIN tbl_Ticket T ON T.company_id=@DepartmentId AND T.User_id=LJ.id 
	WHERE LJ.company_id = @DepartmentId AND (LJ.UserType_id = 2 OR LJ.UserType_id = 3) AND NOT LJ.btUserInactive = @Active 
	GROUP BY LJ.id) AS S 
	GROUP BY TechId
END
GO
PRINT N'Creating [dbo].[sp_SelectReportTechTime]...';


GO
CREATE Procedure [dbo].[sp_SelectReportTechTime]
	(
		@DId int,
		@StartDate datetime,
		@EndDate datetime
	)
As
	SELECT LJ.id, dbo.fxGetUserName(L.FirstName, L.LastName, L.Email) AS FullName, sum(TT.Hours) AS Hours, sum(TT.Hours * TT.HourlyRate) AS TotalCharges
	FROM tbl_LoginCompanyJunc LJ
	LEFT OUTER JOIN TicketTime TT ON TT.UserId = LJ.id AND TT.Deleted = 0
	LEFT OUTER JOIN tbl_Logins L ON L.id = LJ.login_id
	WHERE LJ.company_id = @DId AND (LJ.UserType_id = 2 OR LJ.UserType_id = 3) AND TT.Date BETWEEN @StartDate AND @EndDate
	GROUP BY LJ.id, L.LastName, L.FirstName, L.Email
	ORDER BY dbo.fxGetUserName(L.FirstName, L.LastName, L.Email)
	return
GO
PRINT N'Creating [dbo].[sp_SelectReportTechTimeDetail]...';


GO
CREATE Procedure dbo.sp_SelectReportTechTimeDetail
	(
		@DId int,
		@TechId int,
		@StartDate smalldatetime,
		@EndDate smalldatetime
	)
As
	SELECT t.TicketId, t.Hours, t.Date, t.Note, t.HourlyRate, tkt.TicketNumber, ISNULL(tkt.TicketNumberPrefix,'')+CAST(tkt.TicketNumber AS nvarchar(10)) AS TicketNumberFull, tkt.Status
	FROM TicketTime t
	LEFT OUTER JOIN tbl_ticket tkt ON tkt.company_id=@DId AND tkt.id=t.TicketId
	WHERE t.UserId = @TechId AND t.Date BETWEEN @StartDate AND @EndDate
		AND
		t.Deleted = 0
	return
GO
PRINT N'Creating [dbo].[sp_SelectResolutions]...';


GO

--VGOOZ: 18-NOV-2004
--Select Resolutions List

CREATE Procedure dbo.sp_SelectResolutions
	(
		@DId int,
		@Id int = null,
		@btResolved int = null, 
		@btInactive bit = null
	)

As
	IF @Id IS NULL
		IF @btResolved IS NULL	
			IF @btInactive IS NULL
				SELECT id, vchName as Name, btInactive, btResolved FROM ResolutionCats WHERE DId = @DId ORDER BY btResolved, vchName
			ELSE
				SELECT id, vchName as Name, btInactive, btResolved FROM ResolutionCats WHERE DId = @DId AND btInactive=@btInactive ORDER BY btResolved, vchName
		ELSE
			IF @btInactive IS NULL
				SELECT id, vchName as Name, btInactive, btResolved FROM ResolutionCats WHERE DId = @DId AND btResolved = @btResolved ORDER BY vchName
			ELSE
				SELECT id, vchName as Name, btInactive, btResolved FROM ResolutionCats WHERE DId = @DId AND btResolved = @btResolved AND btInactive=@btInactive ORDER BY vchName
	ELSE
		SELECT res.id, res.vchName as Name, res.btInactive, res.btResolved, res.intCreated,  lo1.FirstName+' '+lo1.LastName as CreatedBy, dtCreated, intUpdatedBy, lo2.FirstName+' '+lo2.LastName as UpdatedBy, dtUpdated 
		FROM ResolutionCats res
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj1 ON tlj1.company_id=@DId AND tlj1.id=res.intCreated LEFT JOIN tbl_Logins lo1 ON lo1.id=tlj1.login_id
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj2 ON tlj2.company_id=@DId AND tlj2.id=res.intUpdatedBy LEFT JOIN tbl_Logins lo2 ON lo2.id=tlj2.login_id
		WHERE res.Id = @Id
	return
GO
PRINT N'Creating [dbo].[sp_SelectRetainersForInvoice]...';


GO



CREATE  PROCEDURE [dbo].[sp_SelectRetainersForInvoice]
	(
		@DId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime,
		@AccountID int,
		@ProjectID int
	)
AS
BEGIN
	DECLARE @btCfgProject bit
	SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	
	IF @ProjectID IS NULL
	 BEGIN
		SELECT
			dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) AS FullName,
			dbo.fxGetRetainerAmount(@DId, aret.AccountId, NULL, aret.TechId, @BeginDate, @EndDate) AS Amount, 
			aret.StartDate AS TechStart, 
			aret.EndDate AS TechEnd, 
			dbo.fxGetProjectLoggedHours(@DId, aret.AccountId, NULL, @BeginDate, @EndDate, aret.TechId) AS LoggedHours, 
			dbo.fxGetProjectTimeLogsCount(@DId, aret.AccountId, NULL, @BeginDate, @EndDate, aret.TechId) AS LogsCount, 
			aret.Amount AS FullAmount,
			ar.FlatFeeNextDate AS FlatFeeNextDate
		FROM 
			AccountRetainer aret
			INNER JOIN 
					AccountRate ar ON aret.DId = ar.CompanyID AND ISNULL(aret.AccountId, -1) = ISNULL(ar.AccountID, -1)
			LEFT OUTER JOIN
				tbl_LoginCompanyJunc ON aret.DId = tbl_LoginCompanyJunc.company_id 
				AND 
				aret.TechId = tbl_LoginCompanyJunc.id 
				LEFT OUTER JOIN
					tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
		WHERE 
			aret.DId = @DId 
			AND ar.BillingMethodID = 4			
			AND ar.FlatFeeNextDate IS NOT NULL
			AND ar.FlatFeeNextDate >= @BeginDate
			AND ar.FlatFeeNextDate <= @EndDate
			AND (dbo.fxGetRetainerAmount(@DId, aret.AccountId, NULL, aret.TechId, @BeginDate, @EndDate) >= 0)
			AND ISNULL(aret.AccountID, -1) = ISNULL(@AccountID, -1)	
	 END
	ELSE
	 BEGIN
		SELECT	
			dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) AS FullName,
			dbo.fxGetRetainerAmount(@DId, p.AccountID, pr.ProjectId, pr.TechId, @BeginDate, @EndDate) AS Amount, 
			pr.StartDate AS TechStart, 
			pr.EndDate AS TechEnd, 
			dbo.fxGetProjectLoggedHours(@DId, p.AccountID, pr.ProjectId, @BeginDate, @EndDate, pr.TechId) AS LoggedHours, 
			dbo.fxGetProjectTimeLogsCount(@DId, p.AccountID, pr.ProjectId, @BeginDate, @EndDate, pr.TechId) AS LogsCount, 
			pr.Amount AS FullAmount,
			p.FlatFeeNextDate AS FlatFeeNextDate
		FROM
			ProjectRetainer pr
				INNER JOIN Project p ON pr.DId = p.CompanyID AND pr.ProjectId = p.ProjectID
			LEFT OUTER JOIN
				tbl_LoginCompanyJunc ON pr.DId = tbl_LoginCompanyJunc.company_id 
				AND 
				pr.TechId = tbl_LoginCompanyJunc.id 
				LEFT OUTER JOIN
					tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
		WHERE 
			pr.DId = @DId 
			AND p.BillingMethodID = 4
			AND p.FlatFeeNextDate IS NOT NULL
			AND p.FlatFeeNextDate >= @BeginDate
			AND p.FlatFeeNextDate <= @EndDate
			AND dbo.fxGetRetainerAmount(@DId, p.AccountID, pr.ProjectId, pr.TechId, @BeginDate, @EndDate) >= 0						
			AND pr.ProjectId = @ProjectID	
			AND @btCfgProject = 1	
	 END
END
GO
PRINT N'Creating [dbo].[sp_SelectRouting]...';


GO
CREATE    PROCEDURE [dbo].[sp_SelectRouting]
	(
		@DId int,
		@ClassId int,
		@LocationId int,
		@intReturnTech int = NULL OUTPUT,
		@tintLevel tinyint = NULL OUTPUT,
		@btAllowLvlReset bit = 0,
		@intAcctId int = NULL,
		@intAcctLocId int = NULL,
		@intErrCode int = 0 OUTPUT
	)
AS
	/*
	>0 - all okay
	-1 - Input level is not setup for this class.
	-2 - No routing option turned on Choose Tech Only
	-3 - No Routes Found
	-4 - Level Does not exist
	-5 - Route Found but Tech could not be returned
	*/
	
	
	DECLARE @configLVL bit
	DECLARE @configTechCheckin bit
	DECLARE @tintRoutingOrder tinyint
	DECLARE @configClassTracking bit
	DECLARE @configLocationTracking bit
	DECLARE @btCfgAcctMngr bit
	DECLARE @btAcctRtOvr bit
	DECLARE @tintAcctRtOvrLevel tinyint
	DECLARE @tintAcctRtOvrOption tinyint
	DECLARE @tintAcctRtOvrRouteType tinyint

	SELECT @btCfgAcctMngr = dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr')
	SELECT @configLocationTracking = dbo.fxGetConfigValueBit(@DId, 'configLocationTracking')
	SELECT @configClassTracking = dbo.fxGetConfigValueBit(@DId, 'configClassTracking')
	SELECT @configTechCheckin = dbo.fxGetConfigValueBit(@DId, 'configTechCheckin')
	SELECT @configLVL = dbo.fxGetConfigValueBit(@DId, 'configLVL')
	SELECT @tintAcctRtOvrRouteType = CAST(dbo.fxGetConfigValueStr(@DId, 'tintAcctRtOvrRouteType') as tinyint)
	SELECT @btAcctRtOvr = dbo.fxGetConfigValueBit(@DId, 'btAcctRtOvr')
	SELECT @tintAcctRtOvrLevel = CAST(dbo.fxGetConfigValueStr(@DId, 'tintAcctRtOvrLevel') as tinyint)
	SELECT @tintAcctRtOvrOption = CAST(dbo.fxGetConfigValueStr(@DId, 'tintAcctRtOvrOption') as tinyint)
	SELECT @tintRoutingOrder = CAST(dbo.fxGetConfigValueStr(@DId, 'tintRoutingOrder') as tinyint)
	
	IF @configClassTracking = 0
		SET @ClassId = null
		
	IF @configLocationTracking = 0
		SET @LocationId = null
		
	IF @btCfgAcctMngr = 0
		SET @btCfgAcctMngr = null
	
	IF @configLvl = 0 AND @ClassId IS NULL AND @LocationId IS NULL AND @intAcctId IS NULL
		BEGIN
			SET @intErrCode = -2
			RETURN -2
		END
	
	IF @configLvl = 1
		IF @tintLevel IS NOT NULL AND NOT EXISTS(SELECT 'true' FROM TktLevels WHERE DId=@DId and tintLevel=@tintLevel)
			BEGIN
				SET @intErrCode = -4
				RETURN -4
			END
		ELSE IF @tintLevel IS NULL AND NOT EXISTS(SELECT 'true' FROM TktLevels WHERE DId=@DId)
			BEGIN
				SET @intErrCode = -4
				RETURN -4
			END
			
	DECLARE @ClassParentId int
	DECLARE @TempClassId int
	
	IF @configLVL = 0
		SET @tintLevel = null
	ELSE
		IF @tintLevel IS NULL
		BEGIN
			IF @tintLevel is null AND @ClassId is not null
			BEGIN
				SET @TempClassId=NULL
				SET @ClassParentId=@ClassId
				WHILE NOT @ClassParentId IS NULL
				BEGIN
					SELECT @TempClassId=id, @tintLevel=tintLevelOverride, @ClassParentId=ParentId FROM tbl_class WHERE company_id=@DId AND Id=@ClassParentId
					IF @TempClassId IS NULL
						BREAK
					IF @tintLevel IS NOT NULL
					BEGIN
						SET @btAllowLvlReset = 1
						BREAK
					END
					IF @TempClassId=@ClassParentId
						BREAK
				END
			END
				
			IF @tintLevel is null
				BEGIN
					SET @tintLevel = (SELECT TOP 1 tintLevel FROM TktLevels WHERE DId=@DId AND bitDefault=1)
					IF @tintLevel IS NOT NULL
						SET @btAllowLvlReset = 1
				END
			
			IF @tintLevel is null
				SET @tintLevel = 1	
		END
	
	IF @intReturnTech IS NOT NULL
		return @intReturnTech
	
	DECLARE @TempTable TABLE (user_id int NOT NULL)
	DECLARE @tintRoutingType tinyint
	DECLARE @intLastResortId int
	DECLARE @tintRoutingMethod tinyint
	DECLARE @RouteFound bit
	SET @RouteFound = 0
	
	DECLARE @TblRouteOrder TABLE (tintOrder tinyint NOT NULL, tintRoute tinyint NOT NULL)
	DECLARE @btClass bit
	DECLARE @btLocation bit
	DECLARE @btLevel bit
	DECLARE @btAccount bit
	DECLARE @tintCurRouteOrder tinyint
	DECLARE @tintCurRoute tinyint
	DECLARE @AcctSupGroup int
	
	SET @tintCurRouteOrder = 1 /*Default starting order*/
	
	IF @ClassId IS NULL
		SET @btClass = 0
	ELSE
		SET @btClass = 1
		
	IF @LocationId IS NULL
		SET @btLocation = 0
	ELSE
		SET @btLocation = 1
		
	IF @tintLevel IS NULL
		SET @btLevel = 0
	ELSE
		SET @btLevel = 1
	
	
	
	
	INSERT INTO @TblRouteOrder SELECT tintOrder, tintRoute FROM fxRoutingOrder(@DId,@btClass,@btLocation,@btLevel,@btCfgAcctMngr)
	
	Start:
	SET @tintCurRoute = (SELECT TOP 1 tintRoute FROM @TblRouteOrder WHERE tintOrder >=@tintCurRouteOrder)
	
	IF @tintCurRoute = 1
		GoTo ByClass
	
	IF @tintCurRoute = 2
		GoTo ByLocation
		
	IF @tintCurRoute = 3
		GoTo ByGlobalEscalation
		
	IF @tintCurRoute = 4
		GoTo ByAccount
		
	IF @tintCurRoute IS NULL
		Goto EndRoute
	
	DECLARE @ParentId int
	DECLARE @TempLocationId int
	DECLARE @LocationRouteLevelId int
	
	ByAccount:
	IF @intAcctId IS NOT NULL AND @btCfgAcctMngr=1
		BEGIN

			SET @intLastResortId = (SELECT AcctRepId FROM Accounts WHERE DId=@DId AND Id=@intAcctId)
			
			IF @intAcctLocId IS NOT NULL
			BEGIN
				SET @TempLocationId=NULL
				SET @ParentId=@intAcctLocId
				WHILE NOT @ParentId IS NULL
				BEGIN
					SELECT @TempLocationId=Id, @ParentId=ParentId FROM Locations WHERE DId=@DId AND Id=@ParentId AND AccountId=@intAcctId
					IF @TempLocationId IS NULL
						BREAK
					IF EXISTS(SELECT 'true' FROM LocationRouteLevels WHERE DId=@DId AND LocationId=@TempLocationId AND TicketLevel=ISNULL(@tintLevel,1))
					BEGIN
						SET @RouteFound=1
						SELECT @LocationRouteLevelId=Id, @tintRoutingType=TechPoolType, @intLastResortId=LastResortTechId, @tintRoutingMethod=RoutingMethod FROM LocationRouteLevels WHERE DId=@DId AND LocationId=@TempLocationId AND TicketLevel=ISNULL(@tintLevel,1)
						IF @tintRoutingType=3 /*Use Global Escalation Settings*/
							INSERT INTO @TempTable SELECT id FROM tbl_LoginCompanyJunc lj WHERE lj.company_id=@DId AND lj.tintLevel=ISNULL(@tintLevel,1) AND lj.btUserInactive=0
						ELSE
							INSERT INTO @TempTable SELECT TechId FROM LocationRouteLevelTechs WHERE DId=@DId AND LocationRouteLevelId=@LocationRouteLevelId
						BREAK
					END
					IF @TempLocationId=@ParentId
						BREAK
				END
				IF @RouteFound=1
					GOTO EndRoute
			END

			DECLARE @TempTintLevel tinyint
			IF @tintLevel IS NULL
				SET @TempTintLevel=1
			ELSE
				SET @TempTintLevel=@tintLevel
				
			
			IF EXISTS(SELECT 'true' FROM AccountLevels WHERE DId=@DId AND AcctId=@intAcctId AND tintLevel=@TempTintLevel)
				BEGIN
					DECLARE @tintAcctLvlRtOption tinyint
					SET @tintAcctLvlRtOption = (SELECT tintRoutingOption FROM AccountLevels WHERE DId=@DId AND AcctId=@intAcctId AND tintLevel=@TempTintLevel)
				
					SET @RouteFound=1
					
					/*IF @tintAcctLvlRtOption = 0 AND @intLastResortId IS NOT NULL  - Set to Default Acct Rep*/
						
					
					IF @tintAcctLvlRtOption = 1 /*Route to Sup Group - Least Tickets*/
						BEGIN
							SET @tintRoutingMethod = 0 /*Least # Tickets*/
							SET @AcctSupGroup = (SELECT SupGroupId FROM Accounts WHERE DId=@DId AND id=@intAcctId)
							INSERT INTO @TempTable SELECT id FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND SupGroupId=@AcctSupGroup AND btUserInactive=0
						END
						
					IF @tintAcctLvlRtOption = 2 /*Route to Sup Group - Distributed*/
						BEGIN
							SET @tintRoutingMethod = 1 /*Distributed*/
							SET @AcctSupGroup = (SELECT SupGroupId FROM Accounts WHERE DId=@DId AND id=@intAcctId)
							INSERT INTO @TempTable SELECT id FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND SupGroupId=@AcctSupGroup AND btUserInactive=0
						END
						
					IF @tintAcctLvlRtOption = 3 /*Route to Pool of Techs - Least*/
						BEGIN
							SET @tintRoutingMethod = 0 /*Least # Tickets*/
							INSERT INTO @TempTable SELECT UId FROM AccountLevelTechs WHERE DId=@DId AND AcctId=@intAcctId AND tintLevel=@TempTintLevel
						END
						
					IF @tintAcctLvlRtOption = 4 /*Route to Pool of Techs - Dist*/
						BEGIN
							SET @tintRoutingMethod = 1 /*Distributed*/
							INSERT INTO @TempTable SELECT UId FROM AccountLevelTechs WHERE DId=@DId AND AcctId=@intAcctId AND tintLevel=@TempTintLevel
						END			
				END
			
			
			IF @RouteFound=0
				BEGIN
					IF @btLevel = 1
						BEGIN
							IF @btAcctRtOvr = 1 AND @tintAcctRtOvrLevel = @tintLevel
								BEGIN
									IF @tintAcctRtOvrOption=0
										BEGIN
											IF @intLastResortId IS NOT NULL
												SET @RouteFound=1	
										END
									ELSE
										BEGIN
											SET @tintRoutingMethod=@tintAcctRtOvrRouteType
											SET @AcctSupGroup = (SELECT SupGroupId FROM Accounts WHERE DId=@DId AND id=@intAcctId)
											INSERT INTO @TempTable SELECT id FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND SupGroupId=@AcctSupGroup AND btUserInactive=0
											SET @RouteFound=1	
										END
								END
							
						END
					ELSE /*@btLevel=0*/
						BEGIN
							IF @btAcctRtOvr = 1
								BEGIN
									IF @tintAcctRtOvrOption=0
										BEGIN
											IF @intLastResortId IS NOT NULL
												SET @RouteFound=1	
										END
									ELSE
										BEGIN
											SET @tintRoutingMethod=@tintAcctRtOvrRouteType
											SET @AcctSupGroup = (SELECT SupGroupId FROM Accounts WHERE DId=@DId AND id=@intAcctId)
											INSERT INTO @TempTable SELECT id FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND SupGroupId=@AcctSupGroup AND btUserInactive=0
											SET @RouteFound=1	
										END
								END
						END
				END
		END
	
	
	IF @RouteFound=1
		GoTo EndRoute
	ELSE
		BEGIN
			SET @tintCurRouteOrder=@tintCurRouteOrder+1
			Goto Start
		END
	/*End Account Routing*/
	
	ByClass:
	DECLARE @tempLastResortId int
	IF @tintLevel is null OR @tintLevel = 1
		BEGIN
			SET @TempClassId=NULL
			SET @ClassParentId=@ClassId
			WHILE NOT @ClassParentId IS NULL
			BEGIN
				SELECT @TempClassId=id, @tintRoutingType=tintClassType, @tempLastResortId=LastResortTechId, @tintRoutingMethod=configDistributedRouting, @ClassParentId=ParentId FROM tbl_class WHERE company_id=@DId AND id=@ClassParentId
				IF @TempClassId IS NULL
					BREAK
				SET @RouteFound = 1
				IF @intLastResortId IS NULL
					SET @intLastResortId=@tempLastResortId					
				IF @tintRoutingType=0 AND EXISTS(SELECT 'true' FROM tbl_ClassTechnicianJctn WHERE class_id=@TempClassId)
				BEGIN
					INSERT INTO @TempTable SELECT LoginCompanyJunc_id FROM tbl_ClassTechnicianJctn WHERE class_id=@TempClassId
					BREAK
				END
				ELSE IF @tintRoutingType=1 AND EXISTS(SELECT 'true' FROM tbl_ClassTechnicianJctn WHERE class_id=@TempClassId)
				BEGIN
					SET @TempLocationId=NULL
					SET @ParentId=@LocationId
					WHILE NOT @ParentId IS NULL
					BEGIN
						SELECT @TempLocationId=Id, @ParentId=ParentId FROM Locations WHERE DId=@DId AND Id=@ParentId
						IF @TempLocationId IS NULL
							BREAK	
						IF EXISTS(SELECT 'true' FROM tbl_ClassTechnicianJctn WHERE class_id=@TempClassId AND LocationId=@TempLocationId)
						BEGIN
							INSERT INTO @TempTable SELECT LoginCompanyJunc_id FROM tbl_ClassTechnicianJctn WHERE class_id=@TempClassId AND LocationId=@TempLocationId
							SET @ClassParentId=NULL --Break Parent WHILE
							BREAK
						END
						IF @TempLocationId=@ParentId
							BREAK
					END
					--if locations are defined for class but not found breack search and return LastResortTechId for selected class 
					IF NOT @intLastResortId IS NULL AND NOT @ClassParentId IS NULL
						SET @ClassParentId=NULL --Break Parent WHILE
				END
				ELSE IF @tintRoutingType=2
				BEGIN
					SET @TempLocationId=NULL
					SET @ParentId=@LocationId
					WHILE NOT @ParentId IS NULL
					BEGIN
						SELECT @TempLocationId=Id, @ParentId=ParentId FROM Locations WHERE DId=@DId AND Id=@ParentId
						IF @TempLocationId IS NULL
							BREAK
						IF EXISTS(SELECT 'true' FROM LocationRouteLevels WHERE DId=@DId AND LocationId=@TempLocationId AND TicketLevel=ISNULL(@tintLevel,1))
						BEGIN
							SELECT @LocationRouteLevelId=Id, @tintRoutingType=TechPoolType, @intLastResortId=LastResortTechId, @tintRoutingMethod=RoutingMethod FROM LocationRouteLevels WHERE DId=@DId AND LocationId=@TempLocationId AND TicketLevel=ISNULL(@tintLevel,1)
							IF @tintRoutingType=3 /*Use Global Escalation Settings*/
								INSERT INTO @TempTable SELECT id FROM tbl_LoginCompanyJunc lj WHERE lj.company_id=@DId AND lj.tintLevel=ISNULL(@tintLevel,1) AND lj.btUserInactive=0
							ELSE
								INSERT INTO @TempTable SELECT TechId FROM LocationRouteLevelTechs WHERE DId=@DId AND LocationRouteLevelId=@LocationRouteLevelId
							SET @ClassParentId=NULL --Break Parent WHILE	
							BREAK
						END
						IF @TempLocationId=@ParentId
							BREAK
					END
				END
				ELSE IF @tintRoutingType=3 AND EXISTS(SELECT 'true' FROM tbl_LoginCompanyJunc lj WHERE lj.company_id=@DId AND lj.tintLevel=@tintLevel AND lj.btUserInactive=0)
				BEGIN
					INSERT INTO @TempTable SELECT id FROM tbl_LoginCompanyJunc lj WHERE lj.company_id=@DId AND lj.tintLevel=@tintLevel AND lj.btUserInactive=0
					BREAK
				END
				IF @TempClassId=@ClassParentId
					BREAK
			END
		END		
	ELSE /*if level is greater than 1*/
		BEGIN
			SET @TempClassId=NULL
			SET @ClassParentId=@ClassId
			WHILE NOT @ClassParentId IS NULL
			BEGIN
				SELECT @TempClassId=id, @ClassParentId=ParentId FROM tbl_class WHERE company_id=@DId AND Id=@ClassParentId
				IF @TempClassId IS NULL
					BREAK
				IF EXISTS(SELECT 'true' FROM ClassLevels WHERE DId=@DId AND ClassId=@TempClassId AND tintLevel=@tintLevel)
				BEGIN
					SET @RouteFound = 1
					SELECT @tintRoutingType=tintClassType, @tempLastResortId=intLastResortId, @tintRoutingMethod=tintDistributedRouting FROM ClassLevels WHERE DId=@DId AND ClassId=@TempClassId AND tintLevel=@tintLevel
					IF @intLastResortId IS NULL
						SET @intLastResortId=@tempLastResortId
					IF @tintRoutingType=0 AND EXISTS(SELECT 'true' FROM ClassLevelsTechJctn cltj JOIN ClassLevels cl ON cl.DId=@DId AND cl.Id=cltj.intClssLvlId WHERE cltj.DId=@DId AND cltj.ClassId=@TempClassId AND cl.tintLevel=@tintLevel)
					BEGIN
						INSERT INTO @TempTable SELECT intUId FROM ClassLevelsTechJctn cltj JOIN ClassLevels cl ON cl.DId=@DId AND cl.Id=cltj.intClssLvlId WHERE cltj.DId=@DId AND cltj.ClassId=@TempClassId AND cl.tintLevel=@tintLevel
						BREAK
					END	
					ELSE IF @tintRoutingType=1 AND EXISTS(SELECT 'true' FROM ClassLevelsTechJctn cltj JOIN ClassLevels cl ON cl.DId=@DId AND cl.Id=cltj.intClssLvlId WHERE cltj.DId=@DId AND cltj.ClassId=@TempClassId AND cl.tintLevel=@tintLevel)
					BEGIN
						SET @TempLocationId=NULL
						SET @ParentId=@LocationId
						WHILE NOT @ParentId IS NULL
						BEGIN
							SELECT @TempLocationId=Id, @ParentId=ParentId FROM Locations WHERE DId=@DId AND Id=@ParentId
							IF @TempLocationId IS NULL
								BREAK
							IF EXISTS(SELECT 'true' FROM ClassLevelsTechJctn cltj JOIN ClassLevels cl ON cl.DId=@DId AND cl.Id=cltj.intClssLvlId WHERE cltj.DId=@DId AND cltj.ClassId=@TempClassId AND cltj.LocationId=@TempLocationId AND cl.tintLevel=@tintLevel)
							BEGIN
								INSERT INTO @TempTable SELECT intUId FROM ClassLevelsTechJctn cltj JOIN ClassLevels cl ON cl.DId=@DId AND cl.Id=cltj.intClssLvlId WHERE cltj.DId=@DId AND cltj.ClassId=@TempClassId AND cltj.LocationId=@TempLocationId AND cl.tintLevel=@tintLevel
								SET @ClassParentId=NULL --Break Parent WHILE
								BREAK
							END
							IF @TempLocationId=@ParentId
								BREAK
						END
						--if locations are defined for class but not found breack search and return LastResortTechId for selected class
						IF NOT @intLastResortId IS NULL AND NOT @ClassParentId IS NULL
							SET @ClassParentId=NULL --Break Parent WHILE
					END
					ELSE IF @tintRoutingType=2
					BEGIN
						SET @TempLocationId=NULL
						SET @ParentId=@LocationId
						WHILE NOT @ParentId IS NULL
						BEGIN
							SELECT @TempLocationId=Id, @ParentId=ParentId FROM Locations WHERE DId=@DId AND Id=@ParentId
							IF @TempLocationId IS NULL
								BREAK
							IF EXISTS(SELECT 'true' FROM LocationRouteLevels WHERE DId=@DId AND LocationId=@TempLocationId AND TicketLevel=ISNULL(@tintLevel,1))
							BEGIN
								SELECT @LocationRouteLevelId=Id, @tintRoutingType=TechPoolType, @intLastResortId=LastResortTechId, @tintRoutingMethod=RoutingMethod FROM LocationRouteLevels WHERE DId=@DId AND LocationId=@TempLocationId AND TicketLevel=ISNULL(@tintLevel,1)
								IF @tintRoutingType=3 /*Use Global Escalation Settings*/
									INSERT INTO @TempTable SELECT id FROM tbl_LoginCompanyJunc lj WHERE lj.company_id=@DId AND lj.tintLevel=ISNULL(@tintLevel,1) AND lj.btUserInactive=0
								ELSE
									INSERT INTO @TempTable SELECT TechId FROM LocationRouteLevelTechs WHERE DId=@DId AND LocationRouteLevelId=@LocationRouteLevelId
								SET @ClassParentId=NULL --Break Parent WHILE	
								BREAK
							END
							IF @TempLocationId=@ParentId
								BREAK
						END
					END
					ELSE IF @tintRoutingType=3 AND EXISTS(SELECT 'true' FROM tbl_LoginCompanyJunc lj WHERE lj.company_id=@DId AND lj.tintLevel=@tintLevel AND lj.btUserInactive=0)
					BEGIN
						INSERT INTO @TempTable SELECT id FROM tbl_LoginCompanyJunc lj WHERE lj.company_id=@DId AND lj.tintLevel=@tintLevel AND lj.btUserInactive=0
						BREAK
					END	
				END
				IF @TempClassId=@ClassParentId
					BREAK
			END
		END
	
	IF @RouteFound=1
		GoTo EndRoute
	ELSE
		BEGIN
			SET @tintCurRouteOrder=@tintCurRouteOrder+1
			Goto Start
		END
	/*END CLASS ROUTE*/
	
	ByLocation:
	SET @TempLocationId=NULL	
	SET @ParentId=@LocationId
	WHILE NOT @ParentId IS NULL
	BEGIN
		SELECT @TempLocationId=Id, @ParentId=ParentId FROM Locations WHERE DId=@DId AND Id=@ParentId
		IF @TempLocationId IS NULL
			BREAK
		IF EXISTS(SELECT 'true' FROM LocationRouteLevels WHERE DId=@DId AND LocationId=@TempLocationId AND TicketLevel=ISNULL(@tintLevel,1))
		BEGIN
			SET @RouteFound=1
			SELECT @LocationRouteLevelId=Id, @tintRoutingType=TechPoolType, @intLastResortId=LastResortTechId, @tintRoutingMethod=RoutingMethod FROM LocationRouteLevels WHERE DId=@DId AND LocationId=@TempLocationId AND TicketLevel=ISNULL(@tintLevel,1)
			IF @tintRoutingType=3 /*Use Global Escalation Settings*/
				INSERT INTO @TempTable SELECT id FROM tbl_LoginCompanyJunc lj WHERE lj.company_id=@DId AND lj.tintLevel=ISNULL(@tintLevel,1) AND lj.btUserInactive=0
			ELSE
				INSERT INTO @TempTable SELECT TechId FROM LocationRouteLevelTechs WHERE DId=@DId AND LocationRouteLevelId=@LocationRouteLevelId
			BREAK
		END
		IF @TempLocationId=@ParentId
			BREAK
	END					
	IF @RouteFound=1
		GoTo EndRoute
	ELSE
		BEGIN
			SET @tintCurRouteOrder=@tintCurRouteOrder+1
			Goto Start
		END
	/*END LOCATION ROUTE*/
	
	
	ByGlobalEscalation:
	IF EXISTS(SELECT 'true' FROM TktLevels WHERE DId=@DId and tintLevel=@tintLevel)
		BEGIN
			SET @RouteFound = 1
			SELECT @tintRoutingMethod = tintRoutingType, @intLastResortId=intLastResortId FROM TktLevels WHERE DId=@DId and tintLevel=@tintLevel
			INSERT INTO @TempTable SELECT id FROM tbl_LoginCompanyJunc lj WHERE lj.company_id=@DId AND lj.tintLevel=@tintLevel AND lj.btUserInactive=0
		END
	 	
	IF @RouteFound=1
		GoTo EndRoute
	ELSE
		BEGIN
			SET @tintCurRouteOrder=@tintCurRouteOrder+1
			Goto Start
		END
	/*END GLOBAL ESCALATION*/
	
		
	
	
	
	EndRoute:
	IF @RouteFound = 0 AND @configLvl = 1 AND @btAllowLvlReset = 1 AND @tintLevel > 1
		BEGIN
			SET @btAllowLvlReset = 0
			SET @tintLevel = 1
			SET @tintCurRouteOrder = 1
			GoTo Start
		END
	
	IF @RouteFound = 0
		BEGIN
			SET @intErrCode = -3
			RETURN -3
		END
		
	IF @configTechCheckin = 1
		BEGIN
			DECLARE @TempTable2 TABLE (user_id int NOT NULL)
			INSERT INTO @TempTable2 SELECT user_id FROM @TempTable tt INNER JOIN tbl_LoginCompanyJunc lj ON lj.company_id=@DId AND lj.id=tt.user_id WHERE lj.CheckinStatus=1 OR lj.UserType_Id=4
			DELETE FROM @TempTable
			INSERT INTO @TempTable SELECT user_id FROM @TempTable2
		END
	
	
	IF NOT EXISTS(SELECT 'true' FROM @TempTable)
		SET @intReturnTech = @intLastResortId
	ELSE
		BEGIN /*Decide if least number of tickets or distributed*/
			IF @tintRoutingMethod = 1 
				BEGIN
					SET @intReturnTech = (SELECT TOP 1 user_id FROM @TempTable ORDER BY RAND(CONVERT(INT, CONVERT(VarBinary, NEWID()))))
				END
			ELSE
				BEGIN
					SET ANSI_WARNINGS OFF
					SET @intReturnTech = (SELECT TOP 1 tt.user_id FROM @TempTable tt LEFT OUTER JOIN tbl_ticket tkt ON tkt.company_id=@DId and tkt.status='Open' AND tkt.Technician_Id=tt.user_id GROUP BY tt.user_id ORDER BY count(tkt.id))
					SET ANSI_WARNINGS ON
				END
		END

	/*This is where the vacation feature would come into play, probably need to return a bit indicator to let the program know*/
	IF @intReturnTech IS NULL
		BEGIN
			SET @intErrCode = -5
			RETURN -5
		END
	ELSE
		RETURN @intReturnTech
GO
PRINT N'Creating [dbo].[sp_SelectRoutingOrder]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectRoutingOrder]
	(
		@DId int
	)
AS
	DECLARE @btClass bit
	DECLARE @btLocation bit
	DECLARE @btLevel bit
	DECLARE @btAccount bit
	
	SELECT @btClass = dbo.fxGetConfigValueBit(@DId, 'configClassTracking')
	SELECT @btLocation = dbo.fxGetConfigValueBit(@DId, 'configLocationTracking')
	SELECT @btLevel = dbo.fxGetConfigValueBit(@DId, 'configLVL')
	SELECT @btAccount = dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr')
	
	SELECT * FROM fxRoutingOrder(@DId,@btClass,@btLocation,@btLevel,@btAccount) ORDER BY tintOrder
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectRoutingOrderDefault]...';


GO

CREATE PROCEDURE sp_SelectRoutingOrderDefault
	(
		@DId int,
		@btDefault bit=null OUTPUT
	)
AS
	IF EXISTS(SELECT 'true' FROM RoutingOrder WHERE DId=@DId)
		SET @btDefault = 0
	ELSE
		SET @btDefault = 1
	
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectSchedGeneratedLastClosedTkt]...';


GO
CREATE Procedure dbo.sp_SelectSchedGeneratedLastClosedTkt
	(
		@DId int,
		@SchedTicketID int
	)

As	
	
	SELECT TOP 1
		tkt.ClosedTime
	FROM
		tbl_ticket tkt
	WHERE
		tkt.company_id = @DId
		AND
		tkt.SchedTicketID = @SchedTicketID
		AND
		tkt.Status = 'Closed'	
	ORDER BY
		tkt.ClosedTime DESC
GO
PRINT N'Creating [dbo].[sp_SelectSchedGeneratedOpenTktsCount]...';


GO
CREATE Procedure dbo.sp_SelectSchedGeneratedOpenTktsCount
	(
		@DId int,
		@SchedTicketID int
	)

As	
	DECLARE @CountOpenTickets int
	
	SELECT
		@CountOpenTickets = COUNT(tkt.Id)
	FROM
		tbl_ticket tkt
	WHERE
		tkt.company_id = @DId
		AND
		tkt.SchedTicketID = @SchedTicketID
		AND
		tkt.Status <> 'Closed'	
	
	return @CountOpenTickets
GO
PRINT N'Creating [dbo].[sp_SelectSchedTicketAssets]...';


GO
CREATE PROCEDURE dbo.sp_SelectSchedTicketAssets
	(
		@DId int,
		@SchedTicketId int
	)
AS
	SELECT * FROM SchedTicketAssets WHERE DId=@DId AND SchedTicketId=@SchedTicketId
GO
PRINT N'Creating [dbo].[sp_SelectSchedTicketFiles]...';


GO
CREATE PROCEDURE dbo.sp_SelectSchedTicketFiles
	(
		@DId int,
		@SchedTicketId int,
		@Id int = null
	)
AS
	IF @Id IS NULL
		SELECT DId, Id, FileName, FileSize, dtUpdated, FileData FROM SchedTicketFiles WHERE DId=@DId AND STId=@SchedTicketId
	ELSE
		SELECT * FROM SchedTicketFiles WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_SelectSchedTicketsLost]...';


GO
CREATE Procedure dbo.sp_SelectSchedTicketsLost
(
	@DepartmentId int
)
As
	SELECT     
		SchedTickets.Id, 
		SchedTickets.dtNext, 
		SchedTickets.vchRecurringOn, 
		SchedTickets.vchEndMethod, 
		SchedTickets.tintEndCount, 
		SchedTickets.tintRecurringFeq,
        SchedTickets.RepeatFromCompletion,
        SchedTickets.intUserId
	FROM         
		SchedTickets 
	LEFT OUTER JOIN
        NotificationEventsQueue ON SchedTickets.DId = NotificationEventsQueue.DId AND SchedTickets.Id = NotificationEventsQueue.ScheduledTicketId       
	WHERE
		SchedTickets.[DId] = @DepartmentId
		AND
		SchedTickets.btEnabled = 1
		AND
		NotificationEventsQueue.[RunTime] IS NULL
		AND
		ISNULL(dtStop, '01/01/2000') < getutcdate()
		AND
		SchedTickets.vchRecurringOn NOT IN('no', 'w')
		AND
		(SchedTickets.vchEndMethod <> 'Times' OR (SchedTickets.vchEndMethod = 'Times' AND SchedTickets.tintEndCount > 0))
GO
PRINT N'Creating [dbo].[sp_SelectSchedTkt]...';


GO



CREATE PROCEDURE [dbo].[sp_SelectSchedTkt]
	(
		@DId int,
		@Id int
	)
AS
	SELECT st.*, L.Email as 'vchUserEmail', dbo.fxGetUserLocationName(@DId, st.LocationId) AS LocationName, dbo.fxGetUserLocationName(@DId, st.AccountLocationId) AS AccountLocationName
	FROM SchedTickets st 
	INNER JOIN tbl_LoginCompanyJunc LCJ ON LCJ.company_id=@DId AND LCJ.id=st.intUserId
	INNER JOIN tbl_Logins L ON L.id=LCJ.login_id
	WHERE st.DId=@DId and st.Id=@Id
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectSchedTkts]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectSchedTkts]
	(
		@DId int,
		@UId int,
		@AcctId int
	)
AS
--VGOOZ 23-AUG-2006: Locations Upgrade
	IF @AcctId = 0
		BEGIN
			IF @UId IS NULL
			SELECT 
				st.id,
				st.intUserId,
				st.intTechId,
				st.LocationId,
				st.intClassId,
				st.tintLevel,
				st.vchSubject,
				st.dtCreate,
				st.dtNext,
				st.btEnabled,
				st.vchEndMethod,
				st.dtStop,
				st.tintEndCount,
				dbo.fxGetFullClassName(@DId, st.intClassId) as ClassName,
				dbo.fxGetUserLocationName(@DId, st.LocationId) as LocationName,
				dbo.fxGetUserName(l1.FirstName, l1.LastName, l1.Email) as UserName,
				dbo.fxGetUserName(l2.FirstName, l2.LastName, l2.Email) as TechName,
				a.vchName as vchAcctName
			FROM SchedTickets st
			LEFT OUTER JOIN tbl_LoginCompanyJunc lcj1 ON lcj1.company_id=@DId AND lcj1.id=st.intUserId
			LEFT OUTER JOIN tbl_Logins l1 ON l1.id=lcj1.login_id
			LEFT OUTER JOIN tbl_LoginCompanyJunc lcj2 ON lcj2.company_id=@DId AND lcj2.id=st.intTechId
			LEFT OUTER JOIN tbl_Logins l2 ON l2.id=lcj2.login_id
			LEFT OUTER JOIN tbl_class c ON c.company_id=@DId AND c.id=st.intClassId
			LEFT OUTER JOIN Accounts a ON a.DId=@DId AND a.id=st.intAcctId
			WHERE st.DId=@DId 
			ORDER BY st.dtNext
			ELSE
			SELECT 
				st.id,
				st.intUserId,
				st.intTechId,
				st.LocationId,
				st.intClassId,
				st.tintLevel,
				st.vchSubject,
				st.dtCreate,
				st.dtNext,
				st.btEnabled,
				st.vchEndMethod,
				st.dtStop,
				st.tintEndCount,
				dbo.fxGetFullClassName(@DId, st.intClassId) as ClassName,
				dbo.fxGetUserLocationName(@DId, st.LocationId) as LocationName,
				dbo.fxGetUserName(l1.FirstName, l1.LastName, l1.Email) as UserName,
				dbo.fxGetUserName(l2.FirstName, l2.LastName, l2.Email) as TechName,
				a.vchName as vchAcctName
			FROM SchedTickets st
			LEFT OUTER JOIN tbl_LoginCompanyJunc lcj1 ON lcj1.company_id=@DId AND lcj1.id=st.intUserId
			LEFT OUTER JOIN tbl_Logins l1 ON l1.id=lcj1.login_id
			LEFT OUTER JOIN tbl_LoginCompanyJunc lcj2 ON lcj2.company_id=@DId AND lcj2.id=st.intTechId
			LEFT OUTER JOIN tbl_Logins l2 ON l2.id=lcj2.login_id
			LEFT OUTER JOIN tbl_class c ON c.company_id=@DId AND c.id=st.intClassId
			LEFT OUTER JOIN Accounts a ON a.DId=@DId AND a.id=st.intAcctId
			WHERE st.DId=@DId AND (st.intOwnerId=@UId OR st.intTechId=@UId OR st.intUserId=@UId)
			ORDER BY st.dtNext
		END
	ELSE
		BEGIN
			IF @UId IS NULL
			SELECT 
				st.id,
				st.intUserId,
				st.intTechId,
				st.LocationId,
				st.intClassId,
				st.tintLevel,
				st.vchSubject,
				st.dtCreate,
				st.dtNext,
				st.btEnabled,
				st.vchEndMethod,
				st.dtStop,
				st.tintEndCount,
				dbo.fxGetFullClassName(@DId, st.intClassId) as ClassName,
				dbo.fxGetUserLocationName(@DId, st.LocationId) as LocationName,
				dbo.fxGetUserName(l1.FirstName, l1.LastName, l1.Email) as UserName,
				dbo.fxGetUserName(l2.FirstName, l2.LastName, l2.Email) as TechName,
				a.vchName as vchAcctName
			FROM SchedTickets st
			LEFT OUTER JOIN tbl_LoginCompanyJunc lcj1 ON lcj1.company_id=@DId AND lcj1.id=st.intUserId
			LEFT OUTER JOIN tbl_Logins l1 ON l1.id=lcj1.login_id
			LEFT OUTER JOIN tbl_LoginCompanyJunc lcj2 ON lcj2.company_id=@DId AND lcj2.id=st.intTechId
			LEFT OUTER JOIN tbl_Logins l2 ON l2.id=lcj2.login_id
			LEFT OUTER JOIN tbl_class c ON c.company_id=@DId AND c.id=st.intClassId
			LEFT OUTER JOIN Accounts a ON a.DId=@DId AND a.id=st.intAcctId
			WHERE st.DId=@DId AND ISNULL(intAcctId,-1)=@AcctId 
			ORDER BY st.dtNext
			ELSE
			SELECT 
				st.id,
				st.intUserId,
				st.intTechId,
				st.LocationId,
				st.intClassId,
				st.tintLevel,
				st.vchSubject,
				st.dtCreate,
				st.dtNext,
				st.btEnabled,
				st.vchEndMethod,
				st.dtStop,
				st.tintEndCount,
				dbo.fxGetFullClassName(@DId, st.intClassId) as ClassName,
				dbo.fxGetUserLocationName(@DId, st.LocationId) as LocationName,
				dbo.fxGetUserName(l1.FirstName, l1.LastName, l1.Email) as UserName,
				dbo.fxGetUserName(l2.FirstName, l2.LastName, l2.Email) as TechName,
				a.vchName as vchAcctName
			FROM SchedTickets st
			LEFT OUTER JOIN tbl_LoginCompanyJunc lcj1 ON lcj1.company_id=@DId AND lcj1.id=st.intUserId
			LEFT OUTER JOIN tbl_Logins l1 ON l1.id=lcj1.login_id
			LEFT OUTER JOIN tbl_LoginCompanyJunc lcj2 ON lcj2.company_id=@DId AND lcj2.id=st.intTechId
			LEFT OUTER JOIN tbl_Logins l2 ON l2.id=lcj2.login_id
			LEFT OUTER JOIN tbl_class c ON c.company_id=@DId AND c.id=st.intClassId
			LEFT OUTER JOIN Accounts a ON a.DId=@DId AND a.id=st.intAcctId
			WHERE st.DId=@DId AND ISNULL(intAcctId,-1)=@AcctId AND (st.intOwnerId=@UId OR st.intTechId=@UId OR st.intUserId=@UId)
			ORDER BY st.dtNext
		END
	
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectSLADueDate2]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectSLADueDate2]
	(
		@DId int,
		@intPriority int,
		@ForResponse bit, --0 for completion, 1 for reponse date
		@dtInput smalldatetime,
		@dtOutput smalldatetime OUTPUT
	)
AS
	DECLARE @AddDays int
	DECLARE @AddHours int
	DECLARE @AddMinutes int
	
	IF @ForResponse = 0 
		SELECT @AddDays=SLADays, @AddHours=SLAHours, @AddMinutes=SLAMinutes FROM Priorities WHERE DId=@DId AND Id=@intPriority
	ELSE
		SELECT @AddDays=SLAResponseDays, @AddHours=SLAResponseHours, @AddMinutes=SLAResponseMinutes FROM Priorities WHERE DId=@DId AND Id=@intPriority
	
	IF @AddDays <> 0 or @AddHours <> 0 or @AddMinutes <> 0
		BEGIN
			
			DECLARE @sHour tinyint
			DECLARE @sMin tinyint
			DECLARE @stHour tinyint
			DECLARE @stMin tinyint
			DECLARE @startDay smalldatetime
			DECLARE @stopDay smalldatetime
			DECLARE @btUseBusHours bit
			DECLARE @minPerDay int
			
			SET @btUseBusHours = (SELECT btUseBusHours FROM Priorities WHERE DId=@DId AND Id=@intPriority)
			IF @btUseBusHours = 1
				BEGIN
					SELECT @sHour= CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusHourStart') as tinyint), @sMin= CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusMinStart') as tinyint), @stHour= CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusHourStop') as tinyint), @stMin= CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusMinStop') as tinyint)
				
					IF @sHour is NULL
						SET @sHour = 00
						
					IF @sMin is NULL
						SET @sMin = 00
						
					IF @stHour is NULL
						BEGIN
							SET @stHour = 23
							SET @stMin = 59
						END	
					ELSE
						IF @stMin is NULL
							SET @stMin = 59
					
					SELECT @startDay = ''+DATENAME(m, @dtInput)+' '+DATENAME(d, @dtInput)+' '+DATENAME(yy, @dtInput)+' '+CONVERT(varchar(2),@sHour)+':'+CONVERT(varchar(2), @sMin)
					SELECT @stopDay = ''+DATENAME(m, @dtInput)+' '+DATENAME(d, @dtInput)+' '+DATENAME(yy, @dtInput)+' '+CONVERT(varchar(2),@stHour)+':'+CONVERT(varchar(2), @stMin)
							
					SET @minPerDay = DATEDIFF(n, @startDay, @stopDay)
				END
			ELSE
				BEGIN
					SET @sHour = 0
					SET @sMin = 0
					SET @stHour = 23
					SET @stMin = 59
					SET @minPerDay = 1440
					
					SELECT @startDay = ''+DATENAME(m, @dtInput)+' '+DATENAME(d, @dtInput)+' '+DATENAME(yy, @dtInput)+' '+CONVERT(varchar(2),@sHour)+':'+CONVERT(varchar(2), @sMin)
					SELECT @stopDay = ''+DATENAME(m, @dtInput)+' '+DATENAME(d, @dtInput)+' '+DATENAME(yy, @dtInput)+' '+CONVERT(varchar(2),@stHour)+':'+CONVERT(varchar(2), @stMin)
				END

			
					
			--print 'MinPerDay: '+CONVERT(varchar(50), @minPerDay)
			SET @AddMinutes = @AddMinutes + (60*@AddHours) + (@minPerDay*@AddDays)
			DECLARE @AddDays2 int
			SET @AddDays2 = @AddMinutes/@minPerDay
			
			SET @AddMinutes = @AddMinutes - @AddDays2*@minPerDay
			IF @AddDays2 > 0 AND @AddMinutes = 0
				BEGIN
					SET @AddDays2 = @AddDays2 - 1
					SET @AddMinutes = @minPerDay
				END
			
			--print 'AddDays2: '+CONVERT(varchar(50), @AddDays2)
			--print 'AddMin: '+CONVERT(varchar(50), @AddMinutes)
			--print 'dtInput1: '+CONVERT(varchar(50), @dtInput)
			
			/*Check to see if before, after, or inside business day*/
			DECLARE @TimeOfDay tinyint
			SET @TimeOfDay = CASE
			WHEN @dtInput < @startDay THEN 1 /*Before Start*/
			WHEN @dtInput between @startDay and @stopDay THEN 2 /*Mid Day*/
			WHEN @dtInput > @stopDay THEN 3 /*After Stop*/
			END

			--print 'Time of Day: '+CONVERT(varchar(5), @TimeOfDay)
			
			DECLARE @btSkipSaturday bit
			DECLARE @btSkipSunday bit
			DECLARE @btSkipHolidays bit
			
			SELECT @btSkipSaturday=btSkipSaturday, @btSkipSunday=btSkipSunday, @btSkipHolidays=btSkipHolidays FROM Priorities WHERE DId=@DId AND Id=@intPriority
			
			IF (@TimeOfDay = 3) OR (@btSkipSaturday=1 AND datepart(DW, @dtInput)=7) OR (@btSkipSunday=1 AND datepart(DW, @dtInput)=1) OR ( @btSkipHolidays = 1 AND exists (Select 'true' from Holidays WHERE DId=@DId AND @dtInput between dtStart and dtStop)) 
				SET @dtInput = DATEADD(d, 1, @startDay)
			
			--print 'dtInput2: '+CONVERT(varchar(50), @dtInput)
									
			IF @AddDays2 > 0
				EXEC sp_BusinessDayAdd @DId, @intPriority, @dtInput, @AddDays2, @dtInput OUTPUT
			ELSE
				EXEC sp_BusinessDayAdd @DId, @intPriority, @dtInput, 0, @dtInput OUTPUT
				
			--print 'dtInput3: '+CONVERT(varchar(50), @dtInput)
			
			SELECT @startDay = ''+DATENAME(m, @dtInput)+' '+DATENAME(d, @dtInput)+' '+DATENAME(yy, @dtInput)+' '+CONVERT(varchar(2),@sHour)+':'+CONVERT(varchar(2), @sMin)
			SELECT @stopDay = ''+DATENAME(m, @dtInput)+' '+DATENAME(d, @dtInput)+' '+DATENAME(yy, @dtInput)+' '+CONVERT(varchar(2),@stHour)+':'+CONVERT(varchar(2), @stMin)
						

			IF @TimeOfDay = 1
				BEGIN
					SET @dtInput = DATEADD(n, @AddMinutes,@startDay)
				END

			IF @TimeOfDay = 3
				BEGIN
					SET @dtInput = DATEADD(n, @AddMinutes, @dtInput)
				END

			IF @TimeOfDay = 2
				BEGIN
					DECLARE @minLeftToday int
					SET @minLeftToday = DATEDIFF(n, @dtInput, @stopDay)
					
					IF @minLeftToday >= @AddMinutes
						SET @dtInput = DATEADD(n, @AddMinutes, @dtInput)
					ELSE
						BEGIN
							SET @AddMinutes = @AddMinutes - @minLeftToday
							SET @dtInput = DATEADD(n, @AddMinutes,DATEADD(d, 1, @startDay))	
							EXEC sp_BusinessDayAdd @DId, @intPriority, @dtInput, 0, @dtInput OUTPUT		
						END
				END
			
			SET @dtOutput = @dtInput
			print @dtOutput
		END	
	ELSE
		SET @dtOutput = null
			
Return
GO
PRINT N'Creating [dbo].[sp_SelectSLAMinUsed]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectSLAMinUsed]
	(
		@DId int,
		@TId int,
		@tintMode tinyint, /*0=Complete, 1=Response*/	
		@dtInput smalldatetime,    
		@dtTarget smalldatetime,  
		@MinUsed int = NULL OUTPUT
		
	)
AS


DECLARE @PId int
DECLARE @btSkipSunday bit
DECLARE @btSkipSaturday bit
DECLARE @btSkipHolidays bit
DECLARE @btUseBusHours bit


DECLARE @total_id int
	
IF @tintMode=1 
BEGIN
	SELECT @total_id=new_t.id FROM tbl_ticket new_t LEFT OUTER JOIN tbl_logincompanyjunc new_tlj ON new_tlj.id=new_t.Technician_id LEFT OUTER JOIN tbl_UserType new_ut ON new_ut.id=new_tlj.UserType_ID
	WHERE 
	new_t.company_id=@DId and
	new_t.id=@TId and 
	new_t.Technician_id=new_t.Created_id and 
	(new_ut.Name='Technician' or new_ut.Name='Administrator')

	/* if user create ticket for myself then response used must be 0 */
	IF @@ROWCOUNT>0 
	BEGIN
		SELECT @MinUsed=0
		RETURN
	END
END 

SELECT @PId=PriorityId FROM tbl_ticket WHERE company_id=@DId and id=@TId

IF @PId is not null
	BEGIN
		print 'dtInput:'+CONVERT(varchar(50), @dtInput)
		print 'dtTarget:'+CONVERT(varchar(50), @dtTarget)
		
		IF @tintMode = 0
			SELECT @btSkipSunday=btSkipSunday, @btSkipSaturday=btSkipSaturday, @btSkipHolidays=btSkipHolidays, @btUseBusHours=btUseBusHours FROM Priorities WHERE DId=@DId AND id=@PId		
		ELSE 
			SELECT @btSkipSunday=btResponseSkipSunday, @btSkipSaturday=btResponseSkipSaturday, @btSkipHolidays=btResponseSkipHolidays, @btUseBusHours=btResponseUseBusHours FROM Priorities WHERE DId=@DId AND id=@PId	
		
		DECLARE @sHour tinyint
		DECLARE @sMin tinyint
		DECLARE @stHour tinyint
		DECLARE @stMin tinyint
		DECLARE @startDay smalldatetime
		DECLARE @stopDay smalldatetime
		DECLARE @minPerDay int
		IF @btUseBusHours = 1
			BEGIN
				SELECT @sHour=CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusHourStart') as tinyint), @sMin= CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusMinStart') as tinyint), @stHour= CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusHourStop') as tinyint), @stMin= CAST(dbo.fxGetConfigValueStr(@DId, 'tinyBusMinStop') as tinyint)
			
				IF @sHour is NULL
					SET @sHour = 00
					
				IF @sMin is NULL
					SET @sMin = 00
					
				IF @stHour is NULL
					BEGIN
						SET @stHour = 23
						SET @stMin = 59
					END	
				ELSE
					IF @stMin is NULL
						SET @stMin = 59
				
				SELECT @startDay = ''+DATENAME(m, @dtInput)+' '+DATENAME(d, @dtInput)+' '+DATENAME(yy, @dtInput)+' '+CONVERT(varchar(2),@sHour)+':'+CONVERT(varchar(2), @sMin)
				SELECT @stopDay = ''+DATENAME(m, @dtInput)+' '+DATENAME(d, @dtInput)+' '+DATENAME(yy, @dtInput)+' '+CONVERT(varchar(2),@stHour)+':'+CONVERT(varchar(2), @stMin)
						
				SET @minPerDay = DATEDIFF(n, @startDay, @stopDay)
			END
		ELSE
			BEGIN
				SET @sHour = 0
				SET @sMin = 0
				SET @stHour = 23
				SET @stMin = 59
				SET @minPerDay = 1440
				
				SELECT @startDay = ''+DATENAME(m, @dtInput)+' '+DATENAME(d, @dtInput)+' '+DATENAME(yy, @dtInput)+' '+CONVERT(varchar(2),@sHour)+':'+CONVERT(varchar(2), @sMin)
				SELECT @stopDay = ''+DATENAME(m, @dtInput)+' '+DATENAME(d, @dtInput)+' '+DATENAME(yy, @dtInput)+' '+CONVERT(varchar(2),@stHour)+':'+CONVERT(varchar(2), @stMin)
			END

		
		SET @MinUsed = 0
		
		IF (@dtTarget < @stopDay) AND (@btSkipSaturday=1 AND datepart(DW, @dtInput)=7) OR (@btSkipSunday=1 AND datepart(DW, @dtInput)=1) OR (@btSkipHolidays = 1 AND exists (Select 'true' from Holidays WHERE DId=@DId AND @dtInput between dtStart and dtStop))
			BEGIN
				SET @startDay = DATEADD(d, -1, @startDay)
				SET @stopDay = DATEADD(d, -1, @stopDay)
				SET @dtInput = DATEADD(d, -1, @dtInput)
				GOTO Loop

			END
		
		DECLARE @TimeOfDay tinyint
		SET @TimeOfDay = CASE
			WHEN @dtInput < @startDay THEN 1 /*Before Start*/
			WHEN @dtInput between @startDay and @stopDay THEN 2 /*Mid Day*/
			WHEN @dtInput > @stopDay THEN 3 /*After Stop*/
		END
		
		DECLARE @TargetTimeOfDay tinyint
		SET @TargetTimeOfDay = CASE
			WHEN @dtTarget < @startDay THEN 1 /*Before Start*/
			WHEN @dtTarget between @startDay and @stopDay THEN 2 /*Mid Day*/
			WHEN @dtTarget > @stopDay THEN 3 /*After Stop*/
		END
		
		IF @TargetTimeOfDay = 1
			BEGIN
				IF @TimeOfDay = 2
					SET @MinUsed = @MinUsed+DATEDIFF(n, @startDay, @dtInput)
			
				IF @TimeOfDay = 3
					SET @MinUsed = @MinUsed+@minPerDay
			END
		
		IF @TargetTimeOfDay = 2
			BEGIN
				SET @MinUsed = @MinUsed+DATEDIFF(n, @dtTarget, @dtInput)
			END
			
		SET @startDay = DATEADD(d, -1, @startDay)
		SET @stopDay = DATEADD(d, -1, @stopDay)
		SET @dtInput = @stopDay
		
		Loop:
		
		IF (@dtTarget < @stopDay) AND (@btSkipSaturday=1 AND datepart(DW, @dtInput)=7) OR (@btSkipSunday=1 AND datepart(DW, @dtInput)=1) OR (@btSkipHolidays = 1 AND exists (Select 'true' from Holidays WHERE DId=@DId AND @dtInput between dtStart and dtStop))
			BEGIN
				SET @startDay = DATEADD(d, -1, @startDay)
				SET @stopDay = DATEADD(d, -1, @stopDay)
				SET @dtInput = DATEADD(d, -1, @dtInput)
				GOTO Loop
			END
			
		
		SET @TimeOfDay = CASE
			WHEN @dtInput < @startDay THEN 1 /*Before Start*/
			WHEN @dtInput between @startDay and @stopDay THEN 2 /*Mid Day*/
			WHEN @dtInput > @stopDay THEN 3 /*After Stop*/
		END
		
		SET @TargetTimeOfDay = CASE
			WHEN @dtTarget < @startDay THEN 1 /*Before Start*/
			WHEN @dtTarget between @startDay and @stopDay THEN 2 /*Mid Day*/
			WHEN @dtTarget > @stopDay THEN 3 /*After Stop*/
		END
		
		IF @TargetTimeOfDay = 1
			BEGIN
				IF @TimeOfDay = 2
					SET @MinUsed = @MinUsed+DATEDIFF(n, @startDay, @dtInput)
					
				IF @TimeOfDay = 3
					SET @MinUsed = @MinUsed+@minPerDay
				
				SET @startDay = DATEADD(d, -1, @startDay)
				SET @stopDay = DATEADD(d, -1, @stopDay)
				SET @dtInput = @stopDay
				GOTO Loop
			END

		IF @TargetTimeOfDay = 2
			BEGIN
				SET @MinUsed = @MinUsed+DATEDIFF(n, @dtTarget, @StopDay)
			END
			
		/*When @dtTarget = 3 then exit loop*/
	
	END
ELSE
	SET @MinUsed = 0

RETURN 0
GO
PRINT N'Creating [dbo].[sp_SelectSubAssets]...';


GO
CREATE PROCEDURE dbo.sp_SelectSubAssets
(
	@DepartmentId int,
	@AssetId int
)
 AS
SELECT     AssetSubAssets.Id, AssetSubAssets.AssetId, AssetSubAssets.AssetChildId, AssetSubAssets.Description, Assets.SerialNumber, Assets.Name, 
                      Assets.CategoryId, Assets.MakeId, Assets.ModelId, Assets.TypeId
FROM         AssetSubAssets INNER JOIN
                      Assets ON AssetSubAssets.DId = Assets.DepartmentId AND AssetSubAssets.DId = Assets.DepartmentId AND AssetSubAssets.AssetId = Assets.Id 
where 
	 AssetSubAssets.DId=@DepartmentId and AssetSubAssets.AssetId=@AssetId
GO
PRINT N'Creating [dbo].[sp_SelectSubmissionCats]...';


GO

CREATE Procedure sp_SelectSubmissionCats
	(
		@Id int = null,
		@btSelectable bit = null
	)

As
	IF @Id IS NULL
		BEGIN
			IF @btSelectable IS NULL	
				SELECT Id, ParentId, vchName as Name, bitSelectable FROM SubmissionCategories ORDER BY vchName
			ELSE
				SELECT Id, ParentId, vchName as Name, bitSelectable FROM SubmissionCategories WHERE bitSelectable=@btSelectable ORDER BY vchName
		END
	ELSE
		SELECT Id, ParentId, vchName as Name, bitSelectable FROM SubmissionCategories WHERE Id=@Id
	return
GO
PRINT N'Creating [dbo].[sp_SelectSuperUserInfo]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectSuperUserInfo]
	(
		@DId int,
		@UId int,
		@intUserType int=NULL OUTPUT,
		@tintSUserType tinyint=NULL OUTPUT, /*0=Error-Not Super User, 1=Acct, 2=Location, 3=Acct and Location*/
		@intSUserId int=NULL OUTPUT,
		@vchSUserRootLocationId nvarchar(1000)=NULL OUTPUT,
		@vchSUserRootLocationName nvarchar(max)=NULL OUTPUT,
		@vchDomainName nvarchar(100)=NULL OUTPUT
		
	)
AS
	/*return -1=error, 0=okay*/
	DECLARE @intLocationId int
	DECLARE @vchLocationName nvarchar(100)
	DECLARE @vchAcctName nvarchar(max)
	
	DECLARE @btCfgAcctMngr bit
	DECLARE @btCfgLocations bit

	SET @vchAcctName = ''
	
	SELECT @btCfgAcctMngr=dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr'),@btCfgLocations=dbo.fxGetConfigValueBit(@DId, 'configLocationTracking')
	
	/*Figure out SUser Type 1=Acct, 2=Location, 3=Acct and Location*/
	
	SELECT  @intUserType=tlj.UserType_id, 
			@intLocationId=tlj.LocationId, 
			@vchAcctName=dbo.fxGetAccountList(@DId, @UId), 
			@vchLocationName=dbo.fxGetUserLocationName(@DId, tlj.LocationId)
	FROM tbl_LoginCompanyJunc tlj
	WHERE tlj.company_id=@DId and tlj.id=@UId
	
	IF @intUserType<>5 OR (@intLocationId IS NULL AND LEN(@vchAcctName) = 0)
		BEGIN
			SET @tintSUserType=0
			RETURN -1
		END

	IF @btCfgAcctMngr=1 AND LEN(@vchAcctName) > 0
		BEGIN
			SET @tintSUserType=1
			SET @intSUserId=1
			SET @vchDomainName=@vchAcctName
			SET @vchSUserRootLocationName=@vchAcctName
		END
	
	IF @btCfgLocations=1
	BEGIN
		SET @tintSUserType=2
		SET @intSUserId=@intLocationId
		DECLARE @rLIdInt int
		DECLARE @rLId nvarchar(100)
		DECLARE @rLName nvarchar(max)	
		SET @rLId = ''
		SET @rLName = ''
		DECLARE ul_cursor CURSOR FOR SELECT LocationId FROM UserLocations WHERE DId=@DId AND UId=@UId
		OPEN ul_cursor
		FETCH NEXT FROM ul_cursor INTO @rLIdInt
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @rLId <> ''
			 BEGIN
				SET @rLId = @rLId + ','
				SET @rLName = @rLName + ', '
			 END
			SET @rLId = @rLId + STR(@rLIdInt)
			SET @rLName = @rLName + dbo.fxGetUserLocationName(@DId, @rLIdInt)
			FETCH NEXT FROM ul_cursor INTO @rLIdInt
		END
		CLOSE ul_cursor
		DEALLOCATE ul_cursor

		SET @vchSUserRootLocationId=@rLId
		SET @vchSUserRootLocationName=@rLName
		SET @vchDomainName=@vchLocationName

		IF @btCfgAcctMngr=1 AND LEN(@vchAcctName) > 0
			SET @tintSUserType=3
	END
	
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_SelectSuperUserUserList]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectSuperUserUserList]
	(
		@DId int,
		@UId int,
		@tintSUserType tinyint=null, /*0=Error-Not Super User, 1=Acct, 2=Location, 3=Acct and Location*/
		@AccId int =null,
		@vchUserRootLocationIdList nvarchar(1000)= null
	)
AS
	DECLARE @btAllowSUserToChooseAnyLogin bit

	---Lookup if Acct Mngr is enabled.  Users were added to accounts, then account manager was disabled. These accounts where having unexpected permissions. 
	SELECT @btAllowSUserToChooseAnyLogin = dbo.fxGetConfigValueBit(@DId, 'btAllowSUserToChooseAnyLogin')
	
	IF @btAllowSUserToChooseAnyLogin=1
	BEGIN
		SELECT DISTINCT tlj.id, dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) as FullName, l.id as UserId
		FROM tbl_LoginCompanyJunc tlj
		JOIN tbl_Logins l ON l.id=tlj.login_id
		WHERE tlj.company_id=@DId AND tlj.btUserInactive=0
		ORDER BY dbo.fxGetUserName(l.FirstName, l.LastName, l.Email)
	END
	ELSE IF @tintSUserType=1
	BEGIN
		IF @AccId IS NULL
			SELECT DISTINCT tlj.id, dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) as FullName, l.id as UserId
			FROM tbl_LoginCompanyJunc tlj
			INNER JOIN tbl_Logins l ON l.id=tlj.login_id
			LEFT OUTER JOIN UserAccounts ON UserAccounts.DepartmentId=@DId AND tlj.id = UserAccounts.UserId
			WHERE tlj.company_id=@DId 
				AND (UserAccounts.AccountId IN (SELECT AccountId FROM UserAccounts WHERE DepartmentId=@DId AND UserId=@UId)
					OR
					(UserAccounts.AccountId IS NULL AND UserAccounts.DepartmentId = @DId ))
				AND
				tlj.btUserInactive=0
			ORDER BY dbo.fxGetUserName(l.FirstName, l.LastName, l.Email)
		ELSE IF @AccId=-1
			SELECT DISTINCT tlj.id, dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) as FullName, l.id as UserId
			FROM tbl_LoginCompanyJunc tlj
			INNER JOIN tbl_Logins l ON l.id=tlj.login_id
			LEFT OUTER JOIN UserAccounts ON UserAccounts.DepartmentId=@DId AND tlj.id = UserAccounts.UserId
			WHERE tlj.company_id=@DId AND UserAccounts.AccountId IS NULL AND tlj.btUserInactive=0
			ORDER BY dbo.fxGetUserName(l.FirstName, l.LastName, l.Email)
		ELSE
			SELECT DISTINCT tlj.id, dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) as FullName, l.id as UserId
			FROM tbl_LoginCompanyJunc tlj
			INNER JOIN tbl_Logins l ON l.id=tlj.login_id
			LEFT OUTER JOIN UserAccounts ON UserAccounts.DepartmentId=@DId AND tlj.id = UserAccounts.UserId
			WHERE tlj.company_id=@DId AND UserAccounts.AccountId=@AccId AND tlj.btUserInactive=0
			ORDER BY dbo.fxGetUserName(l.FirstName, l.LastName, l.Email)					 
	END	
	ELSE IF @tintSUserType=2
	BEGIN
		SELECT DISTINCT tlj.id, dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) as FullName, l.id as UserId
		FROM tbl_LoginCompanyJunc tlj
		INNER JOIN tbl_Logins l ON l.id=tlj.login_id
		LEFT OUTER JOIN UserLocations ON UserLocations.DId=@DId AND tlj.id = UserLocations.UId
		WHERE tlj.company_id=@DId AND UserLocations.LocationId IN (SELECT Id FROM dbo.fxGetAllChildLocationsFromList(@DId, @vchUserRootLocationIdList)) AND tlj.btUserInactive=0
		ORDER BY dbo.fxGetUserName(l.FirstName, l.LastName, l.Email)
	END
	ELSE
	BEGIN
		IF @AccId IS NULL
			SELECT DISTINCT tlj.id, dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) as FullName, l.id as UserId
			FROM tbl_LoginCompanyJunc tlj
			JOIN tbl_Logins l ON l.id=tlj.login_id
			LEFT OUTER JOIN UserAccounts ON UserAccounts.DepartmentId=@DId AND tlj.id = UserAccounts.UserId
			WHERE tlj.company_id=@DId 
				AND (tlj.LocationId IN (SELECT Id FROM dbo.fxGetAllChildLocationsFromList(@DId, @vchUserRootLocationIdList)) 
					OR
					(UserAccounts.AccountId IS NOT NULL AND UserAccounts.AccountId IN (SELECT AccountId FROM UserAccounts WHERE DepartmentId=@DId AND UserId=@UId)) 
					OR
					(UserAccounts.AccountId IS NULL AND UserAccounts.DepartmentId = @DId ))
				AND 
				tlj.btUserInactive=0
			ORDER BY dbo.fxGetUserName(l.FirstName, l.LastName, l.Email)
		ELSE IF @AccId=-1
			SELECT DISTINCT tlj.id, dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) as FullName, l.id as UserId
			FROM tbl_LoginCompanyJunc tlj
			INNER JOIN tbl_Logins l ON l.id=tlj.login_id
			LEFT OUTER JOIN UserAccounts ON UserAccounts.DepartmentId=@DId AND tlj.id = UserAccounts.UserId
			WHERE tlj.company_id=@DId 
				AND (tlj.LocationId IN (SELECT Id FROM dbo.fxGetAllChildLocationsFromList(@DId, @vchUserRootLocationIdList)) 
				OR UserAccounts.AccountId IS NULL) 
				AND tlj.btUserInactive=0
			ORDER BY dbo.fxGetUserName(l.FirstName, l.LastName, l.Email)
		ELSE	
			SELECT DISTINCT tlj.id, dbo.fxGetUserName(l.FirstName, l.LastName, l.Email) as FullName, l.id as UserId
			FROM tbl_LoginCompanyJunc tlj
			INNER JOIN tbl_Logins l ON l.id=tlj.login_id
			LEFT OUTER JOIN UserAccounts ON UserAccounts.DepartmentId=@DId AND tlj.id = UserAccounts.UserId
			WHERE tlj.company_id=@DId 
				AND (tlj.LocationId IN (SELECT Id FROM dbo.fxGetAllChildLocationsFromList(@DId, @vchUserRootLocationIdList)) 
				OR UserAccounts.AccountId=@AccId) 
				AND tlj.btUserInactive=0
			ORDER BY dbo.fxGetUserName(l.FirstName, l.LastName, l.Email)				
	END
GO
PRINT N'Creating [dbo].[sp_SelectSuperUserUserSearch]...';


GO
CREATE Procedure [dbo].[sp_SelectSuperUserUserSearch]
(
	@DId int,
	@UId int,
	@tintSUserType tinyint=null, /*0=Error-Not Super User, 1=Acct, 2=Location, 3=Acct and Location*/
	@vchUserRootLocationIdList nvarchar(1000)= null,
	@SearchString nvarchar(250)
)

As	
	
	DECLARE @btAllowSUserToChooseAnyLogin bit

	---Lookup if Acct Mngr is enabled.  Users were added to accounts, then account manager was disabled. These accounts where having unexpected permissions. 
	SELECT @btAllowSUserToChooseAnyLogin = dbo.fxGetConfigValueBit(@DId, 'btAllowSUserToChooseAnyLogin')
	
	IF @btAllowSUserToChooseAnyLogin=1
	BEGIN
		SELECT DISTINCT 
			tlj.Id AS UserID,
			dbo.fxGetFullUserName(l.FirstName, l.LastName, l.Email) AS FullName,
			L.Email
		FROM tbl_LoginCompanyJunc tlj
		JOIN tbl_Logins l ON l.id=tlj.login_id
		WHERE tlj.company_id=@DId AND tlj.btUserInactive=0
			AND 
			(L.LastName+', '+L.FirstName LIKE @SearchString + '%' OR L.FirstName+' '+L.LastName LIKE @SearchString + '%' OR L.Email LIKE @SearchString + '%') 
			AND 
			tlj.UserType_Id<>4 
		ORDER BY dbo.fxGetFullUserName(l.FirstName, l.LastName, l.Email)
	END
	ELSE IF @tintSUserType=1
	BEGIN
			SELECT DISTINCT 
				tlj.Id AS UserID,
				dbo.fxGetFullUserName(l.FirstName, l.LastName, l.Email) AS FullName,
				L.Email
			FROM tbl_LoginCompanyJunc tlj
			INNER JOIN tbl_Logins l ON l.id=tlj.login_id
			LEFT OUTER JOIN UserAccounts ON UserAccounts.DepartmentId=@DId AND tlj.id = UserAccounts.UserId
			WHERE tlj.company_id=@DId 
				AND (UserAccounts.DepartmentId = @DId AND (ISNULL(UserAccounts.AccountId, -1) IN (SELECT ISNULL(AccountId, -1) FROM UserAccounts WHERE DepartmentId=@DId AND UserId=@UId)))
					--OR (UserAccounts.AccountId IS NULL AND UserAccounts.DepartmentId = @DId ))				
				AND
				tlj.btUserInactive=0
				AND 
				(L.LastName+', '+L.FirstName LIKE @SearchString + '%' OR L.FirstName+' '+L.LastName LIKE @SearchString + '%' OR L.Email LIKE @SearchString + '%') 
				AND 
				tlj.UserType_Id<>4 
			ORDER BY dbo.fxGetFullUserName(l.FirstName, l.LastName, l.Email)				 
	END	
	ELSE IF @tintSUserType=2
	BEGIN
		SELECT DISTINCT 
			tlj.Id AS UserID,
			dbo.fxGetFullUserName(l.FirstName, l.LastName, l.Email) AS FullName,
			L.Email
		FROM tbl_LoginCompanyJunc tlj
		INNER JOIN tbl_Logins l ON l.id=tlj.login_id
		LEFT OUTER JOIN UserLocations ON UserLocations.DId=@DId AND tlj.id = UserLocations.UId
		WHERE tlj.company_id=@DId AND UserLocations.LocationId IN (SELECT Id FROM dbo.fxGetAllChildLocationsFromList(@DId, @vchUserRootLocationIdList)) AND tlj.btUserInactive=0
			AND 
			(L.LastName+', '+L.FirstName LIKE @SearchString + '%' OR L.FirstName+' '+L.LastName LIKE @SearchString + '%' OR L.Email LIKE @SearchString + '%') 
			AND 
			tlj.UserType_Id<>4 
		ORDER BY dbo.fxGetFullUserName(l.FirstName, l.LastName, l.Email)
	END
	ELSE
	BEGIN
			SELECT DISTINCT 
				tlj.Id AS UserID,
				dbo.fxGetFullUserName(l.FirstName, l.LastName, l.Email) AS FullName,
				L.Email
			FROM tbl_LoginCompanyJunc tlj
			JOIN tbl_Logins l ON l.id=tlj.login_id
			LEFT OUTER JOIN UserAccounts ON UserAccounts.DepartmentId=@DId AND tlj.id = UserAccounts.UserId
			WHERE tlj.company_id=@DId 
				AND (tlj.LocationId IN (SELECT Id FROM dbo.fxGetAllChildLocationsFromList(@DId, @vchUserRootLocationIdList)) 
					OR
					(UserAccounts.DepartmentId = @DId AND (ISNULL(UserAccounts.AccountId, -1) IN (SELECT ISNULL(AccountId, -1) FROM UserAccounts WHERE DepartmentId=@DId AND UserId=@UId))))
					--(UserAccounts.AccountId IS NOT NULL AND UserAccounts.AccountId IN (SELECT AccountId FROM UserAccounts WHERE DepartmentId=@DId AND UserId=@UId)) 
					--OR
					--(UserAccounts.AccountId IS NULL AND UserAccounts.DepartmentId = @DId ))
				AND
				tlj.btUserInactive=0
				AND 
				(L.LastName+', '+L.FirstName LIKE @SearchString + '%' OR L.FirstName+' '+L.LastName LIKE @SearchString + '%' OR L.Email LIKE @SearchString + '%') 
				AND 
				tlj.UserType_Id<>4 
			ORDER BY dbo.fxGetFullUserName(l.FirstName, l.LastName, l.Email)			
	END
GO
PRINT N'Creating [dbo].[sp_SelectSupportGroup]...';


GO
CREATE PROCEDURE sp_SelectSupportGroup
	(
		@DId int,
		@Id int,
		@vchName nvarchar(50) OUTPUT
	)
AS
	SET @vchName = (SELECT vchName FROM SupportGroups WHERE DId=@DId AND Id=@Id)
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectSupportGroupByName]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectSupportGroupByName]
	(
		@DId int,
		@Id int OUTPUT,
		@vchName nvarchar(50)
	)
AS
BEGIN
	SET @Id = 0
	SELECT @Id=Id FROM SupportGroups WHERE DId=@DId AND vchName=@vchName
	IF @Id IS NULL
	   SET @Id=0
END
GO
PRINT N'Creating [dbo].[sp_SelectSupportGroups]...';


GO
CREATE PROCEDURE dbo.sp_SelectSupportGroups
	(
		@DId int
	)
AS
	SELECT id, vchName FROM SupportGroups WHERE DId=@DId ORDER BY vchName
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectSupportGrpMmbrs]...';


GO
CREATE PROCEDURE dbo.sp_SelectSupportGrpMmbrs
	(
		@DId int,
		@SupGroupId int
	)
AS
	SELECT vl.id, vl.vchFirstName, vl.vchLastName, vl.vchEmail, vchLastName+', '+vl.vchFirstName+' ( '+vl.vchEmail+' )' as FullName
	FROM vw_Logins vl
	JOIN tbl_LoginCompanyJunc lj ON lj.company_id=@DId AND lj.id=vl.id AND lj.SupGroupId=@SupGroupId
	WHERE vl.DId=@DId
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectSupportGrpMmbrsDD]...';


GO
CREATE PROCEDURE dbo.sp_SelectSupportGrpMmbrsDD
	(
		@DId int,
		@SupGroupId int
	)
AS
--VGOOZ 27-SEP-2005: tkt #2951 - Inactive users functionality
--MRUDKOVSKI: 29-JAN-2006: Ticket #3175 - Support Groups Configuration Bug
	SELECT vl.id, vl.vchLastName+', '+vl.vchFirstName as vchFullName
	FROM vw_Logins vl
	JOIN tbl_LoginCompanyJunc lj ON lj.company_id=@DId AND lj.id=vl.id AND (lj.UserType_Id in (2, 3)) AND (lj.SupGroupId IS NULL OR lj.SupGroupId <> @SupGroupId)
	WHERE vl.DId=@DId AND vl.btUserInactive=0
	ORDER BY vchFullName ASC
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectSupportPortal]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectSupportPortal]
(
		@DId int,
		@AccountID int
	)
AS
	
	SELECT 
      [Header]
      ,[Footer]
      ,Css
	FROM 
		[SupportPortal]
	WHERE
		[DId] = @DId
		AND
		ISNULL([AccountID], 0) = @AccountID
GO
PRINT N'Creating [dbo].[sp_SelectSupportPortalLink]...';


GO
CREATE  PROCEDURE dbo.sp_SelectSupportPortalLink
(
	@DId int,
	@SupportPortalLinkID int
)

As
	
	SELECT
		*
	FROM 
		[SupportPortalLinks]
	WHERE 
		DId = @DId
		AND
		Id = @SupportPortalLinkID
GO
PRINT N'Creating [dbo].[sp_SelectSupportPortalLinks]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectSupportPortalLinks]
(
		@DId int,
		@AccountID int
	)
AS
	
	SELECT 
      *
	FROM 
		SupportPortalLinks
	WHERE
		[DId] = @DId
		AND
		ISNULL([AccountID], 0) = @AccountID
	ORDER BY
		OrderIndex
GO
PRINT N'Creating [dbo].[sp_SelectSysAdminData]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectSysAdminData]
	(
		@deptID int
	)
AS
BEGIN

	--SELECT tlj.id, tlj.login_id, l.FirstName, l.LastName 
	SELECT tlj.id, l.FirstName + ' ' + l.LastName as UserName
	FROM tbl_LoginCompanyJunc tlj 
	JOIN tbl_Logins l ON l.id=tlj.login_id 
	WHERE tlj.company_id = @deptID AND tlj.UserType_Id = 3

END;
GO
PRINT N'Creating [dbo].[sp_SelectSysAdmins]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectSysAdmins]
	(
		@DId int
	)
AS
	SELECT l.id, lcj.id AS UserId, l.FirstName, l.LastName, l.Email, l.Title, l.Phone
	FROM tbl_LoginCompanyJunc lcj
	JOIN tbl_Logins l ON l.id = lcj.login_id
	WHERE lcj.company_id=@DId AND lcj.UserType_Id=3 AND lcj.btUserInactive=0 --VGOOZ 21-NOV-2005: tkt #3083 - Disabled technician showing up
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectTaskType]...';


GO
CREATE Procedure [dbo].[sp_SelectTaskType]
	(
		@DepartmentID int,
		@TaskTypeID int
	)
As
	SELECT * FROM TaskType WHERE (DepartmentID=@DepartmentID) AND (TaskTypeID=@TaskTypeID)
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectTaskTypeOverriddenCosts]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTaskTypeOverriddenCosts]
	(
		@DId int,
		@TaskTypeId int
	)
AS		

	SELECT     
		tttc.TechId,
		CASE  
			WHEN tttc.TechId IS NULL
				THEN 'All Technicians' 
			ELSE l.LastName+', '+l.FirstName END AS FullName,
		tttc.Cost
	FROM         
		TaskTypeTechCost tttc
			LEFT OUTER JOIN	tbl_LoginCompanyJunc
				ON  tttc.DId = tbl_LoginCompanyJunc.company_id 
					AND 
					tttc.TechId = tbl_LoginCompanyJunc.id 
			LEFT OUTER JOIN
					tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
	WHERE
		tttc.TaskTypeId = @TaskTypeId
		AND
		tttc.DId = @DId
GO
PRINT N'Creating [dbo].[sp_SelectTaskTypes]...';


GO
CREATE Procedure [dbo].[sp_SelectTaskTypes]
(
		@DepartmentID int,
		@Active bit = null
)
As
	SELECT * FROM TaskType 
	WHERE TaskType.DepartmentId = @DepartmentID
	AND ((TaskType.Active = @Active) OR @Active IS NULL)
	ORDER BY Active DESC, TaskTypeName
	return
GO
PRINT N'Creating [dbo].[sp_SelectTaskTypeTechBillableRates]...';


GO
CREATE Procedure dbo.sp_SelectTaskTypeTechBillableRates
	(
		@DId int,
		@TechID int
	)
AS

	IF (@TechID = 0)
	BEGIN
		SELECT
			TaskTypeId AS Id, TaskTypeName AS [Name], HourlyRate,
			0 AS TaskTypeTechBillableRateID
		FROM
			TaskType
		WHERE
			DepartmentID = @DId
			AND
			EstimatedCost IS NOT NULL 
			AND
			Active = 1
	END
	ELSE
	BEGIN
		SELECT
			tttbr.TaskTypeId AS Id, tt.TaskTypeName AS [Name], tttbr.HourlyRate,
			tttbr.Id AS TaskTypeTechBillableRateID
		FROM
			TaskTypeTechBillableRate tttbr INNER JOIN TaskType tt
				ON tttbr.DId = tt.DepartmentID AND tttbr.TaskTypeId = tt.TaskTypeId
		WHERE
			tttbr.DId = @DId
			AND
			tttbr.TechId = @TechID			
			AND
			tt.Active = 1
	END
GO
PRINT N'Creating [dbo].[sp_SelectTaskTypeTechCosts]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTaskTypeTechCosts]
	(
		@DId int,
		@TechID int
	)
AS

	IF (@TechID = 0)
	BEGIN
		SELECT
			TaskTypeId AS Id, TaskTypeName AS [Name], EstimatedCost AS Cost
		FROM
			TaskType
		WHERE
			DepartmentID = @DId
			AND
			EstimatedCost IS NOT NULL 
			AND
			Active = 1
	END
	ELSE
	BEGIN
		SELECT
			ttc.TaskTypeId AS Id, tt.TaskTypeName AS [Name], ttc.Cost AS Cost
		FROM
			TaskTypeTechCost ttc INNER JOIN TaskType tt
				ON ttc.DId = tt.DepartmentID AND ttc.TaskTypeId = tt.TaskTypeId
		WHERE
			ttc.DId = @DId
			AND
			ttc.TechId = @TechID			
			AND
			tt.Active = 1
	END
GO
PRINT N'Creating [dbo].[sp_SelectTaskTypeTechs]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectTaskTypeTechs]
	(
		@TaskTypeID int,
		@CompanyID int
	)
AS
		
	DECLARE @AllTechCount int
	DECLARE @TechCount int
	SET @AllTechCount = NULL
	SET @TechCount = NULL

	SELECT @AllTechCount=COUNT(ttt.TaskTypeTechID) FROM TaskTypeTech ttt WHERE ttt.CompanyID = @CompanyID AND ttt.TaskTypeID = @TaskTypeID AND (ttt.TechID IS NULL)
	SELECT @TechCount=COUNT(ttt.TaskTypeTechID) FROM TaskTypeTech ttt WHERE ttt.CompanyID = @CompanyID AND ttt.TaskTypeID = @TaskTypeID AND (ttt.TechID IS NOT NULL)
	IF ((@AllTechCount IS NOT NULL) AND (@TechCount IS NOT NULL))
		IF ((@AllTechCount = 1) AND (@TechCount > 0))
			DELETE
				[TaskTypeTech]
			WHERE
				TaskTypeID = @TaskTypeID AND CompanyID = @CompanyID AND (TechID IS NOT NULL)

	SELECT     
		tbl_LoginCompanyJunc.id,
		CASE  
			WHEN TaskTypeTech.TechID IS NULL
				THEN 'All Technicians' 
			ELSE dbo.fxGetUserName2(l.FirstName, l.LastName, l.Email) END AS FullName,
		TaskTypeTech.TaskTypeTechID,
		TaskTypeTechBillableRate.HourlyRate, 
		TaskTypeTechCost.Cost,
		ISNULL(TaskTypeTechBillableRate.Id, 0) AS TaskTypeTechBillableRateID,
		ISNULL(TaskTypeTechCost.Id, 0) AS TaskTypeTechCostID
	FROM         
		TaskTypeTech 
			LEFT OUTER JOIN
				tbl_LoginCompanyJunc ON TaskTypeTech.CompanyID = tbl_LoginCompanyJunc.company_id 
				AND 
        TaskTypeTech.TechID = tbl_LoginCompanyJunc.id 
	LEFT OUTER JOIN
		tbl_Logins l ON tbl_LoginCompanyJunc.login_id = l.id
	LEFT OUTER JOIN
        TaskTypeTechBillableRate ON TaskTypeTech.CompanyID = TaskTypeTechBillableRate.DId 
		AND 
        TaskTypeTech.TaskTypeID = TaskTypeTechBillableRate.TaskTypeId 
		AND 
		TaskTypeTech.TechID = TaskTypeTechBillableRate.TechId 
	LEFT OUTER JOIN
        TaskTypeTechCost ON TaskTypeTech.CompanyID = TaskTypeTechCost.DId 
		AND 
		TaskTypeTech.TaskTypeID = TaskTypeTechCost.TaskTypeId 
		AND 
        TaskTypeTech.TechID = TaskTypeTechCost.TechId
	WHERE
		TaskTypeTech.TaskTypeID = @TaskTypeID
		AND
		TaskTypeTech.CompanyID = @CompanyID
GO
PRINT N'Creating [dbo].[sp_SelectTechAccountsProjects]...';


GO
CREATE PROCEDURE dbo.sp_SelectTechAccountsProjects
(
		@CompanyID int,
		@TechID int
	)

AS
	DECLARE @retAllEntities bit, @btCfgESG bit 

	SET @btCfgESG = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgESG')

	SET @retAllEntities = 0
	IF (@TechID < 0)
	BEGIN
		 SET @retAllEntities = 1
		SET @TechID = (-1*@TechID)
	END
	
	DECLARE @AccountsProjectsTasks TABLE(
  	Id int,
	[Name] nvarchar(150),
  	ComplexID nvarchar(10),
  	Active bit,
	ActiveString nvarchar(15),
	TaskTypeName nvarchar(50),
	SelectLevel nvarchar(150))


DECLARE @Id int,
		@Name nvarchar(150),
  		@ComplexID nvarchar(10),
  		@Active bit,
		@ActiveString nvarchar(15),
		@TaskTypeName nvarchar(50),
		@SelectLevel nvarchar(150)
		

DECLARE AProjects CURSOR LOCAL FOR
		SELECT 
			-1 AS Id, 
			(SELECT company_name FROM tbl_company WHERE company_id = @CompanyID) + ' (Internal)' As [Name],
			'-1|A' AS ComplexID,
			1 AS Active,
			'Active' AS ActiveString		
		WHERE 
			((SELECT COUNT(ISNULL(AccountTech.TechID, 0)) FROM AccountTech WHERE AccountTech.CompanyID = @CompanyID AND AccountTech.AccountID IS NULL AND (AccountTech.TechID = @TechID OR AccountTech.TechID IS NULL)) > 0)
			OR @retAllEntities = 1
		UNION
		SELECT Accounts.Id, Accounts.vchName as [Name], CAST(Accounts.Id AS nvarchar) + '|A' AS ComplexID, Accounts.btActive AS Active, CASE WHEN Accounts.btActive = 1 THEN 'Active' ELSE 'Inactive' END AS ActiveString
		FROM Accounts INNER JOIN AccountTech 
			ON Accounts.DId = AccountTech.CompanyID AND Accounts.Id = AccountTech.AccountID
			
		WHERE Accounts.DId = @CompanyID AND (AccountTech.TechID = @TechID OR AccountTech.TechID IS NULL OR @retAllEntities = 1) 
		UNION
		SELECT Project.ProjectID AS Id, 
		(CASE WHEN Project.AccountID IS NOT NULL 
				THEN Accounts.vchName + ' - ' + dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID)
				ELSE (SELECT company_name FROM tbl_company WHERE company_id = @CompanyID) + ' (Internal)' + ' - ' + dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID)
			END) AS [Name],
		(CAST(Project.ProjectID AS nvarchar) + '|P') AS ComplexID, Project.Active, CASE WHEN Project.Active = 1 THEN 'Active' ELSE 'Inactive' END AS ActiveString
		FROM Project 
			LEFT OUTER JOIN Accounts 
				ON Project.CompanyID = Accounts.DId AND (Project.AccountID = Accounts.Id) 			
		WHERE Project.CompanyID = @CompanyID AND (dbo.fxIsTechAssignedToProject(Project.CompanyID, Project.AccountID, Project.ProjectID, @TechID, @btCfgESG) = 1 OR @retAllEntities = 1)
		ORDER BY Active DESC, [Name]



OPEN AProjects

FETCH NEXT FROM AProjects INTO @Id, @Name, @ComplexID, @Active, @ActiveString

WHILE @@FETCH_STATUS = 0
BEGIN
	
	IF (CHARINDEX('|A', @ComplexID) > 0)
	BEGIN
		INSERT INTO @AccountsProjectsTasks
		SELECT 
			@Id, @Name, @ComplexID, @Active, @ActiveString,
			tasks.TaskTypeName,
			tasks.SelectLevel
		FROM 
			dbo.fxSelectAssignedTaskTypes(@CompanyID, @TechID, NULL, NULL, @Id) tasks
		ORDER BY TaskTypeName
	END
	ELSE
	BEGIN
		INSERT INTO @AccountsProjectsTasks
		SELECT 
			@Id, @Name, @ComplexID, @Active, @ActiveString,
			tasks.TaskTypeName,
			tasks.SelectLevel
		FROM 
			dbo.fxSelectAssignedTaskTypes(@CompanyID, @TechID, @Id, NULL, NULL) tasks
		ORDER BY TaskTypeName
	END
	FETCH NEXT FROM AProjects INTO @Id, @Name, @ComplexID, @Active, @ActiveString
END

CLOSE AProjects

SELECT * FROM @AccountsProjectsTasks
GO
PRINT N'Creating [dbo].[sp_SelectTechCheckInStatus]...';


GO

Create Procedure sp_SelectTechCheckInStatus

	(
		@DepartmentId int,
		@UserId int
	)
As
	SELECT CheckinStatus FROM tbl_LoginCompanyJunc WHERE company_id = @DepartmentId AND id = @UserId
	return
GO
PRINT N'Creating [dbo].[sp_SelectTechHourlyRate]...';


GO
CREATE Procedure dbo.sp_SelectTechHourlyRate
	(
		@DId int,
		@UId int,
		@TaskTypeID int,
		@smHourlyRate smallmoney OUTPUT
	)
AS

	DECLARE @DefineCostCount int
	SET @DefineCostCount = 0

	SELECT
		@DefineCostCount = COUNT(Id)
	FROM
		TaskTypeTechCost
	WHERE
		DId = @DId
		AND
		TaskTypeId = @TaskTypeID
		AND
		TechId = @UId

	IF (@DefineCostCount > 0)
	BEGIN
		SELECT
			@smHourlyRate = Cost
		FROM
			TaskTypeTechCost
		WHERE
			DId = @DId
			AND
			TaskTypeId = @TaskTypeID
			AND
			TechId = @UId
	END
	ELSE
	BEGIN
		SELECT
			@smHourlyRate = EstimatedCost
		FROM
			TaskType
		WHERE
			DepartmentID = @DId
			AND
			TaskTypeId = @TaskTypeID
		IF (@smHourlyRate IS NULL)
		BEGIN
			SELECT @smHourlyRate = ISNULL(configHourlyRate, 0) FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@UId	
			IF @smHourlyRate = 0
				SELECT @smHourlyRate = CAST(dbo.fxGetConfigValueStr(@DId, 'configHourlyRate') AS smallmoney)
		END
	END	
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectTechListForPartsConfig]...';


GO
CREATE Procedure dbo.sp_SelectTechListForPartsConfig
	(
		@DId int
	)
As
--VGOOZ 27-SEP-2005: tkt #2951 - Inactive users functionality	
	SELECT l.id, l.UserTypeId, l.vchFirstName, l.vchLastName, l.vchEmail
	FROM vw_Logins l
	WHERE (l.UserTypeId=2 OR l.UserTypeId=3) AND l.DId=@DId AND l.btUserInactive=0 AND l.id NOT IN(SELECT logincompanyJunc_id FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId = @DId)
	ORDER BY l.vchlastname, l.vchfirstname
    
	return
GO
PRINT N'Creating [dbo].[sp_SelectTechs]...';


GO
CREATE Procedure [dbo].[sp_SelectTechs]
(  
  @DId int
 )  
  
As  
--VGOOZ 23-SEP-2005: tkt #2951 - Inactive users functionality   

 if ISNULL(dbo.fxGetConfigValueBit(@DId, 'configUAQ'), 0) = 1  
  BEGIN  
   SELECT tlj.id, lo.Email, lo.FirstName, lo.LastName, dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) as vchFullName, tlj.usertype_id as UserTypeId, tlj.CheckinStatus ,
    dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) + CASE WHEN ISNULL(lo.Title, '') = '' THEN '' ELSE ' | ' + lo.Title + ' | ' + lo.Email END as FullNameWithTitle
   FROM tbl_LoginCompanyJunc tlj  
   JOIN tbl_Logins lo ON lo.id=tlj.login_id  
   WHERE tlj.company_id=@DId AND (tlj.UserType_Id=2 OR tlj.UserType_Id=3 OR tlj.UserType_Id=4) AND tlj.btUserInactive=0  
   ORDER BY dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email)  
     
   return   
  END  
 ELSE  
  BEGIN  
   SELECT tlj.id, lo.Email, lo.FirstName, lo.LastName, dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) as vchFullName, tlj.UserType_Id as UserTypeId, tlj.CheckinStatus,
    dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) + CASE WHEN ISNULL(lo.Title, '') = '' THEN '' ELSE ' | ' + lo.Title + ' | ' + lo.Email END as FullNameWithTitle
   FROM tbl_LoginCompanyJunc tlj  
   JOIN tbl_Logins lo ON lo.id=tlj.login_id  
   WHERE tlj.company_id=@DId AND (tlj.UserType_Id=2 OR tlj.UserType_Id=3) AND tlj.btUserInactive=0  
   ORDER BY dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email)  
     
   return   
  END
GO
PRINT N'Creating [dbo].[sp_SelectTechsHourlyRates]...';


GO


CREATE Procedure [dbo].[sp_SelectTechsHourlyRates]
	(
		@DepartmentId int,
		@Inactive bit = null
	)
As
	DECLARE @configHourlyRate smallmoney
	DECLARE @configHourlyBillableRate smallmoney
	DECLARE @CfgQBAccount nvarchar(max)
	SELECT @configHourlyRate=CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'configHourlyRate') AS smallmoney)
	SELECT @configHourlyBillableRate=CAST(dbo.fxGetConfigValueStr(@DepartmentId, 'configHourlyBillableRate') as smallmoney)
	SELECT @CfgQBAccount=ISNULL(dbo.fxGetConfigValueStr(@DepartmentId, 'CfgQBAccount'), '')
	SELECT 
		L.id, 
		CASE WHEN L.configHourlyRate IS NULL THEN CASE WHEN @configHourlyRate = 0 THEN NULL ELSE @configHourlyRate END ELSE L.configHourlyRate END AS configHourlyRate, 
		LO.FirstName, 
		LO.LastName,
		CASE WHEN L.configHourlyBillableRate IS NULL THEN CASE WHEN @configHourlyBillableRate  = 0 THEN NULL ELSE @configHourlyBillableRate END ELSE L.configHourlyBillableRate END AS configHourlyBillableRate,
		CASE 
			WHEN (L.CfgQBAccount IS NULL) OR (L.CfgQBAccount = '') 
			THEN @CfgQBAccount
			ELSE L.CfgQBAccount
		END AS CfgQBAccount,
		L.CfgIsBillable,
		LO.Email
	FROM tbl_LoginCompanyJunc L
	INNER JOIN tbl_Logins LO ON L.login_id = LO.id
	INNER JOIN tbl_company CO ON L.company_id=CO.company_id
	WHERE L.company_id = @DepartmentId AND (L.UserType_Id = 2 or L.UserType_Id = 3) AND ((L.btUserInactive = @Inactive) OR  @Inactive IS NULL)
	ORDER BY LO.LastName, LO.FirstName
	return
GO
PRINT N'Creating [dbo].[sp_SelectTechsNoQues]...';


GO
CREATE Procedure dbo.sp_SelectTechsNoQues
	(
		@DId int
	)

As
--VGOOZ 23-SEP-2005: tkt #2951 - Inactive users functionality
	SELECT tlj.id, lo.LastName, lo.FirstName, tlj.usertype_id
	FROM tbl_LoginCompanyJunc tlj
	JOIN tbl_Logins lo ON lo.id=tlj.login_id
	WHERE tlj.company_id=@DId AND (tlj.usertype_id=2 OR tlj.usertype_id=3) AND tlj.btUserInactive=0
	ORDER BY lo.LastName, lo.FirstName
	
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectTechTaskTypes]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTechTaskTypes]
	(
		@CompanyID int,
		@UserID int		
	)
AS

	DECLARE @DisTask TABLE (TaskTypeID int)
	INSERT INTO @DisTask
	SELECT TaskTypeID FROM dbo.fxGetRepeatableTechTaskTypes(@CompanyID)
	DELETE
		TaskTypeTech
	WHERE
		TaskTypeID IN (SELECT TaskTypeID FROM @DisTask) AND CompanyID = @CompanyID AND (TechID IS NOT NULL)


	SELECT     
		TaskTypeTech.TaskTypeTechID,
		TaskTypeTech.TaskTypeID,
		ISNULL(TaskTypeTech.TechID, 0) AS TechID,
		TaskType.TaskTypeName
	FROM         
		TaskTypeTech INNER JOIN TaskType
			ON TaskTypeTech.CompanyID = TaskType.DepartmentID AND TaskTypeTech.TaskTypeID = TaskType.TaskTypeId		
	WHERE
		((TaskTypeTech.TechID = @UserID) OR TaskTypeTech.TechID IS NULL) 
		AND
		TaskTypeTech.CompanyID = @CompanyID
		AND TaskType.Active = 1
GO
PRINT N'Creating [dbo].[sp_SelectTicket]...';


GO
CREATE PROCEDURE dbo.sp_SelectTicket
	(
		@DId int,
		@TId int
	)
AS
	SELECT * FROM tbl_ticket WHERE company_id = @DId and id = @TId
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectTicketAssets]...';


GO
CREATE PROCEDURE dbo.sp_SelectTicketAssets
	(
		@DId int,
		@TicketId int
	)
AS

SELECT TA.*, A.Name, A.SerialNumber , A.Unique1, A.Unique2, A.Unique3, A.Unique4, A.Unique5, A.Unique6, A.Unique7, A.SerialNumber, AC.Name AS AssetCategoryName, AT.Name AS AssetTypeName, AM.Id as ModelId, AM.Model AS AssetModelName, AM.Links as Links, AMK.Make AS AssetMakeName 
FROM TicketAssets TA 
LEFT OUTER JOIN Assets A ON A.DepartmentId=TA.DId AND TA.AssetId=A.Id 
LEFT OUTER JOIN AssetCategories AC ON A.DepartmentId = AC.DepartmentId AND A.CategoryId = AC.id 
LEFT OUTER JOIN AssetTypes AT ON A.DepartmentId = AT.DepartmentId AND A.TypeId = AT.id 
LEFT OUTER JOIN AssetModels AM ON A.DepartmentId = AM.DepartmentId AND A.ModelId = AM.id 
LEFT OUTER JOIN AssetMakes AMK ON A.DepartmentId = AMK.DepartmentId AND A.MakeId = AMK.id 
WHERE DId=@DId AND TicketId=@TicketId
GO
PRINT N'Creating [dbo].[sp_SelectTicketAssignees]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_SelectTicketAssignees] 
	@DepartmentId int,
	@TicketId int,
	@AssignmentType int,
	@DistinctUsers bit,
	@OnlyActiveAssignments bit = 0
AS
BEGIN
	IF @DistinctUsers = 1
		BEGIN
			SELECT DISTINCT TA.Id, TA.UserId, dbo.fxGetUserName2(L.FirstName, L.LastName, L.Email) AS Name FROM TicketAssignment AS TA
				JOIN tbl_LoginCompanyJunc AS LCJ ON LCJ.company_id = TA.DepartmentId AND LCJ.id = TA.UserId
				JOIN tbl_Logins AS L ON L.id = LCJ.login_id
			WHERE TA.DepartmentId = @DepartmentId AND TA.TicketId = @TicketId AND TA.AssignmentType = @AssignmentType AND (@OnlyActiveAssignments = 0 OR StopDate IS NULL)
		END
	ELSE
		BEGIN
			SELECT TA.Id, TA.UserId, dbo.fxGetUserName2(L.FirstName, L.LastName, L.Email) AS Name, TA.IsPrimary, StartDate, StopDate FROM TicketAssignment AS TA
				JOIN tbl_LoginCompanyJunc AS LCJ ON LCJ.company_id = TA.DepartmentId AND LCJ.id = TA.UserId
				JOIN tbl_Logins AS L ON L.id = LCJ.login_id
			WHERE TA.DepartmentId = @DepartmentId AND TA.TicketId = @TicketId AND TA.AssignmentType = @AssignmentType AND (@OnlyActiveAssignments = 0 OR StopDate IS NULL)
		END
END
GO
PRINT N'Creating [dbo].[sp_SelectTicketcounts]...';


GO
CREATE Procedure [dbo].[sp_SelectTicketcounts]

	(
		@companyID int,
		@newUser int = null,
		@techId int
		
	)

As	
	--MRUDKOVSKI: 19-MAY-2006 - Ticket #3072 - New Messages don't show Closed tickets!
	
	DECLARE @NewUserOpenCount int
	DECLARE @NewTechOpenCount int

	DECLARE @OpenCount int
	DECLARE @ClosedCount int
	DECLARE @OnHoldCount int
	DECLARE @partsOrderCount int
	DECLARE @userTicket int
	DECLARE @reminderTicket int
	DECLARE @sintHourOffset smallint

	DECLARE @UnconfirmedUserTickets int

	SELECT 
		@NewUserOpenCount = SUM(CASE WHEN user_id <> @techid AND NewUserPost = @newuser THEN 1 ELSE 0 END),	
		@OpenCount = SUM(CASE WHEN status = 'Open' THEN 1 ELSE 0 END),
		@ClosedCount = SUM(CASE WHEN status = 'Closed' THEN 1 ELSE 0 END),
		@OnHoldCount = SUM(CASE WHEN status = 'On Hold' THEN 1 ELSE 0 END),
		@partsOrderCount = SUM(CASE WHEN status = 'parts on order' THEN 1 ELSE 0 END),
		@reminderTicket = SUM(CASE WHEN status <> 'Closed' AND dtFollowUp IS NOT NULL THEN 1 ELSE 0 END)
	FROM tbl_ticket
	WHERE company_id = @companyId AND technician_id = @techid
	SELECT
		@NewTechOpenCount = SUM(CASE WHEN technician_id <> @techid AND NewTechPost = @newuser THEN 1 ELSE 0 END),
		@userTicket = SUM(CASE WHEN status <> 'Closed' THEN 1 ELSE 0 END),
		@UnconfirmedUserTickets =  SUM(CASE WHEN status = 'Closed' AND btResolved=1 AND ISNULL(btConfirmed,0)=0 THEN 1 ELSE 0 END)
	FROM tbl_ticket
	WHERE company_id = @companyId AND user_id = @techid
	
	SELECT ISNULL(@NewUserOpenCount,0)+ISNULL(@NewTechOpenCount,0) AS NewMessagesCount, ISNULL(@OpenCount,0) AS OpenTickets, ISNULL(@ClosedCount,0) AS ClosedTickets, ISNULL(@OnHoldCount,0) AS OnHoldTickets, ISNULL(@partsOrderCount,0) AS PartsOnOrderTickets, 
		ISNULL(@userTicket,0) AS UserTickets, ISNULL(@reminderTicket,0) AS reminderTicket, ISNULL(@UnconfirmedUserTickets,0) AS UnconfirmedUserTickets
	return
GO
PRINT N'Creating [dbo].[sp_SelectTicketCountsUser]...';


GO
CREATE Procedure dbo.sp_SelectTicketCountsUser
	(
		@DepartmentId int,
		@UserId int
	)
As

	SELECT 
		ISNULL(SUM(CASE WHEN tbl_ticket.status <> 'Closed' THEN 1 ELSE 0 END),0) AS OpenCount,
		ISNULL(SUM(CASE WHEN tbl_ticket.NewTechPost = 1 THEN 1 ELSE 0 END),0) AS NewMessages,
		ISNULL(SUM(CASE WHEN tbl_ticket.status = 'Closed' THEN 1 ELSE 0 END),0) AS ClosedCount,
		ISNULL(SUM(CASE WHEN tbl_ticket.status = 'Closed' AND tbl_ticket.btResolved=1 AND ISNULL(tbl_ticket.btConfirmed,0)=0 THEN 1 ELSE 0 END),0) AS UnconfirmedUserTickets
	FROM tbl_ticket 
	WHERE tbl_ticket.company_id = @DepartmentId 
		AND 
		tbl_ticket.user_id = @UserId

	return
GO
PRINT N'Creating [dbo].[sp_SelectTicketCriteriaDataByType]...';


GO
CREATE Procedure dbo.sp_SelectTicketCriteriaDataByType
	(
		@DId int,
		@FilterType tinyint,
		@TicketCriteriaId int = null
	)

As

IF NOT @TicketCriteriaId IS NULL
BEGIN
	IF @FilterType=1 --Locations without childs
		SELECT TCD.FilterDataId AS ID, L.Name AS Name, CAST(1 AS bit) AS State
		FROM TicketCriteriaData TCD
		INNER JOIN Locations L ON L.DId=@DId AND TCD.FilterDataId=L.Id
		WHERE TCD.DId=@DId AND TCD.TicketCriteriaId=@TicketCriteriaId AND TCD.FilterType=@FilterType
	ELSE IF @FilterType=2 --Classes without childs
		SELECT TCD.FilterDataId AS ID, C.Name AS Name, CAST(1 AS bit) AS State
		FROM TicketCriteriaData TCD
		INNER JOIN tbl_class C ON C.company_id=@DId AND TCD.FilterDataId=C.id
		WHERE TCD.DId=@DId AND TCD.TicketCriteriaId=@TicketCriteriaId AND TCD.FilterType=@FilterType
/*
		SELECT C.id AS ID, C.Name AS Name, CASE WHEN TCD.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State
		FROM	tbl_class C
		LEFT OUTER JOIN TicketCriteriaData TCD ON  C.company_id=TCD.DId AND C.id = TCD.FilterDataId  AND TCD.TicketCriteriaId=@TicketCriteriaId AND TCD.FilterType=@FilterType
		WHERE C.company_id=@DId AND C.btInactive=0 ORDER BY Name
*/
	ELSE IF @FilterType=3 --UnassignedQueues
		SELECT J.id AS ID, L.FirstName+' '+L.LastName AS Name, CASE WHEN TCD.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State
		FROM tbl_LoginCompanyJunc J JOIN tbl_logins L ON J.login_id = L.id 
		LEFT OUTER JOIN TicketCriteriaData TCD ON J.company_id=TCD.DId AND J.id = TCD.FilterDataId  AND TCD.TicketCriteriaId=@TicketCriteriaId AND TCD.FilterType=@FilterType
		WHERE J.company_id = @DId AND J.UserType_Id = 4 ORDER BY Name
	ELSE IF @FilterType=4 --SupportGroups
		SELECT SG.id AS ID, SG.vchName AS Name, CASE WHEN TCD.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State
		FROM	SupportGroups SG
		LEFT OUTER JOIN TicketCriteriaData TCD ON  SG.DId=TCD.DId AND SG.id = TCD.FilterDataId  AND TCD.TicketCriteriaId=@TicketCriteriaId AND TCD.FilterType=@FilterType
		WHERE SG.DId=@DId ORDER BY Name
	ELSE IF @FilterType=5 --Levels
		SELECT L.tintLevel AS ID, CAST(L.tintLevel AS nvarchar)+' - '+ISNULL(L.LevelName, 'Level') AS Name, CASE WHEN TCD.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State
		FROM	TktLevels L
		LEFT OUTER JOIN TicketCriteriaData TCD ON L.DId=TCD.DId AND L.tintLevel = TCD.FilterDataId  AND TCD.TicketCriteriaId=@TicketCriteriaId AND TCD.FilterType=@FilterType
		WHERE L.DId=@DId ORDER BY Name
	ELSE IF @FilterType=6 --Accounts
		SELECT A.Id AS ID, A.vchName AS Name, CASE WHEN TCD.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State
		FROM	Accounts A
		LEFT JOIN TicketCriteriaData TCD ON A.DId=TCD.DId AND A.Id = TCD.FilterDataId  AND TCD.TicketCriteriaId=@TicketCriteriaId AND TCD.FilterType=@FilterType
		WHERE A.DId=@DId AND A.btActive=1
		UNION
		SELECT -1 AS ID, '(Internal)' AS Name, (CASE WHEN (SELECT TCD.btExclude FROM TicketCriteriaData TCD WHERE TCD.DId = @DId AND TCD.FilterDataId = -1 AND TCD.TicketCriteriaId=@TicketCriteriaId AND TCD.FilterType=@FilterType) IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END) AS State
		ORDER BY Name
	ELSE IF @FilterType=7 --Priorities
		SELECT P.Id AS ID, CAST(P.tintPriority AS nvarchar)+' - '+ISNULL(P.Name, 'Priority') AS Name, CASE WHEN TCD.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State
		FROM	Priorities P
		LEFT OUTER JOIN TicketCriteriaData TCD ON P.DId=TCD.DId AND P.Id = TCD.FilterDataId  AND TCD.TicketCriteriaId=@TicketCriteriaId AND TCD.FilterType=@FilterType
		WHERE P.DId=@DId ORDER BY P.tintPriority
	ELSE IF @FilterType=0 --GlobalFilterTypes
		SELECT CAST(TCD.FilterType AS int) AS ID, NULL AS Name, CAST(1 AS bit) AS State
		FROM TicketCriteriaData TCD 
		WHERE TCD.DId=@DId AND TCD.TicketCriteriaId=@TicketCriteriaId AND TCD.FilterDataId=0
		ORDER BY ID
	ELSE 
		SELECT TOP 0 0 AS ID, '' AS Name, CAST(0 AS bit) AS State
END
ELSE
BEGIN
	IF @FilterType=3 --UnassignedQueues
		SELECT J.id AS ID, L.FirstName+' '+L.LastName AS Name, CAST(0 AS bit) AS State
		FROM tbl_LoginCompanyJunc J JOIN tbl_logins L ON J.login_id = L.id 
		WHERE J.company_id = @DId AND J.UserType_Id = 4 ORDER BY Name
	ELSE IF @FilterType=4 --SupportGroups
		SELECT SG.id AS ID, SG.vchName AS Name, CAST(0 AS bit) AS State
		FROM	SupportGroups SG
		WHERE SG.DId=@DId ORDER BY Name
	ELSE IF @FilterType=5 --Levels
		SELECT L.tintLevel AS ID, CAST(L.tintLevel AS nvarchar)+' - '+ISNULL(L.LevelName, 'Level') AS Name, CAST(0 AS bit) AS State
		FROM	TktLevels L
		WHERE L.DId=@DId ORDER BY Name
	ELSE IF @FilterType=6 --Accounts
		SELECT A.Id AS ID, A.vchName AS Name, CAST(0 AS bit) AS State
		FROM	Accounts A
		WHERE A.DId=@DId AND A.btActive=1
		UNION
		SELECT -1 AS ID, '(Internal)' AS Name, CAST(0 AS bit) AS State
		ORDER BY Name
	ELSE IF @FilterType=7 --Priorities
		SELECT P.Id AS ID, CAST(P.tintPriority AS nvarchar)+' - '+ISNULL(P.Name, 'Priority') AS Name, CAST(0 AS bit) AS State
		FROM	Priorities P
		WHERE P.DId=@DId ORDER BY P.tintPriority
	ELSE 
		SELECT TOP 0 CAST(0 AS int) AS ID, '' AS Name, CAST(0 AS bit) AS State
END
GO
PRINT N'Creating [dbo].[sp_SelectTicketCriterias]...';


GO
CREATE Procedure dbo.sp_SelectTicketCriterias
	(
		@DId int,
		@Id int = null,
		@UserId int = null,
		@NotificationRuleId int = null
	)
As
	IF @Id IS NULL AND @UserId IS NULL AND @NotificationRuleId IS NULL
		SELECT * FROM TicketCriterias WHERE DId=@DId ORDER BY CriteriaName
	ELSE IF @Id IS NULL AND NOT @UserId IS NULL
		SELECT * FROM TicketCriterias WHERE DId=@DId AND UserId=@UserId ORDER BY CriteriaName
	ELSE IF @Id IS NULL AND NOT @NotificationRuleId IS NULL
		SELECT TOP 1 * FROM TicketCriterias WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId
	ELSE
		SELECT * FROM TicketCriterias WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_SelectTicketDetail]...';


GO
CREATE Procedure [dbo].[sp_SelectTicketDetail]
(
		@DId int,
		@TId int,
		@TPId char(6) = null
	)

As	
	Declare @total_response_min smalldatetime
	Declare @total_complete_time smalldatetime
	Declare	@intSLAResponseUsed int
	Declare @total_id int

	SELECT @intSLAResponseUsed=intSLAResponseUsed, @total_response_min=dtSLAResponse, @total_complete_time=CreateTime from tbl_ticket new_t
	WHERE 
	new_t.company_id=@DId and
	((@TId<>0 AND new_t.Id = @TId) OR (NOT @TPId IS NULL AND new_t.PseudoId=@TPId))

	-- VALERIY GOOZ 31-AUG-2006: Ticket #3664: SLA & Priority Report not showing Goal Times
	SELECT Top 1 @total_response_min=CASE WHEN DATEDIFF(n, new_t.CreateTime, new_tl.dtDate) IS NULL THEN new_t.dtSLAResponse ELSE new_tl.dtDate END 
	FROM tbl_ticket new_t LEFT OUTER JOIN TicketLogs new_tl ON new_tl.TId=new_t.id and new_tl.DId=new_t.company_id
	WHERE 
	new_t.company_id=@DId and
	((@TId<>0 AND new_t.Id = @TId) OR (NOT @TPId IS NULL AND new_t.PseudoId=@TPId)) and 
	new_tl.vchType='Response' and 
	new_t.Status='Closed'
	order by new_tl.dtDate asc

	if @@ROWCOUNT=0 
	BEGIN
 	   select @total_response_min=NULL
	END

	SELECT @total_id=new_t.id FROM tbl_ticket new_t LEFT OUTER JOIN tbl_logincompanyjunc new_tlj ON new_tlj.id=new_t.Technician_id LEFT OUTER JOIN tbl_UserType new_ut ON new_ut.id=new_tlj.UserType_ID
	WHERE 
	new_t.company_id=@DId and
	((@TId<>0 AND new_t.Id = @TId) OR (NOT @TPId IS NULL AND new_t.PseudoId=@TPId)) and 
	new_t.Technician_id=new_t.Created_id and 
	(new_ut.Name='Technician' or new_ut.Name='Administrator')
	--new_t.Status='Closed'
	
	if @@ROWCOUNT>0 
	BEGIN
 	   select @intSLAResponseUsed=0
	END

	SELECT 
		t.Id,
		t.company_id,
		t.Status,
		t.CreateTime, 
		t.ClosedTime,
		t.class_id,
		t.location_id,
		t.LocationId,
		t.PriorityId,
		t.SerialNumber,
		t.Subject,
		t.Note,
		t.Workpad,
--		t.Room,
		t.CreationCatsId,
		t.TicketNumber,
		t.CustomXML,
		t.PartsCost,
		t.LaborCost,
		t.TravelCost,
		t.MiscCost,
		t.Created_id,
		lo3.firstname AS created_firstname, 
		lo3.lastname AS created_lastname, 
		lo3.Email AS created_email,
		lo3.MobileEmail AS created_mobileemail,
		lo3.MobileEmailType AS created_mobileemailtype,
		lo3.Phone AS created_phone,
		lo3.MobilePhone AS created_mobilephone,
		t.dtSLAComplete,
		t.dtSLAResponse,
		t.btInitResponse,
		t.dtReqComp,
		t.ReqCompNote,
		t.dtFollowUp,
		t.FollowUpNote,
		t.dtSLAComplete,
		--t.dtSLAResponse,
		(CASE WHEN @total_response_min IS NULL THEN t.dtSLAResponse ELSE @total_response_min END) as dtSLAResponse,
		t.btInitResponse,
		t.intSLACompleteUsed,
		@intSLAResponseUsed as intSLAResponseUsed,
		t.tintLevel,
		tl.LevelName, --MRUDKOVSKI: 17-MAY-2006 - Ticket #3403 - Add Field - Level Name
		t.btViaEmailParser,
		t.user_id,
		lo1.Title AS user_title,
		lo1.firstname AS user_firstname,
		lo1.lastname AS user_lastname, 
		lo1.Email AS user_email,
		lo1.MobileEmail AS user_mobileemail,
		lo1.MobileEmailType AS user_mobileemailtype,
		lo1.Phone AS user_phone,
		lo1.MobilePhone AS user_mobilephone,
--VGOOZ 28-SEP-2005: tkt #2951 - Inactive users functionality
		tlj1.btUserInactive as user_inactive,
		tlj.Usertype_id AS technician_TypeId,
		tlj.QueEmailAddress as vchQueEmailAddress,
		t.Technician_id,
		lo.firstname AS technician_firstname, 
		lo.lastname AS technician_lastname, 
		lo.Email AS technician_email,
		lo.MobileEmail AS technician_mobileemail,
		lo.MobileEmailType AS technician_mobileemailtype, 
		lo.Phone AS technician_phone,
		lo.MobilePhone AS technician_mobilephone,
--		l.Name AS location_name,
		dbo.fxGetUserLocationName(@DId, t.LocationId) AS LocationName,
		dbo.fxGetFullClassName(@DId, t.class_id) AS class_name,
--		c.Name AS class_name,
		t.folder_id AS FolderId,
		dbo.fxRecurseFolders(@DId, t.folder_id, 0, '') as FolderPath,
		cat.vchName AS CategoryName,
		p.tintPriority,
		p.Name as PriName,
		isnull(a.id,-1) AS intAcctId,
		isnull(a.vchName,co.company_name + ' (Internal)') as vchAcctName,
		t.AccountLocationId,
		dbo.fxGetUserLocationName(@DId, t.AccountLocationId) as AccountLocationName,
		t.ClosureNote,
		t.ResolutionCatsId,
		ISNULL(res.btResolved, ISNULL(t.btResolved, 0)) btResolved,
		res.vchName as ResolutionName,
		dbo.fxGetUserName2(lo2.FirstName, lo2.LastName, lo2.Email) as ConfirmedBy,
		t.btConfirmed,
		t.dtConfirmed,
		t.vchConfirmedNote,
		tlj.SupGroupId AS SupportGroupID,
		sg.vchName AS SupportGroupName, --VGOOZ: 07-Feb-2005 - Added support groups
		t.vchIdMethod AS TicketIdMethod, --VGOOZ: 12-MAR-2005 - Added Ticket ID Method
		t.btHandledByCC AS btHandledByCallCentre, --VGOOZ: 14-MAR-2005 - Added Call Centre support
		sc.vchName as SubmissionCategory, --VGOOZ:15-MAR-2005 - Added Submission Category	
		t.EmailCC, --MRUDKOVSKI: 23-AUG-2005 - added CC field
		t.intTktTimeMin, --VGOOZ: 20-SEP-2005 - Ticket Time
		t.TicketNumberPrefix,
		t.ProjectID,
		dbo.fxGetFullProjectName(@DId, t.ProjectID) AS ProjectName,
		t.NextStep,
		(SELECT COUNT(*) FROM RelatedTickets WHERE DId=@DId AND TicketId=t.Id) AS RelatedTktsCount,
		t.TotalHours,
		t.RemainingHours,
		t.NextStepDate,
		t.SchedTicketID,
		t.UpdatedTime,
		t.PseudoId,
		t.EstimatedTime,
		dbo.fxSelectInitialPost(@DId,t.Id) AS InitPost,
		t.KB,
		t.KBType,
		t.KBPublishLevel,
		t.KBSearchDesc,
		t.KBAlternateId,
		t.KBHelpfulCount,
		CASE WHEN ISNULL(c.KBPortalAlias, '') = '' THEN
		c.Name
		ELSE c.KBPortalAlias END AS KBPortalAlias,
		(SELECT COUNT(ToDoItem.Id) FROM ToDoItem INNER JOIN ToDoList ON ToDoItem.DId = ToDoList.DId AND ToDoItem.ToDoListId = ToDoList.Id WHERE ToDoItem.DId = @DId AND ToDoList.TicketId = t.Id AND ToDoItem.Completed = 0) AS OpenTodosCount,
		t.btNoAccount,
		t.dtSLAStart
	FROM tbl_ticket t
	LEFT OUTER JOIN ResolutionCats res ON res.DId=@DId AND res.Id=t.ResolutionCatsId
	LEFT OUTER JOIN SubmissionCategories sc ON sc.Id=t.intSubmissionCatId

	LEFT OUTER JOIN tbl_LoginCompanyJunc tlj3
		ON tlj3.company_id=@DId AND tlj3.id=t.Created_id
	LEFT JOIN tbl_Logins lo3 ON lo3.id=tlj3.login_id

	LEFT OUTER JOIN tbl_LoginCompanyJunc tlj2
		ON tlj2.company_id=@DId AND tlj2.id=t.intConfirmedBy
	LEFT JOIN tbl_Logins lo2 ON lo2.id=tlj2.login_id


	LEFT OUTER JOIN tbl_LoginCompanyJunc tlj1
		ON tlj1.company_id=@DId AND tlj1.id=t.user_id
	LEFT OUTER JOIN tbl_Logins lo1 ON lo1.id=tlj1.login_id
	
	LEFT OUTER JOIN tbl_LoginCompanyJunc tlj
		ON tlj.company_Id=@DId AND tlj.id=t.Technician_id
	LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id

	--MRUDKOVSKI: 17-MAY-2006 - Ticket #3403 - Add Field - Level Name	
	LEFT OUTER JOIN TktLevels tl ON tl.tintLevel=t.tintLevel AND tl.DId=@DId

	LEFT OUTER JOIN SupportGroups sg
		ON sg.DId=@DId AND sg.Id=tlj.SupGroupId

--	LEFT OUTER JOIN tbl_locations l
--		ON l.DId = @DId AND t.location_id = l.id
	LEFT OUTER JOIN tbl_class c
		ON c.company_id = @DId AND t.class_id = c.id
	LEFT OUTER JOIN CreationCats cat
		on cat.DId = @DId AND t.CreationCatsId = cat.id
	LEFT OUTER JOIN Priorities p
		on p.DId=@DId AND P.id = t.PriorityId
	LEFT OUTER JOIN Accounts a
		on a.DId=@DId AND a.id = t.intAcctId
--	LEFT OUTER JOIN AccountLocations al
--		ON al.DId=@DId AND al.AccountId=t.intAcctId AND al.id=t.intAcctLocationId
	JOIN tbl_company co ON co.company_id=t.company_id
	
	WHERE
		t.company_id = @DId AND 
		((@TId<>0 AND t.Id = @TId) OR (NOT @TPId IS NULL AND t.PseudoId=@TPId))
	return
GO
PRINT N'Creating [dbo].[sp_SelectTicketEstimatedTime]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTicketEstimatedTime]
(
		@CompanyID int,
		@TicketID int
	)
AS
		
	SELECT 
	  ISNULL(EstimatedTime, 0) AS EstimatedTime
	FROM 
		tbl_ticket
	WHERE 
		company_id = @CompanyID 
		AND 
		Id = @TicketID
GO
PRINT N'Creating [dbo].[sp_SelectTicketEstimatedTimes]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTicketEstimatedTimes]
	(
		@DId int,
		@TId int
	)
AS
	SELECT
		tt.Id,
		tt.UserId,
		tt.[Date] AS Created,
		ISNULL(tt.EstimatedTime, -1) AS EstimatedTime,
		dbo.fxGetUserName2(lo.FirstName, lo.LastName, lo.Email) AS vchFullName
	FROM TicketTimeEstimated tt
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=tt.UserId 
		INNER JOIN tbl_Logins lo ON lo.id=tlj.login_id	
	WHERE tt.DId=@DId AND tt.TicketId=@TId
	ORDER BY tt.Date, vchFullName
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectTicketId]...';


GO
CREATE Procedure dbo.sp_SelectTicketId
	(
		@DepartmentId int,
		@TicketNumber nvarchar(20)
	)
As
	Select id FROM tbl_ticket WHERE company_id = @DepartmentId AND ISNULL(TicketNumberPrefix,'')+CAST(TicketNumber AS nvarchar(10))=@TicketNumber
	return
GO
PRINT N'Creating [dbo].[sp_SelectTicketIdByPseudoID]...';


GO
CREATE Procedure dbo.sp_SelectTicketIdByPseudoID
	(
		@DepartmentId int,
		@PseudoID char(6)
	)
As
	Select id FROM tbl_ticket WHERE company_id = @DepartmentId AND PseudoId=@PseudoID
	return
GO
PRINT N'Creating [dbo].[sp_SelectTicketInitialPost]...';


GO
CREATE Procedure dbo.sp_SelectTicketInitialPost
	(
		@DepartmentId int,
		@TicketId int
	)

As
	--VGOOZ 2-JUL-2005: disabled old code
	--SELECT Problem FROM tbl_ticket WHERE company_id = @DepartmentId AND Id = @TicketId
	--VGOOZ 2-JUL-2005: ugraded code for new structure of the database
	SELECT vchNote AS Problem FROM TicketLogs WHERE DId = @DepartmentId AND TId = @TicketId AND vchType='Initial Post'
	return
GO
PRINT N'Creating [dbo].[sp_SelectTicketLevelsDynamicWhere]...';


GO
-- Procedure
CREATE PROCEDURE [dbo].[sp_SelectTicketLevelsDynamicWhere]
(
	@DId int,
	@Where nvarchar(MAX) = null
)
AS
BEGIN
if @Where is null
begin

	select * from TktLevels where DId=@DId order by LevelName
	
end else begin	

	declare @SqlQuery nvarchar(MAX)
	SET  @SqlQuery = 'select * from TktLevels where DId=' + cast(@DId as nvarchar(MAX)) + ISNULL(' and '+@Where,'') + ' order by LevelName'
	EXEC (@SqlQuery)
	
end
		
END
GO
PRINT N'Creating [dbo].[sp_SelectTicketList]...';


GO
CREATE Procedure dbo.sp_SelectTicketList
(
		@DId int,
		@TicketList varchar(255),
		@btAcctMngr bit = 0
	)

As
	DECLARE @StrSql varchar(4000) --VGOOZ 13-APR-2005: fixed bug "Incorrect syntax near '906'."
	
	SET @StrSql = 'SELECT ' +
		't.Id,' + 
		't.Status,' +
		't.CreateTime,' + 
		't.ClosedTime,' +
		't.class_id,' +
		't.asset_id,' +
		't.LocationId,' +
		't.SerialNumber,' +
		't.Subject,' +
		't.Note,' +
--		't.Room,' +
		't.CreationCatsId,' +
		't.TicketNumber,' +
		't.CustomXML,' +
		't.user_id,' +
		'lo1.firstname AS user_firstname,' +
		'lo1.lastname AS user_lastname, ' +
		'lo1.email AS user_email,' +
		'lo1.Phone AS vchPhone,' +
		'lo1.MobilePhone AS vchMobilePhone,' +
		'tlj1.UserType_Id AS technician_TypeId,' +
		't.Technician_id,' +
		'lo.firstname AS technician_firstname, ' +
		'lo.lastname AS technician_lastname, ' +
		'lo.email AS technician_email, ' +
		'lo.Phone AS technician_phone,' +
		'lo.MobilePhone AS technician_mobilephone,' +
		'tlj2.UserType_Id AS created_TypeId,' +
		't.created_id,' +
		'lo2.firstname AS created_firstname, ' +
		'lo2.lastname AS created_lastname, ' +
		'lo2.email AS created_email, ' +
		'lo2.Phone AS created_phone,' +
		'lo2.MobilePhone AS created_mobilephone,' +
--		'l.Name AS location_name,' +
--		'l.Attention AS location_attention,' +
--		'l.Address1 AS location_address1,' +
--		'l.Address2 AS location_address2,' +
--		'l.City AS location_city,' +
--		'l.State AS location_state,' +
--		'l.Zip AS location_zip,' +
--		'l.phone AS location_phone,' +
		'c.Name AS class_name,' +
		'dbo.fxRecurseFolders(' + CAST(@DId AS varchar(5)) + ', t.folder_id, 0, '''') as FolderPath,' +
		'cat.vchName AS CategoryName, ' +
		'p.tintPriority, ' +
		'p.Name AS PriorityName, ' +
		't.vchIdMethod AS TicketIdMethod, ' + --VGOOZ: 12-MAR-2005 - Added Ticket ID Method
		'sc.vchName as SubmissionCategory, ' + --VGOOZ:15-MAR-2005 - Added Submission Category	
		't.ResolutionCatsId, ' + --MRUDKOVSKI: 03-SEP-2005 - added the field
		'ISNULL(res.btResolved, ISNULL(t.btResolved, 0)) btResolved, ' + --MRUDKOVSKI: 03-SEP-2005 - added the field
		'res.vchName as ResolutionName, ' + --MRUDKOVSKI: 03-SEP-2005 - added the field
		'lo3.FirstName+'' ''+lo3.LastName ConfirmedBy, ' + --MRUDKOVSKI: 03-SEP-2005 - added the field
		't.btConfirmed, ' + --MRUDKOVSKI: 03-SEP-2005 - added the field
		't.dtConfirmed, ' + --MRUDKOVSKI: 03-SEP-2005 - added the field
		't.vchConfirmedNote, ' +--MRUDKOVSKI: 03-SEP-2005 - added the field
		't.dtFollowUp, ' +
		't.FollowUpNote, ' +
		't.dtReqComp, ' +
		't.ReqCompNote,  '+
		't.TicketNumberPrefix'

	IF @btAcctMngr = 1
		SET @strSql=@strSql+',a.vchName as vchAcctName, al.vchName as vchAcctLocation '
		
	SET @strSql=@strSql+'FROM tbl_ticket t ' +
	'LEFT OUTER JOIN ResolutionCats res ON res.DId='+ CAST(@DId AS varchar(5)) + ' AND res.Id=t.ResolutionCatsId ' + --MRUDKOVSKI: 03-SEP-2005 - added for resolution fetching
	'LEFT OUTER JOIN tbl_LoginCompanyJunc tlj1 ' +
		'ON tlj1.company_id='+ CAST(@DId AS varchar(5)) + ' AND tlj1.id=t.user_id ' +
		'LEFT OUTER JOIN tbl_Logins lo1 ON lo1.id=tlj1.login_id ' +
	'LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ' +
		'ON tlj.company_Id='+ CAST(@DId AS varchar(5)) + ' AND tlj.id=t.Technician_id ' +
		'LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id ' +
	'LEFT OUTER JOIN tbl_LoginCompanyJunc tlj2 ' +
		'ON tlj2.company_id='+ CAST(@DId AS varchar(5)) + ' AND tlj2.id=t.created_id ' +
		'LEFT OUTER JOIN tbl_Logins lo2 ON lo2.id=tlj2.login_id ' +
	'LEFT OUTER JOIN tbl_LoginCompanyJunc tlj3 ' + 
		'ON tlj3.company_id='+ CAST(@DId AS varchar(5)) + ' AND tlj3.id=t.intConfirmedBy ' +
		'LEFT OUTER JOIN tbl_Logins lo3 ON lo3.id=tlj3.login_id ' +
	'LEFT OUTER JOIN SubmissionCategories sc ON sc.Id=t.intSubmissionCatId '+
--	'LEFT OUTER JOIN tbl_locations l ' +
--		'ON l.DId='+ CAST(@DId AS varchar(5)) + ' AND t.location_id = l.id ' +
	'LEFT OUTER JOIN tbl_class c ' +
		'ON c.company_id='+ CAST(@DId AS varchar(5)) + ' AND t.class_id = c.id ' +
	'LEFT OUTER JOIN CreationCats cat ' +
		'on cat.DId='+ CAST(@DId AS varchar(5)) + ' AND t.CreationCatsId = cat.id ' +
	'LEFT OUTER JOIN Priorities p ' +
		'on p.DId='+ CAST(@DId AS varchar(5)) + ' AND t.PriorityId = p.id '
	IF @btAcctMngr = 1
		SET @strSql=@strSql+'LEFT OUTER JOIN Accounts a ON a.DId='+ CAST(@DId AS varchar(5)) + ' AND a.Id=t.intAcctId LEFT OUTER JOIN AccountLocations al ON al.DId='+ CAST(@DId AS varchar(5)) + ' AND al.id=t.intAcctLocationId '
	
	
	SET @strSql=@strSql+'WHERE t.company_id = '+ CAST(@DId AS varchar(5)) + ' AND t.id IN ('+ @TicketList + ')' 
		
	exec(@StrSql)
	
	return
GO
PRINT N'Creating [dbo].[sp_SelectTicketMiscCost]...';


GO
CREATE Procedure [dbo].[sp_SelectTicketMiscCost]
	(
		@DId int,
		@TId int
	)
As
	SELECT c.*, lo.FirstName, lo.LastName, lo.Email 
	FROM TicketMiscCosts c 
	LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=c.UserId JOIN tbl_Logins lo ON lo.id=tlj.login_id
	WHERE c.TicketId = @TId
	return
GO
PRINT N'Creating [dbo].[sp_SelectTicketNumber]...';


GO

Create Procedure sp_SelectTicketNumber
	(
		@DepartmentId int,
		@TicketId int
	)
As
	Select TicketNumber FROM tbl_ticket WHERE company_id = @DepartmentId AND Id = @TicketId
	return
GO
PRINT N'Creating [dbo].[sp_SelectTicketsDayTime]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTicketsDayTime]
	(
		@CompanyID int,
		@AccountID int,
		@UserID int,
		@Date smalldatetime
	)
AS
	
	SELECT tt.TicketId, SUM(tt.Hours) AS Hours, 
		(
			SELECT TOP 1 tt2.HoursRemaining FROM TicketTime tt2 
			WHERE tt.TicketId = tt2.TicketId
			AND MONTH(tt2.Date) = MONTH(@Date) 
			AND YEAR(tt2.Date) = YEAR(@Date) 
			AND DAY(tt2.Date) = DAY(@Date) AND tt2.Deleted = 0
			AND tt2.Date = 
				(
					SELECT MAX(tt3.Date) 
					FROM TicketTime tt3 
					WHERE tt3.TicketId = tt2.TicketId
					AND MONTH(tt3.Date) = MONTH(@Date) 
					AND YEAR(tt3.Date) = YEAR(@Date) 
					AND DAY(tt3.Date) = DAY(@Date) AND tt3.Deleted = 0
				)
		) AS RemainingHours,
		t.Subject, t.TicketNumber,
		CASE WHEN a.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '') + ' (Internal)'
			ELSE a.vchName
      		END AS AccountName,
		CASE WHEN t.ProjectID IS NULL THEN '' ELSE
		dbo.fxGetFullProjectName(tt.DepartmentID, t.ProjectID) END AS Name
	FROM
		TicketTime tt INNER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id
		INNER JOIN tbl_company ON tt.DepartmentId = tbl_company.company_id
		LEFT OUTER JOIN Accounts a ON a.DId=t.company_id AND a.Id=t.intAcctId
	WHERE tt.DepartmentID = @CompanyID AND tt.Deleted = 0 
		AND 
		((@AccountID=-1 AND t.intAcctId IS NULL) 
			OR 
			t.intAcctId=@AccountID 
			OR
			@AccountID=0
		)
		AND tt.UserId = @UserID 
		AND MONTH(tt.Date) = MONTH(@Date)
		AND YEAR(tt.Date) = YEAR(@Date) 
		AND DAY(tt.Date) = DAY(@Date)
	GROUP BY 
		tt.TicketId, t.Subject, t.TicketNumber, a.DId, tbl_company.company_name, a.vchName, t.ProjectID, tt.DepartmentID









set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_SelectTicketsDayTimeByProject]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTicketsDayTimeByProject]
(
		@CompanyID int,
		@UserID int,
		@Date smalldatetime,
		@AccountID int,
		@ProjectID int
	)
AS
	
		SELECT
			tt.Id,
			tt.TicketId,
			CAST(t.TicketNumber AS nvarchar(50)) AS TicketNumber, 
			tt.Hours,
			tt.Note,
			tt.HoursRemaining,
			t.Subject,
			t.NextStep,
			ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
			tt.StartTime,
			tt.StopTime,
			ISNULL(tt.UTCOffset, 0) AS LocalTimeZoneOffset
		FROM 
			TicketTime tt
			LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id								
			LEFT OUTER JOIN TaskType ON tt.DepartmentId = TaskType.DepartmentID AND tt.TaskTypeId = TaskType.TaskTypeId
		WHERE 
			tt.DepartmentId = @CompanyID 
			AND tt.Deleted = 0
			AND tt.UserId = @UserID
			AND MONTH(tt.Date) = MONTH(@Date) 
			AND YEAR(tt.Date) = YEAR(@Date) 
			AND DAY(tt.Date) = DAY(@Date)
			AND ISNULL(t.intAcctId, 0) = @AccountID
			AND ISNULL(t.ProjectID, 0) = @ProjectID
		ORDER BY
			tt.TicketId, tt.Date
GO
PRINT N'Creating [dbo].[sp_SelectTicketsDynamicWhere]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTicketsDynamicWhere]
(
	@DId int,
	@Where nvarchar(MAX) = null
)
AS
BEGIN
if @Where is null
begin

	select t.*,
		l1.Email AS UserEmail, l1.LastName as UserLastName, l1.FirstName AS UserFirstName,
		l2.Email AS TechnicianEmail, l2.LastName as TechnicianLastName, l2.FirstName AS TechnicianFirstName,
		l3.Email AS CreatedUserEmail, l3.LastName as CreatedUserLastName, l3.FirstName AS CreatedUserFirstName,
		l4.Email AS ClosedUserEmail, l4.LastName as ClosedUserLastName, l4.FirstName AS ClosedUserFirstName,
		l5.Email AS ConfirmedUserEmail,l5.LastName as ConfirmedUserLastName, l5.FirstName AS ConfirmedUserFirstName,
	    
		dbo.fxGetUserLocationName(t.company_id, t.LocationId) AS LocationFullName,
		dbo.fxGetUserLocationName(t.company_id, t.AccountLocationId) AS AccountLocationFullName,
		dbo.fxGetFullClassName(t.company_id, t.class_id) AS ClassFullName,
		dbo.fxGetUserFolderName(t.company_id, t.folder_id) AS FolderFullName, 
	    
		cc.vchName AS CreationCategoryName, 
		STR(p.tintPriority) + ' - ' + p.Name AS Priority, p.tintPriority as PriorityLevel,
		STR(tl.tintLevel) + ' - ' + tl.LevelName AS TicketLevel,
		a.vchName AS AccountName, a.vchAcctNum AS AccountNumber, rc.vchName AS ResolutionCategoryName,
		sc.vchName AS SubmissionCategoryName,pr.Name AS ProjectName 
	from tbl_ticket t 
	join tbl_LoginCompanyJunc AS lcj1 ON t.company_id = lcj1.company_id AND t.User_id = lcj1.id 
	join tbl_Logins AS l1 ON lcj1.login_id = l1.id 
	join tbl_LoginCompanyJunc AS lcj2 ON t.company_id = lcj2.company_id AND t.Technician_id = lcj2.id 
	join tbl_Logins AS l2 ON lcj2.login_id = l2.id 
	left join tbl_LoginCompanyJunc AS lcj3 ON t.company_id = lcj3.company_id AND t.Created_id = lcj3.id 
	left join tbl_Logins AS l3 ON lcj3.login_id = l3.id 
	left join tbl_LoginCompanyJunc AS lcj4 ON t.company_id = lcj4.company_id AND t.Closed_id = lcj4.id 
	left join tbl_Logins AS l4 ON lcj4.login_id = l4.id 
	left join CreationCats AS cc ON t.company_id = cc.DId AND t.CreationCatsId = cc.Id 
	left join Priorities AS p ON t.company_id = p.DId AND t.PriorityId = p.Id 
	left join TktLevels AS tl ON t.company_id = tl.DId AND t.tintLevel = tl.tintLevel 
	left join Accounts AS a ON t.company_id = a.DId AND t.intAcctId = a.Id 
	left join ResolutionCats AS rc ON t.company_id = rc.DId AND t.ResolutionCatsId = rc.Id 
	left join tbl_LoginCompanyJunc AS lcj5 ON t.company_id = lcj5.company_id AND t.intConfirmedBy = lcj5.id 
	left join tbl_Logins AS l5 ON lcj5.login_id = l5.id 
	left join SubmissionCategories AS sc ON t.intSubmissionCatId = sc.Id 
	left join Project AS pr ON t.company_id = pr.CompanyID AND t.ProjectID = pr.ProjectID 
	where t.company_id=@DId
	order by t.CreateTime desc
	
end else begin	

	declare @SqlQuery nvarchar(MAX)
	SET  @SqlQuery = 'select t.*, 
		l1.Email AS UserEmail, l1.LastName as UserLastName, l1.FirstName AS UserFirstName,
		l2.Email AS TechnicianEmail, l2.LastName as TechnicianLastName, l2.FirstName AS TechnicianFirstName,
		l3.Email AS CreatedUserEmail, l3.LastName as CreatedUserLastName, l3.FirstName AS CreatedUserFirstName,
		l4.Email AS ClosedUserEmail, l4.LastName as ClosedUserLastName, l4.FirstName AS ClosedUserFirstName,
		l5.Email AS ConfirmedUserEmail,l5.LastName as ConfirmedUserLastName, l5.FirstName AS ConfirmedUserFirstName,
	    
		dbo.fxGetUserLocationName(t.company_id, t.LocationId) AS LocationFullName,
		dbo.fxGetUserLocationName(t.company_id, t.AccountLocationId) AS AccountLocationFullName,
		dbo.fxGetFullClassName(t.company_id, t.class_id) AS ClassFullName,
		dbo.fxGetUserFolderName(t.company_id, t.folder_id) AS FolderFullName, 
	    
		cc.vchName AS CreationCategoryName,
		STR(p.tintPriority) + '' - '' + p.Name AS Priority, p.tintPriority as PriorityLevel,
		STR(tl.tintLevel) + '' - '' + tl.LevelName AS TicketLevel,
		a.vchName AS AccountName, a.vchAcctNum AS AccountNumber, rc.vchName AS ResolutionCategoryName,
		sc.vchName AS SubmissionCategoryName,pr.Name AS ProjectName 
	from tbl_ticket t
	join tbl_LoginCompanyJunc AS lcj1 ON t.company_id = lcj1.company_id AND t.User_id = lcj1.id 
	join tbl_Logins AS l1 ON lcj1.login_id = l1.id 
	join tbl_LoginCompanyJunc AS lcj2 ON t.company_id = lcj2.company_id AND t.Technician_id = lcj2.id 
	join tbl_Logins AS l2 ON lcj2.login_id = l2.id 
	left join tbl_LoginCompanyJunc AS lcj3 ON t.company_id = lcj3.company_id AND t.Created_id = lcj3.id 
	left join tbl_Logins AS l3 ON lcj3.login_id = l3.id 
	left join tbl_LoginCompanyJunc AS lcj4 ON t.company_id = lcj4.company_id AND t.Closed_id = lcj4.id 
	left join tbl_Logins AS l4 ON lcj4.login_id = l4.id 
	left join CreationCats AS cc ON t.company_id = cc.DId AND t.CreationCatsId = cc.Id 
	left join Priorities AS p ON t.company_id = p.DId AND t.PriorityId = p.Id 
	left join TktLevels AS tl ON t.company_id = tl.DId AND t.tintLevel = tl.tintLevel 
	left join Accounts AS a ON t.company_id = a.DId AND t.intAcctId = a.Id 
	left join ResolutionCats AS rc ON t.company_id = rc.DId AND t.ResolutionCatsId = rc.Id 
	left join tbl_LoginCompanyJunc AS lcj5 ON t.company_id = lcj5.company_id AND t.intConfirmedBy = lcj5.id 
	left join tbl_Logins AS l5 ON lcj5.login_id = l5.id 
	left join SubmissionCategories AS sc ON t.intSubmissionCatId = sc.Id 
	left join Project AS pr ON t.company_id = pr.CompanyID AND t.ProjectID = pr.ProjectID 
	where t.company_id='+convert(nvarchar(MAX),@DId) + ISNULL(' and ('+@Where+')','')+' 
	order by t.CreateTime desc'

	EXEC (@SqlQuery)
	
end
		
END
GO
PRINT N'Creating [dbo].[sp_SelectTicketsSearch]...';


GO
CREATE Procedure dbo.sp_SelectTicketsSearch
(
	@DId int,
	@UserId int,
	@AccountID int,
	@ProjectID int
)

As	
	
	SELECT DISTINCT     
		tbl_ticket.Id, 
		CAST(tbl_ticket.TicketNumber as nvarchar) + ' - ' + ISNULL(tbl_ticket.Subject, '') AS TicketNumber
	FROM         
		tbl_ticket 
	LEFT OUTER JOIN
        TicketAssignment ON tbl_ticket.company_id = TicketAssignment.DepartmentId 
			AND tbl_ticket.Id = TicketAssignment.TicketId
			AND TicketAssignment.StopDate IS NULL
	WHERE     
		tbl_ticket.company_id = @DId 
		AND
		tbl_ticket.status <> 'Closed'
		AND 
		(tbl_ticket.intAcctId = @AccountID OR (@AccountID = -1 AND tbl_ticket.intAcctId IS NULL))
		AND 
		(tbl_ticket.ProjectID = @ProjectID OR @ProjectID = 0 OR (@ProjectID = -1 AND tbl_ticket.ProjectID IS NULL))
		AND 
        (TicketAssignment.UserId = @UserId OR tbl_ticket.Technician_id = @UserId OR tbl_ticket.User_id = @UserId OR @UserId = 0)
	ORDER BY
		tbl_ticket.Id
GO
PRINT N'Creating [dbo].[sp_SelectTicketTime]...';


GO

CREATE PROCEDURE dbo.sp_SelectTicketTime
	(
		@DId int,
		@TId int
	)
AS
	SELECT intTktTimeMin FROM tbl_ticket WHERE company_id=@DId AND id=@TId
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectTicketTimeByID]...';


GO



CREATE PROCEDURE [dbo].[sp_SelectTicketTimeByID]
(
		@CompanyID int,
		@TicketTimeID int
	)
AS
	
	DECLARE @btCfgProject bit,
		@btCfgAcctMngr nvarchar(255),
		@FBClientId int,
		@FBDefaultProjectId int
		
	SET @btCfgProject = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgProject')
	SET @btCfgAcctMngr = dbo.fxGetConfigValueStr(@CompanyID, 'btCfgAcctMngr')
	SET @FBClientId = CAST(dbo.fxGetConfigValueStr(@CompanyID, 'FBClientId') AS int)
	SET @FBDefaultProjectId = CAST(dbo.fxGetConfigValueStr(@CompanyID, 'FBDefaultProjectId') AS int)

	SELECT     
		tt.TicketId, 
		tt.Id, 
		tt.UserId, 
		tt.Date, 
		tt.Hours, 
		tt.Note, 
		tt.HourlyRate, 
		tt.StartTime, 
        tt.StopTime, 
        tt.Downloaded, 
        tt.TaskTypeId, 
        tt.HoursRemaining, 
        tt.UTCOffset, 
        tt.CreatedTime, 
		tt.CreatedBy, 
		tt.UpdatedTime, 
		tt.UpdatedBy, 
		tt.Deleted, 
		tt.BillId, 
		tt.BillRate, 
		tt.InvoiceId, 
        ISNULL(tt.FBTimeEntryID, 0) AS FBTimeEntryID,
        ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
        ISNULL(TaskType.FBTaskTypeID, 0) AS FBTaskTypeID,
        ISNULL(dbo.fxGetUserName2(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email), '') AS vchFullName,
        ISNULL(tbl_LoginCompanyJunc.FBStaffID, 0) AS FBStaffID,
		ISNULL(Accounts.Id, -1) AS AccountID,
		ISNULL(Accounts.vchName, ISNULL(C.company_name, '') ) AS AccountName,
		CASE WHEN Accounts.Id IS NULL THEN @FBClientId ELSE ISNULL(Accounts.FBClientId, 0) END AS FBClientId,
		ISNULL(Project.ProjectID, 0) AS ProjectID,
		dbo.fxGetFullProjectName(@CompanyID, ISNULL(Project.ProjectID, 0)) AS ProjectName,
		CASE WHEN Project.ProjectID IS NULL THEN 
			CASE WHEN Accounts.Id IS NULL THEN @FBDefaultProjectId ELSE ISNULL(Accounts.FBDefaultProjectId, 0) END
		ELSE ISNULL(Project.FBProjectID, 0) END AS FBProjectID,
		tbl_ticket.TicketNumber,
		tbl_ticket.Subject AS TicketSubject
	FROM         
		TicketTime tt 
	INNER JOIN
		tbl_ticket ON tt.DepartmentId = tbl_ticket.company_id AND tt.TicketId = tbl_ticket.Id
	INNER JOIN 
		tbl_company C ON tt.DepartmentId=C.company_id
	LEFT OUTER JOIN
		TaskType ON tt.DepartmentId = TaskType.DepartmentID AND tt.TaskTypeId = TaskType.TaskTypeId
	LEFT OUTER JOIN 
		tbl_LoginCompanyJunc ON tt.DepartmentId = tbl_LoginCompanyJunc.company_id AND tt.UserId = tbl_LoginCompanyJunc.id 
	LEFT OUTER JOIN
		tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
	LEFT OUTER JOIN 
		Accounts ON tbl_ticket.company_id = Accounts.DId AND tbl_ticket.intAcctId = Accounts.Id AND @btCfgAcctMngr = 'true'
	LEFT OUTER JOIN 
		Project ON tbl_ticket.company_id = Project.CompanyID AND tbl_ticket.ProjectID = Project.ProjectID AND @btCfgProject = 1
	WHERE     
		tt.DepartmentId = @CompanyID
		AND 
		tt.Id = @TicketTimeID
GO
PRINT N'Creating [dbo].[sp_SelectTicketTimeForInvoice]...';


GO
CREATE  PROCEDURE [dbo].[sp_SelectTicketTimeForInvoice]
	(
		@DId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime,
		@AccountID int,
		@ProjectID int
	)
AS
BEGIN
	DECLARE @btCfgProject bit
	SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	SELECT 
		tt.Id,
		tt.TicketId,
		CAST(t.TicketNumber AS nvarchar(50)) AS TicketNumber, 
		tt.Hours,
		tt.Note,
		CASE WHEN dbo.fxGetIsTimeLogBillable(@DId, t.intAcctId, t.ProjectID, tt.TaskTypeId, tt.UserId, 1, 0, 1) <> dbo.fxGetIsTimeLogBillable(@DId, t.intAcctId, t.ProjectID, tt.TaskTypeId, tt.UserId, 1, 0, 0) THEN -1 ELSE dbo.fxGetTimeLogBillableRate(@DId, t.intAcctId, t.ProjectID, tt.TaskTypeId, tt.UserId) END AS BillRate,
		tt.Date,
		tt.StartTime,
		tt.StopTime,		
		ISNULL(tt.UTCOffset, 0) AS LoggedTimeOffset,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) AS TechName,
		t.Status
	FROM 
		TicketTime tt
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=tt.UserId 
		LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id
		LEFT OUTER JOIN TaskType ON tt.TaskTypeId = TaskType.TaskTypeId
		LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id
	WHERE 
		tt.DepartmentId = @DId 
		AND 
		tt.InvoiceId IS NULL
		AND 
		tt.Deleted = 0
		AND 
		ISNULL(t.btNoAccount, 0) = 0
		AND 
		tt.Date >= @BeginDate
		AND 
		tt.Date <= @EndDate
		AND
		ISNULL(t.intAcctId, -1) = ISNULL(@AccountID, -1)
		AND
		(CASE 
			WHEN (dbo.fxGetParentBMProject(@DId, @AccountID,t.ProjectID) > 0)
			THEN
				CASE
					WHEN (dbo.fxGetParentBMProject(@DId, @AccountID,t.ProjectID) = @ProjectID)
					THEN 1 ELSE 0
				END
			ELSE
				CASE
					WHEN @ProjectID IS NULL
					THEN 1 ELSE 0
				END
				END = 1)
		AND 
		(dbo.fxGetIsTimeLogBillable(@DId, t.intAcctId, t.ProjectID, tt.TaskTypeId, tt.UserId, 1, 0, 1) = 1)
		AND 
		(@btCfgProject = 1 OR (@btCfgProject <> 1 AND t.ProjectID IS NULL))
	ORDER BY tt.Date, TaskTypeName

END
GO
PRINT N'Creating [dbo].[sp_SelectTicketTimes]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTicketTimes]
	(
		@DId int,
		@TId int
	)
AS
	SELECT tt.Id AS TicketTimeId, tt.Id, tt.Hours, tt.Hours AS decHour, tt.HoursRemaining, tt.Note, tt.Note AS vchNote, tt.HourlyRate, tt.HourlyRate AS smHourlyRate, tt.Date, tt.Date AS dtDate, tt.StartTime, tt.StartTime AS dtStartTime, tt.StopTime, tt.StopTime AS dtStopTime, dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) AS vchFullName,
	ISNULL(tt.UTCOffset, 0) AS LoggedTimeOffset,
	ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
	ISNULL((SELECT TOP 1 ISNULL(vchNote, '') FROM TicketLogs WHERE DId = @DId AND TId = @TId AND TicketTimeId = tt.Id ORDER BY Id DESC), '') AS TktLog,
	tt.BillId,
	tt.InvoiceId,
	'' AS AccountName,
	'' AS ProjectName,
	tt.FBTimeEntryID
	FROM TicketTime tt
	LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=tt.UserId 
	INNER JOIN tbl_Logins lo ON lo.id=tlj.login_id
	LEFT OUTER JOIN TaskType ON TaskType.DepartmentID=@DId AND TaskType.TaskTypeId=tt.TaskTypeId
	WHERE tt.DepartmentId=@DId AND tt.TicketId=@TId AND tt.Deleted = 0
	ORDER BY tt.Date, vchFullName, TaskTypeName
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectTicketTravelCost]...';


GO
CREATE  PROCEDURE dbo.sp_SelectTicketTravelCost
(
	@DepartmentId int,
	@TicketId int,
	@TicketTravelCostID int
)
AS

	SELECT 
		* 
	FROM 
		TicketTravelCosts 
	WHERE 
		DepartmentId = @DepartmentId 
		AND 
		TicketId = @TicketId
		AND 
		Id = @TicketTravelCostID
GO
PRINT N'Creating [dbo].[sp_SelectTicketTravelCosts]...';


GO
CREATE PROCEDURE dbo.sp_SelectTicketTravelCosts
	@DepartmentId int,
	@TicketId int
AS
BEGIN
	SELECT * FROM TicketTravelCosts WHERE DepartmentId = @DepartmentId AND TicketId = @TicketId
END
GO
PRINT N'Creating [dbo].[sp_SelectTimeBill]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTimeBill]
	(
		@DId int,
		@BillId int
	)
AS
	SELECT  
		tb.Id,
		tb.Date,
		tb.BeginDate,
		tb.EndDate,
		tb.Exported,
		ISNULL(tb.TimeLogsCount, 0) AS TimeLogsCount,
		CASE 
			WHEN tb.TechID IS NULL
			THEN 'All Technicians'
			ELSE
				dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email)
		END AS FullName,
		CASE 
			WHEN tb.TotalHours IS NULL
			THEN
				ISNULL((SELECT SUM(tt.Hours) FROM TicketTime tt WHERE  tt.DepartmentId = @DId AND tt.BillId = tb.Id), 0) + 
					ISNULL((SELECT SUM(pt.Hours) FROM ProjectTime pt WHERE  pt.DepartmentId = @DId AND pt.BillId = tb.Id), 0)
			ELSE tb.TotalHours
		END AS TotalHours,
		CASE 
			WHEN tb.Amount IS NULL
			THEN 
				ISNULL((SELECT SUM(tt.Hours * tt.HourlyRate) FROM TicketTime tt WHERE  tt.DepartmentId = @DId AND tt.BillId = tb.Id), 0) + 
					ISNULL((SELECT SUM(pt.Hours * pt.HourlyRate) FROM ProjectTime pt WHERE  pt.DepartmentId = @DId AND pt.BillId = tb.Id), 0)
			ELSE tb.Amount
		END AS Amount,
		CASE 
			WHEN tb.CreatedBy IS NULL
			THEN '---'
			ELSE
				dbo.fxGetUserName(lo1.FirstName, lo1.LastName, lo1.Email)
		END AS CreatedByFullName	
	FROM       
		TimeBill tb			
			LEFT OUTER JOIN tbl_LoginCompanyJunc tlj 
				ON tlj.company_id=tb.DId AND tlj.id=tb.TechID 
			LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id		

			LEFT OUTER JOIN tbl_LoginCompanyJunc tlj1 
				ON tlj1.company_id=tb.DId AND tlj1.id=tb.CreatedBy 
			LEFT OUTER JOIN tbl_Logins lo1 ON lo1.id=tlj1.login_id	
	WHERE
		tb.DId = @DId
		AND
		tb.Id = @BillId

SET QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_SelectTimeBillAmountGroupByAccount]...';


GO
CREATE Procedure dbo.sp_SelectTimeBillAmountGroupByAccount
(
	@DId int,
	@BillID int
)

As	
	
	DECLARE @TimeLogs TABLE
	(
		ComplexID nvarchar(20),
		Amount money,
		Customer nvarchar(1000)
	)
	
	INSERT INTO @TimeLogs
	SELECT
			CAST(ISNULL(t.intAcctId, -1) AS nvarchar) + '|' + CAST(ISNULL(
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID)
			END, 0) AS nvarchar) AS ComplexID,			
			(tt.Hours*tt.HourlyRate) AS Amount,
			dbo.fxGetQBCustomerName(@DId, t.intAcctId,
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID)
			END) AS Customer
		FROM 
			TicketTime tt
				LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id								
		WHERE 
			tt.DepartmentId = @DId 
			AND 
			tt.BillId = @BillID
		UNION ALL
		SELECT	
			CAST(ISNULL(ISNULL(p.AccountID, pt.AccountID), -1) AS nvarchar) + '|' + CAST(ISNULL(
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId)
			END, 0) AS nvarchar) AS ComplexID,
			(pt.Hours*pt.HourlyRate) AS Amount,
			dbo.fxGetQBCustomerName(@DId, ISNULL(p.AccountID, pt.AccountID),
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId)
			END) AS Customer
		FROM 
			ProjectTime pt
				LEFT OUTER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID				
		WHERE 
			pt.DepartmentId = @DId
			AND 
			pt.BillId = @BillID
			
	SELECT 
		ComplexID, 
		Customer,
		SUM(Amount) AS TotalAmount
	FROM 
		@TimeLogs tl
	GROUP BY ComplexID, Customer
	ORDER BY Customer
GO
PRINT N'Creating [dbo].[sp_SelectTimeBillAmountGroupByTaskType]...';


GO
CREATE PROCEDURE dbo.sp_SelectTimeBillAmountGroupByTaskType
	(
		@DId int,
		@BillId int
	)
AS

	DECLARE @TimeLogs TABLE
	(
		Amount money,
		TaskTypeName nvarchar(50),
		Hours decimal(8, 4)
	)
	
	INSERT INTO @TimeLogs
	SELECT 
		(tt.Hours*tt.HourlyRate) as Amount,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		tt.Hours
	FROM 
		TicketTime tt
		LEFT OUTER JOIN TaskType ON tt.TaskTypeId = TaskType.TaskTypeId
	WHERE 
		tt.DepartmentId = @DId AND tt.BillId = @BillId
	UNION ALL
	SELECT
		pt.Hours*pt.HourlyRate as Amount,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		pt.Hours
	FROM 
		ProjectTime pt		
		LEFT OUTER JOIN TaskType ON pt.TaskTypeId = TaskType.TaskTypeId
	WHERE 
		pt.DepartmentId = @DId AND pt.BillId = @BillId
	
	SELECT 
		TaskTypeName,
		SUM(Amount) as Amount,
		SUM(Hours) AS Hours
	FROM 
		@TimeLogs
	GROUP BY TaskTypeName
GO
PRINT N'Creating [dbo].[sp_SelectTimeBillLastDRRange]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTimeBillLastDRRange]
	(
		@DId int,
		@TechId int
	)
AS
	SELECT TOP 1 
		tb.Id,
		tb.Date,
		tb.BeginDate,
		tb.EndDate,
		tb.Exported, 
		CASE 
			WHEN tb.TechID IS NULL
			THEN 'All Technicians'
			ELSE
				CASE 
					WHEN lo.FirstName IS NULL 
					THEN lo.LastName
					ELSE lo.LastName+', '+lo.FirstName
				END
		END AS FullName
	FROM       
		TimeBill tb
			LEFT OUTER JOIN tbl_LoginCompanyJunc tlj 
				ON tlj.company_id=tb.DId AND tlj.id=tb.TechID 
			LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id
	WHERE
		tb.DId = @DId
		AND
		(tb.TechID = @TechId OR @TechId = 0)
	ORDER BY tb.EndDate DESC, tb.BeginDate DESC




SET QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_SelectTimeBillLogs]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTimeBillLogs]
	(
		@DId int,
		@BillId int
	)
AS

	SELECT 
		tt.Id,
		tt.TicketId,
		CAST(t.TicketNumber AS nvarchar(50)) AS TicketNumber, -- ? достатньо
		tt.Hours,
		tt.Note,
		tt.HourlyRate,
		(tt.Hours*tt.HourlyRate) as Amount,
		tt.Date,
		tt.StartTime,
		tt.StopTime,		
		ISNULL(tt.UTCOffset, 0) AS LoggedTimeOffset,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		ISNULL((SELECT TOP 1 ISNULL(vchNote, '') FROM TicketLogs WHERE DId = @DId AND TId = tt.TicketId AND TicketTimeId = tt.Id ORDER BY Id DESC), '') AS TktLog,
		'T' AS EntityFlag,
		CASE 
			WHEN t.intAcctId IS NULL 
			THEN CASE WHEN ISNULL(t.btNoAccount, 0) = 0 THEN
				ISNULL(C.company_name, '') + ' (Internal)'
				ELSE '' END
			ELSE Accounts.vchName
      		END AS AccountName,
		ISNULL(Project.Name, '') AS ProjectName
	FROM 
		TicketTime tt
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=tt.UserId 
		LEFT OUTER JOIN tbl_company C ON tlj.company_id=C.company_id
		LEFT OUTER JOIN TaskType ON tt.TaskTypeId = TaskType.TaskTypeId
		LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id
		LEFT OUTER JOIN Accounts ON t.company_id = Accounts.DId AND t.intAcctId = Accounts.Id
		LEFT OUTER JOIN Project ON t.company_id = Project.CompanyID AND t.ProjectID = Project.ProjectID
	WHERE 
		tt.DepartmentId = @DId AND tt.BillId = @BillId
	UNION ALL
	SELECT
		pt.Id,
		pt.ProjectId,
		p.Name,
		pt.Hours,
		pt.Note,
		pt.HourlyRate,
		(pt.Hours*pt.HourlyRate) as Amount,
		pt.Date,
		pt.StartTimeUTC,
		pt.StopTimeUTC,
		ISNULL(pt.LocalTimeZoneOffset, 0) AS LoggedTimeOffset,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		'', 'P' AS EntityFlag,
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(c.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END AS AccountName,
		ISNULL(p.Name, '') AS ProjectName
	FROM 
		ProjectTime pt		
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=pt.DepartmentId AND tlj.id=pt.UserId 
		LEFT OUTER JOIN tbl_company C ON tlj.company_id=C.company_id
		LEFT OUTER JOIN TaskType ON pt.TaskTypeId = TaskType.TaskTypeId
		LEFT OUTER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID
		LEFT OUTER JOIN Accounts ON pt.DepartmentId = Accounts.DId AND ISNULL(p.AccountID, pt.AccountID) = Accounts.Id
	WHERE 
		pt.DepartmentId = @DId AND pt.BillId = @BillId
	ORDER BY tt.TicketId, tt.Date, TaskTypeName
GO
PRINT N'Creating [dbo].[sp_SelectTimeBills]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTimeBills]
	(
		@DId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime
	)
AS
	SELECT  
		tb.Id,
		tb.Date,
		tb.BeginDate,
		tb.EndDate,
		tb.Exported, 
		CASE 
			WHEN tb.TechID IS NULL
			THEN 'All Technicians'
			ELSE
				dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email)
		END AS FullName,
		CASE 
			WHEN tb.TotalHours IS NULL
			THEN
				ISNULL((SELECT SUM(tt.Hours) FROM TicketTime tt WHERE  tt.DepartmentId = @DId AND tt.BillId = tb.Id), 0)
			ELSE tb.TotalHours
		END AS TotalHours,
		CASE 
			WHEN tb.Amount IS NULL
			THEN 
				ISNULL((SELECT SUM(tt.Hours * tt.HourlyRate) FROM TicketTime tt WHERE  tt.DepartmentId = @DId AND tt.BillId = tb.Id), 0)
			ELSE tb.Amount
		END AS Amount		
	FROM       
		TimeBill tb			
			LEFT OUTER JOIN tbl_LoginCompanyJunc tlj 
				ON tlj.company_id=tb.DId AND tlj.id=tb.TechID 
			LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id		
	WHERE
		tb.DId = @DId
		AND
		tb.Date >= @BeginDate
		AND 
		tb.Date <= @EndDate
	ORDER BY tb.Date DESC, tb.Id

SET QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_SelectTimeBillsForExport]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTimeBillsForExport]
(
		@DId int,
		@Ids varchar(8000)
	)
AS
	DECLARE @CfgQBAccount nvarchar(max)
	SELECT @CfgQBAccount=ISNULL(dbo.fxGetConfigValueStr(@DId, 'CfgQBAccount'),'')
	IF @CfgQBAccount = ''
		SET @CfgQBAccount = 'bigWebApps Labor Expense'
		
	SELECT  
		tb.Id,
		tb.Date,
		tb.Exported,
		tb.BeginDate,
		tb.EndDate, 
		CASE 
			WHEN tb.TechID IS NULL
			THEN 'All Technicians'
			ELSE
				CASE 
					WHEN lo.FirstName IS NULL 
					THEN lo.LastName
					ELSE lo.FirstName + ' ' + lo.LastName
				END
		END AS FullName,
		CASE 
			WHEN tb.TotalHours IS NULL
			THEN
				ISNULL((SELECT SUM(tt.Hours) FROM TicketTime tt WHERE  tt.DepartmentId = @DId AND tt.BillId = tb.Id), 0)
			ELSE tb.TotalHours
		END AS TotalHours,
		CASE 
			WHEN tb.Amount IS NULL
			THEN 
				ISNULL((SELECT SUM(tt.Hours * tt.HourlyRate) FROM TicketTime tt WHERE  tt.DepartmentId = @DId AND tt.BillId = tb.Id), 0)
			ELSE tb.Amount
		END AS Amount,
		CASE 
			WHEN (tlj.CfgQBAccount IS NULL) OR (tlj.CfgQBAccount = '') 
			THEN @CfgQBAccount
			ELSE tlj.CfgQBAccount
		END AS CfgQBAccount
	FROM       
		TimeBill tb			
			LEFT OUTER JOIN tbl_LoginCompanyJunc tlj 
				ON tlj.company_id=tb.DId AND tlj.id=tb.TechID 
			LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id		
			LEFT OUTER JOIN tbl_company CO ON tlj.company_id=CO.company_id
	WHERE
		tb.DId = @DId
		AND (CHARINDEX('|' + CAST(tb.Id AS varchar) + '|', @Ids) > 0)
GO
PRINT N'Creating [dbo].[sp_SelectTimeLogCountByDate]...';


GO
CREATE  PROCEDURE dbo.sp_SelectTimeLogCountByDate
(
	@CompanyID int,
	@DateStart smalldatetime,
	@DateEnd smalldatetime
)
AS
	DECLARE @TimeLogCount int,
		@TicketTimeCount int
	SET @TimeLogCount = 0
	SET @TicketTimeCount = 0

	SELECT 
		@TimeLogCount = COUNT(Id) 
	FROM
		ProjectTime
	WHERE 
		ProjectTime.DepartmentId = @CompanyID
		AND 
		ProjectTime.Deleted = 0
		AND 
		ProjectTime.Date >= @DateStart
		AND
		ProjectTime.Date <= @DateEnd

	SELECT 
		@TicketTimeCount = COUNT(Id) 
	FROM
		TicketTime
	WHERE 
		TicketTime.DepartmentId = @CompanyID
		AND 
		TicketTime.Deleted = 0
		AND 
		TicketTime.Date >= @DateStart 
		AND
		TicketTime.Date <= @DateEnd

	SET @TimeLogCount = @TimeLogCount + @TicketTimeCount


	RETURN @TimeLogCount
GO
PRINT N'Creating [dbo].[sp_SelectTimeLogGroupByTaskType]...';


GO
CREATE PROCEDURE dbo.sp_SelectTimeLogGroupByTaskType
	(
		@DId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime,
		@UserID int
	)
AS

	DECLARE @TimeLogs TABLE
	(
		TaskTypeName nvarchar(50),
		Hours decimal(8, 4)
	)
	
	INSERT INTO @TimeLogs
	SELECT 
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		tt.Hours
	FROM 
		TicketTime tt
		LEFT OUTER JOIN TaskType ON tt.TaskTypeId = TaskType.TaskTypeId
	WHERE 
		tt.DepartmentId = @DId
		AND 
		tt.BillId IS NULL
		AND 
		tt.Deleted = 0
		AND 
		tt.Date >= @BeginDate
		AND 
		tt.Date <= @EndDate
		AND
		tt.UserId = @UserID
	UNION ALL
	SELECT
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		pt.Hours
	FROM 
		ProjectTime pt		
		LEFT OUTER JOIN TaskType ON pt.TaskTypeId = TaskType.TaskTypeId
	WHERE 
		pt.DepartmentId = @DId
		AND 
		pt.BillId IS NULL
		AND 
		pt.Deleted = 0
		AND 
		pt.Date >= @BeginDate
		AND 
		pt.Date <= @EndDate
		AND
		pt.UserId = @UserID
	
	SELECT 
		TaskTypeName,
		SUM(Hours) AS Hours
	FROM 
		@TimeLogs
	GROUP BY TaskTypeName
GO
PRINT N'Creating [dbo].[sp_SelectTimeLogsForBill]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTimeLogsForBill]
	(
		@DId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime,
		@UserID int
	)
AS
	SELECT 
		tt.Id,
		tt.TicketId,
		CAST(t.TicketNumber AS nvarchar(50)) AS TicketNumber, -- ? достатньо
		tt.Hours,
		tt.Note,
		tt.HourlyRate,
		(tt.Hours*tt.HourlyRate) as Amount,
		tt.Date,
		tt.StartTime,
		tt.StopTime,		
		ISNULL(tt.UTCOffset, 0) AS LoggedTimeOffset,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		ISNULL((SELECT TOP 1 ISNULL(vchNote, '') FROM TicketLogs WHERE DId = @DId AND TId = tt.TicketId AND TicketTimeId = tt.Id ORDER BY Id DESC), '') AS TktLog,
		'T' AS EntityFlag,
		CASE 
			WHEN t.intAcctId IS NULL THEN CASE WHEN ISNULL(t.btNoAccount, 0) = 0 THEN
				ISNULL(C.company_name, '') + ' (Internal)'
				ELSE '' END
			ELSE Accounts.vchName
      		END AS AccountName,
		ISNULL(Project.Name, '') AS ProjectName
	FROM 
		TicketTime tt
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=tt.UserId 
		LEFT OUTER JOIN tbl_company C ON tlj.company_id=C.company_id
		LEFT OUTER JOIN TaskType ON tt.TaskTypeId = TaskType.TaskTypeId
		LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id
		LEFT OUTER JOIN Accounts ON t.company_id = Accounts.DId AND t.intAcctId = Accounts.Id
		LEFT OUTER JOIN Project ON t.company_id = Project.CompanyID AND t.ProjectID = Project.ProjectID
	WHERE 
		tt.DepartmentId = @DId 
		AND 
		tt.BillId IS NULL
		AND 
		tt.Deleted = 0
		AND 
		tt.Date >= @BeginDate
		AND 
		tt.Date <= @EndDate
		AND
		tt.UserId = @UserID
	UNION ALL
	SELECT
		pt.Id,
		pt.ProjectId,
		p.Name,
		pt.Hours,
		pt.Note,
		pt.HourlyRate,
		(pt.Hours*pt.HourlyRate) as Amount,
		pt.Date,
		pt.StartTimeUTC,
		pt.StopTimeUTC,
		ISNULL(pt.LocalTimeZoneOffset, 0) AS LoggedTimeOffset,
		ISNULL(TaskType.TaskTypeName, 'Default') AS TaskTypeName,
		'', 'P' AS EntityFlag,
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(c.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END AS AccountName,
		ISNULL(p.Name, '') AS ProjectName
	FROM 
		ProjectTime pt		
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=pt.DepartmentId AND tlj.id=pt.UserId 
		LEFT OUTER JOIN tbl_company C ON tlj.company_id=C.company_id
		LEFT OUTER JOIN TaskType ON pt.TaskTypeId = TaskType.TaskTypeId
		LEFT OUTER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID
		LEFT OUTER JOIN Accounts ON pt.DepartmentId = Accounts.DId AND ISNULL(p.AccountID, pt.AccountID) = Accounts.Id
	WHERE 
		pt.DepartmentId = @DId 
		AND 
		pt.BillId IS NULL
		AND 
		pt.Deleted = 0
		AND 
		pt.Date >= @BeginDate
		AND 
		pt.Date <= @EndDate
		AND
		pt.UserId = @UserID
	ORDER BY tt.TicketId, tt.Date, TaskTypeName

set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_SelectTktCountByDate]...';


GO

Create Procedure sp_SelectTktCountByDate
	(
		@DepartmentId int,
		@StartDate smalldatetime,
		@EndDate smalldatetime
	)
As
	
	return (SELECT count(id) FROM tbl_ticket WHERE company_id = @DepartmentId AND CreateTime BETWEEN @StartDate AND @EndDate)
GO
PRINT N'Creating [dbo].[sp_SelectTktLogs]...';


GO
CREATE  PROCEDURE [dbo].[sp_SelectTktLogs]
	(
		@DId int,
		@TId int
	)
AS
	DECLARE @btTimeEntriesOnTktLog bit
	SELECT @btTimeEntriesOnTktLog=dbo.fxGetConfigValueBit(@DId, 'btTimeEntriesOnTktLog')
	
	SELECT tl.*, l.Email, l.LastName, l.FirstName, RTRIM(ISNULL(logEditedBy.FirstName, '') + ' ' + ISNULL(logEditedBy.LastName, '')) AS EditedByUser, ISNULL(tbl_UserType.Name, '') AS UserType
	FROM 
		TicketLogs tl LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id=@DId AND tlj.id=tl.UId LEFT OUTER JOIN tbl_Logins l ON l.id=tlj.login_id
		LEFT OUTER JOIN tbl_company ON tl.DId = tbl_company.company_id
		LEFT OUTER JOIN TicketTime tt ON tl.DId = tt.DepartmentId AND tl.TId = tt.TicketId AND tl.TicketTimeId = tt.Id
		LEFT OUTER JOIN tbl_LoginCompanyJunc tlcjEditedBy ON tl.DId = tlcjEditedBy.company_id AND tl.EditedBy = tlcjEditedBy.id 
		LEFT OUTER JOIN tbl_Logins logEditedBy ON tlcjEditedBy.login_id = logEditedBy.id
		LEFT OUTER JOIN tbl_UserType ON tlj.UserType_Id = tbl_UserType.id
	WHERE tl.DId=@DId AND tl.TId=@TId
		AND ((@btTimeEntriesOnTktLog = 1) OR (@btTimeEntriesOnTktLog = 0 AND tl.TicketTimeId IS NULL)
			OR (@btTimeEntriesOnTktLog = 0 AND tt.TimeEntryOnDetail = 1))
	ORDER BY tl.Id DESC
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectTktPriorityId]...';


GO

CREATE PROCEDURE sp_SelectTktPriorityId
	(
		@DId int,
		@TId int,
		@tintPriority tinyint OUTPUT,
		@PriorityId int OUTPUT,
		@vchPriority nvarchar(50) OUTPUT
	)
AS
	SELECT @tintPriority=P.tintPriority, @PriorityId=P.id, @vchPriority=P.Name FROM tbl_ticket T LEFT OUTER JOIN Priorities P ON P.id=T.PriorityId WHERE T.company_id=@DId AND T.id=@TId

	RETURN @PriorityId
GO
PRINT N'Creating [dbo].[sp_SelectToDoByUser]...';


GO
CREATE PROCEDURE dbo.sp_SelectToDoByUser
(
		@DId int,
		@AssignedId int
)
AS

	DECLARE @btCfgProject bit
	SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	
	SELECT 
		ToDoItem.[Text],
		ToDoItem.Due,
		ToDoList.TicketId, 
		ToDoList.ProjectId
	FROM 
		ToDoItem
	INNER JOIN
		ToDoList ON ToDoItem.DId = ToDoList.DId AND ToDoItem.ToDoListId = ToDoList.Id
	WHERE
		ToDoItem.DId = @DId
		AND
		ToDoItem.Completed = 0
		AND
		ToDoItem.AssignedId = @AssignedId
	ORDER BY
		ToDoItem.Due
GO
PRINT N'Creating [dbo].[sp_SelectToDoItem]...';


GO
CREATE PROCEDURE dbo.sp_SelectToDoItem
(
		@DId int,
		@Id uniqueidentifier
)
AS
	
	SELECT 
		ToDoItem.[Id]
      ,ToDoItem.[DId]
      ,ToDoItem.[ToDoListId]
      ,ToDoItem.[CreatedAt]
      ,ToDoItem.[CreatedBy]
      ,ToDoItem.[UpdatedAt]
      ,ToDoItem.[UpdatedBy]
      ,ToDoItem.[Text]
      ,ToDoItem.[AssignedId]
      ,ToDoItem.[Completed]
      ,ToDoItem.[HoursEstimatedRemaining]
      ,ToDoItem.[ToDoItemTemplateId]
      ,ToDoItem.[Order]
      ,ToDoItem.[Due]
      ,ToDoItem.[TicketId]
      ,ToDoList.ProjectId
      ,Project.AccountID
	FROM 
		ToDoItem
	INNER JOIN
		ToDoList ON ToDoItem.DId = ToDoList.DId AND ToDoItem.ToDoListId = ToDoList.Id 
	LEFT OUTER JOIN
        Project ON ToDoList.DId = Project.CompanyID AND ToDoList.ProjectId = Project.ProjectID
	WHERE
		ToDoItem.DId = @DId
		AND
		ToDoItem.Id  = @Id
GO
PRINT N'Creating [dbo].[sp_SelectToDoItemTemplates]...';


GO
CREATE PROCEDURE dbo.sp_SelectToDoItemTemplates
	(
		@DId int,
		@ToDoListTemplateId uniqueidentifier
	)
AS

	SELECT 
		*
	FROM 
		ToDoItemTemplate
	WHERE
		DId = @DId
		AND
		ToDoListTemplateId = @ToDoListTemplateId
GO
PRINT N'Creating [dbo].[sp_SelectToDoList]...';


GO
CREATE PROCEDURE dbo.sp_SelectToDoList
(
		@DId int,
		@Id uniqueidentifier
)
AS
	
	SELECT 
		*
	FROM 
		ToDoList
	WHERE
		DId = @DId
		AND
		Id  = @Id
GO
PRINT N'Creating [dbo].[sp_SelectToDoListAndItems]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectToDoListAndItems]
(
		@DId int,
		@TicketId int,
		@ProjectId int
)
AS

	DECLARE @ToDoListAndItems TABLE(	
		ToDoListId uniqueidentifier,
		ToDoItemId uniqueidentifier,
		Name nvarchar(50),
		[Text] nvarchar(1000),
		[OrderList] tinyint,
		[OrderItem] tinyint,
		AssignedId int,
		AssignedName nvarchar(105),
		Completed bit,
		HoursEstimatedRemaining decimal(10, 4),
		Due datetime,
		ItemType tinyint, --1 - ToDoListTemplate, 2 - ToDoItem, 3 - Add New Item Row, 4 - Add First ToDo Item
		TicketID int,
		TicketNumber int
		 )
		 
	DECLARE @CountToDOList int
	
	SELECT
		@CountToDOList = COUNT(*)
	FROM
		ToDoList
	WHERE
		DId = @DId
		AND
		(TicketId  = @TicketId OR @TicketId = 0)
		AND
		(ProjectId  = @ProjectId OR @ProjectId = 0)
		AND
		(Name <> 'Main')

	IF @CountToDOList > 0
	 BEGIN
		INSERT INTO @ToDoListAndItems
			(ToDoListId,
			ToDoItemId,
			Name,
			[Text],
			[OrderList],
			[OrderItem],
			AssignedId,
			AssignedName,
			Completed,
			HoursEstimatedRemaining,
			Due,
			ItemType,
			TicketID,
			TicketNumber)
		SELECT 
			Id,
			NULL,
			Name,
			'',
			[Order],
			0,
			NULL,
			'',
			0,
			NULL,
			NULL,
			1,
			NULL,
			NULL
		FROM 
			ToDoList
		WHERE
			DId = @DId
			AND
			(TicketId  = @TicketId OR @TicketId = 0)
			AND
			(ProjectId  = @ProjectId OR @ProjectId = 0)
	END
		
	INSERT INTO @ToDoListAndItems
	(ToDoListId,
	ToDoItemId,
	Name,
	[Text],
	[OrderList],
	[OrderItem],
	AssignedId,
	AssignedName,
	Completed,
	HoursEstimatedRemaining,
	Due,
	ItemType,
	TicketID,
	TicketNumber)
	SELECT 
		Id,
		NULL,
		Name,
		'',
		[Order],
		255,
		NULL,
		'',
		1,
		NULL,
		NULL,
		3,
		NULL,
		NULL
	FROM 
		ToDoList
	WHERE
		DId = @DId
		AND
		(TicketId  = @TicketId OR @TicketId = 0)
		AND
		(ProjectId  = @ProjectId OR @ProjectId = 0)
		
	INSERT INTO @ToDoListAndItems
	(ToDoListId,
	ToDoItemId,
	Name,
	[Text],
	[OrderList],
	[OrderItem],
	AssignedId,
	AssignedName,
	Completed,
	HoursEstimatedRemaining,
	Due,
	ItemType,
	TicketID,
	TicketNumber)
	SELECT     
		ToDoItem.ToDoListId, 
		ToDoItem.Id, 
		ToDoList.Name, 
		ToDoItem.Text, 
		ToDoList.[Order], 
		ToDoItem.[Order], 
		ToDoItem.AssignedId, 
		dbo.fxGetUserName2(ISNULL(tbl_Logins.FirstName, ''), ISNULL(tbl_Logins.LastName, ''), ISNULL(tbl_Logins.Email, '')),
		ToDoItem.Completed, 
		ToDoItem.HoursEstimatedRemaining, 
		ToDoItem.Due, 
		2,
		ToDoItem.TicketId,
		tbl_ticket.TicketNumber
	FROM         
		ToDoItem 
		INNER JOIN
			ToDoList ON ToDoItem.DId = ToDoList.DId AND ToDoItem.ToDoListId = ToDoList.Id
		LEFT OUTER JOIN
			tbl_LoginCompanyJunc ON ToDoItem.DId = tbl_LoginCompanyJunc.company_id 
						AND ToDoItem.AssignedId = tbl_LoginCompanyJunc.id 
        LEFT OUTER JOIN
			tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
		LEFT OUTER JOIN
			tbl_ticket ON ToDoItem.DId = tbl_ticket.company_id AND ToDoItem.TicketId = tbl_ticket.Id
	WHERE     
		ToDoItem.DId = @DId
		AND
		(ToDoList.TicketId  = @TicketId OR @TicketId = 0)
		AND
		(ToDoList.ProjectId  = @ProjectId OR @ProjectId = 0)
	
	DECLARE @CountToDos int
	
	SELECT
		@CountToDos = COUNT(*)
	FROM
		@ToDoListAndItems
	
	IF @CountToDos = 0
	 BEGIN
		INSERT INTO @ToDoListAndItems
			(ToDoListId,
			ToDoItemId,
			Name,
			[Text],
			[OrderList],
			[OrderItem],
			AssignedId,
			AssignedName,
			Completed,
			HoursEstimatedRemaining,
			Due,
			ItemType,
			TicketID,
			TicketNumber)
		VALUES( 
			NULL,
			NULL,
			'Add First ToDo Item',
			'',
			1,
			0,
			NULL,
			'',
			0,
			NULL,
			NULL,
			4,
			NULL,
			NULL)
	 END
	
	SELECT
		*
	FROM
		@ToDoListAndItems
	ORDER BY
		[OrderList],
		Completed,
		[OrderItem]
GO
PRINT N'Creating [dbo].[sp_SelectToDoListAndItemsTemplates]...';


GO
CREATE PROCEDURE dbo.sp_SelectToDoListAndItemsTemplates
	(
		@DId int
	)
AS

	DECLARE @ToDoListAndItemsTemplates TABLE(	
		ToDoListTemplateId uniqueidentifier,
		ToDoItemTemplateId uniqueidentifier,
		Name nvarchar(50),
		[Text] nvarchar(1000),
		[Order] tinyint,
		AssignedId int,
		AssignedName nvarchar(105),
		HoursEstimatedRemaining decimal(10, 4),
		ItemType tinyint --1 - ToDoListTemplate, 2 - ToDoItemTemplate, 3 - Add New Item Row
		 )

	INSERT INTO @ToDoListAndItemsTemplates
	(ToDoListTemplateId,
	ToDoItemTemplateId,
	Name,
	[Text],
	[Order],
	AssignedId,
	AssignedName,
	HoursEstimatedRemaining,
	ItemType)
	SELECT 
		Id,
		NULL,
		Name,
		'',
		0,
		NULL,
		'',
		NULL,
		1
	FROM 
		ToDoListTemplate
	WHERE
		DId = @DId
		
	INSERT INTO @ToDoListAndItemsTemplates
	(ToDoListTemplateId,
	ToDoItemTemplateId,
	Name,
	[Text],
	[Order],
	AssignedId,
	AssignedName,
	HoursEstimatedRemaining,
	ItemType)
	SELECT 
		Id,
		NULL,
		Name,
		'',
		255,
		NULL,
		'',
		NULL,
		3
	FROM 
		ToDoListTemplate
	WHERE
		DId = @DId
		
	INSERT INTO @ToDoListAndItemsTemplates
	(ToDoListTemplateId,
	ToDoItemTemplateId,
	Name,
	[Text],
	[Order],
	AssignedId,
	AssignedName,
	HoursEstimatedRemaining,
	ItemType)
	SELECT     
		ToDoItemTemplate.ToDoListTemplateId, 
		ToDoItemTemplate.Id, 
		ToDoListTemplate.Name, 
		ToDoItemTemplate.Text, 
		ToDoItemTemplate.[Order], 
		ToDoItemTemplate.AssignedId,
		RTRIM(ISNULL(tbl_Logins.FirstName, '') + ' ' + ISNULL(tbl_Logins.LastName, '')),
		ToDoItemTemplate.HoursEstimatedRemaining,
		2
	FROM         
		ToDoItemTemplate 
		INNER JOIN
			ToDoListTemplate ON ToDoItemTemplate.DId = ToDoListTemplate.DId AND ToDoItemTemplate.ToDoListTemplateId = ToDoListTemplate.Id
		LEFT OUTER JOIN
			tbl_LoginCompanyJunc ON ToDoItemTemplate.DId = tbl_LoginCompanyJunc.company_id 
						AND ToDoItemTemplate.AssignedId = tbl_LoginCompanyJunc.id 
        LEFT OUTER JOIN
			tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
	WHERE     
		ToDoItemTemplate.DId = @DId
		
	SELECT
		*
	FROM
		@ToDoListAndItemsTemplates
	ORDER BY
		Name,
		ToDoListTemplateId,
		[Order]
GO
PRINT N'Creating [dbo].[sp_SelectToDoListTemplates]...';


GO
CREATE PROCEDURE dbo.sp_SelectToDoListTemplates
	(
		@DId int
	)
AS

	SELECT 
		*
	FROM 
		ToDoListTemplate
	WHERE
		DId = @DId
	ORDER BY
		Name
GO
PRINT N'Creating [dbo].[sp_SelectToDoSearch]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectToDoSearch]
(
		@DId int,
		@AssignedId int,
		@StartDate datetime = NULL,
		@EndDate datetime = NULL,
		@ListType int --0 - All, 1 - Tickets, 2 - Projects
)
AS
BEGIN
	DECLARE @btCfgProject bit
	SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	
	DECLARE @ToDoListAndItems TABLE(	
		ToDoListId uniqueidentifier,
		ToDoItemId uniqueidentifier,
		Name nvarchar(50),
		[Text] nvarchar(1000),
		[OrderList] tinyint,
		[OrderItem] tinyint,
		AssignedName nvarchar(105),
		Due datetime,
		ObjectId nvarchar(50),
		TicketId int,
		ProjectId int,
		ItemType tinyint, --1 - Ticket/Project, 2 - ToDoItem, 3 - New ToDoItem
		ItemTicketID int,
		ItemTicketNumber int
		 )
		
		
	INSERT INTO @ToDoListAndItems
	(ToDoListId,
	ToDoItemId,
	Name,
	[Text],
	[OrderList],
	[OrderItem],
	AssignedName,
	Due,
	ObjectId,
	TicketId,
	ProjectId,
	ItemType,
	ItemTicketID,
	ItemTicketNumber)
	SELECT     
		ToDoItem.ToDoListId, 
		ToDoItem.Id, 
		ToDoList.Name, 
		ToDoItem.Text, 
		ToDoList.[Order], 
		ToDoItem.[Order], 
		dbo.fxGetUserName2(ISNULL(tbl_Logins.FirstName, ''), ISNULL(tbl_Logins.LastName, ''), ISNULL(tbl_Logins.Email, '')),
		ToDoItem.Due, 
		CASE WHEN ToDoList.TicketId IS NOT NULL THEN 'T' + CAST(ToDoList.TicketId AS nvarchar)
			WHEN ToDoList.ProjectId IS NOT NULL THEN 'P' + CAST(ToDoList.ProjectId AS nvarchar)
		END,
		ToDoList.TicketId,
		ToDoList.ProjectId,
		2,
		ToDoItem.TicketId,
		tbl_ticket.TicketNumber
	FROM         
		ToDoItem 
		INNER JOIN
			ToDoList ON ToDoItem.DId = ToDoList.DId AND ToDoItem.ToDoListId = ToDoList.Id
		LEFT OUTER JOIN
			tbl_LoginCompanyJunc ON ToDoItem.DId = tbl_LoginCompanyJunc.company_id 
						AND ToDoItem.AssignedId = tbl_LoginCompanyJunc.id 
        LEFT OUTER JOIN
			tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
		LEFT OUTER JOIN
			tbl_ticket ON ToDoItem.DId = tbl_ticket.company_id AND ToDoItem.TicketId = tbl_ticket.Id
	WHERE     
		ToDoItem.DId = @DId
		AND
		ToDoItem.Completed = 0
		AND
		(ToDoItem.AssignedId  = @AssignedId OR @AssignedId = 0)
		AND
		(ToDoItem.Due >= @StartDate OR @StartDate IS NULL)
		AND
		(ToDoItem.Due < @EndDate OR @EndDate IS NULL)
		AND
		(ToDoList.TicketId IS NULL OR @ListType IN (0, 1))
		AND
		(ToDoList.ProjectId IS NULL OR (@ListType IN (0, 2) AND @btCfgProject = 1))
	
	INSERT INTO @ToDoListAndItems
	(ToDoListId,
	ToDoItemId,
	Name,
	[Text],
	[OrderList],
	[OrderItem],
	AssignedName,
	Due,
	ObjectId,
	TicketId,
	ProjectId,
	ItemType)
	SELECT     
		NULL, 
		NULL, 
		'', 
		(SELECT CAST(TicketNumber as nvarchar) + ' ' + ISNULL([Subject], '') FROM tbl_ticket WHERE company_id = @DId AND tbl_ticket.Id = tdlai.TicketId), 
		0, 
		0, 
		'',
		NULL, 
		'T' + CAST(TicketId AS nvarchar),
		TicketId,
		NULL,
		1
	FROM         
		@ToDoListAndItems tdlai
	WHERE     
		TicketId IS NOT NULL
	GROUP BY
		TicketId
		
	INSERT INTO @ToDoListAndItems
	(ToDoListId,
	ToDoItemId,
	Name,
	[Text],
	[OrderList],
	[OrderItem],
	AssignedName,
	Due,
	ObjectId,
	TicketId,
	ProjectId,
	ItemType)
	SELECT     
		NULL, 
		NULL, 
		'', 
		dbo.fxGetFullProjectName(@DId, ProjectId), 
		0, 
		0, 
		'',
		NULL, 
		'P' + CAST(ProjectId AS nvarchar),
		NULL,
		ProjectId,
		1
	FROM         
		@ToDoListAndItems tdlai
	WHERE     
		ProjectId IS NOT NULL
	GROUP BY
		ProjectId
		
	INSERT INTO @ToDoListAndItems
	(ToDoListId,
	ToDoItemId,
	Name,
	[Text],
	[OrderList],
	[OrderItem],
	AssignedName,
	Due,
	ObjectId,
	TicketId,
	ProjectId,
	ItemType)
	SELECT     
		ToDoListId, 
		NULL, 
		'', 
		'', 
		OrderList, 
		255, 
		'',
		NULL, 
		ObjectId,
		TicketId,
		ProjectId,
		3
	FROM         
		@ToDoListAndItems tdlai
	WHERE     
		ToDoListId IS NOT NULL
	GROUP BY
		ObjectId, 
		ToDoListId,
		OrderList,
		TicketId,
		ProjectId
		
		
	SELECT
		*
	FROM
		@ToDoListAndItems
	ORDER BY
		ObjectId,
		OrderList,
		[OrderItem]

END
GO
PRINT N'Creating [dbo].[sp_SelectTop100MostTickets]...';


GO

CREATE PROCEDURE sp_SelectTop100MostTickets
AS

SELECT TOP 100 company_name, Max(TicketNumber)
FROM tbl_ticket  
LEFT OUTER JOIN tbl_company ON tbl_company.company_id=tbl_ticket.company_id
GROUP BY tbl_company.company_name ORDER BY Max(TicketNumber) DESC
GO
PRINT N'Creating [dbo].[sp_SelectTop100MostTimeLogs]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectTop100MostTimeLogs]
(
	@DId int,
	@LinkedFB bit,
	@Invoiced bit,
	@AccountID int,
	@ProjectID int,
	@TechID int
)
AS
BEGIN

	DECLARE @btCfgProject bit,
		@btCfgAcctMngr nvarchar(255)
		
	SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	SET @btCfgAcctMngr = dbo.fxGetConfigValueStr(@DId, 'btCfgAcctMngr')
	
	DECLARE @Top100MostTimeLogs TABLE
	(
			Id int,
			LogHours decimal(10, 4),			
			IsProjectLog bit,
			TicketNumber int,
			ProjectName nvarchar(max),
			Note nvarchar(512),
			UserName nvarchar(101),
			UserEmail nvarchar(50),
			FBID int,
			LogDate smalldatetime,
			TicketID int,
			ProjectID int,
			AccountID int,
			AccountName nvarchar(120),
			TicketSubject nvarchar(100)
	)
	
	INSERT
	@Top100MostTimeLogs
	(
		Id,
		LogHours,			
		IsProjectLog,
		TicketNumber,
		ProjectName,
		Note,
		UserName,
		UserEmail,
		FBID,
		LogDate,
		TicketID,
		ProjectID,
		AccountID,
		AccountName,
		TicketSubject
	)
	SELECT TOP 100
		tt.Id,
		tt.Hours,
		0,
		tbl_ticket.TicketNumber,
		'',
		tt.Note,
		dbo.fxGetUserName2(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email),
		LOWER(tbl_Logins.Email),
		ISNULL(tt.FBTimeEntryID, 0),
		Date,
		tt.TicketId,
		0,
		CASE WHEN @btCfgAcctMngr = 'true' THEN 
		ISNULL(tbl_ticket.intAcctId, -1) ELSE -2 END,
		CASE WHEN @btCfgAcctMngr = 'true' THEN 
			ISNULL(Accounts.vchName, ISNULL(C.company_name, ''))
		ELSE '' END,
		tbl_ticket.Subject
	FROM
		TicketTime tt
	INNER JOIN
		tbl_ticket ON tt.DepartmentId = tbl_ticket.company_id AND tt.TicketId = tbl_ticket.Id
	INNER JOIN 
		tbl_LoginCompanyJunc ON tt.DepartmentId = tbl_LoginCompanyJunc.company_id AND tt.UserId = tbl_LoginCompanyJunc.id 
	INNER JOIN
		tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
	INNER JOIN 
		tbl_company C ON tt.DepartmentId=C.company_id
	LEFT OUTER JOIN 
		Accounts ON tbl_ticket.company_id = Accounts.DId AND tbl_ticket.intAcctId = Accounts.Id
	WHERE
		tt.[DepartmentId] = @DId
		AND
		tt.Deleted = 0
		AND
		((@Invoiced = 1 AND ISNULL(tt.InvoiceId, 0) > 0) 
			OR
			(@Invoiced = 0 AND ISNULL(tt.InvoiceId, 0) = 0) 
			OR
			@Invoiced IS NULL)
		AND
		((@LinkedFB = 1 AND ISNULL(tt.FBTimeEntryID, 0) > 0) 
			OR
			(@LinkedFB = 0 AND ISNULL(tt.FBTimeEntryID, 0) = 0) 
			OR
			@LinkedFB IS NULL)
		AND
		(ISNULL(tbl_ticket.intAcctId, -1) = @AccountID OR @AccountID IS NULL)
		AND
		(ISNULL(tbl_ticket.ProjectID, 0) = @ProjectID OR @ProjectID IS NULL)
		AND
		(ISNULL(tt.UserId, 0) = @TechID OR @TechID IS NULL)
	ORDER BY
		tt.Date DESC
	
	INSERT
	@Top100MostTimeLogs
	(
		Id,
		LogHours,			
		IsProjectLog,
		TicketNumber,
		ProjectName,
		Note,
		UserName,
		UserEmail,
		FBID,
		LogDate,
		TicketID,
		ProjectID,
		AccountID,
		AccountName,
		TicketSubject
	)
	SELECT TOP 100
		pt.Id,
		pt.Hours,
		1,
		0,
		CASE WHEN @btCfgProject = 1 THEN
		dbo.fxGetFullProjectName(@DId, pt.ProjectId)
		ELSE '' END,
		pt.Note,
		dbo.fxGetUserName2(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email),
		LOWER(tbl_Logins.Email),
		ISNULL(pt.FBTimeEntryID, 0),
		Date,
		0,
		CASE WHEN @btCfgProject = 1 THEN ISNULL(pt.ProjectId, 0) ELSE 0 END,
		CASE WHEN @btCfgAcctMngr = 'true' THEN 
		ISNULL(Project.AccountID, ISNULL(pt.AccountID, -1))
		ELSE - 2 END,
		CASE WHEN @btCfgAcctMngr = 'true' THEN 
			ISNULL(Accounts.vchName, ISNULL(C.company_name, ''))
		ELSE '' END,
		''
	FROM
		ProjectTime pt
	LEFT OUTER JOIN
		Project ON pt.DepartmentId = Project.CompanyID AND pt.ProjectId = Project.ProjectID
	LEFT OUTER JOIN 
		Accounts ON pt.DepartmentId = Accounts.DId AND ISNULL(Project.AccountID, pt.AccountID) = Accounts.Id
	INNER JOIN 
		tbl_LoginCompanyJunc ON pt.DepartmentId = tbl_LoginCompanyJunc.company_id AND pt.UserId = tbl_LoginCompanyJunc.id 
	INNER JOIN
		tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
	INNER JOIN 
		tbl_company C ON pt.DepartmentId=C.company_id
	WHERE
		pt.[DepartmentId] = @DId
		AND
		pt.Deleted = 0
		AND
		((@Invoiced = 1 AND ISNULL(pt.InvoiceId, 0) > 0) 
			OR
			(@Invoiced = 0 AND ISNULL(pt.InvoiceId, 0) = 0) 
			OR
			@Invoiced IS NULL)
		AND
		((@LinkedFB = 1 AND ISNULL(pt.FBTimeEntryID, 0) > 0) 
			OR
			(@LinkedFB = 0 AND ISNULL(pt.FBTimeEntryID, 0) = 0) 
			OR
			@LinkedFB IS NULL)
		AND
		(ISNULL(Project.AccountID, ISNULL(pt.AccountID, -1)) = @AccountID OR @AccountID IS NULL)
		AND
		(ISNULL(pt.ProjectID, 0) = @ProjectID OR @ProjectID IS NULL)
		AND
		(ISNULL(pt.UserId, 0) = @TechID OR @TechID IS NULL)
	ORDER BY
		pt.Date DESC
	
	SELECT TOP 100
		*
	FROM
		@Top100MostTimeLogs
	ORDER BY
		LogDate DESC
	
	
END
GO
PRINT N'Creating [dbo].[sp_SelectTop25ActivityLogs]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTop25ActivityLogs] ( @DId INT, @UserId INT )
AS 
    BEGIN
        DECLARE @btCfgProject BIT
		
        SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	

        DECLARE @Top25MostActivityLogs TABLE
            (
              Id INT ,
              ObjectId INT ,
              ObjectFriendlyId INT ,
              [Object] NVARCHAR(512) ,
              [TicketId] INT ,
              Note NVARCHAR(MAX) ,
              Title NVARCHAR(512) ,
              UserName NVARCHAR(101) ,
              UserEmail NVARCHAR(50) ,
              [Date] SMALLDATETIME ,
              UserID INT
            )

        INSERT  @Top25MostActivityLogs
                ( Id ,
                  ObjectId ,
                  ObjectFriendlyId ,
                  [Object] ,
                  [TicketId] ,
                  Note ,
                  Title ,
                  UserName ,
                  UserEmail ,
                  [Date] ,
                  UserID
	            )
                SELECT TOP 25
                        tbl_ticket.Id [Id] ,
                        tbl_ticket.Id [ObjectId] ,
                        TicketNumber [ObjectFriendlyId] ,
                        'kb' [Object] ,
                        tbl_ticket.Id [TicketId] ,
                        'Subject: ' + [Subject] + ' <br><br> ' + CONVERT(NVARCHAR(max),Workpad) [Note] ,
                        'New KB' [Title] ,
                        dbo.fxGetUserName2(tbl_Logins.FirstName,
                                           tbl_Logins.LastName,
                                           tbl_Logins.Email) [UserName] ,
                        LOWER(tbl_Logins.Email) [UserEmail] ,
                        CreateTime [Date] ,
                        User_id
                FROM    tbl_ticket
                        INNER JOIN tbl_LoginCompanyJunc ON tbl_ticket.company_id = tbl_LoginCompanyJunc.company_id
                                                           AND User_id = tbl_LoginCompanyJunc.id
                        INNER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
                        INNER JOIN tbl_company C ON tbl_ticket.company_id = C.company_id
                WHERE   tbl_ticket.company_id = @DId
                        AND KB = 1
                ORDER BY Id DESC

        INSERT  @Top25MostActivityLogs
                ( Id ,
                  ObjectId ,
                  ObjectFriendlyId ,
                  [Object] ,
                  [TicketId] ,
                  Note ,
                  Title ,
                  UserName ,
                  UserEmail ,
                  [Date] ,
                  UserID
	            )
                SELECT TOP 25
                        tl.Id [Id] ,
                        tl.TId [ObjectId] ,
                        tbl_ticket.TicketNumber [ObjectFriendlyId] ,
                        CASE WHEN tbl_ticket.kb = 1 THEN 'kb'
                             ELSE 'ticket'
                        END [Object] ,
                        tl.TId [TicketId] ,
                        CASE WHEN tl.vchType = 'Initial Post' THEN  'Subject: ' + Subject + ' <br><br> ' + tl.vchNote ELSE tl.vchNote end [Note] ,
                        CASE WHEN tbl_ticket.kb = 1 THEN 'KB ' + tl.vchType
                             ELSE REPLACE(tl.vchType, 'Initial Post',
                                          'New Ticket')
                        END [Title] ,
                        CASE WHEN tl.UId IS NULL THEN tl.username
                             ELSE dbo.fxGetUserName2(tbl_Logins.FirstName,
                                                     tbl_Logins.LastName,
                                                     tbl_Logins.Email)
                        END [UserName] ,
                        CASE WHEN tl.UId IS NULL THEN tl.useremail
                             ELSE LOWER(tbl_Logins.Email)
                        END [UserEmail] ,
                        tl.dtDate [Date] ,
                        tl.UId
                FROM    TicketLogs tl
                        LEFT OUTER JOIN tbl_ticket ON tl.DId = tbl_ticket.company_id
                                                      AND tl.TId = tbl_ticket.Id
                        LEFT OUTER JOIN tbl_LoginCompanyJunc ON tbl_ticket.company_id = tbl_LoginCompanyJunc.company_id
                                                              AND tl.UId = tbl_LoginCompanyJunc.id
                        LEFT OUTER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
                        LEFT OUTER JOIN tbl_company C ON tbl_ticket.company_id = C.company_id
                WHERE   tl.[DId] = @DId
                        AND tl.vchType NOT IN ( 'Log Entry', 'Email Parser' )
                ORDER BY tl.Id DESC
	
        INSERT  @Top25MostActivityLogs
                ( Id ,
                  ObjectId ,
                  ObjectFriendlyId ,
                  [Object] ,
                  [TicketId] ,
                  Note ,
                  Title ,
                  UserName ,
                  UserEmail ,
                  [Date] ,
                  UserID
	            )
                SELECT TOP 25
                        tt.Id ,
                        tt.Id ,
                        tt.Id ,
                        'time' ,
                        tt.TicketId ,
                        STR(tt.HOURS, 4, 2) + ' hours as '
                        + ( SELECT  [TaskTypeName]
                            FROM    TaskType
                            WHERE   TaskTypeID = tt.TaskTypeId
                                    AND DepartmentID = @DId
                          ) + 'on Tkt #'
                        + CONVERT(VARCHAR(512), tbl_ticket.TicketNumber)
                        + ISNULL(' with comment: ' + tt.Note, '') Note ,
                        'Ticket Time' ,
                        dbo.fxGetUserName2(tbl_Logins.FirstName,
                                           tbl_Logins.LastName,
                                           tbl_Logins.Email) ,
                        LOWER(tbl_Logins.Email) ,
                        tt.Date ,
                        tt.UserId
                FROM    TicketTime tt
                        INNER JOIN tbl_ticket ON tt.DepartmentId = tbl_ticket.company_id
                                                 AND tt.TicketId = tbl_ticket.Id
                        INNER JOIN tbl_LoginCompanyJunc ON tt.DepartmentId = tbl_LoginCompanyJunc.company_id
                                                           AND tt.UserId = tbl_LoginCompanyJunc.id
                        INNER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
                        INNER JOIN tbl_company C ON tt.DepartmentId = C.company_id
                        LEFT OUTER JOIN Accounts ON tbl_ticket.company_id = Accounts.DId
                                                    AND tbl_ticket.intAcctId = Accounts.Id
                WHERE   tt.[DepartmentId] = @DId
                ORDER BY tt.Date DESC
	
        INSERT  @Top25MostActivityLogs
                ( Id ,
                  ObjectId ,
                  ObjectFriendlyId ,
                  [Object] ,
                  [TicketId] ,
                  Note ,
                  Title ,
                  UserName ,
                  UserEmail ,
                  [Date] ,
                  UserID
	            )
                SELECT TOP 25
                        pt.Id ,
                        pt.Id ,
                        pt.Id ,
                        'time' ,
                        CASE WHEN @btCfgProject = 1
                             THEN ISNULL(pt.ProjectId, 0)
                             ELSE 0
                        END ,
                        STR(pt.HOURS, 4, 2) + ' hours as '
                        + ( SELECT  [TaskTypeName]
                            FROM    TaskType
                            WHERE   TaskTypeID = pt.TaskTypeId
                                    AND DepartmentID = @DId
                          ) + ISNULL(' on ' + pt.Note, '') Note ,
                        'Project Time' ,
                        dbo.fxGetUserName2(tbl_Logins.FirstName,
                                           tbl_Logins.LastName,
                                           tbl_Logins.Email) ,
                        LOWER(tbl_Logins.Email) ,
                        pt.Date ,
                        pt.UserId
                FROM    ProjectTime pt
                        LEFT OUTER JOIN Project ON pt.DepartmentId = Project.CompanyID
                                                   AND pt.ProjectId = Project.ProjectID
                        LEFT OUTER JOIN Accounts ON pt.DepartmentId = Accounts.DId
                                                    AND ISNULL(Project.AccountID,
                                                              pt.AccountID) = Accounts.Id
                        INNER JOIN tbl_LoginCompanyJunc ON pt.DepartmentId = tbl_LoginCompanyJunc.company_id
                                                           AND pt.UserId = tbl_LoginCompanyJunc.id
                        INNER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
                        INNER JOIN tbl_company C ON pt.DepartmentId = C.company_id
                WHERE   pt.[DepartmentId] = @DId
                ORDER BY pt.Date DESC
	
        IF ISNULL(@UserId, 0) > 0 
            BEGIN

                SELECT TOP 25
                        *
                FROM    @Top25MostActivityLogs
                WHERE   UserID = @UserId
                ORDER BY [Date] ,
                        Id DESC
  
            END
        ELSE 
            BEGIN
                SELECT TOP 25
                        *
                FROM    @Top25MostActivityLogs
                ORDER BY [Date] DESC ,
                        Id DESC
            END      
    END
GO
PRINT N'Creating [dbo].[sp_SelectTravelCost]...';


GO

Create Procedure sp_SelectTravelCost
	(
		@DepartmentId int,
		@TicketId int
	)
As
	SELECT TravelCost FROM tbl_ticket WHERE company_id = @DepartmentId AND id = @TicketId 
	return
GO
PRINT N'Creating [dbo].[sp_SelectTravelTimeForInvoice]...';


GO
CREATE  PROCEDURE dbo.sp_SelectTravelTimeForInvoice
	(
		@DId int,
		@AccountID int,
		@ProjectID int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime
	)
AS
BEGIN
	DECLARE @btCfgProject bit
	SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')
	
	SELECT
		ttc.Id,
		ttc.TicketId,
		CAST(t.TicketNumber AS nvarchar(50)) AS TicketNumber, 
		ttc.StartLocation,
		ttc.EndLocation,
		ttc.Distance,
		ttc.DistanceRate,
		ttc.Total,
		t.Status,
		ttc.Date
	FROM 
		TicketTravelCosts ttc
	INNER JOIN tbl_ticket t ON ttc.DepartmentId = t.company_id AND ttc.TicketId = t.Id								
	WHERE 
		ttc.DepartmentId = @DId 
		AND 
		ttc.InvoiceId IS NULL
		AND
		ISNULL(t.intAcctId, -1) = ISNULL(@AccountID, -1)
		AND ttc.Date >= @BeginDate
		AND ttc.Date <= @EndDate
		AND
		(CASE 
			WHEN (dbo.fxGetParentBMProject(@DId, @AccountID,t.ProjectID) > 0)
			THEN
				CASE
					WHEN (dbo.fxGetParentBMProject(@DId, @AccountID,t.ProjectID) = @ProjectID)
					THEN 1 ELSE 0
				END
			ELSE
				CASE
					WHEN @ProjectID IS NULL
					THEN 1 ELSE 0
				END
				END = 1)
		AND
		(@btCfgProject = 1 OR (@btCfgProject <> 1 AND t.ProjectID IS NULL))
	ORDER BY ttc.TicketId
END
GO
PRINT N'Creating [dbo].[sp_SelectTypePropertyMergeConflict]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectTypePropertyMergeConflict]
(
	@DepartmentId int,
	@SourceID int,
	@DestID int,
	@MergeTypeConflict bit
)
AS
BEGIN

	DECLARE @DataTypeName TABLE
	(
		DataType int,
		DataTypeName nvarchar(50)
	)
	
	INSERT INTO @DataTypeName(DataType, DataTypeName) VALUES (1, 'Integer')
	INSERT INTO @DataTypeName(DataType, DataTypeName) VALUES (2, 'Numeric')
	INSERT INTO @DataTypeName(DataType, DataTypeName) VALUES (3, 'DateTime')
	INSERT INTO @DataTypeName(DataType, DataTypeName) VALUES (4, 'SelectList(single answer)')

	SELECT  sp.DId as DepartmentId,
			sp.Id as sId, sp.AssetTypeId as sAssetTypeId, sp.Name as sName, sp.DataType as sDataType, sp.Enumeration as sEnumeration, sp.Description as sDescription, sd.DataTypeName as sDataTypeName,
			dp.Id as dId, dp.AssetTypeId as dAssetTypeId, dp.Name as dName, dp.DataType as dDataType, dp.Enumeration as dEnumeration, dp.Description as dDescription, dd.DataTypeName as dDataTypeName,
			st.Name as sTypeName, dt.Name as dTypeName,
			sc.Name as sCategoryName, sc.Id as sCategoryId, dc.Name as dCategoryName, dc.Id as dCategoryId
	FROM AssetTypeProperties sp
	JOIN AssetTypeProperties dp on
		sp.DId = @DepartmentId AND (sp.AssetTypeId=@SourceID OR @MergeTypeConflict=0) AND
		dp.DId = @DepartmentId AND (dp.AssetTypeId=@DestID OR @MergeTypeConflict=0) AND
		ISNULL(sp.Name,'')=ISNULL(dp.Name,'') AND 
		(
			sp.DataType<>dp.DataType OR 
			ISNULL(sp.Enumeration,'')<>ISNULL(dp.Enumeration,'')
		)
	JOIN AssetTypes st on sp.AssetTypeId=st.Id AND st.DepartmentId=@DepartmentId AND (st.CategoryId=@SourceID OR @MergeTypeConflict=1)
	JOIN AssetTypes dt on dp.AssetTypeId=dt.Id AND dt.DepartmentId=@DepartmentId AND ((dt.CategoryId=@DestID AND ISNULL(dt.Name,'')=ISNULL(st.Name,'')) OR @MergeTypeConflict=1)
	JOIN AssetCategories sc on st.CategoryId = sc.Id AND sc.DepartmentId=@DepartmentId
	JOIN AssetCategories dc on dt.CategoryId = dc.Id AND dc.DepartmentId=@DepartmentId
	JOIN @DataTypeName sd on sp.DataType=sd.DataType
	JOIN @DataTypeName dd on dp.DataType=dd.DataType

	ORDER BY st.Name, st.Id, dt.Name, dt.Id, sp.Name, dp.Name
END
GO
PRINT N'Creating [dbo].[sp_SelectUnassignedQueDetail]...';


GO
CREATE Procedure [dbo].[sp_SelectUnassignedQueDetail]
	(
		@DId int,
		@QueueId int
	)
As
	SELECT J.QueEmailAddress, L.FirstName, J.bitAllowQueEmailParsing 
		FROM tbl_LoginCompanyJunc J
		JOIN tbl_Logins L ON J.login_id = L.id
		JOIN tbl_company C ON C.company_id=@DId
		WHERE J.company_id = @DId AND J.id = @QueueId
	return
GO
PRINT N'Creating [dbo].[sp_SelectUnassignedQueList]...';


GO
CREATE Procedure dbo.sp_SelectUnassignedQueList	
	(
		@CompanyId int
	)
As
	SELECT J.id, J.QueEmailAddress, L.FirstName, L.LastName,  L.FirstName+' '+L.LastName as FullName
	FROM tbl_LoginCompanyJunc J
	JOIN tbl_logins L ON J.login_id = L.id
	WHERE J.company_id = @CompanyId AND J.UserType_Id = 4 
	return
GO
PRINT N'Creating [dbo].[sp_SelectUnassignedQuesCount]...';


GO
CREATE Procedure [dbo].[sp_SelectUnassignedQuesCount]

	(
		@CompanyId int
	)
As

	SELECT J.id AS QueId, Max(L.FirstName+' Queue') AS QueName, SUM(CASE WHEN T.Status<>'Closed' THEN 1 ELSE 0 END) as TicketCount 
		FROM tbl_LoginCompanyJunc J
		INNER JOIN tbl_Logins L ON J.login_id = L.id
		LEFT OUTER JOIN tbl_ticket T ON T.company_id=@CompanyId AND T.Technician_Id=J.id 
		WHERE J.company_id = @CompanyId AND J.UserType_id = 4
		GROUP BY J.id
		ORDER BY QueName
	return
GO
PRINT N'Creating [dbo].[sp_SelectUnbilledProjects]...';


GO


CREATE PROCEDURE [dbo].[sp_SelectUnbilledProjects]
(
		@DId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime,
		@ShowAllProjects bit
	)
AS

	DECLARE @btCfgAcctMngr nvarchar(255),
		@btCfgProject bit

	SET @btCfgAcctMngr = dbo.fxGetConfigValueStr(@DId, 'btCfgAcctMngr')
	SET @btCfgProject = dbo.fxGetConfigValueBit(@DId, 'btCfgProject')


	DECLARE @UnbilledProjects TABLE
		(
			AccountID int,			
			ProjectID int,
			ComplexID nvarchar(20),
			Hours decimal(10, 4),
			Amount money,
			Customer nvarchar(1000),
			TravelCost money, 
			NoRatePlan bit
		)
		
	IF @ShowAllProjects = 1
	BEGIN
		IF @btCfgAcctMngr = 'true'
		BEGIN
		INSERT INTO @UnbilledProjects
		SELECT
			Accounts.Id AS AccountID,
			NULL AS ProjectID,
			CAST(Accounts.Id AS nvarchar) + '|0' AS ComplexID,			
			0,
			0 AS Amount,
			dbo.fxGetCustomerName(@DId, Accounts.Id, NULL, @btCfgAcctMngr, @btCfgProject) AS Customer,
			0 AS TravelCost,
			CASE
				WHEN AccountRate.BillingMethodID IS NULL
				THEN 1
				ELSE 0
			END AS NoRatePlan
		FROM         
			Accounts 
		LEFT OUTER JOIN
            AccountRate ON Accounts.DId = AccountRate.CompanyID AND Accounts.Id = AccountRate.AccountID
		WHERE     
			Accounts.DId = @DId 
			AND 
			Accounts.btActive = 1
			AND
			ISNULL(AccountRate.BillingMethodID, 0) <> 5
		END
			
		IF @btCfgProject = 1
		 BEGIN
		INSERT INTO @UnbilledProjects
		SELECT
			ISNULL(Project.AccountID, -1) AS AccountID,
			Project.ProjectID AS ProjectID,
			CAST(ISNULL(Project.AccountID, -1) AS nvarchar) + '|' + CAST(ISNULL(
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, Project.AccountID, Project.ProjectID) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId,Project.AccountID, Project.ProjectID)
			END, 0) AS nvarchar) AS ComplexID,			
			0,
			0 AS Amount,
			dbo.fxGetCustomerName(@DId, Project.AccountID, CASE
				WHEN dbo.fxGetParentBMProject(@DId, Project.AccountID, Project.ProjectID) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, Project.AccountID, Project.ProjectID)
			END, @btCfgAcctMngr, @btCfgProject) AS Customer,
			0 AS TravelCost,
			CASE
				WHEN dbo.fxGetBillingMethodID(@DId, Project.AccountID, Project.ProjectID) IS NULL
				THEN 1
				ELSE 0
			END AS NoRatePlan
		FROM         
			Project 
			LEFT OUTER JOIN Accounts ON Accounts.DId = @DId AND Project.AccountID = Accounts.Id
		WHERE     
			Project.CompanyID = @DId 
			AND 
			Project.Active = 1
			AND
			dbo.fxGetBillingMethodID(@DId, Project.AccountID, Project.ProjectID) <> 5
			AND
			((@btCfgAcctMngr = 'true' AND (Project.AccountID IS NULL OR Accounts.btActive = 1)) OR (@btCfgAcctMngr <> 'true' AND Project.AccountID IS NULL))
		END
	END

	INSERT INTO @UnbilledProjects
		SELECT
			t.intAcctId,
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID)
			END AS ProjectID,
			CAST(ISNULL(t.intAcctId, -1) AS nvarchar) + '|' + CAST(ISNULL(
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID)
			END, 0) AS nvarchar) AS ComplexID,			
			tt.Hours,
			CAST(tt.Hours*(dbo.fxGetTimeLogBillableRate(@DId, t.intAcctId, t.ProjectID, tt.TaskTypeId, tt.UserId)) AS money) AS Amount,
			dbo.fxGetCustomerName(@DId, t.intAcctId,
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID)
			END, @btCfgAcctMngr, @btCfgProject) AS Customer,
			0 AS TravelCost,
			CASE
				WHEN dbo.fxGetBillingMethodID(@DId, t.intAcctId, t.ProjectID) IS NULL
				THEN 1
				ELSE 0
			END AS NoRatePlan
		FROM 
			TicketTime tt
				LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id								
		WHERE 
			tt.DepartmentId = @DId 
			AND tt.InvoiceId IS NULL
			AND tt.Deleted = 0
			AND ISNULL(t.btNoAccount, 0) = 0
			AND tt.Date >= @BeginDate
			AND tt.Date <= @EndDate
			AND (@btCfgAcctMngr = 'true' OR (@btCfgAcctMngr <> 'true' AND t.intAcctId IS NULL))
			AND (@btCfgProject = 1 OR (@btCfgProject <> 1 AND t.ProjectID IS NULL))
			AND (dbo.fxGetIsTimeLogBillable(@DId, t.intAcctId, t.ProjectID, tt.TaskTypeId, tt.UserId, 0, 1, 0) = 1)
		UNION ALL
		SELECT	
			ISNULL(p.AccountID, pt.AccountID) AS AccountID,
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId)
			END AS ProjectID,
			CAST(ISNULL(ISNULL(p.AccountID, pt.AccountID), -1) AS nvarchar) + '|' + CAST(ISNULL(
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId)
			END, 0) AS nvarchar) AS ComplexID,
			pt.Hours,
			CAST(pt.Hours*(dbo.fxGetTimeLogBillableRate(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId, pt.TaskTypeId, pt.UserId)) AS money) AS Amount,
			dbo.fxGetCustomerName(@DId, ISNULL(p.AccountID, pt.AccountID),
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId)
			END, @btCfgAcctMngr, @btCfgProject) AS Customer,
			0 AS TravelCost,
			CASE
				WHEN dbo.fxGetBillingMethodID(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectID) IS NULL
				THEN 1
				ELSE 0
			END AS NoRatePlan
		FROM 
			ProjectTime pt
				LEFT OUTER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID				
		WHERE 
			pt.DepartmentId = @DId
			AND pt.InvoiceId IS NULL
			AND pt.Deleted = 0
			AND pt.Date >= @BeginDate
			AND pt.Date <= @EndDate
			AND (@btCfgAcctMngr = 'true' OR (@btCfgAcctMngr <> 'true' AND p.AccountID IS NULL AND pt.AccountID IS NULL))
			AND (@btCfgProject = 1 OR (@btCfgProject <> 1 AND pt.ProjectId IS NULL))
			AND (dbo.fxGetIsTimeLogBillable(@DId, ISNULL(p.AccountID, pt.AccountID), pt.ProjectId, pt.TaskTypeId, pt.UserId, 0, 1, 0) = 1)			

	-- Flat Fee
	INSERT INTO @UnbilledProjects
		SELECT
			ar.AccountID,
			NULL,
			CAST(ISNULL(ar.AccountID, -1) AS nvarchar) + '|0',
			dbo.fxGetProjectLoggedHours(@DId, ar.AccountID, NULL, @BeginDate, @EndDate, NULL) AS Hours,
			ISNULL(ar.FlatFee, 0) AS Amount,
			dbo.fxGetCustomerName(@DId, ar.AccountID, NULL, @btCfgAcctMngr, @btCfgProject) AS Customer,
			0 AS TravelCost,
			0 AS NoRatePlan
		FROM 
			AccountRate ar		
			LEFT OUTER JOIN Accounts ON Accounts.DId = @DId AND ar.AccountID = Accounts.Id	
		WHERE 
			ar.CompanyID = @DId 
			AND ar.BillingMethodID = 1			
			AND ar.FlatFeeNextDate IS NOT NULL
			AND ar.FlatFeeNextDate >= @BeginDate
			AND ar.FlatFeeNextDate <= @EndDate	
			AND ((@btCfgAcctMngr = 'true' AND (ar.AccountID IS NULL OR Accounts.btActive = 1)) OR (@btCfgAcctMngr <> 'true' AND ar.AccountID IS NULL))	
		UNION ALL
		SELECT	
			p.AccountID,
			p.ProjectID,
			CAST(ISNULL(p.AccountID, -1) AS nvarchar) + '|' + CAST(ISNULL(p.ProjectID, 0) AS nvarchar) AS ComplexID,
			dbo.fxGetProjectLoggedHours(@DId, p.AccountID, p.ProjectID, @BeginDate, @EndDate, NULL) AS Hours,
			ISNULL(p.FlatFee, 0) AS Amount,
			dbo.fxGetCustomerName(@DId, p.AccountID, p.ProjectID, @btCfgAcctMngr, @btCfgProject) AS Customer,
			0 AS TravelCost,
			0 AS NoRatePlan
		FROM
			Project p		
			LEFT OUTER JOIN Accounts ON Accounts.DId = @DId AND p.AccountID = Accounts.Id		
		WHERE 
			p.CompanyID = @DId 
			AND p.BillingMethodID = 1
			AND p.FlatFeeNextDate IS NOT NULL
			AND p.FlatFeeNextDate >= @BeginDate
			AND p.FlatFeeNextDate <= @EndDate
			AND ((@btCfgAcctMngr = 'true' AND (p.AccountID IS NULL OR Accounts.btActive = 1)) OR (@btCfgAcctMngr <> 'true' AND p.AccountID IS NULL))	
			AND @btCfgProject = 1

	-- Retainers
	INSERT INTO @UnbilledProjects
		SELECT
			ar.AccountID,
			NULL,
			CAST(ISNULL(ar.AccountID, -1) AS nvarchar) + '|0',
			dbo.fxGetProjectLoggedHours(@DId, aret.AccountId, NULL, @BeginDate, @EndDate, aret.TechId) AS Hours,
			dbo.fxGetRetainerAmount(@DId, aret.AccountId, NULL, aret.TechId, @BeginDate, @EndDate) AS Amount,
			dbo.fxGetCustomerName(@DId, aret.AccountId, NULL, @btCfgAcctMngr, @btCfgProject) AS Customer,
			0 AS TravelCost,
			0 AS NoRatePlan
		FROM 
			AccountRetainer aret
				INNER JOIN 
					AccountRate ar ON aret.DId = ar.CompanyID AND ISNULL(aret.AccountId, -1) = ISNULL(ar.AccountID, -1)
			LEFT OUTER JOIN Accounts ON Accounts.DId = @DId AND aret.AccountID = Accounts.Id	
		WHERE 
			aret.DId = @DId 
			AND ar.BillingMethodID = 4			
			AND ar.FlatFeeNextDate IS NOT NULL
			AND ar.FlatFeeNextDate >= @BeginDate
			AND ar.FlatFeeNextDate <= @EndDate
			AND ((@btCfgAcctMngr = 'true' AND (aret.AccountID IS NULL OR Accounts.btActive = 1)) OR (@btCfgAcctMngr <> 'true' AND aret.AccountId IS NULL))	
			AND (dbo.fxGetRetainerAmount(@DId, aret.AccountId, NULL, aret.TechId, @BeginDate, @EndDate) >= 0)
		UNION ALL
		SELECT	
			p.AccountID,
			p.ProjectID,
			CAST(ISNULL(p.AccountID, -1) AS nvarchar) + '|' + CAST(ISNULL(p.ProjectID, 0) AS nvarchar) AS ComplexID,
			dbo.fxGetProjectLoggedHours(@DId, p.AccountID, pr.ProjectId, @BeginDate, @EndDate, pr.TechId) AS Hours,
			dbo.fxGetRetainerAmount(@DId, p.AccountID, pr.ProjectId, pr.TechId, @BeginDate, @EndDate) AS Amount,
			dbo.fxGetCustomerName(@DId, p.AccountID, pr.ProjectId, @btCfgAcctMngr, @btCfgProject) AS Customer,
			0 AS TravelCost,
			0 AS NoRatePlan
		FROM
			ProjectRetainer pr
				INNER JOIN Project p ON pr.DId = p.CompanyID AND pr.ProjectId = p.ProjectID
				LEFT OUTER JOIN Accounts ON Accounts.DId = @DId AND p.AccountID = Accounts.Id
		WHERE 
			pr.DId = @DId 
			AND p.BillingMethodID = 4
			AND p.FlatFeeNextDate IS NOT NULL
			AND p.FlatFeeNextDate >= @BeginDate
			AND p.FlatFeeNextDate <= @EndDate
			AND ((@btCfgAcctMngr = 'true' AND (p.AccountID IS NULL OR Accounts.btActive = 1)) OR (@btCfgAcctMngr <> 'true' AND p.AccountID IS NULL))	
			AND dbo.fxGetRetainerAmount(@DId, p.AccountID, pr.ProjectId, pr.TechId, @BeginDate, @EndDate) >= 0
			AND @btCfgProject = 1


	INSERT INTO @UnbilledProjects
		SELECT
			t.intAcctId,
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID)
			END AS ProjectID,
			CAST(ISNULL(t.intAcctId, -1) AS nvarchar) + '|' + CAST(ISNULL(
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID)
			END, 0) AS nvarchar) AS ComplexID,			
			0 AS Hours,
			0 AS Amount,
			dbo.fxGetCustomerName(@DId, t.intAcctId,
			CASE
				WHEN dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID) <=0
				THEN NULL -- for account
				ELSE dbo.fxGetParentBMProject(@DId, t.intAcctId, t.ProjectID)
			END, @btCfgAcctMngr, @btCfgProject) AS Customer,
			ttc.Total AS TravelCost,
			CASE
				WHEN dbo.fxGetBillingMethodID(@DId, t.intAcctId, t.ProjectID) IS NULL
				THEN 1
				ELSE 0
			END AS NoRatePlan
		FROM 
			TicketTravelCosts ttc
		INNER JOIN tbl_ticket t ON ttc.DepartmentId = t.company_id AND ttc.TicketId = t.Id		
		LEFT OUTER JOIN Accounts ON Accounts.DId = @DId AND t.intAcctId = Accounts.Id							
		LEFT OUTER JOIN Project p ON p.CompanyID = @DId AND t.ProjectID = p.ProjectID
		WHERE 
			ttc.DepartmentId = @DId 
			AND ttc.InvoiceId IS NULL
			AND ttc.Date >= @BeginDate
			AND ttc.Date <= @EndDate
			AND ((@btCfgAcctMngr = 'true' AND (t.intAcctId IS NULL OR Accounts.btActive = 1) AND (t.ProjectID IS NULL OR p.Active = 1)) OR (@btCfgAcctMngr <> 'true' AND t.intAcctId IS NULL))	
			AND (@btCfgProject = 1 OR (@btCfgProject <> 1 AND t.ProjectID IS NULL))
	 
	SELECT 
		up.ComplexID,
		SUM(up.Hours) AS TotalHours,		
		SUM(up.Amount) AS Amount,		
		(SELECT TOP 1 i.BeginDate
		FROM Invoice i
		WHERE i.DId = @DId AND CAST(i.AccountId AS nvarchar) + '|' + CAST(i.ProjectId AS nvarchar) = up.ComplexID
		ORDER BY i.EndDate DESC, i.BeginDate DESC) AS LastRangeBegin,
		(SELECT TOP 1 i.EndDate
		FROM Invoice i
		WHERE i.DId = @DId AND CAST(i.AccountId AS nvarchar) + '|' + CAST(i.ProjectId AS nvarchar) = up.ComplexID
		ORDER BY i.EndDate DESC, i.BeginDate DESC) AS LastRangeEnd,		
		Customer,
		SUM(up.TravelCost) AS TravelCost,
		SUM(up.Amount) + SUM(up.TravelCost) AS TotalCost,
		NoRatePlan
	FROM 
		@UnbilledProjects up
			LEFT OUTER JOIN Accounts a ON a.DId = @DId AND up.AccountID = a.Id
	GROUP BY up.ComplexID, Customer, NoRatePlan
	ORDER BY Customer
GO
PRINT N'Creating [dbo].[sp_SelectUnbilledTimeLogs]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectUnbilledTimeLogs]
	(
		@DId int,
		@BeginDate smalldatetime,
		@EndDate smalldatetime
	)
AS
	DECLARE @UnbilledLogs TABLE
		(
			TechID int,
			Hours decimal(10, 4),			
			Amount money,
			FullName nvarchar(100)
		)
	INSERT INTO @UnbilledLogs	
		SELECT
			tt.UserId,
			tt.Hours,			
			CAST(tt.Hours*tt.HourlyRate AS money) AS Amount,
			dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) AS FullName
		FROM 
			TicketTime tt			
				LEFT OUTER JOIN tbl_LoginCompanyJunc tlj 
					ON tlj.company_id=@DId AND tlj.id = tt.UserId 
				LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id		
		WHERE 
			tt.DepartmentId = @DId 
			AND tt.BillId IS NULL
			AND tt.Deleted = 0
			AND tt.Date >= @BeginDate
			AND tt.Date <= @EndDate
			AND tlj.CfgIsBillable = 1
		UNION ALL
		SELECT	
			pt.UserId,			
			pt.Hours,			
			CAST(pt.Hours*pt.HourlyRate AS money) AS Amount,
			dbo.fxGetUserName(lo.FirstName, lo.LastName, lo.Email) AS FullName
		FROM 
			ProjectTime pt
				LEFT OUTER JOIN tbl_LoginCompanyJunc tlj 
					ON tlj.company_id=@DId AND tlj.id = pt.UserId 
				LEFT OUTER JOIN tbl_Logins lo ON lo.id=tlj.login_id		
		WHERE 
			pt.DepartmentId = @DId
			AND pt.BillId IS NULL
			AND pt.Deleted = 0
			AND pt.Date >= @BeginDate
			AND pt.Date <= @EndDate
			AND tlj.CfgIsBillable = 1
		ORDER BY tt.UserId

	SELECT
		ul.TechID,
		SUM(ul.Hours) AS TotalHours,		
		SUM(ul.Amount) AS Amount,
		ul.FullName,
		(SELECT TOP 1 tb.BeginDate
		FROM TimeBill tb
		WHERE tb.DId = @DId AND tb.TechID = ul.TechID
		ORDER BY tb.EndDate DESC, tb.BeginDate DESC) AS LastRangeBegin,
		(SELECT TOP 1 tb.EndDate
		FROM TimeBill tb
		WHERE tb.DId = @DId AND tb.TechID = ul.TechID
		ORDER BY tb.EndDate DESC, tb.BeginDate DESC) AS LastRangeEnd
	FROM 
		@UnbilledLogs ul
	GROUP BY ul.TechID, ul.FullName--, LastRange
	ORDER BY ul.FullName

set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_SelectUserAccounts]...';


GO
CREATE  PROCEDURE [dbo].[sp_SelectUserAccounts]
	(
		@DepartmentId int,
		@UserId int,
		@InternalIfEmpty bit = 1
	)
AS

IF (NOT EXISTS(SELECT * FROM UserAccounts AS UA LEFT JOIN Accounts AS A ON A.DId = UA.DepartmentId AND A.Id = UA.AccountId WHERE UA.DepartmentId = @DepartmentId AND UA.UserId = @UserId AND (A.btActive = 1 OR UA.AccountId IS NULL))) AND @InternalIfEmpty = 1
	SELECT -1 AS AccountId, (SELECT company_name FROM tbl_company WHERE company_id=@DepartmentId) + ' (Internal)' AS AccountName, 0 AS AccountLocationId,  ISNULL(dbo.fxGetUserLocationName(@DepartmentId, 0), '') AS AccountLocationName, (SELECT COUNT(id) FROM [tbl_ticket] WHERE [company_id]=@DepartmentId AND [User_id]=@UserId AND intAcctId IS NULL) AS AccountTktCount
ELSE
	SELECT ISNULL(A.Id, -1) AS AccountId, ISNULL(A.vchName, (SELECT company_name FROM tbl_company WHERE company_id=@DepartmentId) + ' (Internal)') AS AccountName, ISNULL(UA.AccountLocationId,0) AS AccountLocationId,  ISNULL(dbo.fxGetUserLocationName(@DepartmentId, UA.AccountLocationId), '') AS AccountLocationName, COUNT(tbl_ticket.id) AS AccountTktCount
	FROM UserAccounts AS UA
	LEFT JOIN Accounts AS A ON A.DId = UA.DepartmentId AND A.Id = UA.AccountId
	LEFT OUTER JOIN tbl_ticket ON UA.DepartmentId = tbl_ticket.company_id AND ISNULL(UA.AccountId, -1) = ISNULL(tbl_ticket.intAcctId, -1) AND UA.UserId = tbl_ticket.[User_id]
	WHERE UA.DepartmentId = @DepartmentId AND UA.UserId = @UserId AND (A.btActive = 1 OR UA.AccountId IS NULL)
	GROUP BY A.Id, A.vchName, UA.AccountLocationId
	ORDER BY AccountName
RETURN
GO
PRINT N'Creating [dbo].[sp_SelectUserAssignedAudits]...';


GO
CREATE Procedure [dbo].[sp_SelectUserAssignedAudits]
	(
		@DId int,
		@UserId int,
		@LocationId int,
		@DueDays int = NULL,
		@IncludePortableAudit bit = 0
	)
As

	DECLARE @PortableAssetsCount int, @AuditorLocationsCount int
	SET @PortableAssetsCount = 0
	SET @AuditorLocationsCount = 0
	
	
	
	SELECT @PortableAssetsCount = COUNT(*)
    FROM Assets		
		INNER JOIN AssetTypes ON AssetTypes.DepartmentId=Assets.DepartmentId and Assets.TypeId = AssetTypes.Id		
		LEFT OUTER JOIN AssetStatusCompany ON AssetStatusCompany.DId=Assets.DepartmentId and AssetStatusCompany.AssetStatusID=Assets.StatusId		
    WHERE
    Assets.DepartmentId=@DId AND Assets.StatusId<>17
    AND Assets.AccountId IS NULL    
    AND (AssetStatusCompany.NonActive=0 OR (AssetStatusCompany.NonActive IS NULL)) 
    AND Assets.CheckedOutId = @UserId
    AND AssetTypes.cfgPortable = 1
    
    SELECT @AuditorLocationsCount = COUNT(*) FROM Locations WHERE DId = @DId AND AuditorId = @UserId AND CfgEnableAudit = 1

	
		SELECT  L.Id, l.AuditPeriodDays, l.AuditorId, lah.Id AS AuditId, lah.AuditDate, lah.Completed, lo.FirstName+' '+lo.LastName AS AuditorName,
				dbo.fxGetLocationName(@DId, L.Id) AS LocationName, loL.FirstName+' '+loL.LastName AS LastAuditorName,
				lahC.AuditDate AS LastCompletedDate, dbo.fxGetLocationAuditDueDays(@DId, L.Id) AS DueDays, 0 AS ArtSort
				
		FROM Locations L
				LEFT OUTER JOIN LocationAuditHistory lah ON L.DId = lah.DId AND L.Id = lah.LocationId AND
				lah.AuditDate = (SELECT TOP 1 al.AuditDate FROM LocationAuditHistory al WHERE al.DId = @DId AND al.LocationId = L.Id ORDER BY AuditDate DESC)						
				LEFT OUTER JOIN tbl_LoginCompanyJunc tljL ON tljL.company_id = @DId AND lah.AuditorId = tljL.id
						LEFT OUTER JOIN tbl_Logins loL ON loL.id = tljL.login_Id
				LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id = @DId AND L.AuditorId = tlj.id
						LEFT OUTER JOIN tbl_Logins lo ON lo.id = tlj.login_Id					
				LEFT OUTER JOIN LocationAuditHistory lahC ON L.DId = lahC.DId AND L.Id = lahC.LocationId AND
				lahC.AuditDate = (SELECT TOP 1 al1.AuditDate FROM LocationAuditHistory al1 WHERE al1.DId = @DId AND al1.LocationId = L.Id AND al1.Completed = 1 ORDER BY AuditDate DESC)						
		WHERE
			L.DId = @DId			
			AND
			(@UserId = 0 OR L.AuditorId = @UserId)
			AND
			L.CfgEnableAudit = 1
			AND
			L.[Status] = 1
			AND
			(ISNULL(@LocationId, 0) = 0 OR L.Id IN (SELECT Id FROM dbo.fxGetAllChildLocations(@DId, @LocationId)))
			AND
			(@DueDays IS NULL
				OR (@DueDays >= 0 AND (dbo.fxGetLocationAuditDueDays(@DId, L.Id) BETWEEN 0 AND @DueDays))
				OR (@DueDays < 0 AND (dbo.fxGetLocationAuditDueDays(@DId, L.Id) <= @DueDays)))
		
		UNION ALL
		
		SELECT	0 AS Id, 0 AS AuditPeriodDays, @UserId,
				lah.Id AS AuditId, lah.AuditDate, lah.Completed, loL.FirstName+' '+loL.LastName AS AuditorName,
				'My Portable & Mobile Devices' AS LocationName, lo.FirstName+' '+lo.LastName AS LastAuditorName,
				lahC.AuditDate AS LastCompletedDate, -1 AS DueDays, 1 AS ArtSort		
		FROM
			tbl_LoginCompanyJunc tljL 
				LEFT OUTER JOIN tbl_Logins loL ON loL.id = tljL.login_Id
				LEFT OUTER JOIN LocationAuditHistory lah ON lah.DId = tljL.company_id AND lah.LocationId IS NULL AND lah.AuditorId = tljL.id				
					AND lah.AuditDate = (SELECT TOP 1 al.AuditDate FROM LocationAuditHistory al WHERE al.DId = lah.DId AND al.LocationId IS NULL AND al.AuditorId = lah.AuditorId ORDER BY AuditDate DESC)
				LEFT OUTER JOIN tbl_LoginCompanyJunc tlj ON tlj.company_id = @DId AND lah.AuditorId = tlj.id
						LEFT OUTER JOIN tbl_Logins lo ON lo.id = tlj.login_Id			
				LEFT OUTER JOIN LocationAuditHistory lahC ON lahC.DId = tljL.company_id AND lahC.LocationId IS NULL AND lahC.AuditorId = tljL.id AND lahC.Completed = 1
					AND lahC.AuditDate = (SELECT TOP 1 al1.AuditDate FROM LocationAuditHistory al1 WHERE al1.DId = lahC.DId AND al1.LocationId IS NULL AND al1.AuditorId = lahC.AuditorId AND al1.Completed = 1 ORDER BY AuditDate DESC)
				
		WHERE
			tljL.company_id = @DId AND tljL.id = @UserId AND @IncludePortableAudit = 1
			AND (@AuditorLocationsCount > 1 OR @AuditorLocationsCount = 0)
			AND @PortableAssetsCount > 0
				
		ORDER BY ArtSort, DueDays, LocationName
GO
PRINT N'Creating [dbo].[sp_SelectUserAuditHistory]...';


GO
CREATE Procedure [dbo].[sp_SelectUserAuditHistory]
	(
		@DId int,
		@UserId int
	)
As
	
		SELECT  L.Id, lah.Id AS AuditId, lah.AuditDate, lah.Completed,
				dbo.fxGetLocationName(@DId, L.Id) AS LocationName
		FROM Locations L
				INNER JOIN LocationAuditHistory lah ON L.DId = lah.DId AND L.Id = lah.LocationId AND
				lah.AuditDate = (SELECT TOP 1 al.AuditDate FROM LocationAuditHistory al WHERE al.DId = @DId AND al.LocationId = L.Id ORDER BY AuditDate DESC)						
				
		WHERE
			L.DId = @DId			
			AND
			lah.AuditorId = @UserId
		ORDER BY lah.AuditDate DESC, L.Name
GO
PRINT N'Creating [dbo].[sp_SelectUserAuditLocations]...';


GO
CREATE Procedure [dbo].[sp_SelectUserAuditLocations]
	(
		@DId int,		
		@AccId int,
		@UserID int
		
	)
AS
	-- for now all locations

	SELECT  L.DId, L.Id, L.ParentId, L.Name, 
			CASE (SELECT Count(*) FROM Locations WHERE DId=@DId AND ParentId=L.Id AND Inactive = 0)
			WHEN 0 THEN Cast(1 As bit) ELSE Cast(0 As bit) END AS IsLastChildNode
	FROM Locations L
	WHERE L.DId=@DId
		AND ISNULL(L.AccountId, -1)=@AccId
		AND (L.Inactive=0)
		AND (L.ParentId IS NULL)
GO
PRINT N'Creating [dbo].[sp_SelectUserDayTime]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectUserDayTime]
(
		@CompanyID int,
		@UserID int,
		@Date smalldatetime
	)
AS
	
	DECLARE @UserDayTime TABLE
	(
		AccountID int,			
		ProjectID int,
		ComplexID nvarchar(20),
		Hours decimal(10, 4),
		AccountName nvarchar(250),
		ProjectName nvarchar(max),
		CompletedNotes nvarchar(512),
		NextStepsNotes nvarchar(512)
	)
	
	INSERT INTO @UserDayTime
		SELECT
			ISNULL(t.intAcctId, 0),
			ISNULL(t.ProjectID, 0) AS ProjectID,
			CAST(ISNULL(t.intAcctId, 0) AS nvarchar) + '|' + CAST(ISNULL(t.ProjectID, 0) AS nvarchar) AS ComplexID,			
			tt.Hours,
			dbo.fxGetAccountName(@CompanyID, t.intAcctId) AS AccountName,
			REPLACE(dbo.fxGetFullProjectName(@CompanyID, t.ProjectID), '  >  ', ':') AS ProjectName,
			ISNULL(dtpn.CompletedNotes, ''),
			ISNULL(dtpn.NextStepsNotes, '')
		FROM 
			TicketTime tt
			LEFT OUTER JOIN tbl_ticket t ON tt.DepartmentId = t.company_id AND tt.TicketId = t.Id								
			LEFT OUTER JOIN
				DayTimeProjectNotes dtpn 
					ON tt.DepartmentId = dtpn.DId 
					AND MONTH(dtpn.Date) = MONTH(@Date) 
					AND YEAR(dtpn.Date) = YEAR(@Date) 
					AND DAY(dtpn.Date) = DAY(@Date)
					AND tt.UserId = dtpn.UserId
					AND ISNULL(t.intAcctId, 0) = ISNULL(dtpn.AccountId, 0)
					AND ISNULL(t.ProjectID, 0) = ISNULL(dtpn.ProjectId, 0)
		WHERE 
			tt.DepartmentId = @CompanyID 
			AND tt.Deleted = 0
			AND tt.UserId = @UserID
			AND MONTH(tt.Date) = MONTH(@Date) 
			AND YEAR(tt.Date) = YEAR(@Date) 
			AND DAY(tt.Date) = DAY(@Date)
		UNION ALL
		SELECT	
			ISNULL(ISNULL(p.AccountID, pt.AccountID), 0) AS AccountID,
			ISNULL(pt.ProjectId, 0) AS ProjectID,
			CAST(ISNULL(ISNULL(p.AccountID, pt.AccountID), 0) AS nvarchar) + '|' + CAST(ISNULL(pt.ProjectId, 0) AS nvarchar) AS ComplexID,
			pt.Hours,
			dbo.fxGetAccountName(@CompanyID, ISNULL(p.AccountID, pt.AccountID)) AS AccountName,
			REPLACE(dbo.fxGetFullProjectName(@CompanyID, pt.ProjectId), '  >  ', ':') AS ProjectName,
			ISNULL(dtpn.CompletedNotes, ''),
			ISNULL(dtpn.NextStepsNotes, '')
		FROM 
			ProjectTime pt
				LEFT OUTER JOIN Project p ON pt.DepartmentId = p.CompanyID AND pt.ProjectId = p.ProjectID				
			LEFT OUTER JOIN
				DayTimeProjectNotes dtpn 
					ON pt.DepartmentId = dtpn.DId 
					AND MONTH(dtpn.Date) = MONTH(@Date) 
					AND YEAR(dtpn.Date) = YEAR(@Date) 
					AND DAY(dtpn.Date) = DAY(@Date)
					AND pt.UserId = dtpn.UserId
					AND ISNULL(ISNULL(p.AccountID, pt.AccountID), 0) = ISNULL(dtpn.AccountId, 0)
					AND ISNULL(pt.ProjectId, 0) = ISNULL(dtpn.ProjectId, 0)
		WHERE 
			pt.DepartmentId = @CompanyID
			AND pt.Deleted = 0
			AND pt.UserId = @UserID
			AND MONTH(pt.Date) = MONTH(@Date) 
			AND YEAR(pt.Date) = YEAR(@Date) 
			AND DAY(pt.Date) = DAY(@Date)
	
	SELECT 
		ComplexID,
		SUM(Hours) AS TotalHours,			
		AccountID,
		ProjectID,
		AccountName,
		ProjectName,
		CompletedNotes,
		NextStepsNotes
	FROM 
		@UserDayTime udt
	GROUP BY ComplexID, AccountName, ProjectName, AccountID, ProjectID, CompletedNotes, NextStepsNotes
	ORDER BY AccountName, ProjectName
GO
PRINT N'Creating [dbo].[sp_SelectUserDefaultAccount]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_SelectUserDefaultAccount] 
	@DepartmentId int,
	@UserId int
AS
BEGIN
	RETURN (SELECT TOP 1 ISNULL(intAcctId,-1) FROM [tbl_ticket] WHERE [company_id]=@DepartmentId AND [User_id]=@UserId GROUP BY intAcctId ORDER BY count(*) DESC)
	
END
GO
PRINT N'Creating [dbo].[sp_SelectUserDetails]...';


GO
CREATE  Procedure [dbo].[sp_SelectUserDetails]
	(
		@Did int,
		@Id int
	)
As

	SELECT L.*, LJ.*, dbo.fxGetUserLocationName(@DId, LJ.LocationId) AS LocationName, dbo.fxGetUserLocationName(@DId, LJ.AccountLocationId) AS AccountLocationName, CAST(dbo.fxGetConfigValueStr(@DId, 'tintTicketTimer') AS tinyint) as tintDTicketTimer, NULL AS TimeZoneId, NULL AS TimeFormat, I.TimeZoneId as InstanceTimeZoneId, I.TimeFormat as InstanceTimeFormat 
	FROM tbl_LoginCompanyJunc LJ 
	INNER JOIN tbl_Logins L ON LJ.Login_id = L.id 
	INNER JOIN tbl_company C ON LJ.company_id=C.company_id 
	INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid 
	WHERE LJ.company_id = @Did AND LJ.Id = @Id
	return
GO
PRINT N'Creating [dbo].[sp_SelectUserEmail]...';


GO
CREATE PROCEDURE dbo.sp_SelectUserEmail
	(
		@DId int,
		@UId int,
		@vchEmail nvarchar(150) OUTPUT
	)
AS
	--VGOOZ 30-AUG-2005: fixed tkt #2461 - Delivery failure notices in some of the tickets
	--Added support unassigned Queues
	SET @vchEmail = (SELECT CASE WHEN tlj.UserType_Id<>4 THEN l.Email ELSE tlj.QueEmailAddress END AS Email FROM tbl_LoginCompanyJunc tlj JOIN tbl_Logins l ON l.id=tlj.login_id WHERE tlj.company_id=@DId AND tlj.id=@UId)
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectUserForLikeSearch]...';


GO
CREATE Procedure dbo.sp_SelectUserForLikeSearch
	(
		@DId int,
		@FirstName nvarchar(50),
		@LastName nvarchar(50),
		@Email nvarchar(50)
	)

As
	/* set nocount on */
	--VGOOZ 27-SEP-2005: tkt #2951 - Inactive users functionality
	SELECT tlj.id, lo.Email, lo.firstname, lo.lastname,  lo.lastname +', '+lo.firstname as FullName
	FROM tbl_LoginCompanyJunc tlj
	JOIN tbl_Logins lo ON lo.id=tlj.login_id
	WHERE tlj.company_id=@DId AND tlj.UserType_Id<>4 AND tlj.btUserInactive=0 AND (lo.firstname LIKE ''+@FirstName+'%' AND lo.lastname LIKE ''+@LastName+'%' AND lo.email LIKE ''+@Email+'%')
	ORDER BY lo.lastname, lo.firstname
	return
GO
PRINT N'Creating [dbo].[sp_SelectUserFullName]...';


GO
CREATE Procedure [dbo].[sp_SelectUserFullName]
	(
		@DId int,
		@UId int,
		@FullName nvarchar(75)=null OUTPUT
	)
As
	SET @FullName = (SELECT dbo.fxGetUserName2(L.FirstName, L.LastName, L.Email) AS FullName FROM tbl_LoginCompanyJunc LCJ INNER JOIN tbl_Logins L ON LCJ.login_id=L.id WHERE LCJ.company_id=@DId AND LCJ.id=@UId)
	
	SELECT @FullName as FullName
	return
GO
PRINT N'Creating [dbo].[sp_SelectUserGlobalFiltersByType]...';


GO
CREATE Procedure dbo.sp_SelectUserGlobalFiltersByType
(
		@DId int,
		@UId int,
		@FilterTypeId int
	)

As

--VGOOZ 26-JUL-2005: tkt #2789 - Locations not alphabetical (Added sorting)
/*
IF @FilterTypeId=1 --Locations with childs
	BEGIN
		DECLARE @LocationsFilter TABLE (ID int, Filter nvarchar(50), State bit)
		DECLARE l_cursor CURSOR FOR SELECT FilterDataId FROM GlobalFilters WHERE LoginId=@UId AND FilterTypeId=@FilterTypeId
		DECLARE @LId int
		OPEN l_cursor
		FETCH NEXT FROM l_cursor INTO @LId
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @LId<>0
			BEGIN
				INSERT INTO @LocationsFilter 
				SELECT CL.Id AS ID, L.Name AS Filter, CAST(1 AS bit) AS State 
				FROM dbo.fxGetAllChildLocations(@DId, @LId) CL 
				LEFT OUTER JOIN Locations L ON CL.Id = L.Id AND L.DId=@DId
			END
			FETCH NEXT FROM l_cursor INTO @LId
		END
		CLOSE l_cursor
		DEALLOCATE l_cursor
		SELECT * FROM @LocationsFilter ORDER BY Filter
	END
*/	
IF @FilterTypeId=1 --Locations without childs
	SELECT GF.FilterDataId AS ID, L.Name AS Filter, CAST(1 AS bit) AS State
	FROM GlobalFilters GF
	INNER JOIN Locations L ON L.DId=@DId AND GF.FilterDataId=L.Id
	WHERE GF.LoginId=@UId AND GF.FilterTypeId=@FilterTypeId

/*	
	SELECT L.Id AS ID, L.Name AS Filter, CASE WHEN GF.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State
	FROM	Locations L
	LEFT OUTER JOIN GlobalFilters GF ON L.Id = GF.FilterDataId  AND GF.LoginId=@UId AND GF.FilterTypeId=@FilterTypeId
	WHERE L.DId=@DId AND L.Inactive=0 ORDER BY Filter
*/
ELSE IF @FilterTypeId=2 --Classes without childs
	SELECT GF.FilterDataId AS ID, C.Name AS Filter, CAST(1 AS bit) AS State
	FROM GlobalFilters GF
	INNER JOIN tbl_class C ON C.company_id=@DId AND GF.FilterDataId=C.id
	WHERE GF.LoginId=@UId AND GF.FilterTypeId=@FilterTypeId AND C.btInactive=0
/*
	SELECT C.id AS ID, C.Name AS Filter, CASE WHEN GF.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State
	FROM	tbl_class C
	LEFT OUTER JOIN GlobalFilters GF ON C.id = GF.FilterDataId  AND GF.LoginId=@UId AND GF.FilterTypeId=@FilterTypeId
	WHERE C.company_id=@DId AND C.btInactive=0 ORDER BY Filter
*/
ELSE IF @FilterTypeId=3 --UnassignedQueues
	SELECT J.id AS ID, L.FirstName+' '+L.LastName AS Filter, CASE WHEN GF.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State  
	FROM tbl_LoginCompanyJunc J JOIN tbl_logins L ON J.login_id = L.id 
	LEFT OUTER JOIN GlobalFilters GF ON J.id = GF.FilterDataId  AND GF.LoginId=@UId AND GF.FilterTypeId=@FilterTypeId
	WHERE J.company_id = @DId AND J.UserType_Id = 4 ORDER BY Filter
ELSE IF @FilterTypeId=4 --SupportGroups
	SELECT SG.id AS ID, SG.vchName AS Filter, CASE WHEN GF.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State
	FROM	SupportGroups SG
	LEFT OUTER JOIN GlobalFilters GF ON SG.id = GF.FilterDataId  AND GF.LoginId=@UId AND GF.FilterTypeId=@FilterTypeId
	WHERE SG.DId=@DId ORDER BY Filter
ELSE IF @FilterTypeId=5 --Levels
	SELECT L.tintLevel AS ID, CAST(L.tintLevel AS nvarchar)+' -  Level' AS Filter, CASE WHEN GF.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State
	FROM	TktLevels L
	LEFT OUTER JOIN GlobalFilters GF ON L.tintLevel = GF.FilterDataId  AND GF.LoginId=@UId AND GF.FilterTypeId=@FilterTypeId
	WHERE L.DId=@DId ORDER BY Filter
ELSE IF @FilterTypeId=6 --Accounts
		SELECT 
			ISNULL(A.Id, -1) AS ID, 
			ISNULL(A.vchName, '(Internal)') AS Filter, 
			CAST(1 AS bit) AS State
		FROM UserAccounts AS UA
		LEFT JOIN Accounts AS A ON A.DId = UA.DepartmentId AND A.Id = UA.AccountId
		WHERE 
			UA.DepartmentId = @DId AND UA.UserId = @UId AND (A.btActive = 1 OR UA.AccountId IS NULL)
		ORDER BY Filter
ELSE IF @FilterTypeId=0 --GlobalFilterTypes
	SELECT GFT.Id AS ID, GFT.Id AS Filter, CASE WHEN GF.FilterDataId IS NULL THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS State
	FROM GlobalFilterTypes GFT 
	LEFT OUTER JOIN GlobalFilters GF ON GFT.Id=GF.FilterTypeId AND GF.LoginId=@UId AND GF.FilterDataId=0
ELSE 
	SELECT TOP 0 0 AS ID, '' AS Filter, CAST(0 AS bit) AS State
GO
PRINT N'Creating [dbo].[sp_SelectUserLocationId]...';


GO
CREATE Procedure dbo.sp_SelectUserLocationId
	(
		@DId int,
		@UId int
	)
As
	return (SELECT LocationId FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@UId)
GO
PRINT N'Creating [dbo].[sp_SelectUserLocations]...';


GO
CREATE Procedure dbo.sp_SelectUserLocations
	(
		@DId int,
		@UId int
	)
As
	SELECT UL.*, CASE WHEN LCJ.LocationId IS NULL  THEN CAST(0 AS bit) ELSE CAST(1 AS bit) END AS IsPrimary, dbo.fxGetUserLocationName(@DId, L.Id) AS Name 
	FROM UserLocations UL 
	INNER JOIN Locations L ON  UL.LocationId=L.Id AND UL.DId=L.DId  
	LEFT OUTER JOIN tbl_LoginCompanyJunc LCJ ON UL.UId=LCJ.Id AND UL.LocationId=LCJ.LocationId AND LCJ.company_id=@DId
	WHERE UL.DId=@DId  AND UL.UId=@UId ORDER BY L.Name
GO
PRINT N'Creating [dbo].[sp_SelectUserProfile]...';


GO
CREATE Procedure dbo.sp_SelectUserProfile
	(
		@DepartmentId int,
		@LoginId int	
	)
As
	SELECT 
		l.Email,
		l.FirstName,
		l.LastName,
		l.Title,
		l.Phone,
		l.MobilePhone,
		l.sintHourOffset,
--		loc.Name as LocationName,
--		loc.Address1 as LocationAddress1,
--		loc.Address2 as LocationAddress2,
--		loc.City as LocationCity,
--		loc.State as LocationState,
--		loc.Zip as LocationZip,
--		loc.Phone as LocationPhone,
--		j.Room,
		j.dtLastLogin,
		j.LocationId,
		j.btUserInactive --VGOOZ 28-SEP-2005: tkt #2951 - Inactive users functionality	
		FROM tbl_LoginCompanyJunc j
		JOIN tbl_logins l ON l.id = j.login_id
--		LEFT OUTER JOIN tbl_locations loc ON loc.id = j.location_id
		WHERE j.id = @LoginId AND j.company_id = @DepartmentId
	return
GO
PRINT N'Creating [dbo].[sp_SelectUserProfileAssets]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectUserProfileAssets]
	(
		@DId int,
		@UId int
	)
AS
	SELECT 
		(
			SELECT COUNT(a1.Id) 
			FROM Assets a1
			WHERE a1.OwnerId=@UId AND a1.Active=1 AND a1.StatusId=1
		) as OwnerCount,
		(
			SELECT COUNT(a2.Id) 
			FROM Assets a2 
			WHERE a2.CheckedOutId=@UId AND a2.Active=1 AND a2.StatusId=1
		) as CheckedOutCount
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectUserProfileCfgData]...';


GO
CREATE PROCEDURE dbo.sp_SelectUserProfileCfgData
	(
		@DId int,
		@UId int
	)
AS
--VGOOZ 09-SEP-2005: Select user config data
SELECT ConfigData.CfgName, ConfigData.RecCount FROM 
(
	SELECT 'Accounts Rep' AS CfgName, Count(*) AS RecCount FROM Accounts WHERE DId=@DId AND AcctRepId=@UId
	UNION
	SELECT 'Account Levels Tech' AS CfgName, Count(*) AS RecCount FROM AccountLevelTechs WHERE DId=@DId AND UId=@UId
	UNION
	SELECT 'Classes Resorted' AS CfgName, Count(*) AS RecCount FROM tbl_class WHERE company_id=@DId AND lastResorttechId = @UId
	UNION
	SELECT 'Class Levels Resorted' AS CfgName, Count(*) AS RecCount FROM ClassLevels WHERE DId=@DId AND intLastResortId=@UId
	UNION
	SELECT 'Class Levels Tech' AS CfgName, Count(*)+(SELECT Count(*) AS RecCount FROM tbl_ClassTechnicianJctn CTJ INNER JOIN tbl_class C ON CTJ.class_id = C.id WHERE C.company_id=@DId AND CTJ.LoginCompanyJunc_id=@UId) AS RecCount FROM ClassLevelsTechJctn WHERE DId=@DId AND intUId=@UId
	UNION
	SELECT 'Locations Resorted' AS CfgName, Count(*) AS RecCount FROM tbl_Locations WHERE DId=@DId AND intLastResortId = @UId
	UNION
	SELECT 'Location Levels Resorted' AS CfgName, Count(*) AS RecCount FROM LocationLevels WHERE DId=@DId AND intLastResortId=@UId
	UNION
	SELECT 'Location Levels Tech' AS CfgName, Count(*)+(SELECT Count(*) AS RecCount FROM LocationTechJctn WHERE DId=@DId AND intUId=@UId) AS RecCount FROM LocationLevelsTechJctn WHERE DId=@DId AND intUId=@UId
	UNION
	SELECT 'Schedule Tkts Owner' AS CfgName, Count(*) AS RecCount FROM SchedTickets WHERE DId=@DId AND intOwnerId=@UId
	UNION
	SELECT 'Schedule Tkts Assigned' AS CfgName, Count(*) AS RecCount FROM SchedTickets WHERE DId=@DId AND intTechId=@UId
	UNION
	SELECT 'Schedule Tkts User' AS CfgName, Count(*) AS RecCount FROM SchedTickets WHERE DId=@DId AND intUserId=@UId
	UNION
	SELECT 'Tkt Levels Resorted' AS CfgName, Count(*) AS RecCount FROM TktLevels WHERE DId=@DId AND intLastResortId=@UId
	UNION
	SELECT 'Tkt Created' AS CfgName, Count(*) AS RecCount FROM tbl_ticket WHERE company_id=@DId AND Created_id=@UId
	UNION
	SELECT 'Tkt Misc Costs' AS CfgName, Count(*) AS RecCount FROM TicketMiscCosts WHERE UserId = @UId
	UNION
	SELECT 'Tkt Time' AS CfgName, Count(*) AS RecCount FROM TicketTime WHERE DepartmentId=@DId AND UserId = @UId AND Deleted = 0
	UNION
	SELECT 'Parts Request Notify' AS CfgName, Count(*) AS RecCount FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId=@DId AND LoginCompanyJunc_Id=@UId
	UNION
	SELECT 'Asset Owner' AS CfgName, Count(*) AS RecCount FROM Assets WHERE DepartmentId=@DId AND OwnerId = @UId
	UNION
	SELECT 'Asset Checked Out' AS CfgName, Count(*) AS RecCount FROM Assets WHERE DepartmentId=@DId AND CheckedOutId = @UId
) AS ConfigData
WHERE ConfigData.RecCount>0
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectUserProfileTkts]...';


GO

CREATE PROCEDURE sp_SelectUserProfileTkts
	(
		@DId int,
		@UId int
	)
AS
	SELECT count(id) as TktCount, status FROM tbl_ticket WHERE company_id=@DId AND (User_id=@UId or Technician_id=@UId) GROUP BY status ORDER BY status
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectUserRecentAccountLocations]...';


GO
CREATE PROCEDURE dbo.sp_SelectUserRecentAccountLocations
@DepartmentId int,
	@UserId int,
	@AccountId int
AS
BEGIN
	DECLARE @RecentAccountLocations TABLE
		(
			Id int,			
			ParentId int,
			Name nvarchar(max)
		)
		
	INSERT INTO @RecentAccountLocations
		(Id,			
		ParentId,
		Name)
	SELECT DISTINCT TOP 5 AccountLocationId AS Id, NULL AS ParentId, dbo.fxGetUserLocationName(@DepartmentId, AccountLocationId) AS Name
		FROM tbl_ticket AS T
		WHERE company_id = @DepartmentId AND [User_id] = @UserId AND ISNULL(intAcctId,-1) = @AccountId AND AccountLocationId IS NOT NULL
		
	INSERT INTO @RecentAccountLocations
		(Id,			
		ParentId,
		Name)
	SELECT DISTINCT TOP 5 AccountLocationId AS Id, NULL AS ParentId, dbo.fxGetUserLocationName(@DepartmentId, AccountLocationId) AS Name
		FROM SchedTickets
		WHERE [DId] = @DepartmentId AND [intUserId] = @UserId AND ISNULL(intAcctId,-1) = @AccountId AND AccountLocationId IS NOT NULL
	
	SELECT DISTINCT * FROM @RecentAccountLocations

END
GO
PRINT N'Creating [dbo].[sp_SelectUserRecentInternalLocations]...';


GO
CREATE PROCEDURE dbo.sp_SelectUserRecentInternalLocations
	@DepartmentId int,
	@UserId int
AS
BEGIN
		
	DECLARE @RIL TABLE
		(
			Id int,			
			Name nvarchar(max),
			CT datetime
		)

	INSERT INTO @RIL (Id, Name, CT)
	SELECT LocationId AS Id, dbo.fxGetUserLocationName(@DepartmentId, LocationId) AS Name, CreateTime as CT
		FROM tbl_ticket AS T
		WHERE company_id = @DepartmentId AND [User_id] = @UserId AND LocationId IS NOT NULL

	INSERT INTO @RIL (Id, Name, CT)
	SELECT LocationId AS Id, dbo.fxGetUserLocationName(@DepartmentId, LocationId) AS Name, dtCreate as CT
		FROM [SchedTickets]
		WHERE [DId]= @DepartmentId AND [intUserId] = @UserId AND LocationId IS NOT NULL
		
	SELECT TOP 5 Id, Name FROM @RIL r where CT=(select max(CT) from @RIL where Name=r.Name) order by CT desc

END
GO
PRINT N'Creating [dbo].[sp_SelectUserRoom]...';


GO
CREATE Procedure dbo.sp_SelectUserRoom
	(
		@DId int,
		@UId int,
		@LocationId int=null OUTPUT,
		@AccountId int=null OUTPUT
	)

As
	DECLARE @cfgACT bit
	SELECT @LocationId=LocationId, @AccountId=intAccountId FROM tbl_LoginCompanyJunc WHERE company_id = @DId AND id = @UId
	IF @LocationId IS NULL
		SELECT @cfgACT =dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr')
		
	IF @LocationId IS NULL AND NOT @AccountId IS NULL AND @cfgACT=1
		SELECT @LocationId=LocationId FROM Accounts WHERE DId=@DId AND Id=@AccountId
	return
GO
PRINT N'Creating [dbo].[sp_SelectUsersAndAccounts]...';


GO
CREATE PROCEDURE dbo.sp_SelectUsersAndAccounts
	(
		@CompanyID int,
		@SearchString nvarchar(250),
		@SearchAccountToo bit
	)
AS

	IF @SearchAccountToo = 1
	 BEGIN

	  SELECT
		LJ.id,
		UA.AccountId,
		L.LastName+', '+L.FirstName + ' - ' + 
		CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '') + ' (Internal)'
			ELSE Accounts.vchName
      		END + ' - ' + L.Email AS FullName,
		COUNT(tbl_ticket.id) AS TicketCount,
		L.Email,
		ISNULL(UA.AccountLocationId, 0) AS AccountLocationId,
		ISNULL(dbo.fxGetUserLocationName(@CompanyID, UA.AccountLocationId), '') AS AccountLocationName
	  FROM
		tbl_LoginCompanyJunc LJ
	  INNER JOIN 
		tbl_Logins L ON L.id = LJ.login_id
	  INNER JOIN 
		tbl_company ON LJ.company_id = tbl_company.company_id
	  LEFT OUTER JOIN 
		UserAccounts UA ON LJ.company_id = UA.DepartmentId AND LJ.Id = UA.UserId
	  LEFT OUTER JOIN
        Accounts ON UA.DepartmentId = Accounts.DId AND UA.AccountId = Accounts.Id
	  LEFT OUTER JOIN
		tbl_ticket ON LJ.id = tbl_ticket.user_id 
			AND LJ.company_id = tbl_ticket.company_id 
			AND (UA.AccountId = tbl_ticket.intAcctId OR (UA.AccountId IS NULL AND tbl_ticket.intAcctId IS NULL))
	  WHERE
		LJ.company_id = @CompanyID
		AND
		LJ.btUserInactive = 0
		AND 
		LJ.UserType_Id<>4
		AND
		(L.LastName+', '+L.FirstName LIKE @SearchString + '%'
		OR
		L.FirstName+' '+L.LastName LIKE @SearchString + '%'
		OR
		L.Email LIKE @SearchString + '%'
		OR
		(Accounts.DId IS NULL AND ISNULL(tbl_company.company_name, '') + ' (Internal)' LIKE @SearchString + '%')
		OR
		(Accounts.DId IS NOT NULL AND Accounts.vchName LIKE @SearchString + '%'))
	  GROUP BY
		LJ.id,
		UA.AccountId,
		L.LastName,
		L.FirstName,
		Accounts.DId,
		tbl_company.company_name,
		Accounts.vchName,
		L.Email,
		UA.AccountLocationId,
		UA.AccountLocationId
	  ORDER BY
		L.LastName, L.FirstName, LJ.id, TicketCount DESC

	 END
	ELSE
	 BEGIN

	  SELECT
		LJ.id,
		L.LastName+', '+L.FirstName + ' - ' + L.Email  AS FullName,
		L.LastName+', '+L.FirstName AS FullNameWithoutEmail,
		L.Email
	  FROM
		tbl_LoginCompanyJunc LJ
	  INNER JOIN 
		tbl_Logins L ON L.id = LJ.login_id
	  WHERE
		LJ.company_id = @CompanyID
		AND
		LJ.btUserInactive = 0
		AND 
		LJ.UserType_Id<>4
		AND
		(L.LastName+', '+L.FirstName LIKE @SearchString + '%'
		OR
		L.FirstName+' '+L.LastName LIKE @SearchString + '%'
		OR
		L.Email LIKE @SearchString + '%'
		)
	  ORDER BY
		L.LastName, L.FirstName

	 END
GO
PRINT N'Creating [dbo].[sp_SelectUserSearch]...';


GO
CREATE PROCEDURE dbo.sp_SelectUserSearch
	(
		@DId int,
		@vchLastName nvarchar(50),
		@vchFirstName nvarchar(50),
		@vchEmail nvarchar(50),
		@btCfgLTR bit,
		@intLocationId int=null
	)
AS
--VGOOZ 27-SEP-2005: tkt #2951 - Inactive users functionality	
	IF @btCfgLTR=0 OR (@btCfgLTR=1 and @intLocationId=0)
		BEGIN
			SELECT TOP 25 vw.id, vw.vchFullName, vw.vchEmail, vw.vchLocationName
			FROM vw_Logins vw
			WHERE vw.DId=@DId AND vw.btUserInactive=0 AND vw.vchLastName LIKE @vchLastName+'%' AND vw.vchFirstName LIKE @vchFirstName+'%' AND vw.vchEmail LIKE @vchEmail+'%'
		END
	ELSE
		BEGIN
			SELECT TOP 25 vw.id, vw.vchFullName, vw.vchEmail, vw.vchLocationName
			FROM vw_Logins vw
			WHERE vw.DId=@DId AND vw.btUserInactive=0 AND vw.vchLastName LIKE @vchLastName+'%' AND vw.vchFirstName LIKE @vchFirstName+'%' AND vw.vchEmail LIKE @vchEmail+'%'
				AND vw.intLocationId=@intLocationId
		END
		
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectUsersToCopy]...';


GO
-- =============================================
-- Author:		<Elena Alexandrova>
-- Create date: <March 29, 2007>
-- =============================================
CREATE PROCEDURE [dbo].[sp_SelectUsersToCopy]
(
		@DeptToID int,
		@DeptFromID int
)
AS
BEGIN

	SELECT TOP 50 LJ.id 
	FROM tbl_LoginCompanyJunc LJ 
	WHERE LJ.company_id = @DeptFromID 
		AND LJ.UserType_id <> 4 
		AND LJ.login_id NOT IN (SELECT login_id 
								FROM tbl_LoginCompanyJunc 
								WHERE company_id = @DeptToID)

END
GO
PRINT N'Creating [dbo].[sp_SelectUserTimeReport]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectUserTimeReport]
(
		@CompanyID int,
		@AccountID int,
		@UserIDs varchar(2300),
		@DateStart smalldatetime,
		@DateEnd smalldatetime
	)
AS

	DECLARE @query VARCHAR(8000)
	DECLARE @btCfgAcctMngr bit,
		@btCfgProject bit

	SET @btCfgAcctMngr = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgAcctMngr')
	SET @btCfgProject = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgProject')

	SET @query = '(SELECT '
	IF @btCfgProject = 1
	 BEGIN
		SET @query = @query + 'Project.ProjectID'
	 END
	ELSE
	 BEGIN
		SET @query = @query + 'NULL AS ProjectID'
	 END
	SET @query = @query + ',
		ISNULL(SUM(ProjectTime.Hours), 0) AS Hours,'
	IF @btCfgAcctMngr = 1
	 BEGIN
		SET @query = @query + 'CASE 
			WHEN Accounts.DId IS NULL THEN 
				ISNULL(tbl_company.company_name, '''') + '' (Internal)''
			ELSE Accounts.vchName
      		END'
	 END
	ELSE
	 BEGIN
		SET @query = @query + ''''''
	 END
	
    SET @query = @query + ' AS AccountName,'
    IF @btCfgProject = 1
	 BEGIN
		SET @query = @query + 'dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID)'
	 END
	ELSE
	 BEGIN
		SET @query = @query + ''''''
	 END
	
	SET @query = @query + ' AS ProjectName,
		TaskType.TaskTypeId, 
		CASE 
			WHEN TaskType.TaskTypeId IS NULL THEN ''Default''
			ELSE TaskType.TaskTypeName
		END AS TaskTypeName,
		ProjectTime.UserId,
		dbo.fxGetUserName(tbl_Logins.FirstName, tbl_Logins.LastName, tbl_Logins.Email) AS userFullName, '
	IF @btCfgAcctMngr = 1
	 BEGIN
		SET @query = @query + 'ISNULL(Project.AccountID, ISNULL(ProjectTime.AccountID, -1))'
	 END
	ELSE
	 BEGIN
		SET @query = @query + 'NULL'
	 END
	SET @query = @query + ' AS AccountID,
		''PT'' AS Type
	FROM         
		ProjectTime LEFT OUTER JOIN
        Project ON ProjectTime.DepartmentId = Project.CompanyID AND ProjectTime.ProjectId = Project.ProjectID
		INNER JOIN tbl_company ON ProjectTime.DepartmentId = tbl_company.company_id
		LEFT OUTER JOIN Accounts ON ProjectTime.DepartmentId = Accounts.DId AND ISNULL(Project.AccountID, ProjectTime.AccountID) = Accounts.Id		
		LEFT OUTER JOIN TaskType ON ProjectTime.TaskTypeId = TaskType.TaskTypeId AND ProjectTime.DepartmentId = TaskType.DepartmentID
		LEFT OUTER JOIN tbl_LoginCompanyJunc ON ProjectTime.DepartmentId = tbl_LoginCompanyJunc.company_id AND ProjectTime.UserId = tbl_LoginCompanyJunc.id 
		LEFT OUTER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
	WHERE 
		ProjectTime.DepartmentId = ' + CAST(@CompanyID as varchar) + '
		AND 
		((' + CAST(@AccountID as varchar) + ' = -1 AND ISNULL(Project.AccountID, ProjectTime.AccountID) IS null) 
			OR 
			ISNULL(Project.AccountID, ProjectTime.AccountID) = ' + CAST(@AccountID as varchar) +'
			OR
			' + CAST(@AccountID as varchar) + ' = 0
		)
		AND 
		ProjectTime.Deleted = 0
		AND 
		ProjectTime.Date >= ''' + CONVERT(nvarchar, @DateStart, 126) + '''
		AND
		ProjectTime.Date <= ''' + CONVERT(nvarchar, @DateEnd, 126) + '''' 

	IF @UserIDs <> ''
		BEGIN
			SET @query = @query + 
			' AND 
			ProjectTime.UserId IN (' + @UserIDs + ')'
		END

	SET @query = @query + ' GROUP BY
			ProjectTime.UserId, '
	IF @btCfgProject = 1
	 BEGIN
		SET @query = @query + 'Project.ProjectID, Project.CompanyID, '
	 END
	SET @query = @query + 'TaskType.TaskTypeId,
			tbl_company.company_name, '
	IF @btCfgAcctMngr = 1
	 BEGIN
		SET @query = @query + 'Accounts.vchName, Accounts.DId, ISNULL(Project.AccountID, ISNULL(ProjectTime.AccountID, -1)), '
	 END
	SET @query = @query + 'TaskType.TaskTypeName,
			tbl_Logins.LastName, tbl_Logins.FirstName, tbl_Logins.Email'

	SET @query = @query + ' UNION All
		SELECT '
	IF @btCfgProject = 1
	 BEGIN
		SET @query = @query + 'Project.ProjectID'
	 END
	ELSE
	 BEGIN
		SET @query = @query + 'NULL AS ProjectID'
	 END
	SET @query = @query + ',
		ISNULL(SUM(TicketTime.Hours), 0) AS Hours,'
	IF @btCfgAcctMngr = 1
	 BEGIN
		SET @query = @query + 'CASE 
			WHEN Accounts.DId IS NULL THEN CASE WHEN ISNULL(tbl_ticket.btNoAccount, 0) = 0 THEN
				ISNULL(tbl_company.company_name, '''') + '' (Internal)'' ELSE '''' END
			ELSE Accounts.vchName
      		END'
	 END
	ELSE
	 BEGIN
		SET @query = @query + ''''''
	 END
    SET @query = @query + ' AS AccountName,'
	IF @btCfgProject = 1
	 BEGIN
		SET @query = @query + 'dbo.fxGetFullProjectName(Project.CompanyID, Project.ProjectID)'
	 END
	ELSE
	 BEGIN
		SET @query = @query + ''''''
	 END
	SET @query = @query + ' AS ProjectName, TaskType.TaskTypeId, 
		CASE 
			WHEN TaskType.TaskTypeId IS NULL THEN ''Default''
			ELSE TaskType.TaskTypeName
		END AS TaskTypeName,
		TicketTime.UserId,
		tbl_Logins.LastName + '', '' + tbl_Logins.FirstName AS userFullName,'
	IF @btCfgAcctMngr = 1
	 BEGIN
		SET @query = @query + 'ISNULL(tbl_ticket.intAcctId, CASE WHEN ISNULL(tbl_ticket.btNoAccount, 0) = 0 THEN -1 ELSE -2 END)'
	 END
	ELSE
	 BEGIN
		SET @query = @query + 'NULL'
	 END
	
	SET @query = @query + ' AS AccountID,
		''TT'' AS Type
		FROM TicketTime
        INNER JOIN tbl_ticket ON TicketTime.DepartmentId = tbl_ticket.company_id AND TicketTime.TicketId = tbl_ticket.Id
		INNER JOIN tbl_company ON TicketTime.DepartmentId = tbl_company.company_id
		LEFT OUTER JOIN Project ON tbl_ticket.company_id = Project.CompanyID AND tbl_ticket.ProjectID = Project.ProjectID
		LEFT OUTER JOIN Accounts ON tbl_ticket.company_id = Accounts.DId AND tbl_ticket.intAcctId = Accounts.Id
		LEFT OUTER JOIN TaskType ON TicketTime.TaskTypeId = TaskType.TaskTypeId AND TicketTime.DepartmentId = TaskType.DepartmentID
		LEFT OUTER JOIN tbl_LoginCompanyJunc ON TicketTime.DepartmentId = tbl_LoginCompanyJunc.company_id AND TicketTime.UserId = tbl_LoginCompanyJunc.id 
		LEFT OUTER JOIN tbl_Logins ON tbl_LoginCompanyJunc.login_id = tbl_Logins.id
		WHERE 
		TicketTime.DepartmentId = ' + CAST(@CompanyID as varchar) + '
		AND 
		((' + CAST(@AccountID as varchar) + ' = -1 AND Project.AccountID IS null AND ISNULL(tbl_ticket.btNoAccount, 0) = 0) 
			OR 
			Project.AccountID = ' + CAST(@AccountID as varchar) +'
			OR
			' + CAST(@AccountID as varchar) + ' = 0
		)
		AND 
		TicketTime.Deleted = 0
		AND 
		TicketTime.Date >= ''' + CONVERT(nvarchar, @DateStart, 126) + '''
		AND
		TicketTime.Date <= ''' + CONVERT(nvarchar, @DateEnd, 126) + ''''

	IF @UserIDs <> ''
		BEGIN
			SET @query = @query + 
			' AND 
			TicketTime.UserId IN (' + @UserIDs + ')'
		END

	SET @query = @query + ' GROUP BY
			TicketTime.UserId, '
			
	IF @btCfgProject = 1
	 BEGIN
		SET @query = @query + 'Project.ProjectID, Project.CompanyID, '
	 END
			
	SET @query = @query + 'TaskType.TaskTypeId,
			tbl_company.company_name, '
	IF @btCfgAcctMngr = 1
	 BEGIN
		SET @query = @query + 'tbl_ticket.intAcctId, Accounts.vchName, Accounts.DId, ISNULL(tbl_ticket.btNoAccount, 0), '
	 END
	SET @query = @query + 'TaskType.TaskTypeName,
			tbl_Logins.LastName, tbl_Logins.FirstName'
		
	SET @query = @query + ') ORDER BY ProjectTime.UserId, AccountID'
	IF @btCfgProject = 1
	 BEGIN
		SET @query = @query + ', Project.ProjectID'
	 END
	SET @query = @query + ', TaskType.TaskTypeId, Type'
	 
	EXEC(@query)
GO
PRINT N'Creating [dbo].[sp_SelectUserTimeReportDetails]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectUserTimeReportDetails]
	(
		@CompanyID int,
		@AccountID int,
		@UserID int,
		@DateStart smalldatetime,
		@DateEnd smalldatetime,
		@TaskTypeId int,
		@ProjectID int
	)
AS

	SELECT 
		t.TicketId AS TicketId, 
		t.Hours AS Hours, 
		t.Date, 
		t.Note AS Note, 
		tkt.TicketNumber, 
		ISNULL(tkt.TicketNumberPrefix,'')+CAST(tkt.TicketNumber AS nvarchar(10)) AS TicketNumberFull 
	FROM 
		TicketTime t 
		INNER JOIN 
			tbl_ticket tkt ON tkt.id=t.TicketId 
		INNER JOIN 
		tbl_LoginCompanyJunc tlj ON tkt.company_id=tlj.company_id and tkt.user_id=tlj.id 
	WHERE 
		t.DepartmentId = @CompanyID
		AND
		t.Deleted = 0
		AND 
		t.Date >= @DateStart
		AND
		t.Date <= @DateEnd
		AND
		(t.UserId = @UserID OR @UserID = 0)
		AND
		(t.TaskTypeId = @TaskTypeId OR @TaskTypeId = 0 OR (t.TaskTypeId IS NULL AND @TaskTypeId = -1))
		AND
		(tkt.ProjectID = @ProjectID OR @ProjectID = 0 OR (tkt.ProjectID IS NULL AND @ProjectID = -1))
		AND
		(tkt.intAcctId = @AccountID OR @AccountID = 0 OR (tkt.intAcctId IS NULL AND ((ISNULL(tkt.btNoAccount, 0) = 1 AND @AccountID = -2) OR (ISNULL(tkt.btNoAccount, 0) = 0 AND @AccountID = -1))))
GO
PRINT N'Creating [dbo].[sp_SelectUserTypes]...';


GO

CREATE Procedure sp_SelectUserTypes



As
	SELECT * FROM tbl_UserType WHERE id != 4 
	return
GO
PRINT N'Creating [dbo].[sp_SelectVendor]...';


GO

CREATE Procedure sp_SelectVendor

	(
		@companyId int,
		@code int,
		@vendorId  int = null
	)

As
	
	/* set nocount on */
	if @code = 1
	begin
		SELECT * FROM tbl_vendors WHERE company_id = @companyid ORDER BY name
		return
	end
	if @code = 2
	begin
		SELECT * FROM tbl_vendors WHERE company_id = @companyid AND Id = @vendorid ORDER BY name
		return 
	end
GO
PRINT N'Creating [dbo].[sp_SelectVendorDetail]...';


GO

Create Procedure sp_SelectVendorDetail
	(
		@CompanyId int,
		@VendorId int
	)

As
	SELECT * FROM tbl_vendors WHERE company_id = @Companyid AND id = @VendorId
	return
GO
PRINT N'Creating [dbo].[sp_SelectWorklist]...';


GO

CREATE Procedure sp_SelectWorklist

	(
		@company_id int,
		@user_id int,
		@view_type int,
		@order_by varchar(50) = 'priority'
	)
	
	/*
	@view_type
		0 = technician view
		1 = user view
	
	
	*/

As
	/* set nocount on */
	DECLARE @WhereStmt varchar(150)
	

	Set @WhereStmt = 'user_id'
		

		
	
		
		
	SELECT * FROM vw_worklist WHERE  company_id = @company_id AND @WhereStmt= @user_id

	return
GO
PRINT N'Creating [dbo].[sp_SelectWorkListForATicket]...';


GO

Create Procedure sp_SelectWorkListForATicket

	(
		@companyId int,
		@ticketId int
	)

As
	/* set nocount on */
	SELECT * FROM vw_worklist WHERE company_id = @companyId AND id = @ticketId 
	return
GO
PRINT N'Creating [dbo].[sp_SelectWrkLstFields]...';


GO
CREATE PROCEDURE dbo.sp_SelectWrkLstFields
	(
		@Mode varchar(10),
		@DId int,
		@UId int,
		@btFilterEnabled bit=null OUTPUT,
		@vchWrkLstFields nvarchar(30)=null OUTPUT,
		@vchWrkLstSort nvarchar(25)=null OUTPUT,
		@vchLocationsFilter nvarchar(150)=null OUTPUT,
		@vchClassesFilter nvarchar(100)=null OUTPUT,
		@vchStatusFilter nvarchar(100)=null OUTPUT,
		@vchPriorityFilter nvarchar(10)=null OUTPUT,
		@btFolderFilter bit=null OUTPUT,
		@vchLevelFilter nvarchar(100)=null OUTPUT
	)
AS
	IF @Mode = 'UFields'
		BEGIN
			IF EXISTS(SELECT 'true' FROM WrkLstFilters WHERE DId=@DId AND UId=@UId)
				UPDATE WrkLstFilters SET vchWrkLstFields=@vchWrkLstFields, vchWrkLstSort=@vchWrkLstSort WHERE DId=@DId AND UId=@UId
			ELSE
				INSERT INTO WrkLstFilters (DId,UId,vchWrkLstFields,vchWrkLstSort) VALUES (@DId,@UId,@vchWrkLstFields,@vchWrkLstSort)
		
		END
		
	IF @Mode = 'Select'
		BEGIN
			SELECT @btFilterEnabled=w.btFilterEnabled,@vchWrkLstFields=w.vchWrkLstFields,@vchWrkLstSort=w.vchWrkLstSort,@vchLocationsFilter=w.vchLocations,@vchClassesFilter=w.vchClasses,
				@vchStatusFilter=w.vchStatus,@vchPriorityFilter=w.vchPriority,@btFolderFilter=w.btFolder,@vchLevelFilter=w.vchLevels
			FROM WrkLstFilters w
			WHERE DId=@DId AND UId=@UId
		
		END
		
		
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectWrkLstFilter]...';


GO
CREATE PROCEDURE dbo.sp_SelectWrkLstFilter
	(
		@DId int,
		@UId int
	)
AS

	SELECT f.*
	FROM WrkLstFilters f 
	WHERE f.DId=@DId AND f.UId=@UId
	RETURN
GO
PRINT N'Creating [dbo].[sp_TransferAcctOldTickets]...';


GO
CREATE PROCEDURE dbo.sp_TransferAcctOldTickets 
	(
		@DId int,
		@UId int,
		@AcctId int,
		@AcctLocationId int,
		@btAll bit=null /*true=all tickets or false(default)=only unassigned*/
	)
AS
	SET NOCOUNT ON
	
	IF @btAll IS NULL
		SET @btAll = 0
	
	IF @btAll = 1
		UPDATE tbl_ticket SET intAcctId=@AcctId,AccountLocationId=@AcctLocationId WHERE company_id=@DId AND user_id=@UId
	ELSE
		UPDATE tbl_ticket SET intAcctId=@AcctId,AccountLocationId=@AcctLocationId WHERE company_id=@DId AND user_id=@UId AND intAcctId IS NULL
		
	RETURN
GO
PRINT N'Creating [dbo].[sp_TransferCategory]...';


GO
CREATE Procedure dbo.sp_TransferCategory
	(
		@DepartmentId int,
		@OldCategoryId int,
		@NewCategoryId int,
		@btTransferAll bit = 0
	)
AS
	IF @btTransferAll = 1
		UPDATE tbl_ticket SET CreationCatsId = @NewCategoryId WHERE company_id = @DepartmentId AND CreationCatsId = @OldCategoryId
	ELSE
		UPDATE tbl_ticket SET CreationCatsId = @NewCategoryId WHERE company_id = @DepartmentId AND CreationCatsId = @OldCategoryId AND Status<>'Closed'
RETURN
GO
PRINT N'Creating [dbo].[sp_TransferClass]...';


GO


CREATE  Procedure [dbo].[sp_TransferClass]	
	(
		@DId int,
		@OldClassId int,
		@NewClassId int
	)
As
	DECLARE @CId int
	DECLARE c_cursor CURSOR FOR SELECT Id FROM dbo.fxGetAllChildClasses(@DId, @OldClassID, NULL)
	OPEN c_cursor
	FETCH NEXT FROM c_cursor INTO @CId
	WHILE @@FETCH_STATUS = 0
	BEGIN
		UPDATE EMailParserDropBoxes SET ClassId=@NewClassId WHERE DId=@DId AND ClassId=@CId
		UPDATE SchedTickets SET intClassId=@NewClassId WHERE DId=@DId AND intClassId=@CId	
		UPDATE tbl_ticket SET class_id = @NewClassId WHERE company_id=@DId AND class_id = @CId
		FETCH NEXT FROM c_cursor INTO @CId
	END
	CLOSE c_cursor
	DEALLOCATE c_cursor
	
	return
GO
PRINT N'Creating [dbo].[sp_TransferFolder]...';


GO
CREATE PROCEDURE [dbo].[sp_TransferFolder] 
	@DepartmentId int,
	@OldFolderId int,
	@NewFolderId int
AS
BEGIN
	SET NOCOUNT ON
	UPDATE tbl_ticket SET folder_id=@NewFolderId WHERE company_id=@DepartmentId AND folder_id=@OldFolderId
END
GO
PRINT N'Creating [dbo].[sp_TransferLocation]...';


GO
CREATE Procedure [dbo].[sp_TransferLocation]
	(
		@DId int,
		@LocationIdFrom int,
		@LocationIdTo int
	)

As
	DECLARE @AccountId int
	SELECT @AccountId=AccountId FROM Locations WHERE DId=@DId AND Id=@LocationIdFrom

	DECLARE @LocationIdChild int
	DECLARE @LocationNameChild nvarchar(50)
	DECLARE @LocationTypeIdChild int
	DECLARE @LocationIdExist int
	DECLARE l_cursor CURSOR FOR SELECT Id, Name, LocationTypeId FROM Locations WHERE DId=@DId AND ParentId=@LocationIdFrom
	
	IF @AccountId IS NULL
	BEGIN
		OPEN l_cursor
		FETCH NEXT FROM l_cursor INTO @LocationIdChild, @LocationNameChild, @LocationTypeIdChild
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @LocationIdExist=NULL
			SELECT @LocationIdExist=Id FROM Locations WHERE DId=@DId AND AccountId IS NULL AND ParentId=@LocationIdTo AND (LocationTypeId=@LocationTypeIdChild or (LocationTypeId is null and @LocationTypeIdChild is null)) AND Name=@LocationNameChild
			IF NOT @LocationIdExist IS NULL
				UPDATE Locations SET Name='(Merged) '+Name WHERE DId=@DId AND Id=@LocationIdChild
   			FETCH NEXT FROM l_cursor INTO @LocationIdChild, @LocationNameChild, @LocationTypeIdChild
		END
		CLOSE l_cursor
		DEALLOCATE l_cursor
		
	END
	ELSE
	BEGIN
		OPEN l_cursor
		FETCH NEXT FROM l_cursor INTO @LocationIdChild, @LocationNameChild, @LocationTypeIdChild
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @LocationIdExist=NULL
			SELECT @LocationIdExist=Id FROM Locations WHERE DId=@DId AND AccountId=@AccountId AND ParentId=@LocationIdTo AND (LocationTypeId=@LocationTypeIdChild or (LocationTypeId is null and @LocationTypeIdChild is null)) AND Name=@LocationNameChild
			IF NOT @LocationIdExist IS NULL
				UPDATE Locations SET Name='(Merged) '+Name WHERE DId=@DId AND Id=@LocationIdChild
   			FETCH NEXT FROM l_cursor INTO @LocationIdChild, @LocationNameChild, @LocationTypeIdChild
		END
		CLOSE l_cursor
		DEALLOCATE l_cursor
		
	END
	
	UPDATE Locations SET ParentId=@LocationIdTo WHERE DId=@DId AND ParentId=@LocationIdFrom
	UPDATE LocationAliases SET LocationId=@LocationIdTo WHERE DId=@DId AND LocationId = @LocationIdFrom
	UPDATE UserLocations SET LocationId=@LocationIdTo WHERE DId=@DId AND LocationId = @LocationIdFrom
	UPDATE tbl_LoginCompanyJunc SET LocationId=@LocationIdTo WHERE company_id=@DId AND LocationId=@LocationIdFrom
	UPDATE tbl_ticket SET LocationId=@LocationIdTo WHERE company_id=@DId AND LocationId = @LocationIdFrom
	UPDATE SchedTickets SET LocationId=@LocationIdTo WHERE DId=@DId AND LocationId = @LocationIdFrom
	UPDATE tbl_PartsOrder SET LocationId=@LocationIdTo WHERE company_id=@DId AND LocationId = @LocationIdFrom
	UPDATE Accounts SET LocationId=@LocationIdTo WHERE DId=@DId AND LocationId = @LocationIdFrom
	UPDATE Assets SET LocationId=@LocationIdTo WHERE DepartmentId=@DId AND LocationId = @LocationIdFrom		

	
	UPDATE UserAccounts SET AccountLocationId = @LocationIdTo WHERE DepartmentId = @DId AND AccountLocationId = @LocationIdFrom
	UPDATE tbl_LoginCompanyJunc SET AccountLocationId=@LocationIdTo WHERE company_id=@DId AND AccountLocationId=@LocationIdFrom
	UPDATE SchedTickets SET AccountLocationId=@LocationIdTo WHERE DId=@DId AND AccountLocationId = @LocationIdFrom
	UPDATE tbl_ticket SET AccountLocationId=@LocationIdTo WHERE company_id=@DId AND AccountLocationId = @LocationIdFrom
GO
PRINT N'Creating [dbo].[sp_TransferPriority]...';


GO
CREATE PROCEDURE [dbo].[sp_TransferPriority]
	(
		@DId int,
		@OldId int,
		@NewId int
	)
AS
	SET NOCOUNT ON
	/*RETURN CODES
	1 - merge successful
	2 - department and prority do not match
	*/
	
	
	IF NOT EXISTS(SELECT 'true' FROM Priorities WHERE DId=@DId AND Id=@OldId)
		RETURN 2
	UPDATE EMailParserDropBoxes SET NormalPriorityId=@NewId WHERE DId=@DId AND NormalPriorityId=@OldId
	UPDATE EMailParserDropBoxes SET HighPriorityId=@NewId WHERE DId=@DId AND HighPriorityId=@OldId
	UPDATE EMailParserDropBoxes SET LowPriorityId=@NewId WHERE DId=@DId AND LowPriorityId=@OldId
		
	UPDATE tbl_ticket SET PriorityId=@NewId WHERE company_id=@DId AND PriorityId=@OldId
	
	UPDATE tbl_class SET intPriorityId=@NewId WHERE company_id=@DId AND intPriorityId=@OldId
	
	UPDATE SchedTickets SET intPriorityId=@NewId WHERE DId=@DId AND intPriorityId=@OldId
	
	RETURN 1
GO
PRINT N'Creating [dbo].[sp_TransferResolution]...';


GO
CREATE Procedure dbo.sp_TransferResolution
	(
		@DepartmentId int,
		@OldResolutionId int,
		@NewResolutionId int,
		@btTransferAll bit = 0
	)
	AS
IF @btTransferAll = 1
		UPDATE tbl_ticket SET ResolutionCatsId = @NewResolutionId WHERE company_id = @DepartmentId AND ResolutionCatsId = @OldResolutionId
	ELSE
		UPDATE tbl_ticket SET ResolutionCatsId = @NewResolutionId WHERE company_id = @DepartmentId AND ResolutionCatsId = @OldResolutionId AND Status<>'Closed'
RETURN
GO
PRINT N'Creating [dbo].[sp_TransferSupportGroup]...';


GO
CREATE Procedure dbo.sp_TransferSupportGroup
	(
		@DepartmentId int,
		@OldSupGroupId int,
		@NewSupGroupId int
	)
As
	
	UPDATE Accounts SET SupGroupId = @NewSupGroupId WHERE DId = @DepartmentId AND SupGroupId = @OldSupGroupId
	UPDATE Project SET SupGroupId = @NewSupGroupId WHERE CompanyID = @DepartmentId AND SupGroupId = @OldSupGroupId
	return
GO
PRINT N'Creating [dbo].[sp_TransferTech]...';


GO
CREATE PROCEDURE [dbo].[sp_TransferTech]
(
		@DId int,
		@OldTechID int,
		@NewTechID int
)
AS
--VGOOZ 30-JUL-2005: tkt #2694 - Changing a tech to user
	UPDATE TktLevels SET intLastResortId=@NewTechID WHERE DId=@DId AND intLastResortId=@OldTechID
	UPDATE ClassLevels SET intLastResortId=@NewTechID WHERE DId=@DId AND intLastResortId=@OldTechID
	UPDATE LocationLevels SET intLastResortId=@NewTechID WHERE DId=@DId AND intLastResortId=@OldTechID
	UPDATE tbl_class SET LastResortTechId = @NewTechID WHERE company_id = @DId AND LastResortTechId = @OldTechID
	UPDATE tbl_locations SET intLastResortId = @NewTechID WHERE DId = @DId AND intLastResortId = @OldTechID
	UPDATE SchedTickets SET intTechId=@NewTechID WHERE DId=@DId AND intTechId=@OldTechID
	UPDATE EMailParserDropBoxes SET TechnicianId=@NewTechID WHERE DId=@DId AND TechnicianId=@OldTechID
	
	BEGIN TRANSACTION
		DECLARE @TicketId int
		DECLARE TicketCursor CURSOR FOR SELECT Id FROM tbl_Ticket WHERE company_id = @DId AND technician_id = @OldTechID
		FOR UPDATE OF technician_id
		
		OPEN TicketCursor
		FETCH NEXT FROM TicketCursor INTO @TicketId
		WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE tbl_Ticket SET technician_id = @NewTechID WHERE CURRENT OF TicketCursor
				UPDATE TicketAssignment SET StopDate = GETUTCDATE() WHERE DepartmentId = @DId AND TicketId=@TicketId AND UserId = @OldTechID AND AssignmentType = 2
				INSERT INTO TicketAssignment(DepartmentId, TicketId, UserId, AssignmentType) VALUES (@DId, @TicketId, @NewTechID, 2)
				FETCH NEXT FROM TicketCursor INTO @TicketId
			END 
		CLOSE TicketCursor
		DEALLOCATE TicketCursor
	COMMIT TRANSACTION
				
			
	IF EXISTS(SELECT 'true' FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId = @DId AND LoginCompanyJunc_id = @NewTechID)
		DELETE FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId = @DId AND LoginCompanyJunc_id = @OldTechID
	ELSE
		UPDATE tbl_PartsRequestNotifyTechs SET LoginCompanyJunc_id = @NewTechID WHERE DepartmentId = @DId AND LoginCompanyJunc_id = @OldTechID
	UPDATE Assets SET OwnerId = @NewTechID WHERE DepartmentId = @DId AND OwnerId = @OldTechID
	UPDATE Assets SET CheckedOutId = @NewTechID WHERE DepartmentId = @DId AND CheckedOutId = @OldTechID
	
	
	-- Asset Log section
	DECLARE @OldTechName nvarchar(100)
	DECLARE @NewTechName nvarchar(100)
	
	SELECT @OldTechName = l.FirstName + ' ' + l.LastName
	FROM
		tbl_LoginCompanyJunc j
			LEFT OUTER JOIN tbl_Logins l ON j.login_id = l.id
	WHERE j.id = @OldTechID
	SELECT @NewTechName = l.FirstName + ' ' + l.LastName
	FROM
		tbl_LoginCompanyJunc j
			LEFT OUTER JOIN tbl_Logins l ON j.login_id = l.id
	WHERE j.id = @NewTechID	
		
	DECLARE @AssetId int
	DECLARE AssetCursor CURSOR FOR
		SELECT Id FROM Assets WHERE DepartmentId = @DId AND CheckedOutId = @NewTechID	
	
	OPEN AssetCursor
	FETCH NEXT FROM AssetCursor INTO @AssetId
	WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO AssetLogs (AssetId, Name, Note, dtDate) VALUES (@AssetId, 'TransferTech stored procedure', 'Change Asset''s Checked Out User from ' + @OldTechName + ' to ' + @NewTechName, getutcdate())			
			FETCH NEXT FROM AssetCursor INTO @AssetId
		END 
	CLOSE AssetCursor
	DEALLOCATE AssetCursor
		
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_TransferToActiveUser]...';


GO
CREATE Procedure [dbo].[sp_TransferToActiveUser]
	(
		@DId int,
		@old_user_id int,
		@new_user_id int,
		@btAllTkt bit,
		@LoggedInUserName nvarchar(100) = NULL
	)
As

--VGOOZ 23-SEP-2005: tkt #2951 - Inactive users functionality	
	UPDATE TktLevels SET intLastResortId=@new_user_id WHERE DId=@DId AND intLastResortId=@old_user_id
	UPDATE Accounts SET AcctRepId = @new_user_id WHERE DId=@DId AND AcctRepId = @old_user_id
	UPDATE AccountLevelTechs SET UId = @new_user_id WHERE DId=@DId AND UId = @old_user_id
	UPDATE AccountTech SET TechID = @new_user_id WHERE CompanyID=@DId AND TechID = @old_user_id
	UPDATE tbl_class SET LastResortTechId = @new_user_id WHERE company_id = @DId AND LastResortTechId = @old_user_id
	UPDATE ClassLevels SET intLastResortId=@new_user_id WHERE DId=@DId AND intLastResortId=@old_user_id
	UPDATE tbl_ClassTechnicianJctn SET LoginCompanyJunc_id=@new_user_id FROM tbl_ClassTechnicianJctn CTJ INNER JOIN tbl_class C ON CTJ.class_id = C.id WHERE C.company_id=@DId AND CTJ.LoginCompanyJunc_id=@old_user_id
	UPDATE ClassLevelsTechJctn SET intUId=@new_user_id WHERE DId=@DId AND intUId=@old_user_id
	UPDATE tbl_locations SET intLastResortId = @new_user_id WHERE DId = @DId AND intLastResortId = @old_user_id
	UPDATE LocationTechJctn SET intUId=@new_user_id WHERE DId=@DId AND intUId=@old_user_id
	UPDATE LocationLevelsTechJctn SET intUId=@new_user_id WHERE DId=@DId AND intUId=@old_user_id
	UPDATE LocationLevels SET intLastResortId=@new_user_id WHERE DId=@DId AND intLastResortId=@old_user_id
	UPDATE LocationRouteLevels SET LastResortTechId=@new_user_id WHERE DId=@DId AND LastResortTechId=@old_user_id
	UPDATE LocationRouteLevelTechs SET TechId=@new_user_id WHERE DId=@DId AND TechId=@old_user_id
	UPDATE SchedTickets SET intUserId=@new_user_id WHERE DId=@DId and intUserId=@old_user_id
	UPDATE SchedTickets SET intOwnerId=@new_user_id WHERE DId=@DId AND intOwnerId=@old_user_id
	UPDATE SchedTickets SET intTechId=@new_user_id WHERE DId=@DId AND intTechId=@old_user_id
	UPDATE ProjectTech SET TechId = @new_user_id WHERE CompanyID=@DId AND TechId = @old_user_id
	UPDATE TaskTypeTech SET TechID = @new_user_id WHERE CompanyID=@DId AND TechID = @old_user_id
	UPDATE EMailParserDropBoxes SET TechnicianId=@new_user_id WHERE DId=@DId AND TechnicianId=@old_user_id
	IF EXISTS(SELECT 'true' FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId = @DId AND LoginCompanyJunc_id = @new_user_id)
		DELETE FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId = @DId AND LoginCompanyJunc_id = @old_user_id
	ELSE
		UPDATE tbl_PartsRequestNotifyTechs SET LoginCompanyJunc_id = @new_user_id WHERE DepartmentId = @DId AND LoginCompanyJunc_id = @old_user_id

	-- Reassigning all the tickets of current technician
	DECLARE @TicketId int
	BEGIN TRANSACTION
		DECLARE TicketCursor CURSOR FOR SELECT Id FROM tbl_Ticket WHERE company_id = @DId AND technician_id = @old_user_id AND (@btAllTkt=1 OR Status<>'Closed')
		FOR UPDATE OF technician_id
		
		OPEN TicketCursor
		FETCH NEXT FROM TicketCursor INTO @TicketId
		WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE tbl_Ticket SET technician_id = @new_user_id WHERE CURRENT OF TicketCursor
				UPDATE TicketAssignment SET StopDate = GETUTCDATE() WHERE DepartmentId = @DId AND TicketId=@TicketId AND UserId = @old_user_id AND AssignmentType = 2
				INSERT INTO TicketAssignment(DepartmentId, TicketId, UserId, AssignmentType, IsPrimary) VALUES (@DId, @TicketId, @new_user_id, 2, 1)
				FETCH NEXT FROM TicketCursor INTO @TicketId
			END 
		CLOSE TicketCursor
		DEALLOCATE TicketCursor
	COMMIT TRANSACTION
	
	
	-- Reassigning all the tickets of current user
	BEGIN TRANSACTION
		DECLARE TicketCursor CURSOR FOR SELECT Id FROM tbl_Ticket WHERE company_id = @DId AND [User_id] = @old_user_id AND (@btAllTkt=1 OR Status<>'Closed')
		FOR UPDATE OF [User_id]
		
		OPEN TicketCursor
		FETCH NEXT FROM TicketCursor INTO @TicketId
		WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE tbl_Ticket SET [User_id] = @new_user_id WHERE CURRENT OF TicketCursor
				UPDATE TicketAssignment SET StopDate = GETUTCDATE() WHERE DepartmentId = @DId AND TicketId=@TicketId AND UserId = @old_user_id AND AssignmentType = 1
				INSERT INTO TicketAssignment(DepartmentId, TicketId, UserId, AssignmentType, IsPrimary) VALUES (@DId, @TicketId, @new_user_id, 1, 1)
				FETCH NEXT FROM TicketCursor INTO @TicketId
			END 
		CLOSE TicketCursor
		DEALLOCATE TicketCursor
	COMMIT TRANSACTION
  
    --Unassign as alternate tech and user
	IF @btAllTkt=1
		UPDATE TicketAssignment SET StopDate = GETUTCDATE(), IsPrimary=0 WHERE DepartmentId = @DId AND UserId = @old_user_id AND stopdate IS null
	ELSE	
        UPDATE TicketAssignment SET StopDate = GETUTCDATE(), IsPrimary=0 WHERE Id IN (SELECT ta.Id FROM TicketAssignment ta INNER JOIN tbl_ticket t ON ta.TicketId = t.id  WHERE ta.DepartmentId = @DId AND ta.UserId = @old_user_id AND ta.StopDate IS NULL AND t.Status<>'Closed')

    
     UPDATE JunkMailRules SET intUId = @new_user_id WHERE DId=@DId AND intUId=@old_user_id

	--VGOOZ 04-AUG-2005: tkt #2369 - Deletion of my account
	--UPDATE TicketMiscCosts SET UserId = @new_user_id WHERE UserId = @old_user_id
	--UPDATE TicketTime SET UId = @new_user_id WHERE DId=@DId AND UId = @old_user_id
	--End tkt #2369
	
	-- Asset Log section
	DECLARE @OldTechName nvarchar(100)
	DECLARE @NewTechName nvarchar(100)
	
	SELECT @OldTechName = l.FirstName + ' ' + l.LastName
	FROM
		tbl_LoginCompanyJunc j
			LEFT OUTER JOIN tbl_Logins l ON j.login_id = l.id
	WHERE j.id = @old_user_id
	SELECT @NewTechName = l.FirstName + ' ' + l.LastName
	FROM
		tbl_LoginCompanyJunc j
			LEFT OUTER JOIN tbl_Logins l ON j.login_id = l.id
	WHERE j.id = @new_user_id	
		
	DECLARE @AssetId int
	Declare @OwnerId int
	Declare @CheckedOutId int
	Declare @OwnerText nvarchar(50)
	DECLARE AssetCursor CURSOR FOR
		SELECT Id, OwnerId, CheckedOutId FROM Assets WHERE DepartmentId = @DId AND (CheckedOutId = @old_user_id or OwnerId=@old_user_id)
	
	OPEN AssetCursor
	FETCH NEXT FROM AssetCursor INTO @AssetId, @OwnerId, @CheckedOutId
	WHILE @@FETCH_STATUS = 0
		BEGIN
		   
		   	 	If (@old_user_id = @CheckedOutId AND @old_user_id = @OwnerId) set @OwnerText = 'Checked Out User and Owner'; 		
		else If (@old_user_id = @OwnerId) set @OwnerText = 'Owner';
	    else If (@old_user_id = @CheckedOutId) set @OwnerText = 'Checked Out User';	      
		
			INSERT INTO AssetLogs (AssetId, Name, Note, dtDate) VALUES (@AssetId, @LoggedInUserName, 'Change Asset''s ' + @OwnerText + ' from ' + @OldTechName + ' to ' + @NewTechName + '. TransferToActiveUser stored procedure', getutcdate())	
		
			FETCH NEXT FROM AssetCursor INTO @AssetId, @OwnerId, @CheckedOutId
		END 
	CLOSE AssetCursor
	DEALLOCATE AssetCursor
	
		UPDATE Assets SET OwnerId = @new_user_id WHERE DepartmentId = @DId AND OwnerId = @old_user_id
	UPDATE Assets SET CheckedOutId = @new_user_id WHERE DepartmentId = @DId AND CheckedOutId = @old_user_id
	
	return
GO
PRINT N'Creating [dbo].[sp_TransferUser]...';


GO
CREATE Procedure dbo.sp_TransferUser
	(
		@DId int,
		@old_user_id int,
		@new_user_id int,
		@UserName nvarchar(100) = NULL
	)
As

	UPDATE Accounts SET AcctRepId = @new_user_id WHERE DId=@DId AND AcctRepId = @old_user_id
	IF EXISTS(SELECT 'true' FROM AccountLevelTechs WHERE DId=@DId AND UId = @new_user_id)
		DELETE FROM AccountLevelTechs WHERE DId=@DId AND UId = @old_user_id
	ELSE	
		UPDATE AccountLevelTechs SET UId = @new_user_id WHERE DId=@DId AND UId = @old_user_id
	IF EXISTS(SELECT 'true' FROM AccountTech WHERE CompanyID=@DId AND TechID = @new_user_id)
		DELETE FROM AccountTech WHERE CompanyID=@DId AND TechID = @old_user_id
	ELSE	
		UPDATE AccountTech SET TechID = @new_user_id WHERE CompanyID=@DId AND TechID = @old_user_id	
	UPDATE TktLevels SET intLastResortId=@new_user_id WHERE DId=@DId AND intLastResortId=@old_user_id
	UPDATE tbl_class SET LastResortTechId = @new_user_id WHERE company_id = @DId AND LastResortTechId = @old_user_id
	UPDATE tbl_ClassTechnicianJctn SET LoginCompanyJunc_id=@new_user_id FROM tbl_ClassTechnicianJctn CTJ INNER JOIN tbl_class C ON CTJ.class_id = C.id WHERE C.company_id=@DId AND CTJ.LoginCompanyJunc_id=@old_user_id
	UPDATE ClassLevelsTechJctn SET intUId=@new_user_id WHERE DId=@DId AND intUId=@old_user_id
	UPDATE ClassLevels SET intLastResortId = @new_user_id WHERE DId=@DId AND intLastResortId = @old_user_id
	UPDATE tbl_locations SET intLastResortId = @new_user_id WHERE DId = @DId AND intLastResortId = @old_user_id
	UPDATE LocationTechJctn SET intUId=@new_user_id WHERE DId=@DId AND intUId=@old_user_id
	UPDATE LocationLevelsTechJctn SET intUId=@new_user_id WHERE DId=@DId AND intUId=@old_user_id
	UPDATE LocationLevels SET intLastResortId = @new_user_id WHERE DId=@DId AND intLastResortId = @old_user_id
	UPDATE LocationRouteLevels SET LastResortTechId = @new_user_id WHERE DId=@DId AND LastResortTechId = @old_user_id
	UPDATE LocationRouteLevelTechs SET TechId = @new_user_id WHERE DId=@DId AND TechId = @old_user_id
	UPDATE Project SET InternalPMID = @new_user_id WHERE CompanyID = @DId AND InternalPMID = @old_user_id
	UPDATE Project SET ClientPMID = @new_user_id WHERE CompanyID = @DId AND ClientPMID = @old_user_id

	UPDATE SchedTickets SET intUserId=@new_user_id WHERE DId=@DId and intUserId=@old_user_id
	UPDATE SchedTickets SET intOwnerId=@new_user_id WHERE DId=@DId AND intOwnerId=@old_user_id
	UPDATE SchedTickets SET intTechId=@new_user_id WHERE DId=@DId AND intTechId=@old_user_id
	UPDATE EMailParserDropBoxes SET TechnicianId=@new_user_id WHERE DId=@DId AND TechnicianId=@old_user_id
	
	IF EXISTS(SELECT 'true' FROM ProjectTech WHERE CompanyID=@DId AND TechID = @new_user_id)
		DELETE FROM ProjectTech WHERE CompanyID=@DId AND TechID = @old_user_id
	ELSE	
		UPDATE ProjectTech SET TechId = @new_user_id WHERE CompanyID=@DId AND TechId = @old_user_id
	IF EXISTS(SELECT 'true' FROM TaskTypeTech WHERE CompanyID=@DId AND TechID = @new_user_id)
		DELETE FROM TaskTypeTech WHERE CompanyID=@DId AND TechID = @old_user_id
	ELSE	
		UPDATE TaskTypeTech SET TechID = @new_user_id WHERE CompanyID=@DId AND TechID = @old_user_id

	-- Reassigning all the tickets of current technician
	DECLARE @TicketId int
	BEGIN TRANSACTION
		DECLARE TicketCursor CURSOR FOR SELECT Id FROM tbl_Ticket WHERE company_id = @DId AND technician_id = @old_user_id
		FOR UPDATE OF technician_id
		
		OPEN TicketCursor
		FETCH NEXT FROM TicketCursor INTO @TicketId
		WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE tbl_Ticket SET technician_id = @new_user_id WHERE CURRENT OF TicketCursor
				UPDATE TicketAssignment SET StopDate = GETUTCDATE() WHERE DepartmentId = @DId AND TicketId=@TicketId AND UserId = @old_user_id AND AssignmentType = 2
				INSERT INTO TicketAssignment(DepartmentId, TicketId, UserId, AssignmentType) VALUES (@DId, @TicketId, @new_user_id, 2)
				FETCH NEXT FROM TicketCursor INTO @TicketId
			END 
		CLOSE TicketCursor
		DEALLOCATE TicketCursor
	COMMIT TRANSACTION
	
	-- Reassigning all the tickets of current user
	BEGIN TRANSACTION
		DECLARE TicketCursor CURSOR FOR SELECT Id FROM tbl_Ticket WHERE company_id = @DId AND [User_id] = @old_user_id
		FOR UPDATE OF [User_id]
		
		OPEN TicketCursor
		FETCH NEXT FROM TicketCursor INTO @TicketId
		WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE tbl_Ticket SET [User_id] = @new_user_id WHERE CURRENT OF TicketCursor
				UPDATE TicketAssignment SET StopDate = GETUTCDATE() WHERE DepartmentId = @DId AND TicketId=@TicketId AND UserId = @old_user_id AND AssignmentType = 1
				INSERT INTO TicketAssignment(DepartmentId, TicketId, UserId, AssignmentType) VALUES (@DId, @TicketId, @new_user_id, 1)
				FETCH NEXT FROM TicketCursor INTO @TicketId
			END 
		CLOSE TicketCursor
		DEALLOCATE TicketCursor
	COMMIT TRANSACTION
	
	--VGOOZ 04-AUG-2005: tkt #2369 - Deletion of my account
	UPDATE TicketMiscCosts SET UserId = @new_user_id WHERE UserId = @old_user_id
	UPDATE TicketTime SET UserId = @new_user_id WHERE DepartmentId=@DId AND UserId = @old_user_id
	--End tkt #2369
	
	--VGOOZ 1-APR-2009: tkt #7819 - Can not delete Unassigned Queues
	
	--End tkt #7819
	
	
	IF EXISTS(SELECT 'true' FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId = @DId AND LoginCompanyJunc_id = @new_user_id)
		DELETE FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId = @DId AND LoginCompanyJunc_id = @old_user_id
	ELSE
		UPDATE tbl_PartsRequestNotifyTechs SET LoginCompanyJunc_id = @new_user_id WHERE DepartmentId = @DId AND LoginCompanyJunc_id = @old_user_id
	UPDATE Assets SET OwnerId = @new_user_id WHERE DepartmentId = @DId AND OwnerId = @old_user_id
	UPDATE Assets SET CheckedOutId = @new_user_id WHERE DepartmentId = @DId AND CheckedOutId = @old_user_id
	
	
	
	
	-- Asset Log section
	DECLARE @OldTechName nvarchar(100)
	DECLARE @NewTechName nvarchar(100)
	
	SELECT @OldTechName = l.FirstName + ' ' + l.LastName
	FROM
		tbl_LoginCompanyJunc j
			LEFT OUTER JOIN tbl_Logins l ON j.login_id = l.id
	WHERE j.id = @old_user_id
	SELECT @NewTechName = l.FirstName + ' ' + l.LastName
	FROM
		tbl_LoginCompanyJunc j
			LEFT OUTER JOIN tbl_Logins l ON j.login_id = l.id
	WHERE j.id = @new_user_id	
		
	DECLARE @AssetId int
	DECLARE AssetCursor CURSOR FOR
		SELECT Id FROM Assets WHERE DepartmentId = @DId AND CheckedOutId = @new_user_id	
	
	OPEN AssetCursor
	FETCH NEXT FROM AssetCursor INTO @AssetId
	WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO AssetLogs (AssetId, Name, Note, dtDate) VALUES (@AssetId, @UserName, 'Change Asset''s Checked Out User from ' + @OldTechName + ' to ' + @NewTechName + '. TransferUser stored procedure', getutcdate())			
			FETCH NEXT FROM AssetCursor INTO @AssetId
		END 
	CLOSE AssetCursor
	DEALLOCATE AssetCursor
	
	
	return
GO
PRINT N'Creating [dbo].[sp_UnlinkFreshBooksTimeEntry]...';


GO
CREATE PROCEDURE [dbo].[sp_UnlinkFreshBooksTimeEntry]
(
	@DId int,
	@TimeLogID int,
	@IsProjectLog bit
)
AS
BEGIN
	
	IF @IsProjectLog = '1'
	 BEGIN
		UPDATE
			ProjectTime
		SET
			[FBTimeEntryID] = NULL
		WHERE
			[DepartmentId] = @DId
			AND
			[Id] = @TimeLogID
	 END
	ELSE
	 BEGIN
		UPDATE
			TicketTime
		SET
			[FBTimeEntryID] = NULL
		WHERE
			[DepartmentId] = @DId
			AND
			[Id] = @TimeLogID
	 END
	 
END
GO
PRINT N'Creating [dbo].[sp_UpdateAccount]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAccount
	(
		@DId int,
		@UId int,
		@Id int,
		@vchName nvarchar(100),
		@btActive bit,
		@btOrgAcct bit,
		@AcctRepId int,
		@SupGroupId int = null,
		@LocationId int = null,
		@vchAcctNum nvarchar(25) = null,
		@vchRef1Num nvarchar(25) = null,
		@vchRef2Num nvarchar(25) = null,
		@vchCust1 nvarchar(1000)=null,
		@vchCust2 nvarchar(1000)=null,
		@vchCust3 nvarchar(1000)=null,
		@vchCust4 nvarchar(1000)=null,
		@vchCust5 nvarchar(1000)=null,
		@vchCust6 nvarchar(1000)=null,
		@vchCust7 nvarchar(1000)=null,
		@vchCust8 nvarchar(1000)=null,
		@vchCust9 nvarchar(1000)=null,
		@vchCust10 nvarchar(1000)=null,
		@vchCust11 nvarchar(1000)=null,
		@vchCust12 nvarchar(1000)=null,
		@vchCust13 nvarchar(1000)=null,
		@vchCust14 nvarchar(1000)=null,
		@vchCust15 nvarchar(1000)=null,
		@dtCust1 smalldatetime=null,
		@dtCust2 smalldatetime=null,
		@vchEmailSuffix nvarchar(75)=null,
		@AccLevelTimeTracking bit,
		
		@City nvarchar(50)=null,
		@Address1 nvarchar(50)=null,
		@Address2 nvarchar(50)=null,
		@State nvarchar(50)=null,
		@ZipCode nvarchar(50)=null,
		@Country nvarchar(50)=null,
		@TimeZoneId nvarchar(100)=null,
		@Phone1 nvarchar(50)=null,
		@Phone2 nvarchar(50)=null
	)
AS
	/*Return
	-1 = Acct Name already exists
	-2 = Acct Num already exists
	*/
	DECLARE @btActiveOld bit

	IF @vchAcctNum=''
		SET @vchAcctNum=null
	
	IF EXISTS(SELECT 'true' FROM Accounts WHERE DId=@DId AND Id<>@Id AND vchName=@vchName)
		RETURN -1
	ELSE
	IF EXISTS(SELECT 'true' FROM Accounts WHERE DId=@DId AND Id<>@Id AND vchAcctNum=@vchAcctNum AND vchAcctNum IS NOT NULL)
		RETURN -2
	ELSE
		BEGIN 
			UPDATE Accounts SET vchEmailSuffix = REPLACE(SUBSTRING(replace(';'+vchEmailSuffix+';', ';'+@vchEmailSuffix+';', ''), PATINDEX('%[^;]%', replace(';'+vchEmailSuffix+';', ';'+@vchEmailSuffix+';', '')), LEN(replace(';'+vchEmailSuffix+';', ';'+@vchEmailSuffix+';', ''))), ';;', ';') FROM dbo.Accounts WHERE ';'+vchEmailSuffix+';' like '%;'+@vchEmailSuffix+';%'
			IF @Id = 0
				BEGIN
					BEGIN TRAN
					DECLARE @intBWDAcctNum int
					SET @intBWDAcctNum = (SELECT intNextAcctNum FROM AccountsCfg WHERE DId=@DId AND isProject=0)
					
					
					IF @Address1='' SET @Address1=NULL
					IF @Address2='' SET @Address2=NULL
					IF @City='' SET @City=NULL
					IF @State='' SET @State=NULL
					IF @ZipCode='' SET @ZipCode=NULL
					IF @Country='' SET @Country=NULL
					IF @TimeZoneId='' SET @TimeZoneId=NULL
					IF @Phone1='' SET @Phone1=NULL
					IF @Phone2='' SET @Phone2=NULL
					
				
					INSERT INTO Accounts 
						(DId,  vchName, intBWDAcctNum,   btOrgAcct,  vchAcctNum,  vchRef1Num,  vchRef2Num,  LocationId,  SupGroupId,  vchCust1,  vchCust2,  vchCust3,  vchCust4,  vchCust5,  vchCust6,  vchCust7,  vchCust8,  vchCust9,  vchCust10,  vchCust11,  vchCust12,  vchCust13,  vchCust14,  vchCust15,  dtCust1,  dtCust2,  dtUpdated, UpdatedId, btActive,  AcctRepId,  vchEmailSuffix,  AccLevelTimeTracking, Address1 , Address2,  City,  State,  ZipCode,  Country,  TimeZoneId,  Phone1,  Phone2) VALUES 
						(@DId, @vchName, @intBWDAcctNum, @btOrgAcct, @vchAcctNum, @vchRef1Num, @vchRef2Num, @LocationId, @SupGroupId, @vchCust1, @vchCust2, @vchCust3, @vchCust4, @vchCust5, @vchCust6, @vchCust7, @vchCust8, @vchCust9, @vchCust10, @vchCust11, @vchCust12, @vchCust13, @vchCust14, @vchCust15, @dtCust1, @dtCust2, getutcdate(), @UId,      @btActive, @AcctRepId, @vchEmailSuffix, @AccLevelTimeTracking,@Address1, @Address2, @City, @State, @ZipCode, @Country, @TimeZoneId, @Phone1, @Phone2)
				
					UPDATE AccountsCfg SET intNextAcctNum=intNextAcctNum+1 WHERE DId=@DId AND isProject=0
					COMMIT TRAN
					RETURN (SELECT @@Identity)
				END	
			ELSE
				BEGIN
					BEGIN TRAN
					SELECT
						@btActiveOld = btActive
					FROM
						Accounts
					WHERE	
						Id=@Id
	
					UPDATE Accounts SET vchName=@vchName, btOrgAcct=@btOrgAcct, vchAcctNum=@vchAcctNum, vchRef1Num=@vchRef1Num, vchRef2Num=@vchRef2Num, LocationId=@LocationId,
						SupGroupId=@SupGroupId, vchCust1=@vchCust1, vchCust2=@vchCust2, vchCust3=@vchCust3, vchCust4=@vchCust4, vchCust5=@vchCust5, vchCust6=@vchCust6, vchCust7=@vchCust7, vchCust8=@vchCust8, vchCust9=@vchCust9, vchCust10=@vchCust10, vchCust11=@vchCust11, vchCust12=@vchCust12, vchCust13=@vchCust13, vchCust14=@vchCust14, vchCust15=@vchCust15, dtCust1=@dtCust1, dtCust2=@dtCust2, dtUpdated=getutcdate(), 
						UpdatedId=@UId, btActive=@btActive, AcctRepId=@AcctRepId, vchEmailSuffix=@vchEmailSuffix, AccLevelTimeTracking=@AccLevelTimeTracking,
						Address1 = (CASE WHEN @Address1='' THEN Address1 ELSE @Address1 END),
						Address2 = (CASE WHEN @Address2='' THEN Address2 ELSE @Address2 END),
						City = (CASE WHEN @City='' THEN City ELSE @City END),
						State = (CASE WHEN @State='' THEN State ELSE @State END),
						ZipCode = (CASE WHEN @ZipCode='' THEN ZipCode ELSE @ZipCode END),
						Country = (CASE WHEN @Country='' THEN Country ELSE @Country END),
						TimeZoneId = (CASE WHEN @TimeZoneId='' THEN TimeZoneId ELSE @TimeZoneId END),						Phone1 = (CASE WHEN @Phone1='' THEN Phone1 ELSE @Phone1 END),
						Phone2 = (CASE WHEN @Phone2='' THEN Phone2 ELSE @Phone2 END)
					WHERE DId=@DId AND Id=@Id

					IF @btActiveOld <> @btActive
					BEGIN
					UPDATE tbl_LoginCompanyJunc SET btUserInactive= ~ @btActive  
					WHERE company_id = @DId AND id in (
						SELECT lj.id
						FROM tbl_LoginCompanyJunc lj 
						JOIN tbl_Logins lo ON lo.id=lj.login_id 
						LEFT OUTER JOIN AccountLocations al ON al.DId=@DId AND al.AccountId=@Id AND al.id=lj.intAcctLocationId
						LEFT OUTER JOIN tbl_UserType ut ON ut.id=lj.UserType_id
						WHERE lj.company_id=@DId AND lj.intAccountId=@Id and ut.id in (1,5)	
					)
					END
			
					COMMIT TRAN

					RETURN @Id
				END
		END
GO
PRINT N'Creating [dbo].[sp_UpdateAccountLevel]...';


GO

CREATE PROCEDURE sp_UpdateAccountLevel
	(
		@DId int,
		@AcctId int,
		@tintLevel tinyint,
		@tintRoutingOption tinyint
	)
AS
	
	IF EXISTS(SELECT 'true' FROM AccountLevels WHERE DId=@DId AND AcctId=@AcctId AND tintLevel=@tintLevel)
		BEGIN
			DECLARE @tintCurrentOption tinyint
			SET @tintCurrentOption = (SELECT tintRoutingOption FROM AccountLevels WHERE DId=@DId AND AcctId=@AcctId AND tintLevel=@tintLevel)
			IF (@tintCurrentOption = 3 OR @tintCurrentOption = 4) AND (@tintRoutingOption<>3 AND @tintRoutingOption<>4) 
				DELETE FROM AccountLevelTechs WHERE DId=@DId AND AcctId=@AcctId AND tintLevel=@tintLevel
			
			UPDATE AccountLevels SET tintRoutingOption=@tintRoutingOption WHERE DId=@DId AND AcctId=@AcctId AND tintLevel=@tintLevel
		END
	ELSE
		BEGIN
			INSERT INTO AccountLevels (DId,AcctId,tintLevel,tintRoutingOption) VALUES (@DId,@AcctId,@tintLevel,@tintRoutingOption)
		END
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateAccountLocation]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAccountLocation
	(
		@DId int,
		@UId int,
		@AcctId int,
		@Id int,
		@vchName nvarchar(25),
		@vchAddress1 nvarchar(50) = null,
		@vchAddress2 nvarchar(50) = null,
		@vchCity nvarchar(25) = null,
		@vchStateProv nvarchar(25) = null,
		@vchPostalCode  nvarchar(10) = null,
		@vchCountry nvarchar(25) = null,
		@sintHourOffset smallint = null,
		@vchPhone1 nvarchar(20) = null,
		@vchPhone2 nvarchar(20) = null,
		@btDefault bit
	)
AS
	/*RETURN
	-1 location name already exists
	*/
	IF EXISTS(SELECT 'true' FROM AccountLocations WHERE DId=@DId AND AccountId=@AcctId AND vchName=@vchName AND Id<>@Id)
		RETURN -1
	ELSE
		IF @Id = 0
			BEGIN
				INSERT INTO AccountLocations (DId, AccountId, vchName, vchAddress1, vchAddress2, vchCity, vchStateProv, vchPostalCode, vchCountry, sintHourOffset,
					vchPhone1, vchPhone2, dtUpdated, UpdatedId, btDefault) VALUES (@DId, @AcctId, @vchName, @vchAddress1, @vchAddress2, @vchCity, @vchStateProv, @vchPostalCode, @vchCountry,
					@sintHourOffset, @vchPhone1, @vchPhone2, getutcdate(), @UId, @btDefault)
				DECLARE @ReturnId int
				SET @ReturnId = (Select @@Identity)
				
				IF @btDefault = 1
					UPDATE AccountLocations SET btDefault=0 WHERE DId=@DId AND AccountId=@AcctId AND Id<>@ReturnId
				
				RETURN (@ReturnId)
			END
		ELSE
			BEGIN
				UPDATE AccountLocations SET vchName=@vchName, vchAddress1=@vchAddress1, vchAddress2=@vchAddress2, vchCity=@vchCity, vchStateProv=@vchStateProv,
					vchPostalCode=@vchPostalCode, vchCountry=@vchCountry, sintHourOffset=@sintHourOffset, vchPhone1=@vchPhone1, vchPhone2=@vchPhone2, 
					dtUpdated=getutcdate(), UpdatedId=@UId, btDefault=@btDefault
				WHERE DId=@DId AND AccountId=@AcctId AND Id=@Id
			
				IF @btDefault = 1
					UPDATE AccountLocations SET btDefault=0 WHERE DId=@DId AND AccountId=@AcctId AND Id<>@Id
				
				RETURN @Id
			END
GO
PRINT N'Creating [dbo].[sp_UpdateAccountPrimaryContact]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAccountPrimaryContact
(
	@DepartmentId int,
	@AccountID int,
	@UserID int
)
AS
BEGIN

	UPDATE 
		[UserAccounts] 
	SET [AccountingContactPrimary] = 0
	WHERE 
		[DepartmentId] = @DepartmentId 
		AND 
		ISNULL([AccountId], -1) = @AccountID 
		AND 
		[AccountingContactPrimary] = 1	

	IF @UserID > 0
	 BEGIN
		UPDATE 
			[UserAccounts] 
		SET [AccountingContactPrimary] = 1
		WHERE 
			[DepartmentId] = @DepartmentId 
			AND 
			ISNULL([AccountId], -1) = @AccountID
			AND
			UserID = @UserID
	 END
	
END
GO
PRINT N'Creating [dbo].[sp_UpdateAccountRate]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAccountRate
(
		@AccountRateID int,
		@CompanyID int,
		@AccountID int = NULL,
		@BillingMethodID int = NULL,
		@FlatFee money = NULL,
		@HourlyBlendedRate smallmoney = NULL,
		@RatePlanID int = NULL,
		@FlatFeeMode int = NULL,
		@FlatFeeNextDate smalldatetime = NULL,
		@QBAccountAlias nvarchar(200) = NULL,
		@QBItemAlias nvarchar(200) = NULL
)
AS

	IF @AccountId<=0
		SET @AccountId=NULL

	UPDATE 
		[AccountRate]
	SET 
		AccountID = @AccountID,
      	BillingMethodID = @BillingMethodID,
		FlatFee = @FlatFee,
		HourlyBlendedRate = @HourlyBlendedRate,
		RatePlanID = @RatePlanID,
		FlatFeeMode = @FlatFeeMode,
		FlatFeeNextDate = @FlatFeeNextDate,
		QBAccountAlias = @QBAccountAlias,
		QBItemAlias = @QBItemAlias
	WHERE 
		CompanyID = @CompanyID
		AND
		AccountRateID = @AccountRateID
GO
PRINT N'Creating [dbo].[sp_UpdateAccountRetainerAmount]...';


GO
CREATE Procedure [dbo].[sp_UpdateAccountRetainerAmount]
	(
		@DId int,
		@Id int,
		@NewAmount money,
		@NewStartDate smalldatetime,
		@NewEndDate smalldatetime = null
	)
As
	UPDATE AccountRetainer 
		SET Amount = @NewAmount,
			StartDate = @NewStartDate,
			EndDate = @NewEndDate
	WHERE DId = @DId AND Id = @Id
	return 





set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_UpdateAccountSupportPortalSettings]...';


GO
CREATE  PROCEDURE dbo.sp_UpdateAccountSupportPortalSettings
(
	@DId int,
	@AccountID int,
	@btCfgSupportPortal bit,
    @btSPLimitNewUsersToKnownEmailSuffixes bit,
    @SupportPhone nvarchar(20),
    @SupportEmail nvarchar(50),
    @SPTitle nvarchar(50),
    @LogoBackLinkURL nvarchar(200),
    @SPDisableCSS bit,
    @SPFacebook nvarchar(50),
    @SPTwitter1 nvarchar(50),
    @SPTwitter2 nvarchar(50)
)

As
	
	UPDATE [Accounts]
		SET 
			[btCfgSupportPortal] = @btCfgSupportPortal
			,[btSPLimitNewUsersToKnownEmailSuffixes] = @btSPLimitNewUsersToKnownEmailSuffixes
			,[SupportPhone] = @SupportPhone
			,[SupportEmail] = @SupportEmail
			,[SPTitle] = @SPTitle
			,[LogoBackLinkURL] = @LogoBackLinkURL
			,[SPDisableCSS] = @SPDisableCSS
			,SPFacebook = @SPFacebook
			,SPTwitter1 = @SPTwitter1
			,SPTwitter2 = @SPTwitter2
	WHERE
		DId = @DId
		AND
		Id = @AccountID
GO
PRINT N'Creating [dbo].[sp_UpdateAccountTaskTypeRate]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAccountTaskTypeRate
(
		@CompanyID int,
		@AccountTaskTypeRateID int,
		@HourlyRate smallmoney
)
AS

	IF @HourlyRate < -1
		SET @HourlyRate = NULL

	UPDATE 
		AccountTaskTypeRate
	SET 
		HourlyRate = @HourlyRate
	WHERE 
		CompanyID = @CompanyID
		AND
		AccountTaskTypeRateID = @AccountTaskTypeRateID
GO
PRINT N'Creating [dbo].[sp_UpdateAcctAutoInc]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAcctAutoInc
	(
		@DId int,
		@intNewAcctNum int
	)
AS
	SET NOCOUNT ON
	UPDATE AccountsCfg SET intNextAcctNum=@intNewAcctNum WHERE DId=@DId AND isProject=0
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateAcctCustCharFlds]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAcctCustCharFlds
	(
		@DId int,
		@btCustOn bit,
		@btCustType bit,
		@vchCustCap nvarchar(25),
		@vchCustOptions nvarchar(1000),
		@vchCustDefault nvarchar(1000),
		@btCustReq bit,
		@intNum int,
		@isProject bit		
	)
AS
	SET NOCOUNT ON
	DECLARE @vchNum nvarchar(2)
	SET @vchNum=CAST(@intNum as nvarchar(2))
	DECLARE @UpdateSQL nvarchar(2024)
	SET @UpdateSQL=N'UPDATE AccountsCfg SET btCust'+@vchNum+'On=@btCustOn, btCust'+@vchNum+'Type=@btCustType, vchCust'+@vchNum+'Cap=@vchCustCap, vchCust'+@vchNum+'Options=@vchCustOptions, vchCust'+@vchNum+'Default=@vchCustDefault, btCust'+@vchNum+'Req=@btCustReq WHERE DId=@DId AND isProject=' + CAST(@isProject AS nvarchar)
	exec sp_executesql @UpdateSQL, N'@btCustOn bit, @btCustType bit, @vchCustCap nvarchar(25), @vchCustOptions nvarchar(1000), @vchCustDefault nvarchar(1000), @btCustReq bit, @DId int', @btCustOn, @btCustType, @vchCustCap, @vchCustOptions, @vchCustDefault, @btCustReq, @DId
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateAcctCustDtFlds]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAcctCustDtFlds
	(
		@DId int,
		@btDateCustOn bit,
		@vchDateCustCap nvarchar(25),
		@btDateCustReq bit,
		@intNum int,
		@isProject bit
	)
AS
	SET NOCOUNT ON
	
	DECLARE @vchNum nvarchar(2)
	SET @vchNum=CAST(@intNum as nvarchar(2))
	DECLARE @UpdateSQL nvarchar(2024)
	SET @UpdateSQL=N'UPDATE AccountsCfg SET btDateCust'+@vchNum+'On = @btDateCustOn, vchDateCust'+@vchNum+'Cap = @vchDateCustCap, btDateCust'+@vchNum+'Req = @btDateCustReq WHERE DId=@DId AND isProject=' + CAST(@isProject AS nvarchar)
	exec sp_executesql @UpdateSQL, N'@btDateCustOn bit, @vchDateCustCap nvarchar(25), @btDateCustReq bit, @DId int', @btDateCustOn, @vchDateCustCap, @btDateCustReq, @DId
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateAcctFiles]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAcctFiles
	(
		@Mode varchar(1),
		@DId int,
		@AcctId int,
		@Id int=null,
		@vchName nvarchar(100)=null OUTPUT,
		@intSizeKB int=null OUTPUT,
		@intBWAFileId int=null,
		@dtModified smalldatetime=null OUTPUT
	)
AS
	SET NOCOUNT ON
	
	IF @Mode = 'U'
		BEGIN
			DECLARE @FileCount tinyint
			SET @FileCount = (SELECT max(tintVersion)+1 FROM AccountFiles WHERE DId=@DId AND AcctId=@AcctId AND vchName=@vchName)
			IF @FileCount IS NULL
				SET @FileCount = 1
			
			INSERT INTO AccountFiles (DId,AcctId,intBWAFileId,vchName,tintVersion,intSizeKB,dtModified) VALUES (@DId,@AcctId,@intBWAFileId,@vchName,@FileCount,@intSizeKB,getutcdate())
			
			RETURN 
		END
		
	IF @Mode = 'R'
		BEGIN
			SELECT @vchName=vchName,@intSizeKB=intSizeKB,@dtModified=dtModified FROM AccountFiles WHERE DId=@DId AND AcctId=@AcctId AND Id=@Id
			RETURN 
		END
		
	IF @Mode = 'D'
		BEGIN
			SET @intBWAFileId = (SELECT intBWAFileId FROM AccountFiles WHERE DId=@DId AND AcctId=@AcctId AND Id=@Id)
			DELETE FROM AccountFiles WHERE DId=@DId AND AcctId=@Acctid AND Id=@Id
			RETURN @intBWAFileId
		END
GO
PRINT N'Creating [dbo].[sp_UpdateAcctNote]...';


GO

CREATE PROCEDURE sp_UpdateAcctNote
	(
		@DId int,
		@AcctId int,
		@txtNote ntext
	)
AS
	UPDATE Accounts SET txtNote=@txtNote WHERE DId=@DId AND Id=@AcctId
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateAcctUserLocation]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAcctUserLocation
	(
		@DId int,
		@UId int,
		@intAcctId int,
		@intAcctLocId int,
		@AccountingContact bit = NULL,
		@AccountingContactPrimary bit = NULL
	)
AS
	SET NOCOUNT ON
	DECLARE @UserAccountId int
	SET @UserAccountId = 0
	
	IF @intAcctId <= 0
		SET @intAcctId = NULL

	IF @intAcctLocId = 0
		SET @intAcctLocId = NULL

	SELECT @UserAccountId = [Id] FROM [UserAccounts] WHERE [DepartmentId] = @DId AND [UserId] = @UId AND ISNULL([AccountId], -1) = ISNULL(@intAcctId,-1)


	-- clear old primary contact
	IF (@AccountingContactPrimary = 1)
		UPDATE [UserAccounts] 
			SET
				[AccountingContactPrimary] = 0
			WHERE [DepartmentId] = @DId AND ISNULL([AccountId], -1) = ISNULL(@intAcctId,-1) AND [AccountingContactPrimary] = 1
	
	IF @UserAccountId > 0
	BEGIN
		UPDATE [UserAccounts] 
		SET [AccountLocationId] = @intAcctLocId
		WHERE [DepartmentId] = @DId AND [UserId] = @UId AND [Id] = @UserAccountId
		IF (@AccountingContact IS NOT NULL AND @AccountingContactPrimary IS NOT NULL)
			UPDATE [UserAccounts] 
			SET			
				[AccountingContact] = @AccountingContact,
				[AccountingContactPrimary] = @AccountingContactPrimary
			WHERE [DepartmentId] = @DId AND [UserId] = @UId AND [Id] = @UserAccountId
		
	END
	ELSE
		INSERT INTO [UserAccounts] ([DepartmentId],[UserId],[AccountId],[AccountLocationId],[AccountingContact],[AccountingContactPrimary]) VALUES (@DId,@UId,@intAcctId,@intAcctLocId, ISNULL(@AccountingContact, 0), ISNULL(@AccountingContactPrimary, 0))
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateAsset]...';


GO
CREATE Procedure dbo.sp_UpdateAsset
	(
		@DepartmentId int,
		@AssetId int,
		@PurchaseVendor int,
		@WarrantyVendor int,
		@Location int,
		@Name nvarchar(50) = null,
		@Description nvarchar(250) = null,
		@Value money, --VGOOZ 01-DEC-2005: tkt #3090 - Cannot set Asset Value to 1000000 (changed smallmoney datatype to money)
		@DateAquired smalldatetime,
		@LaborWarrantyLength tinyint,
		@PartsWarrantyLength tinyint,
		@Room nvarchar(25) = null,
		@PONumber nvarchar(25) = null,
		@FundingCode nvarchar(40) = null,
		@SerialNumber nvarchar(50) = null,
		@Unique1 nvarchar(100) = null,
		@Unique2 nvarchar(100) = null,
		@Unique3 nvarchar(100) = null,
		@Unique4 nvarchar(100) = null,
		@Unique5 nvarchar(100) = null,
		@Unique6 nvarchar(100) = null,
		@Unique7 nvarchar(100) = null,
		@newStatusId int,
		@oldStatusId int,
		@UId int,
		@AssetSort smallint=1,
		@DatePurchased datetime=null,
		@DateDeployed datetime=null,
		@DateOutOfService datetime=null,
		@DateEntered datetime=null,
		@DateReceived datetime=null,
		@DateDisposed datetime=null,
		@ValueCurrent money=null,
		@ValueReplacement money=null,
		@ValueDepreciated money=null,
		@ValueSalvage money=null,
		@DisposalCost money=null,
		@FundingSource nvarchar(40) =null,
		@AccountId int,
		@UpdateUniqueFields bit = 1
	)

As
	IF @AccountId < 0
		SET @AccountId = NULL
	DECLARE @StatusId int
	Declare @oldLocationId int
	Declare @IsLost int

	Select @oldStatusId = StatusId, @oldLocationId=LocationId, @IsLost = Lost from Assets
	WHERE DepartmentId = @DepartmentId AND Id = @AssetId

	DECLARE @FullName nvarchar(200)
	
	IF @UId IS NOT NULL
		exec sp_SelectUserFullName @DepartmentId, @UId, @FullName OUTPUT

	DECLARE @Note nvarchar(1000)

	IF @newStatusId is not null
		BEGIN
			If @oldStatusId<>@newStatusId
			Begin 
				DECLARE @vchOldStatus nvarchar(30)
				DECLARE @vchNewStatus nvarchar(30)
				SET @StatusId = @newStatusId
				SET @vchOldStatus = (SELECT vchStatus FROM AssetStatus WHERE id = @oldStatusId)
				SET @vchNewStatus = (SELECT vchStatus FROM AssetStatus WHERE id = @newStatusId)
					
				If NOT @vchOldStatus IS NULL
					SET @Note = 'This asset''s status was changed from '''+@vchOldStatus+''''
				Else
					SET @Note = 'This asset''s status was changed from ''unknown'''

				If NOT @vchNewStatus IS NULL
					SET @Note = @Note + ' to '''+@vchNewStatus+''''
				Else
					SET @Note = @Note + ' to ''unknown'''
		
				If NOT @FullName IS NULL
					SET @Note = @Note + ' by '+@FullName+'.'
				Else
					SET @Note = @Note + ' by unknown user.'

				INSERT INTO AssetLogs (AssetId, Name, Note, dtDate) VALUES (@AssetId, @FullName, @Note, getutcdate())
			End
		END
	ELSE
		SET @StatusId = @oldStatusId
		
	Declare @IsLocationChanged int	
	Select @IsLocationChanged=0

	If ((@Location IS NULL AND NOT @oldLocationId IS NULL) OR (@oldLocationId IS NULL AND NOT @Location IS NULL))
		Select @IsLocationChanged=1	
	else
	Begin
		if (NOT @Location IS NULL AND NOT @oldLocationId IS NULL)
		Begin
			if @Location<>@oldLocationId
				Select @IsLocationChanged=1			
		End	
	End
	
	If @IsLocationChanged=1
	Begin
		IF @IsLost = 1
			SET @IsLost = 0
		DECLARE @vchOldLocation nvarchar(max)
		DECLARE @vchNewLocation nvarchar(max)
		
		Select @vchOldLocation = NULL
		Select @vchNewLocation = NULL

		if NOT @oldLocationId IS NULL
			SET @vchOldLocation = dbo.fxGetUserLocationName(@DepartmentId, @oldLocationId)
				
		if NOT @Location IS NULL
			SET @vchNewLocation = dbo.fxGetUserLocationName(@DepartmentId, @Location)
					
		If NOT @vchOldLocation IS NULL
			SET @Note = 'This asset''s location was changed from '''+@vchOldLocation+''''
		Else
			SET @Note = 'This asset''s location was changed from ''unknown'''

		If NOT @vchNewLocation IS NULL
			SET @Note = @Note + ' to '''+@vchNewLocation+''''
		Else
			SET @Note = @Note + ' to ''unknown'''

		If NOT @FullName IS NULL
			SET @Note = @Note + ' by '+@FullName+'.'
		Else
			SET @Note = @Note + ' by unknown user.'

		INSERT INTO AssetLogs (AssetId, Name, Note, dtDate) VALUES (@AssetId, @FullName, @Note, getutcdate())
	End

	Begin Transaction

	IF @UpdateUniqueFields = 1
		UPDATE Assets SET
			SerialNumber = @SerialNumber,
			Unique1 = @Unique1,
			Unique2 = @Unique2,
			Unique3 = @Unique3,
			Unique4 = @Unique4,
			Unique5 = @Unique5,
			Unique6 = @Unique6,
			Unique7 = @Unique7
		WHERE DepartmentId = @DepartmentId AND Id = @AssetId
	
	UPDATE Assets SET
		VendorId = @PurchaseVendor,
		WarrantyVendor = @WarrantyVendor,
		LocationId = @Location,
		Name = @Name,
		[Description] = @Description,
		Value = @Value,
		DateAquired = @DateAquired,
		LaborWarrantyLength = @LaborWarrantyLength,
		PartsWarrantyLength = @PartsWarrantyLength,
		Room = @Room,
		PONumber = @PONumber,
		FundingCode = @FundingCode,
		StatusId = @StatusId,
		AssetSort=@AssetSort,
		DatePurchased=@DatePurchased,
		DateDeployed=@DateDeployed,
		DateOutOfService=@DateOutOfService,
		DateEntered=@DateEntered,
		DateReceived=@DateReceived,
		DateDisposed=@DateDisposed,
		ValueCurrent=@ValueCurrent,
		ValueReplacement=@ValueReplacement,
		ValueDepreciated=@ValueDepreciated,
		ValueSalvage=@ValueSalvage,
		DisposalCost=@DisposalCost,
		FundingSource=@FundingSource,
		dtUpdated=getutcdate(),
		intUpdatedBy=@UId,
		AccountId = @AccountId,	
		Lost = @IsLost	
	WHERE DepartmentId = @DepartmentId AND Id = @AssetId
	
	Commit;

	return
GO
PRINT N'Creating [dbo].[sp_UpdateAssetBulk]...';


GO
CREATE Procedure [dbo].[sp_UpdateAssetBulk]
	(
		@DepartmentId int,
		@UId int,
		@AssetId int,		
		@Name nvarchar(50),
		@Description nvarchar(250),
		@AssetCategory int,
		@AssetType int		
	)

As	
	UPDATE AssetBulk SET
		CategoryId = @AssetCategory,
		TypeId = @AssetType,		
		Name = @Name,
		[Description] = @Description,		
		Updated=getutcdate(),
		UpdatedBy=@UId		
	WHERE DepartmentId = @DepartmentId AND Id = @AssetId
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateAssetCategory]...';


GO
CREATE Procedure dbo.sp_UpdateAssetCategory
	(
		@DepartmentId int,
		@Name nvarchar(50),
		@AssetCategoryId int = null
	
	)
As

	IF @AssetCategoryId is null 
		BEGIN
			IF NOT EXISTS(SELECT 'true' FROM AssetCategories WHERE DepartmentId = @DepartmentId AND Name = @Name)
				BEGIN
					INSERT INTO AssetCategories (DepartmentId, Name) VALUES (@DepartmentId, @Name)
					return (SELECT @@Identity)
				END
			ELSE
				BEGIN
					return -1 /* Already exist */
				END
		END
	ELSE
		BEGIN
			UPDATE AssetCategories SET Name = @Name WHERE id = @AssetCategoryId AND DepartmentId = @DepartmentId

			IF NOT EXISTS(SELECT 'true' FROM AssetCategories WHERE DepartmentId = @DepartmentId AND Name = @Name)
				BEGIN
					UPDATE AssetCategories SET Name = @Name WHERE id = @AssetCategoryId AND DepartmentId = @DepartmentId
					return @AssetCategoryId
				END
			ELSE
				BEGIN	
					return -1 
				END
			
		END	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateAssetCheckedOut]...';


GO
CREATE Procedure dbo.sp_UpdateAssetCheckedOut
	(
		@DepartmentId int,
		@AssetId int,
		@CheckedOutId int,
		@vchUpdatedBy nvarchar(75)
	)
As
	UPDATE Assets SET CheckedOutId = @CheckedOutId WHERE DepartmentId = @DepartmentId AND Id = @AssetId
	
	DECLARE @vchOwnerName nvarchar(75)
	DECLARE @Note nvarchar(250)

	IF NOT @CheckedOutId IS NULL
	BEGIN
		EXECUTE sp_SelectUserFullName @DepartmentId, @CheckedOutId, @FullName = @vchOwnerName OUTPUT
	
		SET @Note = 'Asset was checked out to '+@vchOwnerName
		INSERT INTO AssetLogs (AssetId, Name, Note, dtDate) VALUES (@AssetId, @vchUpdatedBy, @Note, getutcdate())
	END
	ELSE
	BEGIN
		Select @vchOwnerName='empty.'
		SET @Note = 'Asset was checked out to '+@vchOwnerName
		INSERT INTO AssetLogs (AssetId, Name, Note, dtDate) VALUES (@AssetId, @vchUpdatedBy, @Note, getutcdate())
	END
	return
GO
PRINT N'Creating [dbo].[sp_UpdateAssetColumnSetting]...';


GO
CREATE Procedure dbo.sp_UpdateAssetColumnSetting
	(
		@Id int OUTPUT,
		@DId int,
		@UId int,
		@Name nvarchar(255),
		@State nvarchar(512)
	)

As
	IF EXISTS(SELECT * FROM AssetColumnSettings WHERE DId=@DId AND Id<>ISNULL(@Id,0) AND ISNULL(UId,0)=ISNULL(@UId,0) AND Name=@Name) 
		RETURN 1
	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO AssetColumnSettings (DId, UId, Name, State) VALUES (@DId, @UId, @Name,  @State)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE AssetColumnSettings SET UId=@UId, Name=@Name, State=@State WHERE DId=@DId AND Id=@Id
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdateAssetCustCaption]...';


GO

CREATE Procedure sp_UpdateAssetCustCaption
	(
		@DepartmentId int,
		@TypeId		int,
		@bit1Cap	varchar(50),
		@bit2Cap	varchar(50),
		@bit3Cap	varchar(50),
		@bit4Cap	varchar(50),
		@bit5Cap	varchar(50),
		@bit6Cap	varchar(50),
		@bit7Cap	varchar(50),
		@bit8Cap	varchar(50),
		@char1Cap	varchar(50),
		@char2Cap	varchar(50),
		@char3Cap	varchar(50),
		@char4Cap	varchar(50),
		@char5Cap	varchar(50),
		@char6Cap	varchar(50),
		@char7Cap	varchar(50),
		@char8Cap	varchar(50),
		@char9Cap	varchar(50),
		@char10Cap	varchar(50),
		@char11Cap	varchar(50),
		@char12Cap	varchar(50),
		@char13Cap	varchar(50),
		@char14Cap	varchar(50),
		@char15Cap	varchar(50),
		@char16Cap	varchar(50),
		@int1Cap	varchar(50),
		@int2Cap	varchar(50),
		@int3Cap	varchar(50),
		@int4Cap	varchar(50),
		@dec1Cap	varchar(50),
		@dec2Cap	varchar(50),
		@dec3Cap	varchar(50),
		@dec4Cap	varchar(50),
		@multi1Cap	varchar(50),
		@multi2Cap	varchar(50),
		@multi3Cap	varchar(50),
		@multi4Cap	varchar(50)
	)
As
	if @bit1Cap is null AND @bit2Cap is null AND @bit3Cap is null AND @bit4Cap is null AND @bit5Cap is null AND @bit6Cap is null AND @bit7Cap is null 
		AND @bit8Cap is null AND @char1cap is null AND @char2cap is null AND @char3cap is null AND @char4cap is null 
		AND @char5cap is null AND @char6cap is null AND @char7cap is null AND @char8cap is null
		AND @char9cap is null AND @char10cap is null AND @char11cap is null AND @char12cap is null
		AND @char13cap is null AND @char14cap is null AND @char15cap is null AND @char16cap is null
		AND @int1Cap is null AND @int2cap is null AND @int3cap is null AND @int4cap is null
		AND @dec1Cap is null AND @dec2cap is null AND @dec3cap is null AND @dec4cap is null
		AND @multi1cap is null AND @multi2cap is null AND @multi3cap is null AND @multi4cap is null
		BEGIN
			BEGIN TRANSACTION
			DELETE FROM AssetTypeMultiChoices WHERE TypeId=@TypeId
			DELETE FROM AssetTypeCustCap WHERE TypeId = @TypeId
			DELETE FROM AssetTypeCustFields WHERE DepartmentId=@DepartmentId AND TypeId=@TypeId
			UPDATE AssetTypes SET configCustFields = 0 WHERE DepartmentId=@DepartmentId AND id=@TypeId
			COMMIT TRANSACTION
		END
	ELSE
		BEGIN
			IF EXISTS(SELECT 'true' FROM AssetTypeCustCap WHERE TypeId = @TypeId)
				UPDATE AssetTypeCustCap SET bit1Cap=@bit1Cap,bit2Cap=@bit2Cap,bit3Cap=@bit3Cap,bit4Cap=@bit4Cap,bit5Cap=@bit5Cap,bit6Cap=@bit6Cap,bit7Cap=@bit7Cap,bit8Cap=@bit8Cap,
					char1Cap=@char1Cap,char2Cap=@char2Cap,char3cap=@char3Cap,char4cap=@char4cap,char5Cap=@char5Cap,char6Cap=@char6Cap,char7cap=@char7Cap,char8cap=@char8cap,
					char9Cap=@char9Cap,char10Cap=@char10Cap,char11cap=@char11Cap,char12cap=@char12cap,char13Cap=@char13Cap,char14Cap=@char14Cap,char15cap=@char15Cap,char16cap=@char16cap,
					int1Cap=@int1Cap,int2Cap=@int2Cap,int3Cap=@int3Cap,int4Cap=@int4Cap,
					dec1Cap=@dec1Cap,dec2Cap=@dec2Cap,dec3Cap=@dec3Cap,dec4Cap=@dec4Cap,
					multi1Cap=@multi1Cap,multi2Cap=@multi2Cap,multi3Cap=@multi3Cap,multi4Cap=@multi4Cap WHERE TypeId=@TypeId
			ELSE
				BEGIN
					UPDATE AssetTypes SET configCustFields = 1 WHERE DepartmentId=@DepartmentId AND id = @TypeId
					INSERT INTO AssetTypeCustCap (TypeId,bit1Cap,bit2Cap,bit3Cap,bit4Cap,bit5Cap,bit6Cap,bit7Cap,bit8Cap,char1Cap,char2Cap,char3Cap,char4Cap,char5Cap,char6Cap,char7Cap,char8Cap,
						char9Cap,char10Cap,char11Cap,char12Cap,char13Cap,char14Cap,char15Cap,char16Cap,
						int1Cap,int2Cap,int3Cap,int4Cap,
						dec1Cap,dec2Cap,dec3Cap,dec4Cap,
						multi1Cap,multi2Cap,multi3Cap,multi4Cap) VALUES (@TypeId,@bit1Cap,@bit2Cap,@bit3Cap,@bit4Cap,@bit5Cap,@bit6Cap,@bit7Cap,@bit8Cap,
						@char1Cap,@char2Cap,@char3Cap,@char4Cap,@char5Cap,@char6Cap,@char7Cap,@char8Cap,
						@char9Cap,@char10Cap,@char11Cap,@char12Cap,@char13Cap,@char14Cap,@char15Cap,@char16Cap,
						@int1Cap,@int2Cap,@int3Cap,@int4Cap,
						@dec1Cap,@dec2Cap,@dec3Cap,@dec4Cap,
						@multi1Cap,@multi2Cap,@multi3Cap,@multi4Cap)
				END
		
		END
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateAssetFilter]...';


GO
CREATE Procedure dbo.sp_UpdateAssetFilter
	(
		@Id int OUTPUT,
		@DId int,
		@UId int,
		@Name nvarchar(255),
		@FilterState ntext
	)

As
	IF EXISTS(SELECT * FROM AssetFilters WHERE DId=@DId AND Id<>ISNULL(@Id,0) AND ISNULL(UId,0)=ISNULL(@UId,0) AND Name=@Name) 
		RETURN 1
	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO AssetFilters (DId, UId, Name, FilterState) VALUES (@DId, @UId, @Name,  @FilterState)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE AssetFilters SET UId=@UId, Name=@Name, FilterState=@FilterState WHERE Id=@Id AND DId=@DId
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdateAssetMake]...';


GO
CREATE Procedure [dbo].[sp_UpdateAssetMake]
	(
		@DId int,
		@Make nvarchar(50),
		@TypeId int,
		@MakeId int = null,
		@MergeFlag bit = null
	
	)
As
	/*
	return 0 = model name updated
	return -1 = model name is already in use
	return -2 = model name is in use but can be merged
	return -3 = merge successfull
	*/
	IF @MakeId is null 
		BEGIN
			IF NOT EXISTS(SELECT 'true' FROM AssetMakes WHERE DepartmentId = @DId AND TypeId = @TypeId AND  Make = @Make)
				BEGIN
					INSERT INTO AssetMakes (DepartmentId, Make, TypeId) VALUES (@DId, @Make, @TypeId)
					return (SELECT @@Identity)
				END
			ELSE
				return -1
		END
	ELSE
		BEGIN
			UPDATE AssetMakes SET Make = @Make WHERE DepartmentId = @DId AND id = @MakeId

			IF NOT EXISTS(SELECT 'true' FROM AssetMakes WHERE DepartmentId = @DId AND TypeId=@TypeId AND id <> @MakeId AND Make=@Make)
				BEGIN
					UPDATE AssetMakes SET Make = @Make WHERE DepartmentId = @DId AND id = @MakeId
					return @MakeId
				END
			ELSE
				BEGIN
					IF @MergeFlag IS NULL
						return -2
					ELSE
						BEGIN
							DECLARE @IntoMakeId int
							SET @IntoMakeId=(SELECT TOP 1 id FROM AssetMakes WHERE DepartmentId = @DId AND TypeId=@TypeId AND id <> @MakeId AND Make=@Make)
							DECLARE @ModelId int
							DECLARE @MergeModelId int
							DECLARE @MergeModelName nvarchar(50)
							DECLARE @Crsr CURSOR
							SET @Crsr = CURSOR FOR SELECT id, Model FROM AssetModels WHERE DepartmentId=@DId AND MakeId=@MakeId FOR READ ONLY
							OPEN @Crsr
							FETCH NEXT FROM @Crsr INTO @MergeModelId, @MergeModelName
							WHILE @@FETCH_STATUS <> -1
							BEGIN
								IF EXISTS(SELECT 'true' FROM AssetModels WHERE DepartmentId=@DId AND MakeId=@IntoMakeId AND Model=@MergeModelName)
									SET @ModelId = (SELECT id FROM AssetModels WHERE DepartmentId=@DId AND MakeId=@IntoMakeId AND Model=@MergeModelName)
								ELSE
									BEGIN
										INSERT INTO AssetModels (MakeId, DepartmentId, Model) VALUES (@IntoMakeId, @DId, @MergeModelName)
										SET @ModelId = (SELECT @@Identity)
									END
								
								UPDATE Assets SET ModelId=@ModelId WHERE DepartmentId=@DId AND ModelId=@MergeModelId

								DELETE FROM AssetModels WHERE DepartmentId=@DId AND id=@MergeModelId
								
								FETCH NEXT FROM @Crsr INTO @MergeModelId, @MergeModelName
							END
							CLOSE @Crsr
							DEALLOCATE @Crsr
						
							/*Test to make sure no more sub models are attached to the merge make*/
							IF NOT EXISTS(SELECT 'true' FROM AssetModels WHERE DepartmentId=@DId AND MakeId=@MakeId)
								BEGIN
									UPDATE Assets SET MakeId = @IntoMakeId WHERE DepartmentId=@DId AND MakeId=@MakeId

									DELETE FROM AssetMakes WHERE DepartmentId=@DId AND id=@MakeId
								END
						
						return -3
						END
				END
		END
GO
PRINT N'Creating [dbo].[sp_UpdateAssetModel]...';


GO
CREATE Procedure [dbo].[sp_UpdateAssetModel]
	(
		@DId int,
		@Model nvarchar(50),
		@MakeId int,
		@ModelId int = null,
		@MergeFlag bit = null,
		@Links nvarchar(max) = null
	)
As
	/*
	return 0 = model name updated
	return -2 = model name is in use but can be merged
	return -3 = merge successfull
	*/
	IF @ModelId is null 
		BEGIN
			IF NOT EXISTS(SELECT 'true' FROM AssetModels WHERE DepartmentId = @DId AND MakeId = @MakeId AND Model = @Model)
				BEGIN
					INSERT INTO AssetModels (MakeId, DepartmentId, Model, Links) VALUES (@MakeId, @DId, @Model, @Links)
					return (SELECT @@Identity)
				END
			ELSE
				return (SELECT id FROM AssetModels WHERE DepartmentId = @DId AND MakeId = @MakeId AND Model = @Model)
		END
	ELSE
		BEGIN
			UPDATE AssetModels SET Model=@Model, Links=@Links WHERE DepartmentId = @DId AND id = @ModelId

			IF NOT EXISTS(SELECT 'true' FROM AssetModels WHERE DepartmentId = @DId AND MakeId=@MakeId AND Model=@Model AND id <> @ModelId)
				BEGIN
					UPDATE AssetModels SET Model=@Model, Links=@Links WHERE DepartmentId=@DId AND id = @ModelId
					return @ModelId
				END
			ELSE
				BEGIN
					IF @MergeFlag <> 1 
						return -2
					ELSE
						BEGIN
							DECLARE @MergeModelId int
							SET @MergeModelId = (SELECT TOP 1 id FROM AssetModels WHERE DepartmentId = @DId AND MakeId=@MakeId AND Model=@Model AND id<>@ModelId)
							
							BEGIN TRANSACTION
								UPDATE Assets SET ModelId=@MergeModelId WHERE DepartmentId = @DId AND ModelId = @ModelId
								DELETE FROM AssetModels WHERE DepartmentId = @DId AND id = @ModelId
							COMMIT TRANSACTION
						END
				END
		END
GO
PRINT N'Creating [dbo].[sp_UpdateAssetMultiChoice]...';


GO

CREATE Procedure sp_UpdateAssetMultiChoice
	(
		@DId int,
		@TypeId int,
		@Multi tinyint,
		@OptionNumber tinyint=null,
		@vchOption nvarchar(50)
	)
As
	/*return 1 for success, 2 for already exists*, 3 for blank vchOption*/
	IF @vchOption is null or @vchOption = ''
		return 3
	ELSE
		BEGIN
			IF EXISTS(SELECT 'true' FROM AssetTypeMultiChoices WHERE TypeId=@TypeId AND MultiNumber=@Multi AND vchOption=@vchOption)
				return 2
			ELSE
				BEGIN
					IF @OptionNumber is null
						BEGIN
							SET @OptionNumber = (SELECT max(OptionNumber)+1 FROM AssetTypeMultiChoices WHERE TypeId=@TypeId AND MultiNumber=@Multi)
							IF @OptionNumber is null
								SET @OptionNumber = 1
							INSERT INTO AssetTypeMultiChoices (TypeId, MultiNumber,OptionNumber,vchOption) VALUES (@TypeId,@Multi,@OptionNumber,@vchOption)
						END
					ELSE
						BEGIN
							UPDATE AssetTypeMultiChoices SET vchOption=@vchOption WHERE TypeId=@TypeId AND MultiNumber=@Multi AND OptionNumber=@OptionNumber
						END
					return 1
				END
		END
GO
PRINT N'Creating [dbo].[sp_UpdateAssetNotes]...';


GO

CREATE Procedure sp_UpdateAssetNotes
	(
		@DepartmentId int,
		@AssetId int,
		@Notes ntext
	)

As
	UPDATE Assets SET Notes = @Notes WHERE DepartmentId = @DepartmentId AND Id = @AssetId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateAssetOwner]...';


GO
CREATE Procedure dbo.sp_UpdateAssetOwner
	(
		@DepartmentId int,
		@AssetId int,
		@OwnerId int,
		@vchUpdatedBy nvarchar(75)
	)
As
	UPDATE Assets SET OwnerId = @OwnerId WHERE DepartmentId = @DepartmentId AND Id = @AssetId
	
	DECLARE @vchOwnerName nvarchar(75)
	DECLARE @Note nvarchar(250)

	IF NOT @OwnerId IS NULL 
	BEGIN
		EXECUTE sp_SelectUserFullName @DepartmentId, @OwnerId, @FullName = @vchOwnerName OUTPUT
		SET @Note = 'Asset owner was changed to '+@vchOwnerName
		INSERT INTO AssetLogs (AssetId, Name, Note, dtDate) VALUES (@AssetId, @vchUpdatedBy, @Note, getutcdate())
	END
	ELSE
	BEGIN
		Select @vchOwnerName='empty.'
		SET @Note = 'Asset owner was changed to '+@vchOwnerName
		INSERT INTO AssetLogs (AssetId, Name, Note, dtDate) VALUES (@AssetId, @vchUpdatedBy, @Note, getutcdate())
	END
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateAssetPropertyValue]...';


GO
CREATE Procedure dbo.sp_UpdateAssetPropertyValue
	(
		@Id int OUTPUT,
		@DId int,
		@AssetId int,
		@AssetTypePropertyId int,
		@PropertyValue nvarchar(255)
	)

As
	IF @Id IS NULL OR @Id=0
		SELECT @Id=Id FROM AssetPropertyValues WHERE DId=@DId AND AssetId=@AssetId AND AssetTypePropertyId=@AssetTypePropertyId
	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO AssetPropertyValues (DId, AssetId, AssetTypePropertyId, PropertyValue) VALUES (@DId, @AssetId, @AssetTypePropertyId,  @PropertyValue)
		SET @Id=@@IDENTITY
	END
	ELSE
		IF LEN(@PropertyValue)>0
			UPDATE AssetPropertyValues SET PropertyValue=@PropertyValue WHERE Id=@Id AND DId=@DId
		ELSE
			DELETE AssetPropertyValues WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_UpdateAssetType]...';


GO
CREATE Procedure dbo.sp_UpdateAssetType
	(
		@DId int,
		@Name nvarchar(50),
		@CategoryId int,
		@TypeId int = null,
		@MergeFlag bit = null,
		@MergeTypeId int = null,
		@AssetProfileId int = null,
		@AuditEnable bit = 1,
		@IsPortable bit = 0
	)
As
	/*
	return 0 = type name updated
	return -1 = type name is already in use
	return -2 = type name is in use but can be merged
	return -3 = merge successfull
	return -4 = sub items not transferred properly
	*/
	IF @TypeId is null 
		BEGIN
			IF NOT EXISTS(SELECT 'true' FROM AssetTypes WHERE DepartmentId = @DId AND CategoryId=@CategoryId AND Name = @Name)
				BEGIN
					INSERT INTO AssetTypes (DepartmentId, Name, CategoryId, configCustFields, AssetProfileId, EnableAudit, cfgPortable) VALUES (@DId, @Name, @CategoryId, 0, @AssetProfileId, @AuditEnable, @IsPortable)
					return (SELECT @@Identity)
				END
			ELSE
				return -1
		END
	ELSE
		BEGIN
					IF @MergeFlag  IS NULL 
					BEGIN
						IF NOT EXISTS(SELECT 'true' FROM AssetTypes WHERE DepartmentId=@DId AND Name=@Name And CategoryId=@CategoryId AND id <> @TypeId)
						BEGIN
							UPDATE AssetTypes SET Name=@Name, AssetProfileId=@AssetProfileId, EnableAudit=@AuditEnable, cfgPortable = @IsPortable WHERE DepartmentId=@DId AND id = @TypeId							
							return @TypeId
						END
						ELSE
						BEGIN
							return -1
						END
					END
					ELSE
						BEGIN
							IF @MergeTypeId  IS NULL
							BEGIN
								return 0
							END 
							ELSE
							BEGIN
								IF @MergeTypeId<=0 
								BEGIN
									return 0
								END
							END

							BEGIN TRANSACTION
							DECLARE @IntoTypeId int
							DECLARE @MakeId int
							DECLARE @MergeMakeId int
							DECLARE @MergeMakeName nvarchar(50)
							
							DECLARE @Crsr CURSOR
							SET @IntoTypeId=@MergeTypeId /*(SELECT id FROM AssetTypes WHERE DepartmentId=@DId AND Name=@Name And CategoryId=@CategoryId AND id <> @TypeId)*/
							SET @Crsr = CURSOR FOR SELECT id, Make FROM AssetMakes WHERE DepartmentId=@DId AND TypeId=@TypeId FOR READ ONLY
							OPEN @Crsr
							FETCH NEXT FROM @Crsr INTO @MergeMakeId, @MergeMakeName
							WHILE @@FETCH_STATUS <> -1
							BEGIN
								IF EXISTS(SELECT 'true' FROM AssetMakes WHERE DepartmentId=@DId AND TypeId=@IntoTypeId AND Make=@MergeMakeName)
									SET @MakeId = (SELECT id FROM AssetMakes WHERE DepartmentId=@DId AND TypeId=@IntoTypeId AND Make=@MergeMakeName)
								ELSE
									BEGIN
										/* WARNING: INSERT MERGE MAKE ICON */
										INSERT INTO AssetMakes (TypeId, DepartmentId, Make) VALUES (@IntoTypeId, @DId, @MergeMakeName)
										SET @MakeId = (SELECT @@Identity)
										IF @@ERROR<>0 
										BEGIN
											ROLLBACK TRANSACTION
											return -4						
										END

										Declare @object_source_copy_id1 nvarchar(255)
										Select @object_source_copy_id1 = Convert(nvarchar(255), @MergeMakeId)
										Declare @object_dest_copy_id1 nvarchar(255)
										Select @object_dest_copy_id1 = Convert(nvarchar(255), @MakeId)
										exec sp_FileService_CopyFiles @DId, @object_source_copy_id1, @object_dest_copy_id1, 'assets-makes-icon'										
									END
									/*RUN SUB LOOP FOR Models*/	
										DECLARE @ModelId int
										DECLARE @MergeModelId int
										DECLARE @MergeModelName nvarchar(50)
										DECLARE @MergeModelLinks nvarchar(max)
										DECLARE @Crsr2 CURSOR
									
										SET @Crsr2 = CURSOR FOR SELECT id, Model, Links FROM AssetModels WHERE DepartmentId=@DId AND MakeId=@MergeMakeId FOR READ ONLY
										OPEN @Crsr2
										FETCH NEXT FROM @Crsr2 INTO @MergeModelId, @MergeModelName,  @MergeModelLinks
										WHILE @@FETCH_STATUS <> -1
										BEGIN
											IF EXISTS(SELECT 'true' FROM AssetModels WHERE DepartmentId=@DId AND MakeId=@MakeId AND Model=@MergeModelName)
												SET @ModelId = (SELECT id FROM AssetModels WHERE DepartmentId=@DId AND MakeId=@MakeId AND Model=@MergeModelName)
											ELSE
												BEGIN
													/* WARNING: INSERT MERGE MODEL ICON */
													INSERT INTO AssetModels (MakeId, DepartmentId, Model, Links) VALUES (@MakeId, @DId, @MergeModelName, @MergeModelLinks)
													SET @ModelId = (SELECT @@Identity)
													IF @@ERROR<>0 
													BEGIN
														ROLLBACK TRANSACTION
														return -4						
													END
			
													Declare @object_source_copy_id2 nvarchar(255)
													Select @object_source_copy_id2 = Convert(nvarchar(255), @MergeModelId)
													Declare @object_dest_copy_id2 nvarchar(255)
													Select @object_dest_copy_id2 = Convert(nvarchar(255), @ModelId)
													exec sp_FileService_CopyFiles @DId, @object_source_copy_id2, @object_dest_copy_id2, 'assets-models-icon'										

												END
											
											UPDATE Assets SET ModelId=@ModelId WHERE DepartmentId=@DId AND ModelId=@MergeModelId
											IF @@ERROR<>0 
											BEGIN
												ROLLBACK TRANSACTION
												return -4						
											END

											DELETE FROM AssetModels WHERE DepartmentId=@DId AND id=@MergeModelId
											IF @@ERROR<>0 
											BEGIN
												ROLLBACK TRANSACTION
												return -4						
											END
											
											FETCH NEXT FROM @Crsr2 INTO @MergeModelId, @MergeModelName, @MergeModelLinks
										END
										CLOSE @Crsr2
										DEALLOCATE @Crsr2
									/*End SUB LOOP*/
									IF NOT EXISTS(SELECT 'true' FROM AssetModels WHERE DepartmentId=@DId AND MakeId=@MergeMakeId)	
										BEGIN
											UPDATE Assets SET MakeId=@MakeId WHERE DepartmentId=@DId AND MakeId=@MergeMakeId
											IF @@ERROR<>0 
											BEGIN
												ROLLBACK TRANSACTION
												return -4						
											END

											DELETE FROM AssetMakes WHERE DepartmentId=@DId AND id=@MergeMakeId
											IF @@ERROR<>0 
											BEGIN
												ROLLBACK TRANSACTION
												return -4						
											END
										END
									ELSE
										BEGIN	
											ROLLBACK TRANSACTION
											return -4
										END
								
								FETCH NEXT FROM @Crsr INTO @MergeMakeId, @MergeMakeName
							END
							CLOSE @Crsr
							DEALLOCATE @Crsr
						
							/*Test to make sure no more sub makes are attached to the merge model*/
							IF NOT EXISTS(SELECT 'true' FROM AssetMakes WHERE DepartmentId=@DId AND TypeId=@TypeId)
								BEGIN
									UPDATE Assets SET TypeId = @IntoTypeId WHERE DepartmentId=@DId AND TypeId=@TypeId
									IF @@ERROR<>0 
									BEGIN
										ROLLBACK TRANSACTION
										return -4						
									END

									DECLARE @PAssetTypeId int
									DECLARE @PAssetTypeTypeId int
									DECLARE @PAssetTypePropertyName nvarchar(50)
									DECLARE @PAssetTypeDataType int
									DECLARE @PAssetTypeEnum nvarchar(512)
									DECLARE @PAssetTypeDesc nvarchar(255)

									DECLARE @Crsr3 CURSOR
									
									SET @Crsr3 = CURSOR FOR SELECT id, AssetTypeId, Name, DataType, Enumeration, Description FROM AssetTypeProperties WHERE DId=@DId AND AssetTypeId=@TypeId FOR READ ONLY
									OPEN @Crsr3
									FETCH NEXT FROM @Crsr3 INTO @PAssetTypeId, @PAssetTypeTypeId, @PAssetTypePropertyName, @PAssetTypeDataType, @PAssetTypeEnum, @PAssetTypeDesc
									WHILE @@FETCH_STATUS <> -1
									BEGIN
										Declare @PNewAssetTypeId int
										DECLARE @source_temp_type int
										DECLARE @dest_temp_type int
										SET @source_temp_type = (SELECT DataType FROM AssetTypeProperties WHERE DId=@DId AND AssetTypeId=@TypeId and Name=@PAssetTypePropertyName)
										SET @dest_temp_type = (SELECT DataType FROM AssetTypeProperties WHERE DId=@DId AND AssetTypeId=@IntoTypeId and Name=@PAssetTypePropertyName)

										IF EXISTS(SELECT 'true' FROM AssetTypeProperties WHERE DId=@DId AND AssetTypeId=@IntoTypeId and Name=@PAssetTypePropertyName)
										BEGIN												
											if (@source_temp_type<>@dest_temp_type)
											Begin
												Update AssetTypeProperties SET DataType=0 WHERE DId=@DId AND AssetTypeId=@IntoTypeId and Name=@PAssetTypePropertyName
												IF @@ERROR<>0 
												BEGIN
													ROLLBACK TRANSACTION
													return -4						
												END
											End
											SET @PNewAssetTypeId = (SELECT Id FROM AssetTypeProperties WHERE DId=@DId AND AssetTypeId=@IntoTypeId and Name=@PAssetTypePropertyName)
											Update AssetPropertyValues Set AssetTypePropertyId=@PNewAssetTypeId Where DId=@DId And AssetTypePropertyId=@PAssetTypeId
											IF @@ERROR<>0 
											BEGIN
												ROLLBACK TRANSACTION
												return -4						
											END
										END
										ELSE
											BEGIN
												INSERT INTO AssetTypeProperties (DId, AssetTypeId, Name, DataType, Enumeration, Description) VALUES (@DId, @IntoTypeId, @PAssetTypePropertyName, @PAssetTypeDataType, @PAssetTypeEnum, @PAssetTypeDesc)
												SET @PNewAssetTypeId = (SELECT @@Identity)
												IF @@ERROR<>0 
												BEGIN
													ROLLBACK TRANSACTION
													return -4						
												END

												Update AssetPropertyValues Set AssetTypePropertyId=@PNewAssetTypeId Where DId=@DId And AssetTypePropertyId=@PAssetTypeId
												IF @@ERROR<>0 
												BEGIN
													ROLLBACK TRANSACTION
													return -4						
												END
											END
												
																																										
										FETCH NEXT FROM @Crsr3 INTO @PAssetTypeId, @PAssetTypeTypeId, @PAssetTypePropertyName, @PAssetTypeDataType, @PAssetTypeEnum, @PAssetTypeDesc
									END
									CLOSE @Crsr3
									DEALLOCATE @Crsr3

									DELETE FROM AssetTypeProperties WHERE DId=@DId AND AssetTypeId=@TypeId									
									IF @@ERROR<>0 
									BEGIN
										ROLLBACK TRANSACTION
										return -4						
									END

									Update AssetTypeCustCap Set TypeId=@IntoTypeId Where TypeId=@TypeId
									IF @@ERROR<>0 
									BEGIN
										ROLLBACK TRANSACTION
										return -4						
									END

									DELETE FROM AssetTypes WHERE DepartmentId=@DId AND id=@TypeId
									IF @@ERROR<>0 
									BEGIN
										ROLLBACK TRANSACTION
										return -4						
									END
								END
							ELSE
								BEGIN
									ROLLBACK TRANSACTION
									return -4
								END
							
							
							COMMIT TRANSACTION
							return -3
						END
			END
GO
PRINT N'Creating [dbo].[sp_UpdateAssetTypeMakeModel]...';


GO
CREATE Procedure dbo.sp_UpdateAssetTypeMakeModel
	(
		@DepartmentId int,
		@AssetId int,
		@AssetCategory int,
		@AssetType int,
		@AssetMake int,
		@AssetModel int
	)
As
	UPDATE Assets SET CategoryId = @AssetCategory, TypeId = @AssetType, MakeId = @AssetMake, ModelId = @AssetModel WHERE DepartmentId = @DepartmentId AND id = @AssetId
	--VGOOZ 08-MAY-2006: Tkt #3393 - Asset Manager Bug in the Custom Text
	UPDATE AssetTypeCustFields SET TypeId=@AssetType WHERE DepartmentId=@DepartmentId AND AssetId=@AssetId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateAssetTypeProperty]...';


GO
CREATE Procedure dbo.sp_UpdateAssetTypeProperty
	(
		@Id int OUTPUT,
		@DId int,
		@AssetTypeId int,
		@Name nvarchar(50),
		@DataType int,
		@Enumeration nvarchar(512),
		@Description nvarchar(255)
	)

As
	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO AssetTypeProperties (DId, AssetTypeId, Name, DataType, Enumeration, Description) VALUES (@DId, @AssetTypeId, @Name,  @DataType, @Enumeration, @Description)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE AssetTypeProperties SET AssetTypeId=@AssetTypeId, Name=@Name, DataType=@DataType, Enumeration=@Enumeration, Description=@Description WHERE Id=@Id AND DId=@DId
GO
PRINT N'Creating [dbo].[sp_UpdateAssetVendor]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAssetVendor
	(
		@DId int,
		@VendorId int,
		@intAssetId int,
		@vchVendorType varchar(15), /*pven or wven*/
		@vchName nvarchar(50),
		@vchPhone nvarchar(20),
		@vchFax nvarchar(20),
		@vchAccountNumber nvarchar(50),
		@vchNotes nvarchar(2500)
	)
AS
	DECLARE @Return int
		/*
	RETURNS
	- 1 - Duplicate Found
	0 Update Success
	id# insert success
	*/	
	
	
	IF @VendorId = 0 /* ADD */
		BEGIN
			IF NOT EXISTS(SELECT 'true' FROM tbl_vendors WHERE company_id=@DId AND name=@vchName)
				BEGIN
					INSERT INTO tbl_vendors (company_id,name,phone,fax,AccountNumber,notes) VALUES (@DId,@vchName,@vchPhone,@vchFax,@vchAccountNumber,@vchNotes)
					
					SET @VendorId=(SELECT @@Identity)
					
					IF @vchVendorType='pven'
						UPDATE Assets SET VendorId=@VendorId WHERE DepartmentId=@DId AND Id=@intAssetId
						
					IF @vchVendorType='wven'
						UPDATE Assets SET WarrantyVendor=@VendorId WHERE DepartmentId=@DId AND Id=@intAssetId
					
					Return @VendorId
				END
			ELSE
				SET @Return = -1
		END
	ELSE
		BEGIN
			IF NOT EXISTS(SELECT 'true' FROM tbl_vendors WHERE company_id=@DId AND name=@vchName AND id<>@VendorId)
				BEGIN
					UPDATE tbl_vendors SET name=@vchName,phone=@vchPhone,fax=@vchFax,AccountNumber=@vchAccountNumber,notes=@vchNotes WHERE company_id=@DId AND id=@VendorId
				END
			ELSE
				SET @Return = -1
		END
		
		
	RETURN @Return
GO
PRINT N'Creating [dbo].[sp_UpdateCategory]...';


GO
CREATE Procedure dbo.sp_UpdateCategory
	(
		@DepartmentId int,
		@CategoryId int,
		@CategoryName nvarchar(50),
		@btInactive bit,
		@UId int,
		@CheckOnlyOpen bit
	)

AS
	
	DECLARE @IsSavedAsInactive bit
	DECLARE @SavedName nvarchar(50)
	
	SELECT @IsSavedAsInactive = btInactive,@SavedName=vchName FROM CreationCats WHERE DId = @DepartmentId AND Id = @CategoryId
	
	IF @IsSavedAsInactive = @btInactive AND @SavedName=@CategoryName
		RETURN 0 -- Didn't changed, don't need to da anything
	
	IF @CategoryName IS NOT NULL -- update name
		IF EXISTS(Select 'true' FROM CreationCats WHERE DId = @DepartmentId AND vchName = @CategoryName AND Id<>@CategoryId)
			BEGIN
				RAISERROR('Can''t update Creation Category! The %s already exists.',16,1, @CategoryName)
				RETURN
			END
		ELSE
			UPDATE CreationCats SET vchName = @CategoryName, intUpdatedBy=@UId, dtUpdated=getutcdate() WHERE id = @CategoryId AND DId = @DepartmentId		

	

	IF @IsSavedAsInactive = 0 AND @btInactive = 1 -- inactivating category
		BEGIN
			IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id = @DepartmentId AND CreationCatsId = @CategoryID  AND (@CheckOnlyOpen = 0 OR (@CheckOnlyOpen = 1 AND Status<>'Closed')))
				IF NOT EXISTS (SELECT 'true' FROM CreationCats WHERE DId = @DepartmentId AND Id <> @CategoryId AND btInactive = 0)
					RETURN 1 -- has tickets but don't have at least one another active category to transfer these tickets to
				ELSE
					RETURN 2 -- has tickets assigned, and have another active cats to transfer these tickets to
			ELSE
				UPDATE CreationCats SET btInactive=@btInactive, intUpdatedBy=@UId, dtUpdated=getutcdate() WHERE id = @CategoryId AND DId = @DepartmentId
		END
	ELSE
		IF @IsSavedAsInactive = 1 AND @btInactive = 0 -- activating category
			UPDATE CreationCats SET btInactive=@btInactive, intUpdatedBy=@UId, dtUpdated=getutcdate() WHERE id = @CategoryId AND DId = @DepartmentId		

RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateClass]...';


GO


CREATE Procedure [dbo].[sp_UpdateClass]
(
		@DId int,
		@ParentId int,
		@ClassName nvarchar(50),
		@LastResortTechId int,
		@tintClassType tinyint,
		@ConfigDistributedRouting tinyint,
		@ClassId int = -1,
		@bitRestrictToTechs bit = 0,
		@txtDesc ntext = null,
		@bitAllowEmailParsing bit,
		@PriorityId int,
		@tintLevelOverride tinyint, 
		@btInactive bit,
		@KBPortal bit = 1,
		@KBPortalAlias nvarchar(75),
		@KBPortalOrder tinyint = NULL
	)

As
	
	
	IF @ClassId <> -1
	BEGIN
		IF NOT EXISTS(SELECT 'true' from tbl_class WHERE company_id = @DId AND id<>@ClassId AND ISNULL(ParentId,0)= ISNULL(@ParentId,0) AND [Name] = @ClassName)
		BEGIN
			DECLARE @ClassType2 tinyint
			SET @ClassType2 = (SELECT tintClassType FROM tbl_class WHERE company_id = @DId AND id = @ClassId)
		
			UPDATE tbl_class SET 
				ParentId=@ParentId,
				Name = @ClassName,
				LastResortTechId = @LastResortTechId,
				tintClassType = @tintClassType,
				ConfigDistributedRouting = @ConfigDistributedRouting,
				bitRestrictToTechs = @bitRestrictToTechs,
				txtDesc = @txtDesc,
				bitAllowEmailParsing = @bitAllowEmailParsing,
				intPriorityId = @PriorityId,
				tintLevelOverride = @tintLevelOverride, 
				btInactive=@btInactive,
				KBPortal = @KBPortal,
				KBPortalAlias = @KBPortalAlias,
				KBPortalOrder = @KBPortalOrder
			WHERE company_id=@DId AND id = @ClassId
		
			if @tintClassType <> @ClassType2
				BEGIN
					DELETE FROM tbl_ClassTechnicianJctn WHERE class_id = @ClassID
				END
		
			return
		END
		ELSE
			raiserror('Can''t add class. The %s already exists.',16,1, @ClassName)
	END
	ELSE
		BEGIN
			IF NOT EXISTS(SELECT 'true' from tbl_class WHERE company_id = @DId AND ISNULL(ParentId,0)= ISNULL(@ParentId,0) AND [Name] = @ClassName )
				BEGIN
					INSERT INTO tbl_class 
							(
							company_id,
							ParentId,
							[Name],
							LastResortTechId, 
							tintClassType,
							ConfigDistributedRouting,
							bitRestrictToTechs,
							intPriorityId,
							tintLevelOverride, 
							btInactive,
							KBPortal,
							KBPortalAlias,
							KBPortalOrder
							)
						VALUES
							(
							@DId,
							@ParentId,
							@ClassName,
							@LastResortTechId,
							@tintClassType,
							@ConfigDistributedRouting,
							@bitRestrictToTechs,
							@PriorityId,
							@tintLevelOverride,
							@btInactive,
							@KBPortal,
							@KBPortalAlias,
							@KBPortalOrder
							)
							
					return (SELECT ISNULL(@@identity, -1))
				END
			ELSE
				raiserror('Can''t add class. The %s already exists.',16,1, @ClassName)
		END
GO
PRINT N'Creating [dbo].[sp_UpdateClassLevel]...';


GO

CREATE PROCEDURE sp_UpdateClassLevel
	(
		@DId int,
		@intClassId int,
		@intClassLvlId int,
		@intLastResortId int,
		@tintRoutingType tinyint = null,
		@tintClassType tinyint
	)
AS
	SET NOCOUNT ON
	IF @tintRoutingType = null OR @tintClassType = 2
		SET @tintRoutingType = 1
		
	DECLARE @tintOldClassType tinyint
	SET @tintOldClassType = (SELECT tintClassType FROM ClassLevels WHERE DId=@DId AND ClassId=@intClassId AND Id=@intClassLvlId)
	
	UPDATE ClassLevels SET intLastResortId=@intLastResortId, tintDistributedRouting=@tintRoutingType, tintClassType=@tintClassType
	WHERE DId=@DId AND ClassId=@intClassId AND Id=@intClassLvlId
	
	IF @tintOldClassType <> @tintClassType
		DELETE FROM ClassLevelsTechJctn WHERE DId=@DId AND ClassId=@intClassId AND intClssLvlId=@intClassLvlId
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateClassSubTechs]...';


GO
CREATE Procedure dbo.sp_UpdateClassSubTechs
	(
		@DId int,
		@ClassId int,
		@UserId int,
		@LocationId int = null,
		@intClssLvlId int
	)
As
	if @intClssLvlId = 0
		BEGIN
			if @LocationId is null
				BEGIN
					IF NOT EXISTS(SELECT 'true' FROM tbl_classtechnicianjctn WHERE class_id = @ClassID AND LoginCompanyJunc_id = @UserId)
						BEGIN
							INSERT INTO tbl_classtechnicianjctn (
								class_id,LoginCompanyJunc_id)
								VALUES (
								@ClassId, @UserId)
						END
				END
			ELSE
				BEGIN
					IF NOT EXISTS(SELECT 'true' FROM tbl_classtechnicianjctn WHERE class_id = @ClassID AND LoginCompanyJunc_id = @UserId AND LocationId = @LocationId)
						BEGIN
							INSERT INTO tbl_classtechnicianjctn (
								class_id, LoginCompanyJunc_id, LocationId)
								VALUES (
								@ClassId, @UserId, @LocationId)
						END
				END
		END
	ELSE
		BEGIN
			if @LocationId is null
				BEGIN
					IF NOT EXISTS(SELECT 'true' FROM ClassLevelsTechJctn WHERE DId=@DId AND ClassId=@ClassId AND intClssLvlId=@intClssLvlId AND intUId=@UserId)
						INSERT INTO ClassLevelsTechJctn (DId, ClassId, intClssLvlId, intUId) VALUES (@DId, @ClassId, @intClssLvlId, @UserId)
				END
			ELSE	
				BEGIN
					IF NOT EXISTS(SELECT 'true' FROM ClassLevelsTechJctn WHERE DId=@DId AND ClassId=@ClassId AND intClssLvlId=@intClssLvlId AND intUId=@UserId AND LocationId=@LocationId)
						INSERT INTO ClassLevelsTechJctn (DId, ClassId, intClssLvlId, intUId, LocationId) VALUES (@DId, @ClassId, @intClssLvlId, @UserId, @LocationId)
				END
		END
	
return
GO
PRINT N'Creating [dbo].[sp_UpdateConfigValueStr]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateConfigValueStr]
(
	@DId int,
	@ValueName nvarchar(255),
	@Value nvarchar(max)
)
AS
BEGIN
	DECLARE @SettingId uniqueidentifier
	IF @ValueName='LastTicketNumber'
		SET @SettingId='9EE89FE5-1D0F-408E-AB8C-B859180E1F5F'
	ELSE IF @ValueName='CreationCatId'
		SET @SettingId='12E285B9-2380-4B8F-BE5D-7BF6A3AB9DBC'
	ELSE IF @ValueName='TktExportdtStart'
		SET @SettingId='8E4FBA52-D502-47CD-BB4E-31E67E2B91B4'
	ELSE IF @ValueName='TktExportdtEnd'
		SET @SettingId='27F56926-C717-4BC9-8A8E-16C0A45DDEB4'
	ELSE IF @ValueName='FBClientId'
		SET @SettingId='B2D0C6BF-C93F-491C-91B4-701D8470E3B6'
	ELSE IF @ValueName='FBDefaultProjectId'
		SET @SettingId='B450C6BF-CA3F-491C-91B4-40145470E3B6'

	DECLARE @InstId uniqueidentifier
	SELECT @InstId = company_guid FROM tbl_company WHERE company_id = @DId

	IF NOT EXISTS(SELECT * FROM Mc_SettingsValues WHERE InstanceId = @InstId AND SettingId = @SettingId)
	BEGIN
		DECLARE @OrgId uniqueidentifier
		SELECT @OrgId=OrganizationId FROM Mc_Instance WHERE InstanceId=@InstId 
		INSERT INTO Mc_SettingsValues (SettingValueId, OrganizationId, InstanceId, SettingId, Value) VALUES (NEWID(), @OrgId, @InstId, @SettingId, @Value)
	END	
	ELSE	 
		UPDATE Mc_SettingsValues SET Value = @Value WHERE InstanceId = @InstId AND SettingId = @SettingId	
END
GO
PRINT N'Creating [dbo].[sp_UpdateCustomField]...';


GO
CREATE Procedure dbo.sp_UpdateCustomField
	(
		@DepartmentId int,
		@FieldId int,
		@Caption nvarchar(50),
		@Type tinyint,
		@Choices ntext = null,
		@Required bit,
		@DisableUserEditing bit,
		@DefaultValue nvarchar(50),
		@Position int,
		@IsForTech bit,
		@Class_id int = NULL
	)
As
--VGOOZ 05-SEP-2005: tkt #2862 - Users editing custom fields (Added support DisableUserEditing field)
	if @FieldId = 0
		BEGIN
			INSERT INTO CustomFields (DepartmentId, Caption, Type, Choices, Required, DefaultValue, [Position], DisableUserEditing, IsForTech, class_id) VALUES (@DepartmentId, @Caption, @Type, @Choices, @Required, @DefaultValue, @Position, @DisableUserEditing, @IsForTech, @Class_id)
		END
	else
		BEGIN
			UPDATE CustomFields SET Caption=@Caption, Type=@Type, Choices=@Choices, Required=@Required, DefaultValue=@DefaultValue, [Position]=@Position, DisableUserEditing=@DisableUserEditing, IsForTech=@IsForTech, class_id=@Class_id WHERE Id = @FieldId AND DepartmentId = @DepartmentId	
		END
	return
GO
PRINT N'Creating [dbo].[sp_UpdateCustomFieldsXML]...';


GO
CREATE Procedure dbo.sp_UpdateCustomFieldsXML
	(
		@DepartmentId int,
		@TicketId int,
		@CustXML ntext
	)
As
	UPDATE tbl_ticket SET CustomXML = @CustXML, UpdatedTime=getutcdate() WHERE id = @TicketId AND company_id = @DepartmentId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateCustomName]...';


GO
CREATE PROCEDURE sp_UpdateCustomName
	(
		@DId int,
		@TermNodeName nvarchar(32),
		@TermVariantId int
	)
AS
	DECLARE @TermId INT
	SET @TermId = (SELECT TermId FROM Terms WHERE TermNodeName=@TermNodeName)

	DELETE FROM CustomNames WHERE CompanyId=@DId AND TermId = @TermId

	IF @TermVariantId > 1
		INSERT INTO CustomNames (CompanyId, TermId, TermVariantId) VALUES (@DId, @TermId, @TermVariantId)

	RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdateCustomText]...';


GO

CREATE PROCEDURE sp_UpdateCustomText
	(
		@DId int,
		@Type nvarchar(25),
		@txtText ntext
	)
AS
	IF EXISTS(SELECT 'true' FROM CustomText WHERE DId=@DId AND Type=@Type)
		UPDATE CustomText SET txtText=@txtText WHERE DId=@DId AND Type=@Type
	ELSE
		INSERT INTO CustomText (DId, Type, txtText) VALUES (@DId, @Type, @txtText)
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdateDaySummaryTime]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateDaySummaryTime]
(	
	@Id int,
	@DepartmentID int,	
	@UserID int,	
	@Date smalldatetime,		
	@StartTime smalldatetime,
	@StopTime smalldatetime,
	@TimeOut decimal(10, 4),
	@TotalDayTime decimal(10, 4),
	@UpdatedTime smalldatetime,
	@UpdatedBy int,
	@TimeOffset decimal(18, 0)
)
AS
	
	UPDATE [DaySummaryTime]
	SET	
		[Date] = @Date,
		[StartTime] = @StartTime,
		[StopTime] = @StopTime,
		[TimeOut] = @TimeOut,
		[TotalDayTime] = @TotalDayTime,		
		[UpdatedDate] = @UpdatedTime,
		[UpdatedBy] = @UpdatedBy,		
		[LocalTimeZoneOffset] = @TimeOffset
	WHERE Id = @Id AND DepartmentId = @DepartmentID AND UserID = @UserID
GO
PRINT N'Creating [dbo].[sp_UpdateDayTimeProjectNotes]...';


GO
CREATE PROCEDURE dbo.sp_UpdateDayTimeProjectNotes
(
	@DId int,
	@Date smalldatetime,
	@UserId int,
	@AccountId int = NULL,
	@ProjectId int = NULL,
	@CompletedNotes nvarchar(512) = NULL,
	@NextStepsNotes nvarchar(512) = NULL
)
AS

	DECLARE @DayTimeProjectNotesID int
	
	SET @DayTimeProjectNotesID = 0
	
	SELECT 
		@DayTimeProjectNotesID = Id
	FROM 
		DayTimeProjectNotes 
	WHERE 
		DId=@DId 
		AND UserId = @UserId
		AND MONTH(Date) = MONTH(@Date) 
		AND YEAR(Date) = YEAR(@Date) 
		AND DAY(Date) = DAY(@Date)
		AND ISNULL(AccountId, 0) = ISNULL(@AccountId, 0)
		AND ISNULL(ProjectId, 0) = ISNULL(@ProjectId, 0)
	
	IF @DayTimeProjectNotesID > 0
	 BEGIN
		UPDATE
			DayTimeProjectNotes
		SET
			CompletedNotes = @CompletedNotes,
			NextStepsNotes = @NextStepsNotes,
			UpdatedDate = getutcdate()
		WHERE	
			Id = @DayTimeProjectNotesID
	 END
	ELSE
	 BEGIN
		INSERT INTO [DayTimeProjectNotes]
           ([DId]
           ,[Date]
           ,[UserId]
           ,[AccountId]
           ,[ProjectId]
           ,[CreatedDate]
           ,[CompletedNotes]
           ,[NextStepsNotes])
     VALUES
           (@DId
           ,@Date
           ,@UserId
           ,@AccountId
           ,@ProjectId
           ,getutcdate()
           ,@CompletedNotes
           ,@NextStepsNotes)
	 END
GO
PRINT N'Creating [dbo].[sp_UpdateDefaultTimeLogs]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateDefaultTimeLogs]
	(
		@DepartmentID int,
		@TaskTypeID int
	)
AS

	UPDATE ProjectTime
	SET 
      [TaskTypeId] = @TaskTypeID
	WHERE 
		ProjectTime.DepartmentId = @DepartmentID
		AND
		ProjectTime.TasktypeId IS NULL
		AND
		ProjectTime.BillId IS NULL

	UPDATE TicketTime
	SET 
      [TaskTypeId] = @TaskTypeID
	WHERE 
		TicketTime.DepartmentId = @DepartmentID
		AND
		TicketTime.TaskTypeId IS NULL
		AND
		TicketTime.BillId IS NULL
GO
PRINT N'Creating [dbo].[sp_UpdateEmailDropBoxes]...';


GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_UpdateEmailDropBoxes]
	-- Add the parameters for the stored procedure here
	@DId int, 
	@Id int OUT,
	@PseudoId char(6),
	@DropBoxName nvarchar(50),
	@TechnicianId int,
	@ClassId int,
	@tintLevel tinyint,
	@NormalPriorityId int,
	@HighPriorityId int,
	@LowPriorityId int,
	@IsDefault bit,
	@ExternalEmail nvarchar(255)
AS
BEGIN
	IF @IsDefault=1
		UPDATE EMailParserDropBoxes SET IsDefault=0 WHERE DId=@DId
	IF @Id=0
	BEGIN
		INSERT INTO EMailParserDropBoxes (DId, PseudoId, DropBoxName, TechnicianId, ClassId, tintLevel, NormalPriorityId, HighPriorityId, LowPriorityId, IsDefault, ExternalEmail) 
			VALUES (@DId, @PseudoId, @DropBoxName, @TechnicianId, @ClassId, @tintLevel, @NormalPriorityId, @HighPriorityId, @LowPriorityId, @IsDefault, @ExternalEmail)
		SET @Id=@@IDENTITY
	END		
	ELSE
		UPDATE EMailParserDropBoxes SET PseudoId=@PseudoId, DropBoxName=@DropBoxName, TechnicianId=@TechnicianId, ClassId=@ClassId, tintLevel=@tintLevel, NormalPriorityId=@NormalPriorityId, HighPriorityId=@HighPriorityId, LowPriorityId=@LowPriorityId, IsDefault=@IsDefault, ExternalEmail=@ExternalEmail
			WHERE DId=@DId AND Id=@Id
END
GO
PRINT N'Creating [dbo].[sp_UpdateEmailDropBoxExternalEmail]...';


GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_UpdateEmailDropBoxExternalEmail]
	-- Add the parameters for the stored procedure here
	@DId int,
	@PseudoId char(6),
	@ExternalEmail nvarchar(255)
AS
BEGIN
	UPDATE EMailParserDropBoxes SET ExternalEmail=@ExternalEmail WHERE DId=@DId AND PseudoId=@PseudoId
END
GO
PRINT N'Creating [dbo].[sp_UpdateEmailPref]...';


GO

CREATE Procedure sp_UpdateEmailPref
	(
		@DepartmentId int,
		@UserId int,
		@configEmailNewTicket bit,
		@configEmailTicketResponse bit,
		@configEmailUserNewTicket bit,
		@configEmailUserTicketResponse bit
	)
As
	UPDATE tbl_LoginCompanyJunc SET
		configEmailNewTicket = @configEmailNewTicket,
		configEmailTicketResponse = @configEmailTicketResponse,
		configEmailUserNewTicket = @configEmailUserNewTicket,
		configEmailUserTicketResponse = @configEmailUserTicketResponse
	WHERE id = @UserId AND company_id = @DepartmentId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateEmailSuffix]...';


GO
CREATE PROCEDURE dbo.sp_UpdateEmailSuffix
	(
		@DId int,
		@strSearch nvarchar(100),
		@strReplace nvarchar(100)	
	)
AS
	SET NOCOUNT ON
	
	/*
	3-JAN-2006:JV-This select statement can be used to find duplicate accounts for the target/replaced email address. If duplicates of the target
	address are found the replace function below will skip these accounts.  The user should be informed of duplicate accounts.
	
	SELECT REPLACE(tbl_logins.email, @strSearch, @strReplace ) FROM tbl_logins WHERE tbl_logins.email like '%stjohns.k21.fl.us' OR tbl_logins.email like '%stjohns.k12.fl.us'
	GROUP BY REPLACE(tbl_logins.email, @strSearch, @strReplace )
	HAVING count(REPLACE(tbl_logins.email, @strSearch, @strReplace )) > 1
	
	
	
	
	
	*/
	
	
	UPDATE tbl_logins SET tbl_logins.email = REPLACE(lo.email, @strSearch, @strReplace )
	FROM tbl_logins lo, tbl_LoginCompanyJunc
	WHERE tbl_LoginCompanyJunc.company_id=@DId AND tbl_LoginCompanyJunc.login_id=lo.id AND lo.email like '%@'+@strSearch
	AND NOT EXISTS (SELECT 'true' FROM tbl_logins lo2 WHERE lo2.email = REPLACE(lo.email, @strSearch, @strReplace ))
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateFolder]...';


GO

CREATE Procedure sp_UpdateFolder
	(
		@DId int,
		@vchName nvarchar(50),
		@Id int,
		@ParentId int
	)
As
	
	IF NOT EXISTS(SELECT 'true' FROM Folders WHERE DId=@DId AND ParentId=@ParentId AND vchName=@vchName)
		BEGIN
			UPDATE Folders SET vchName=@vchName WHERE DId=@DId AND id=@Id
			return 1
		END
	ELSE
		return 0
GO
PRINT N'Creating [dbo].[sp_UpdateHoliday]...';


GO

CREATE PROCEDURE sp_UpdateHoliday
	(
		@DId int,
		@Id int,
		@Name nvarchar(50),
		@dtStart smalldatetime,
		@dtStop smalldatetime
	)
AS
	SET NOCOUNT ON
	/*Return -1 - Holiday already exists*/
	IF EXISTS(SELECT 'true' FROM Holidays WHERE DId=@DId AND dtStart=@dtStart AND id<>@Id) 
		RETURN -1
	ELSE
		BEGIN
			if @Id = -1 
				BEGIN
					INSERT INTO Holidays (DId, Name, dtStart, dtStop) VALUES (@Did, @Name, @dtStart, @dtStop)
					RETURN (SELECT @@Identity)
				END
			ELSE
				BEGIN
					UPDATE Holidays SET Name=@Name, dtStart=@dtStart, dtStop=@dtStop WHERE DId=@DId AND Id=@Id
					RETURN @Id
				END
		END
GO
PRINT N'Creating [dbo].[sp_UpdateJunkMailRule]...';


GO
CREATE PROCEDURE dbo.sp_UpdateJunkMailRule
	(
		@MO varchar(1),
		@DId int,
		@UId int,
		@Id int,
		@vchEmail nvarchar(100)=null,
		@vchSubject nvarchar(150)=null
	)
AS
	IF @MO='u'
		BEGIN
			If @Id = 0
				BEGIN
					INSERT INTO JunkMailRules (DId, dtUpdated, intUId, vchEmail, vchSubject) VALUES (@DId, getutcdate(), @UId, @vchEmail, @vchSubject)
				END
			ELSE
				BEGIN
					UPDATE JunkMailRules SET dtUpdated=getutcdate(), intUId=@UId, vchEmail=@vchEmail, vchSubject=@vchSubject WHERE DId=@DId AND Id=@Id
				END
			RETURN 
		END
	
	IF @MO='d'
		BEGIN
			DELETE FROM JunkMailRules WHERE DId=@DId AND Id=@Id
		ENd
GO
PRINT N'Creating [dbo].[sp_UpdateKBArticle]...';


GO
CREATE Procedure dbo.sp_UpdateKBArticle
	(
		@Departmentid int,
		@KBId int,
		@UserId int,
		@FullName nvarchar(75),
		@GlobalKB bit,
		@Subject nvarchar(150),
		@Symptom ntext = null,
		@Cause ntext = null,
		@Resolution ntext
	)
As
	if @KBid = 0
		BEGIN
			INSERT INTO tbl_Knowledgebase (LoginCompanyJunc_id, fullname, subject, symptom, cause, resolution, dtDate, globalknowledgebase, DepartmentId) VALUES
				(@UserId, @FullName, @Subject, @Symptom, @Cause, @Resolution, getutcdate(), @GlobalKB, @DepartmentId)
			
			return (SELECT @@Identity)
		END
	ELSE
		BEGIN
			UPDATE tbl_Knowledgebase SET LoginCompanyJunc_id=@UserId, fullname=@FullName, subject=@Subject, symptom=@Symptom, cause=@Cause, resolution=@Resolution, dtDate=getutcdate(), globalknowledgebase=@GlobalKB WHERE id = @KBid AND DepartmentId=@DepartmentId
			return @KBId
		END
GO
PRINT N'Creating [dbo].[sp_UpdateKBRateSum]...';


GO
CREATE PROCEDURE dbo.sp_UpdateKBRateSum
(
		@DId int,
		@TktLogID int,
		@IncreaseVal int
)
AS
	DECLARE @KBRateSum int
	
	SELECT
		@KBRateSum = ISNULL(KBRateSum, 0) + @IncreaseVal
	FROM 
		TicketLogs 
	WHERE 
		DId = @DId 
		AND 
		Id = @TktLogID
	
	UPDATE
		TicketLogs
	SET
		KBRateSum = @KBRateSum
	WHERE
		DId = @DId 
		AND 
		Id = @TktLogID
GO
PRINT N'Creating [dbo].[sp_UpdateLevel]...';


GO
CREATE PROCEDURE dbo.sp_UpdateLevel
	(
		@Mode tinyint, /* 1 = Update, 2 = Select*/
		@DId int,
		@tintLevel int,
		@LName nvarchar(50) output, --MRUDKOVSKI: 17-MAY-2006 - Ticket #3403 - Add Field - Level Name
		@Desc nvarchar(2000) OUTPUT,
		@tintRoutingType tinyint OUTPUT,
		@intLastResortId int OUTPUT
	)
AS
	IF @Mode = 1
		BEGIN
			--MRUDKOVSKI: 17-MAY-2006 - Ticket #3403 - Add Field - Level Name
			UPDATE TktLevels SET LevelName=@LName, Description=@Desc, tintRoutingType=@tintRoutingType, intLastResortId=@intLastResortId WHERE DId=@DId AND tintLevel=@tintLevel
		END
	ELSE
		BEGIN
			--MRUDKOVSKI: 17-MAY-2006 - Ticket #3403 - Add Field - Level Name
			SELECT @LName=LevelName, @Desc=Description, @tintRoutingType=tintRoutingType, @intLastResortId=intLastResortId FROM TktLevels WHERE DId=@DId AND tintLevel=@tintLevel
		END
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateLevelDefault]...';


GO

CREATE PROCEDURE sp_UpdateLevelDefault
	(
		@DId int,
		@tintLevel tinyint
	)
AS
	UPDATE TktLevels SET bitDefault = 0 WHERE DId=@DId AND tintLevel <> @tintLevel
	
	UPDATE TktLevels SET bitDefault = 1 WHERE DId=@DId AND tintLevel = @tintLevel
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateLevelTech]...';


GO

CREATE PROCEDURE sp_UpdateLevelTech
	(
		@DId int,
		@UserId int,
		@tintLevel tinyint
	)
AS
	UPDATE tbl_logincompanyJunc SET tintLevel=@tintLevel WHERE company_id=@DId AND id=@UserId
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateLocation]...';


GO
CREATE Procedure dbo.sp_UpdateLocation
	(
		@Id int OUTPUT,
		@DId int,
		@ParentId int,
		@AccountId int,
		@LocationTypeId int=null,
		@Name nvarchar(50)=null,
		@Status bit=null,
		@Description nvarchar(512)=null,
		@IsDefault bit,
		@AuditorId int = null,
		@AuditPeriodDays int =null,
		@EnableLocationAudit bit =null
	)

As
begin

	IF @ParentId=0
		SET @ParentId=NULL
	IF @AccountId<=0
		SET @AccountId=NULL
		
	
		
		
	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO Locations (DId, ParentId, AccountId, LocationTypeId, Name, [Status], 
		Description,
		CfgEnableAudit,
		AuditorId,
		AuditPeriodDays
		)  VALUES (@DId, @ParentId, @AccountId, @LocationTypeId, @Name, @Status, 
		@Description,		
		CASE WHEN @EnableLocationAudit IS NULL THEN 0 ELSE @EnableLocationAudit END,
		CASE WHEN @AuditorId=0 THEN NULL ELSE @AuditorId END,
		CASE WHEN @AuditPeriodDays=0 THEN NULL ELSE @AuditPeriodDays END
		)
		SET @Id=@@IDENTITY
	END
	ELSE
	BEGIN
		
		-- check fot correct new parent
		DECLARE @TempParent int, @LoopChecked bit
		SET @LoopChecked = 0
		
		SET @TempParent = @ParentId		
		WHILE (NOT @TempParent IS NULL)
		BEGIN
			IF (@TempParent = @Id)
				SET @LoopChecked = 1
			SELECT @TempParent = l.ParentId FROM Locations l WHERE l.DId = @DId AND l.Id = @TempParent
		END
		
		IF (@LoopChecked = 1)
			RETURN
		----------------------------------
		
		DECLARE @OldStatus bit
		SELECT @OldStatus=[Status] FROM Locations WHERE Id=@Id AND DId=@DId
		IF @OldStatus<>@Status OR (@OldStatus is null and @Status is not null) OR (@OldStatus is not null and @Status is null)
		BEGIN
			IF @Status=0 or @Status is null /*deleted or archived - all child shouild change status to deleted or archived*/
				UPDATE Locations SET [Status]=@Status WHERE DId=@DId AND Id IN
				(
					SELECT DISTINCT l.Id 
					FROM Locations l
					LEFT JOIN Locations p1 ON p1.DId = @DId AND p1.Id=l.ParentId
					LEFT JOIN Locations p2 ON p2.DId = @DId AND p2.Id=p1.ParentId
					LEFT JOIN Locations p3 ON p3.DId = @DId AND p3.Id=p2.ParentId
					LEFT JOIN Locations p4 ON p4.DId = @DId AND p4.Id=p3.ParentId
					LEFT JOIN Locations p5 ON p5.DId = @DId AND p5.Id=p4.ParentId
					WHERE l.DId = @DId AND (l.[Status]=1 or (@Status=0 and l.[Status] is null)) AND (
						p1.Id=@Id OR p2.Id=@Id OR p3.Id=@Id OR p4.Id=@Id OR p5.Id=@Id)
				)
				
			ELSE /*Active*/
				UPDATE Locations SET [Status]=1 WHERE DId=@DId AND Id IN
				(
					SELECT DISTINCT l.Id 
					FROM Locations l
					LEFT JOIN Locations c1 ON c1.DId = @DId AND c1.ParentId=l.Id
					LEFT JOIN Locations c2 ON c2.DId = @DId AND c2.ParentId=c1.Id
					LEFT JOIN Locations c3 ON c3.DId = @DId AND c3.ParentId=c2.Id
					LEFT JOIN Locations c4 ON c4.DId = @DId AND c4.ParentId=c3.Id
					LEFT JOIN Locations c5 ON c5.DId = @DId AND c5.ParentId=c4.Id
					WHERE l.DId = @DId AND (l.[Status]=0  or l.[Status] is null) AND 
						(c1.Id=@Id OR c2.Id=@Id OR c3.Id=@Id OR c4.Id=@Id OR c5.Id=@Id)
				)
				
		END
		
		UPDATE Locations 
		SET ParentId=@ParentId, AccountId=@AccountId, LocationTypeId=@LocationTypeId, 
			Name=@Name, [Status]=@Status, 
			Description=@Description, 
			CfgEnableAudit = CASE WHEN @EnableLocationAudit IS NULL THEN CfgEnableAudit ELSE @EnableLocationAudit END,
			AuditorId=CASE WHEN @AuditorId=0 THEN AuditorId ELSE @AuditorId END,
			AuditPeriodDays=CASE WHEN @AuditPeriodDays=0 THEN AuditPeriodDays ELSE @AuditPeriodDays END
		WHERE Id=@Id AND DId=@DId
		
	END


	IF @IsDefault=1
		UPDATE Locations SET IsDefault=0 WHERE DId=@DId AND AccountId=@AccountId

	UPDATE Locations SET IsDefault=@IsDefault WHERE DId=@DId AND Id=@Id
end
GO
PRINT N'Creating [dbo].[sp_UpdateLocationAlias]...';


GO
CREATE Procedure dbo.sp_UpdateLocationAlias
	(
		@Id int OUTPUT,
		@DId int,
		@LocationId int,
		@AliasName nvarchar(50)
	)

As
	
	IF @Id IS NULL OR @Id=0
	BEGIN
		IF EXISTS(SELECT * FROM LocationAliases WHERE DId=@DId AND LocationId=@LocationId AND LocationAliasName=@AliasName)
			RETURN -1
		INSERT INTO LocationAliases (DId, LocationId, LocationAliasName) VALUES (@DId, @LocationId, @AliasName)
		SET @Id=@@IDENTITY
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT * FROM LocationAliases WHERE DId=@DId AND LocationId=@LocationId AND LocationAliasName=@AliasName AND Id<>@Id)
			RETURN -1
		UPDATE LocationAliases SET LocationId=@LocationId, LocationAliasName=@AliasName WHERE DId=@DId AND Id=@Id
	END
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdateLocationAuditor]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateLocationAuditor]
	(
		@DId int,
		@LocationId int,
		@AuditorId int=null,
		@AditPeriodDays int =-1,
		@EnableAudit int = -1
	)
AS
	UPDATE Locations 
	SET AuditorId = @AuditorId,
	CfgEnableAudit = case when @EnableAudit=-1 then CfgEnableAudit else case when @EnableAudit=0 then 0 else 1 end end,
	AuditPeriodDays=case when @AditPeriodDays=-1 then AuditPeriodDays else @AditPeriodDays end
	WHERE DId=@DId AND Id=@LocationId
GO
PRINT N'Creating [dbo].[sp_UpdateLocationLevel]...';


GO

CREATE PROCEDURE sp_UpdateLocationLevel
	(
		@DId int,
		@intLocationId int,
		@intLocationLvlId int,
		@intLastResortId int,
		@tintRoutingType tinyint = null,
		@tintLocationType tinyint
	)
AS
	SET NOCOUNT ON
	IF @tintRoutingType IS NULL
		SET @tintRoutingType = 1
		
	
	UPDATE LocationLevels SET intLastResortId=@intLastResortId, tintRoutingType=@tintRoutingType, tintLocationType=@tintLocationType
		WHERE DId=@DId AND LocationId=@intLocationId AND Id=@intLocationLvlId
	
	IF @tintLocationType = 3
		DELETE FROM LocationLevelsTechJctn WHERE DId=@DId AND LocationId=@intLocationId AND intLctLvlId=@intLocationLvlId
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateLocationPropertyValue]...';


GO
CREATE Procedure dbo.sp_UpdateLocationPropertyValue
	(
		@Id int OUTPUT,
		@DId int,
		@LocationId int,
		@LocationTypePropertyId int,
		@PropertyValue nvarchar(255)
	)

As
	IF @Id IS NULL OR @Id=0
		SELECT @Id=Id FROM LocationPropertyValues WHERE DId=@DId AND LocationId=@LocationId AND LocationTypePropertyId=@LocationTypePropertyId
	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO LocationPropertyValues (DId, LocationId, LocationTypePropertyId, PropertyValue) VALUES (@DId, @LocationId, @LocationTypePropertyId,  @PropertyValue)
		SET @Id=@@IDENTITY
	END
	ELSE
		IF LEN(@PropertyValue)>0
			UPDATE LocationPropertyValues SET PropertyValue=@PropertyValue WHERE Id=@Id AND DId=@DId
		ELSE
			DELETE LocationPropertyValues WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_UpdateLocationPropertyValueByName]...';


GO
CREATE Procedure dbo.sp_UpdateLocationPropertyValueByName
	(
		@DId int,
		@LocationId int,
		@PropertyName nvarchar(50),
		@PropertyValue nvarchar(255),
		@LocationTypeId int
	)

As
	DECLARE @LocationTypePropertyId int
	SET @LocationTypePropertyId = 0
	
	SELECT TOP 1
		@LocationTypePropertyId = Id
	FROM 
		LocationTypeProperties 
	WHERE 
		DId=@DId  
		AND 
		LocationTypeId=@LocationTypeId
		AND 
		Name=@PropertyName
	
	IF @LocationTypePropertyId > 0
	 BEGIN
		EXEC dbo.sp_UpdateLocationPropertyValue 0, @DId, @LocationId, @LocationTypePropertyId, @PropertyValue
	 END
GO
PRINT N'Creating [dbo].[sp_UpdateLocationRouteLevel]...';


GO
CREATE Procedure dbo.sp_UpdateLocationRouteLevel
	(
		@Id int OUTPUT,
		@DId int,
		@LocationId int,
		@TicketLevel tinyint,
		@TechPoolType int,
		@RoutingMethod int,
		@LastResortTechId int
	)

As
	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO LocationRouteLevels (DId, LocationId, TicketLevel, TechPoolType, RoutingMethod, LastResortTechId) VALUES (@DId, @LocationId, @TicketLevel, @TechPoolType, @RoutingMethod, @LastResortTechId)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE LocationRouteLevels SET LocationId=@LocationId, TicketLevel=@TicketLevel, TechPoolType=@TechPoolType, RoutingMethod=@RoutingMethod, LastResortTechId=@LastResortTechId WHERE Id=@Id AND DId=@DId
GO
PRINT N'Creating [dbo].[sp_UpdateLocationRouteLevelTech]...';


GO
CREATE Procedure dbo.sp_UpdateLocationRouteLevelTech
	(
		@Id int OUTPUT,
		@DId int,
		@LocationRouteLevelId int,
		@TechId int
	)

As
	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO LocationRouteLevelTechs (DId, LocationRouteLevelId, TechId) VALUES (@DId, @LocationRouteLevelId, @TechId)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE LocationRouteLevelTechs SET LocationRouteLevelId=@LocationRouteLevelId, TechId=@TechId WHERE Id=@Id AND DId=@DId
GO
PRINT N'Creating [dbo].[sp_UpdateLocationSubTechs]...';


GO

CREATE PROCEDURE sp_UpdateLocationSubTechs
	(
		@DId int,
		@LocationId int,
		@UId int,
		@intLctLvlId int
	)
AS
	SET NOCOUNT ON
	
	IF @intLctLvlId = 0 
		BEGIN
			IF NOT EXISTS(SELECT 'true' FROM LocationTechJctn WHERE DId=@DId AND LocationId=@LocationId AND intUId=@UId)
				INSERT INTO LocationTechJctn (DId, LocationId, intUId) VALUES (@DId, @LocationId, @UId)
		END
	ELSE
		BEGIN
			IF NOT EXISTS(SELECT 'true' FROM LocationLevelsTechJctn WHERE DId=@DId AND LocationId=@LocationId AND intLctLvlId=@intLctLvlId AND intUId=@UId)
				INSERT INTO LocationLevelsTechJctn (DId, LocationId, intLctLvlId, intUId) VALUES (@DId, @LocationId, @intLctLvlId, @UId)
		END
		
		
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateLocationType]...';


GO
CREATE Procedure dbo.sp_UpdateLocationType
	(
		@Id int OUTPUT,
		@DId int,
		@Name nvarchar(50),
		@HierarchyLevel int
	)

As
	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO LocationTypes (DId, Name, HierarchyLevel) VALUES (@DId, @Name, @HierarchyLevel)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE LocationTypes SET Name=@Name, HierarchyLevel=@HierarchyLevel WHERE Id=@Id AND DId=@DId
GO
PRINT N'Creating [dbo].[sp_UpdateLocationTypeProperty]...';


GO
CREATE Procedure dbo.sp_UpdateLocationTypeProperty
	(
		@Id int OUTPUT,
		@DId int,
		@LocationTypeId int,
		@Name nvarchar(50),
		@DataType int,
		@Enumeration nvarchar(255),
		@Description nvarchar(255),
		@GroupId int = null
	)

As
	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO LocationTypeProperties (DId, LocationTypeId, Name, DataType, Enumeration, Description, GroupId) VALUES (@DId, @LocationTypeId, @Name,  @DataType, @Enumeration, @Description, @GroupId)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE LocationTypeProperties SET LocationTypeId=@LocationTypeId, Name=@Name, DataType=@DataType, Enumeration=@Enumeration, Description=@Description, GroupId=@GroupId WHERE Id=@Id AND DId=@DId
GO
PRINT N'Creating [dbo].[sp_UpdateLocatioTypePropertiesGroup]...';


GO
CREATE Procedure [dbo].[sp_UpdateLocatioTypePropertiesGroup]
	(
		@DId int,
		@TypeId int,
		@GroupId int,
		@Name nvarchar(255)
	)

As
	IF @GroupId IS NULL OR @GroupId<1
		insert into LocationTypePropertiesGroup (DId,LocationTypeId, Name)
		values(@DId, @TypeId,@Name)
	else
		update LocationTypePropertiesGroup set Name=@Name
		where DId=@DId and LocationTypeId = @TypeId and Id=@GroupId
GO
PRINT N'Creating [dbo].[sp_UpdateMailGroup]...';


GO
CREATE Procedure dbo.sp_UpdateMailGroup
	(
		@DepartmentId int,
		@MailGroupId int,
		@Name nvarchar(50)
	)

As
	IF NOT EXISTS(Select 'true' FROM MailGroups WHERE DepartmentId = @DepartmentId AND Name = @Name AND Id<>@MailGroupId)
		UPDATE MailGroups SET Name = @Name WHERE id = @MailGroupId AND DepartmentId = @DepartmentId
	ELSE
		raiserror('Can''t update Mail Group! The %s already exists.',16,1, @Name)
	return
GO
PRINT N'Creating [dbo].[sp_UpdateMoveFolder]...';


GO
CREATE Procedure dbo.sp_UpdateMoveFolder

	(
		@DId int,
		@ParentId int,
		@FolderId int
		
	)

As
	/* set nocount on */
	IF @ParentId <> @FolderId 
	Begin
		Declare @CurrentName nvarchar(50)
		Select @CurrentName=(Select vchName from Folders where DId=@DId and Id=@FolderId)

		IF NOT EXISTS(Select * from Folders where DId=@DId and ParentId=@ParentId and vchName =@CurrentName ) 
		Begin
			UPDATE Folders SET ParentId = @ParentId WHERE DId=@DId AND Id=@FolderId
		End 
		ELSE
			return -2
	End
	Else
		return -1

	return 0
GO
PRINT N'Creating [dbo].[sp_UpdateNewPostIcon]...';


GO

CREATE Procedure [dbo].[sp_UpdateNewPostIcon]

	(
		@DId int,
		@TId int,
		@PostOnOff bit, /* Mode 0 Set to off Mode 1 set to on*/
		@UId int
			/*	0 = Both
				1 = User
				2 = Tech
				3 = user off / tech on 
				4 = user on / tech off
			*/
		
	)

As
	IF @UId = 0
		UPDATE tbl_ticket SET NewUserPost = @PostOnOff, NewTechPost = @PostOnOff WHERE company_id = @DId AND id = @TId
	ELSE
	BEGIN
		DECLARE @tktTechId int
		DECLARE @tktUserId int
		SELECT @tktTechId=Technician_id, @tktUserId=User_id FROM tbl_ticket WHERE company_id=@DId AND Id=@TId
		IF @tktTechId=@UId AND @tktUserId=@UId --Both
			UPDATE tbl_ticket SET NewUserPost = @PostOnOff, NewTechPost = @PostOnOff WHERE company_id = @DId AND id = @TId
		ELSE IF @tktUserId=@UId AND @PostOnOff=1--User
			UPDATE tbl_ticket SET NewUserPost = 1 WHERE company_id = @DId AND id = @TId
		ELSE IF @tktUserId=@UId AND @PostOnOff=0--User
			UPDATE tbl_ticket SET NewTechPost = 0 WHERE company_id = @DId AND id = @TId
		ELSE IF @tktTechId=@UId AND @PostOnOff=1
			UPDATE tbl_ticket SET NewTechPost = 1 WHERE company_id = @DId AND id = @TId					
		ELSE IF @tktTechId=@UId AND @PostOnOff=0
			UPDATE tbl_ticket SET NewUserPost = 0 WHERE company_id = @DId AND id = @TId					
	END	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateNotificationEventsQueue]...';


GO
CREATE Procedure dbo.sp_UpdateNotificationEventsQueue
	(
		@Id int OUTPUT,
		@DId int,
		@CreatedByUserId int,
		@EventType tinyint,
		@ObjectStateNew ntext,
		@ObjectStateOld ntext,
		@ScheduledTicketId int = null,
		@RunTime smalldatetime = null
	)

As
	IF @RunTime IS NULL
		SET @RunTime=getutcdate()

	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO NotificationEventsQueue (DId, CreatedByUserId, EventType, CreateTime, RunTime,  ObjectStateNew, ObjectStateOld, ScheduledTicketId) VALUES (@DId, @CreatedByUserId, @EventType, getutcdate(), @RunTime, @ObjectStateNew, @ObjectStateOld, @ScheduledTicketId)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE NotificationEventsQueue SET EventType=@EventType, RunTime=@RunTime, ObjectStateNew=@ObjectStateNew, ObjectStateOld=@ObjectStateOld, ScheduledTicketId=@ScheduledTicketId WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_UpdateNotificationEventsQueueFile]...';


GO
CREATE Procedure dbo.sp_UpdateNotificationEventsQueueFile
	(
		@Id int OUTPUT,
		@DId int,
		@NotificationEventsQueueId int,
		@FileName nvarchar(255),
		@FileSize int,
		@FileData image
	)

As
	IF @Id IS NULL OR @Id=0
		SELECT @Id=Id FROM NotificationEventsQueueFiles WHERE DId=@DId AND NotificationEventsQueueId=@NotificationEventsQueueId AND FileName=@FileName

	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO NotificationEventsQueueFiles(DId, NotificationEventsQueueId, FileName, FileSize, dtUpdated, FileData) VALUES (@DId, @NotificationEventsQueueId, @FileName, @FileSize, getutcdate(), @FileData)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE NotificationEventsQueueFiles SET FileSize=@FileSize, dtUpdated=getutcdate(), FileData=@FileData WHERE DId=@DId AND Id=@Id
GO
PRINT N'Creating [dbo].[sp_UpdateNotificationEventsQueueRunTime]...';


GO
CREATE Procedure dbo.sp_UpdateNotificationEventsQueueRunTime
	(
		@RunTime smalldatetime,
		@DId int = null,
		@Id int = null
	)

As
	IF NOT @DId IS NULL AND NOT @Id IS NULL 
		UPDATE NotificationEventsQueue SET RunTime=@RunTime WHERE DId=@DId AND Id=@Id
	ELSE IF NOT @DId IS NULL
		UPDATE NotificationEventsQueue SET RunTime=@RunTime WHERE DId=@DId
	ELSE
		UPDATE NotificationEventsQueue SET RunTime=@RunTime
GO
PRINT N'Creating [dbo].[sp_UpdateNotificationRule]...';


GO
CREATE  Procedure [dbo].[sp_UpdateNotificationRule]
	(
		@DId int,
		@Id int OUTPUT,
		@UserId int,
		@RuleName nvarchar(255),
		@UpdatedByUserId int,
		@btInactive bit,
		@btBuiltIn bit = 0,
		@btForTech bit = 0,
		@btReceiveTriggerEvents bit = 0
	)

As
	IF (@Id IS NULL OR @Id=0) AND @btBuiltIn=1
		SELECT @Id=Id FROM NotificationRules WHERE DId=@DId AND ISNULL(UserId,0)=ISNULL(@UserId,0) AND btBuiltIn=1 AND btForTech=@btForTech
	IF @Id IS NULL OR @Id=0
	BEGIN
		IF EXISTS(SELECT * FROM NotificationRules WHERE DId=@DId AND ISNULL(UserId,0)=ISNULL(@UserId,0) AND RuleName=@RuleName)
			RETURN -1
		ELSE
		BEGIN
			INSERT INTO NotificationRules (DId, UserId, RuleName, dtUpdated, UpdatedByUserId, btInactive, btBuiltIn, btForTech, btReceiveTriggerEvents) VALUES (@DId, @UserId, @RuleName,  getutcdate(), @UpdatedByUserId, @btInactive, @btBuiltIn, @btForTech, @btReceiveTriggerEvents)
			SET @Id=@@IDENTITY
		END
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT * FROM NotificationRules WHERE DId=@DId AND Id<>@Id AND ISNULL(UserId,0)=ISNULL(@UserId,0) AND RuleName=@RuleName)
			RETURN -1
		ELSE
			UPDATE NotificationRules SET DId=@DId, UserId=@UserId, RuleName=@RuleName, dtUpdated=getutcdate(), UpdatedByUserId=@UpdatedByUserId, btInactive=@btInactive, btBuiltIn=@btBuiltIn, btForTech=@btForTech, btReceiveTriggerEvents=@btReceiveTriggerEvents WHERE DId=@DId AND Id=@Id
	END
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdateNotificationRuleEvent]...';


GO

CREATE Procedure dbo.sp_UpdateNotificationRuleEvent

	(
		@DId int,
		@NotificationRuleId int,
		@EventType tinyint,
		@Enabled bit
	)

As
IF @Enabled=0
BEGIN
	DELETE FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@EventType
	RETURN 0
END
ELSE
BEGIN
	DECLARE @Id int
	SELECT @Id=Id FROM NotificationRuleEvents WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND EventType=@EventType
	IF @Id IS NULL
	BEGIN
		INSERT INTO NotificationRuleEvents(DId, NotificationRuleId, EventType) VALUES (@DId, @NotificationRuleId, @EventType)
		SET @Id=@@IDENTITY
	END
	RETURN @Id
END
GO
PRINT N'Creating [dbo].[sp_UpdateNotificationRuleUser]...';


GO
CREATE Procedure [dbo].[sp_UpdateNotificationRuleUser]

	(
		@DId int,
		@NotificationRuleId int,
		@UserId int,
		@UserGroupId int,
		@NotificationEmail tinyint
	)

As
IF @UserId=0
	SET @UserId=NULL
IF @UserGroupId=0
	SET @UserGroupId=NULL

DECLARE @Id int

IF @UserId IS NULL AND @UserGroupId IS NULL
	SELECT @Id=Id FROM NotificationRuleUsers WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND UserId IS NULL AND UserGroupId IS NULL
ELSE IF NOT @UserId IS NULL
	SELECT TOP 1 @Id=Id FROM NotificationRuleUsers WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND UserId=@UserId
ELSE IF NOT @UserGroupId IS NULL
	SELECT TOP 1 @Id=Id FROM NotificationRuleUsers WHERE DId=@DId AND NotificationRuleId=@NotificationRuleId AND UserGroupId=@UserGroupId

IF @Id IS NULL
BEGIN
	INSERT INTO NotificationRuleUsers (DId, NotificationRuleId, UserId, UserGroupId, NotificationEmail) VALUES (@DId, @NotificationRuleId, @UserId, @UserGroupId, @NotificationEmail)
	SET @Id=@@IDENTITY
END
ELSE
	UPDATE NotificationRuleUsers SET NotificationEmail=@NotificationEmail WHERE Id=@Id

RETURN @Id




SET QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_UpdatePartOrder]...';


GO


CREATE Procedure [dbo].[sp_UpdatePartOrder]

	(
		@CompanyId int,
		@VendorId int,
		@LocationId int,
		@RepName nvarchar(50) = null,
		@ConfirmationNumber nvarchar(50) = null,
		@PONumber nvarchar(50) = null,
		@TotalOrderCost money,
		@ExpectedArrivalDate smalldatetime = null,
		@UserId int

	)
As

	BEGIN TRANSACTION
	
		INSERT INTO tbl_PartsOrder 
			(company_id, OrderDate, VendorId, RepName, ConfirmationNumber, InternalPONumber, TotalOrderCost, intOrderedBy,LocationId)
		VALUES (
			@CompanyId,
			getutcdate(),
			@VendorId,
			@RepName,
			@ConfirmationNumber,
			@PoNumber,
			@TotalOrderCost,
			@UserId,
			@LocationId
		)
		
		DECLARE @OrderId int
		SET @OrderId = (SELECT @@identity)
		
		UPDATE tbl_part SET PartsOrder_id = @OrderId, status = 'Awaiting Arrival', ExpectedArrivalDate = @ExpectedArrivalDate WHERE company_id = @CompanyId AND status = 'Staging'
		
		DECLARE @TotalPartsCost money
		SET @TotalPartsCost = (SELECT sum(Cost*(Qty4Tkt+Qty2Inv)) FROM tbl_part WHERE company_id = @CompanyId AND PartsOrder_id = @OrderId)
		
		DECLARE @ShippingCost money
		IF @TotalOrderCost < @TotalPartsCost
			SET @TotalOrderCost = @TotalPartsCost
			
			
		SET @ShippingCost = @TotalOrderCost - @TotalPartsCost
		
		DECLARE @NumberItems tinyint
		SET @NumberItems = (SELECT count(*) FROM tbl_part WHERE company_id = @CompanyId AND PartsOrder_id = @OrderId)
		
		UPDATE tbl_part SET ShippingCost = (@ShippingCost/@NumberItems) WHERE company_id = @CompanyId AND PartsOrder_id = @OrderId
		
		
			
	COMMIT TRANSACTION
			
			
		
		
	
	
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdatePartRemoveStaging]...';


GO

CREATE Procedure sp_UpdatePartRemoveStaging

	(
		@CompanyId int,
		@PartId int

	)

As
	IF @PartId = -1
		UPDATE tbl_part SET status = 'To Be Ordered' WHERE company_id = @CompanyId AND status = 'Staging'
	ELSE
		UPDATE tbl_part SET status = 'To Be Ordered' WHERE company_id = @CompanyId AND id = @PartId
	return
GO
PRINT N'Creating [dbo].[sp_UpdatePartsNotifyTech]...';


GO

Create Procedure sp_UpdatePartsNotifyTech
	(
		@DepartmentId int,
		@UserId int,
		@Code int
	)
As
	IF @code = 0
		INSERT INTO tbl_PartsRequestNotifyTechs (DepartmentId, LoginCompanyJunc_id) VALUES (@DepartmentId, @UserId)
	IF @code = 1
		DELETE FROM tbl_PartsRequestNotifyTechs WHERE DepartmentId = @DepartmentId AND LoginCompanyJunc_id = @UserId
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdatePrioritiesSetupDefaults]...';


GO

CREATE PROCEDURE sp_UpdatePrioritiesSetupDefaults
	(
		@DId int
	)
AS
	IF NOT EXISTS(SELECT 'true' FROM Priorities WHERE DId=@DId)
		BEGIN
			DECLARE @SLAPercentage tinyint
			DECLARE @SLADays tinyint
			DECLARE @SLAHours tinyint
			DECLARE @SLAMinutes tinyint
			DECLARE @btSkipSaturday bit
			DECLARE @btSkipSunday bit
			DECLARE @btUseBusHours bit
			DECLARE @btSkipHolidays bit
			
			SET @SLAPercentage = 75
			SET @SLADays = 0
			SET @SLAHours = 0
			SET @SLAMinutes = 0
			SET @btSkipSaturday = 1
			SET @btSkipSunday = 1
			SET @btUseBusHours = 1
			SET @btSkipHolidays = 1
			
			
		INSERT INTO Priorities (DId, tintPriority, Name, Description, SLAPercentage, SLADays, SLAHours, SLAMinutes, bitDefault, btSkipSaturday, btSkipSunday, btSkipHolidays, btUseBusHours, SLAResponsePercentage, SLAResponseDays, SLAResponseHours, SLAResponseMinutes, btResponseSkipSaturday, btResponseSkipSunday, btResponseSkipHolidays, btResponseUseBusHours) VALUES
			(@DId, 1, 'Wide Spread Service Inoperable', 'Outage in service affecting many sites and/or machines.', @SLAPercentage, @SLADays, @SLAHours, @SLAMinutes, 0, @btSkipSaturday, @btSkipSunday, @btSkipHolidays, @btUseBusHours, @SLAPercentage, @SLADays, @SLAHours, @SLAMinutes, @btSkipSaturday, @btSkipSunday, @btSkipHolidays, @btUseBusHours)
		
		INSERT INTO Priorities (DId, tintPriority, Name, Description, SLAPercentage, SLADays, SLAHours, SLAMinutes, bitDefault, btSkipSaturday, btSkipSunday, btSkipHolidays, btUseBusHours, SLAResponsePercentage, SLAResponseDays, SLAResponseHours, SLAResponseMinutes, btResponseSkipSaturday, btResponseSkipSunday, btResponseSkipHolidays, btResponseUseBusHours) VALUES
			(@DId, 2, 'Wide Spread Service Impaired', 'Partial outage in service affecting many sites and/or machines', @SLAPercentage, @SLADays, @SLAHours, @SLAMinutes, 0, @btSkipSaturday, @btSkipSunday, @btSkipHolidays, @btUseBusHours, @SLAPercentage, @SLADays, @SLAHours, @SLAMinutes, @btSkipSaturday, @btSkipSunday, @btSkipHolidays, @btUseBusHours)
		
		INSERT INTO Priorities (DId, tintPriority, Name, Description, SLAPercentage, SLADays, SLAHours, SLAMinutes, bitDefault, btSkipSaturday, btSkipSunday, btSkipHolidays, btUseBusHours, SLAResponsePercentage, SLAResponseDays, SLAResponseHours, SLAResponseMinutes, btResponseSkipSaturday, btResponseSkipSunday, btResponseSkipHolidays, btResponseUseBusHours) VALUES
			(@DId, 3, 'Localized Service Inoperable', 'Outage in service affecting a single machine.', @SLAPercentage, @SLADays, @SLAHours, @SLAMinutes, 0, @btSkipSaturday, @btSkipSunday, @btSkipHolidays, @btUseBusHours, @SLAPercentage, @SLADays, @SLAHours, @SLAMinutes, @btSkipSaturday, @btSkipSunday, @btSkipHolidays, @btUseBusHours)
		
		INSERT INTO Priorities (DId, tintPriority, Name, Description, SLAPercentage, SLADays, SLAHours, SLAMinutes, bitDefault, btSkipSaturday, btSkipSunday, btSkipHolidays, btUseBusHours, SLAResponsePercentage, SLAResponseDays, SLAResponseHours, SLAResponseMinutes, btResponseSkipSaturday, btResponseSkipSunday, btResponseSkipHolidays, btResponseUseBusHours) VALUES
			(@DId, 4, 'Localized Service Impaired', 'Partial outage in service affecting a single machine.', @SLAPercentage, @SLADays, @SLAHours, @SLAMinutes, 0, @btSkipSaturday, @btSkipSunday, @btSkipHolidays, @btUseBusHours, @SLAPercentage, @SLADays, @SLAHours, @SLAMinutes, @btSkipSaturday, @btSkipSunday, @btSkipHolidays, @btUseBusHours)
		
		INSERT INTO Priorities (DId, tintPriority, Name, Description, SLAPercentage, SLADays, SLAHours, SLAMinutes, bitDefault, btSkipSaturday, btSkipSunday, btSkipHolidays, btUseBusHours, SLAResponsePercentage, SLAResponseDays, SLAResponseHours, SLAResponseMinutes, btResponseSkipSaturday, btResponseSkipSunday, btResponseSkipHolidays, btResponseUseBusHours) VALUES
			(@DId, 5, 'General Inquiry', 'General information request.', @SLAPercentage, @SLADays, @SLAHours, @SLAMinutes, 1, @btSkipSaturday, @btSkipSunday, @btSkipHolidays, @btUseBusHours, @SLAPercentage, @SLADays, @SLAHours, @SLAMinutes, @btSkipSaturday, @btSkipSunday, @btSkipHolidays, @btUseBusHours)
		
		
		
		END
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdatePriority]...';


GO
CREATE PROCEDURE dbo.sp_UpdatePriority
	(
		@DId int,
		@Id int,
		@Name nvarchar(50),
		@SLAPercentage tinyint,
		@SLADays tinyint,
		@SLAHours tinyint,
		@SLAMinutes tinyint,
		@btSkipSaturday bit,
		@btSkipSunday bit,
		@btSkipHolidays bit,
		@btUseBusHours bit,
		@SLAResponsePercentage tinyint,
		@SLAResponseDays tinyint,
		@SLAResponseHours tinyint,
		@SLAResponseMinutes tinyint,
		@btResponseSkipSaturday bit,
		@btResponseSkipSunday bit,
		@btResponseSkipHolidays bit,
		@btResponseUseBusHours bit,
		@btRstrctUsr bit,
		@Description ntext = null
	)
AS
	SET NOCOUNT ON
	
	IF @Id = -1
		BEGIN
			DECLARE @NextPriority tinyint
			DECLARE @MustBeDefault bit

			SET @NextPriority = (SELECT max(tintPriority) FROM Priorities WHERE DId=@DID)
			
			IF @NextPriority IS NULL
				BEGIN
					SET @MustBeDefault = 1
					SET @NextPriority = 1
				END
			ELSE
				BEGIN
					SET @MustBeDefault = 0
					SET @NextPriority = @NextPriority + 1
				END

			INSERT INTO Priorities (DId, tintPriority, bitDefault, Name, Description, SLAPercentage, SLADays, SLAHours, SLAMinutes, btSkipSaturday, btSkipSunday, btSkipHolidays, btUseBusHours, SLAResponsePercentage, SLAResponseDays, SLAResponseHours, SLAResponseMinutes, btResponseSkipSaturday, btResponseSkipSunday, btResponseSkipHolidays, btResponseUseBusHours, btRstrctUsr) VALUES (@DId, @NextPriority, @MustBeDefault, @Name, @Description, @SLAPercentage, @SLADays, @SLAHours, @SLAMinutes, @btSkipSaturday, @btSkipSunday, @btSkipHolidays, @btUseBusHours, @SLAResponsePercentage, @SLAResponseDays, @SLAResponseHours, @SLAResponseMinutes, @btResponseSkipSaturday, @btResponseSkipSunday, @btResponseSkipHolidays, @btResponseUseBusHours, @btRstrctUsr)
			
			RETURN (SELECT @@Identity)
		END
	ELSE
		BEGIN
			UPDATE Priorities SET Name=@Name, Description=@Description, SLAPercentage=@SLAPercentage, SLADays=@SLADays, SLAHours=@SLAHours, SLAMinutes=@SLAMinutes, btSkipSaturday=@btSkipSaturday, btSkipSunday=@btSkipSunday, btSkipHolidays=@btSkipHolidays, btUseBusHours=@btUseBusHours, SLAResponsePercentage=@SLAResponsePercentage, SLAResponseDays=@SLAResponseDays, SLAResponseHours=@SLAResponseHours, SLAResponseMinutes=@SLAResponseMinutes, btResponseSkipSaturday=@btResponseSkipSaturday, btResponseSkipSunday=@btResponseSkipSunday, btResponseSkipHolidays=@btResponseSkipHolidays, btResponseUseBusHours=@btResponseUseBusHours, btRstrctUsr=@btRstrctUsr  WHERE DId=@DId AND Id=@Id
			RETURN @Id
		END
GO
PRINT N'Creating [dbo].[sp_UpdatePriorityDefault]...';


GO

CREATE PROCEDURE sp_UpdatePriorityDefault
	(
		@DId int,
		@Default int
	)
AS
	UPDATE Priorities SET bitDefault = 0 WHERE DId=@DId AND id <> @Default
	
	UPDATE Priorities SET bitDefault = 1 WHERE DId=@DId AND id = @Default
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdatePriorityOrder]...';


GO
CREATE PROCEDURE dbo.sp_UpdatePriorityOrder
	@DepartmentId int,
	@PriorityId int,
	@MoveUp bit = 1
AS
BEGIN
	DECLARE @PriorityOrder tinyint
	SELECT @PriorityOrder = tintPriority FROM Priorities WHERE DId=@DepartmentId AND Id=@PriorityId
	
	IF @PriorityOrder IS NULL
		RETURN

	DECLARE @ExchangePriorityId int
	DECLARE @ExchangePriorityOrder tinyint

	IF @MoveUp = 1 -- Moving current priority up
		SELECT TOP 1 @ExchangePriorityId = Id, @ExchangePriorityOrder=tintPriority  FROM Priorities WHERE  DId=@DepartmentId AND tintPriority < @PriorityOrder
		ORDER BY tintPriority DESC
	ELSE -- Moving current priority down
		SELECT TOP 1 @ExchangePriorityId = Id, @ExchangePriorityOrder=tintPriority FROM Priorities WHERE  DId=@DepartmentId AND tintPriority > @PriorityOrder
		ORDER BY tintPriority ASC

	IF @ExchangePriorityId IS NOT NULL AND @ExchangePriorityOrder IS NOT NULL AND @PriorityOrder > 0
	BEGIN
		UPDATE Priorities SET tintPriority = @ExchangePriorityOrder WHERE DId = @DepartmentId AND Id = @PriorityId
		UPDATE Priorities SET tintPriority = @PriorityOrder WHERE DId = @DepartmentId AND Id = @ExchangePriorityId
	END
END
GO
PRINT N'Creating [dbo].[sp_UpdateProject]...';


GO

CREATE PROCEDURE [dbo].[sp_UpdateProject]
(
		@ProjectID int,
		@CompanyID int,
		@AccountID int = NULL,
		@ParentID int = NULL,
		@Name nvarchar(50),
		@Description ntext = NULL,
		@InternalPMID int = NULL,
		@ClientPMID int = NULL,
		@Active bit = NULL,
		@EstimatedHours int = NULL,
		@EstimatedCost decimal(12, 4) = NULL,
		@EstimatedInvoicedAmount decimal(12, 4) = NULL,
		@vchCust1 nvarchar(1000) = NULL,
		@vchCust2 nvarchar(1000) = NULL,
		@vchCust3 nvarchar(1000) = NULL,
		@vchCust4 nvarchar(1000) = NULL,
		@vchCust5 nvarchar(1000) = NULL,
		@vchCust6 nvarchar(1000) = NULL,
		@vchCust7 nvarchar(1000) = NULL,
		@vchCust8 nvarchar(1000) = NULL,
		@vchCust9 nvarchar(1000) = NULL,
		@vchCust10 nvarchar(1000) = NULL,
		@vchCust11 nvarchar(1000) = NULL,
		@vchCust12 nvarchar(1000) = NULL,
		@vchCust13 nvarchar(1000) = NULL,
		@vchCust14 nvarchar(1000) = NULL,
		@vchCust15 nvarchar(1000) = NULL,
		@dtCust1 smalldatetime = NULL,
		@dtCust2 smalldatetime = NULL,
		@SupGroupId int = NULL,
		@PriorityId int = NULL
)
AS

	IF @AccountId<=0
		SET @AccountId=NULL

	UPDATE 
		[Project]
	SET 
		[CompanyID] = @CompanyID,
		[AccountID] = @AccountID,
		[ParentID] = @ParentID,
		[Name] = @Name,
		[Description] = @Description,
		[InternalPMID] = @InternalPMID,
		[ClientPMID] = @ClientPMID,
		[Active] = @Active,
		[EstimatedHours] = @EstimatedHours,
		[EstimatedCost] = @EstimatedCost,
		[EstimatedInvoicedAmount] = @EstimatedInvoicedAmount, 
		vchCust1=@vchCust1, 
		vchCust2=@vchCust2, 
		vchCust3=@vchCust3, 
		vchCust4=@vchCust4, 
		vchCust5=@vchCust5, 
		vchCust6=@vchCust6, 
		vchCust7=@vchCust7, 
		vchCust8=@vchCust8, 
		vchCust9=@vchCust9, 
		vchCust10=@vchCust10, 
		vchCust11=@vchCust11, 
		vchCust12=@vchCust12, 
		vchCust13=@vchCust13, 
		vchCust14=@vchCust14, 
		vchCust15=@vchCust15, 
		dtCust1=@dtCust1, 
		dtCust2=@dtCust2,
		SupGroupId=@SupGroupId,
		PriorityId=@PriorityId
	WHERE 
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID
GO
PRINT N'Creating [dbo].[sp_UpdateProjectBillableRates]...';


GO
CREATE PROCEDURE dbo.sp_UpdateProjectBillableRates
(
		@ProjectID int,
		@BillingMethodID int = NULL,
		@FlatFee money = NULL,
		@HourlyBlendedRate smallmoney = NULL,
		@RatePlanID int = NULL,
		@CompanyID int,
		@FlatFeeMode int = NULL,
		@FlatFeeNextDate smalldatetime = NULL,
		@QBAccountAlias nvarchar(200) = NULL,
		@QBItemAlias nvarchar(200) = NULL
)
AS

	UPDATE 
		[Project]
	SET 
		BillingMethodID = @BillingMethodID,
		FlatFee = @FlatFee,
		HourlyBlendedRate = @HourlyBlendedRate,
		RatePlanID = @RatePlanID,
		FlatFeeMode = @FlatFeeMode,
		FlatFeeNextDate = @FlatFeeNextDate,
		QBAccountAlias = @QBAccountAlias,
		QBItemAlias = @QBItemAlias
	WHERE 
		CompanyID = @CompanyID
		AND
		ProjectID = @ProjectID
GO
PRINT N'Creating [dbo].[sp_UpdateProjectPriority]...';


GO

CREATE PROCEDURE [dbo].[sp_UpdateProjectPriority] 
(
	@DId int,
	@ProjectPriorityID int,
	@Name nvarchar(50),
	@Description nvarchar(2000)
)
AS
BEGIN
	
	UPDATE
		ProjectPriority
	SET
		Name = @Name,
		Description = @Description
	WHERE
		DId = @DId
		AND
		Id = @ProjectPriorityID
	
END
GO
PRINT N'Creating [dbo].[sp_UpdateProjectPriorityDefault]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateProjectPriorityDefault]
(
	@DId int,
	@ProjectPriorityID int
)
AS
BEGIN
	
	UPDATE ProjectPriority SET bitDefault = 0 WHERE DId=@DId AND Id <> @ProjectPriorityID
	
	UPDATE ProjectPriority SET bitDefault = 1 WHERE DId=@DId AND Id = @ProjectPriorityID
	
END
GO
PRINT N'Creating [dbo].[sp_UpdateProjectPriorityOrder]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateProjectPriorityOrder]
	@DepartmentId int,
	@PriorityId int,
	@MoveUp bit = 1
AS
BEGIN
	DECLARE @PriorityOrder tinyint
	SELECT @PriorityOrder = tintPriority FROM ProjectPriority WHERE DId=@DepartmentId AND Id=@PriorityId
	
	IF @PriorityOrder IS NULL
		RETURN

	DECLARE @ExchangePriorityId int
	DECLARE @ExchangePriorityOrder tinyint

	IF @MoveUp = 1 -- Moving current priority up
		SELECT TOP 1 @ExchangePriorityId = Id, @ExchangePriorityOrder=tintPriority  FROM ProjectPriority WHERE  DId=@DepartmentId AND tintPriority < @PriorityOrder
		ORDER BY tintPriority DESC
	ELSE -- Moving current priority down
		SELECT TOP 1 @ExchangePriorityId = Id, @ExchangePriorityOrder=tintPriority FROM ProjectPriority WHERE  DId=@DepartmentId AND tintPriority > @PriorityOrder
		ORDER BY tintPriority ASC

	IF @ExchangePriorityId IS NOT NULL AND @ExchangePriorityOrder IS NOT NULL AND @PriorityOrder > 0
	BEGIN
		UPDATE ProjectPriority SET tintPriority = @ExchangePriorityOrder WHERE DId = @DepartmentId AND Id = @PriorityId
		UPDATE ProjectPriority SET tintPriority = @PriorityOrder WHERE DId = @DepartmentId AND Id = @ExchangePriorityId
	END
END
GO
PRINT N'Creating [dbo].[sp_UpdateProjectRetainerAmount]...';


GO
CREATE Procedure [dbo].[sp_UpdateProjectRetainerAmount]
	(
		@DId int,
		@Id int,
		@NewAmount money,
		@NewStartDate smalldatetime,
		@NewEndDate smalldatetime = null
	)
As
	UPDATE ProjectRetainer 
		SET Amount = @NewAmount,
			StartDate = @NewStartDate,
			EndDate = @NewEndDate
	WHERE DId = @DId AND Id = @Id
	return 





set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_UpdateProjectTaskTypeRate]...';


GO
CREATE PROCEDURE dbo.sp_UpdateProjectTaskTypeRate
(
		@ProjectTaskTypeRateID int,
		@HourlyRate smallmoney,
		@CompanyID int
)
AS

	IF @HourlyRate < 0
		SET @HourlyRate = NULL

	UPDATE 
		ProjectTaskTypeRate
	SET 
		HourlyRate = @HourlyRate
	WHERE 
		CompanyID = @CompanyID
		AND
		ProjectTaskTypeRateID = @ProjectTaskTypeRateID
GO
PRINT N'Creating [dbo].[sp_UpdateProjectTime]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateProjectTime]
(	
	@ProjectTimeId int,	
	@DepartmentID int,
	@ProjectID int,	
	@UserID int,
	@TaskTypeID int,
	@Date smalldatetime,
	@Hours decimal(10, 4),
	@Note nvarchar(512),
	@StartTime smalldatetime,
	@StopTime smalldatetime,
	@UpdatedTime smalldatetime,
	@UpdatedBy int,
	@TimeOffset decimal,
	@HourlyRate smallmoney,
	@AccountID int
)
AS
	DECLARE @insTaskType int
	IF (@TaskTypeID = 2147483647) SET @insTaskType = NULL
	ELSE SET @insTaskType = @TaskTypeID
		
	UPDATE [ProjectTime]
	SET	
		[UserId] = @UserID,
		[TaskTypeId] = @insTaskType,		
		[Hours] = @Hours,
		[Note] = @Note,
		[StartTimeUTC] = @StartTime,
		[StopTimeUTC] = @StopTime,		
		[UpdatedTimeUTC] = @UpdatedTime,
		[UpdatedBy] = @UpdatedBy,		
		[LocalTimeZoneOffset] = @TimeOffset,
		[HourlyRate] = @HourlyRate,
		[AccountID] = @AccountID,
		[ProjectId] = @ProjectID
	WHERE DepartmentId = @DepartmentID AND Id = @ProjectTimeId
GO
PRINT N'Creating [dbo].[sp_UpdateProjectUser]...';


GO
Create Procedure [dbo].[sp_UpdateProjectUser]
	(
		@DepartmentId int,
		@UserProjectsID int,
		@SubscribeEmail bit
	)
As
	UPDATE [UserProjects]
	SET 
		[SubscribeEmail] = @SubscribeEmail
	WHERE 
		[DepartmentId] = @DepartmentId
		AND
		Id = @UserProjectsID
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateRatePlan]...';


GO
CREATE Procedure [dbo].[sp_UpdateRatePlan]
	(
		@DepartmentID int,
		@RatePlanId int,
		@TaskTypeId int,
		@HourlyRate smallmoney		
	)

As	

	IF NOT EXISTS(SELECT 'true' FROM RatePlanRates WHERE @RatePlanId=RatePlanId AND @TaskTypeId=TaskTypeId AND @DepartmentID = DepartmentId)
		INSERT INTO RatePlanRates (RatePlanId, TaskTypeId, HourlyRate, DepartmentID) VALUES (@RatePlanId, @TaskTypeId, @HourlyRate, @DepartmentID)
	ELSE UPDATE RatePlanRates SET HourlyRate = @HourlyRate WHERE @RatePlanId=RatePlanId AND @TaskTypeId=TaskTypeId AND @DepartmentID = DepartmentId	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateRatePlanName]...';


GO
CREATE Procedure [dbo].[sp_UpdateRatePlanName]
	(
		@DepartmentID int,
		@RatePlanId int,
		@Name nvarchar(100)		
	)

As	
	UPDATE RatePlan SET RatePlan.Name = @Name WHERE Id = @RatePlanId AND DepartmentID=@DepartmentID
	return
GO
PRINT N'Creating [dbo].[sp_UpdateReportFilter]...';


GO
CREATE Procedure dbo.sp_UpdateReportFilter
	(
		@Id int OUTPUT,
		@DId int,
		@UId int,
		@ReportType tinyint,
		@Name nvarchar(255),
		@FilterState ntext
	)

As
	
	IF @Id IS NULL OR @Id=0
		SELECT @Id=Id FROM ReportFilters WHERE DId=@DId AND UId=@UId AND ReportType=@ReportType AND Name=@Name 

	IF @Id IS NULL OR @Id=0
	BEGIN
		INSERT INTO ReportFilters (DId, UId, ReportType, Name, FilterState) VALUES (@DId, @UId, @ReportType, @Name,  @FilterState)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE ReportFilters SET UId=@UId, ReportType=@ReportType, Name=@Name, FilterState=@FilterState WHERE Id=@Id AND DId=@DId
GO
PRINT N'Creating [dbo].[sp_UpdateResolution]...';


GO
--VGOOZ: 18-NOV-2004
--Update selected Resolution

CREATE Procedure dbo.sp_UpdateResolution
	(
		@DId int,
		@Id int,
		@ResolutionName nvarchar(50),
		@btInactive bit,
		@btResolved bit,
		@UId int,
		@btDontTransferTickets bit = 0
	)

As

DECLARE @IsSavedAsInactive bit
DECLARE @SavedName nvarchar(50)
DECLARE @SavedResolved nvarchar(50)

SELECT @IsSavedAsInactive = btInactive,@SavedName = vchName, @SavedResolved = btResolved FROM ResolutionCats WHERE DId = @DId AND Id = @Id

IF @IsSavedAsInactive = @btInactive AND @SavedName=@ResolutionName AND @SavedResolved = @btResolved
		RETURN 0 -- Didn't changed, don't need to da anything
		
IF @ResolutionName IS NOT NULL AND @btResolved IS NOT NULL -- update values excepts active status
		IF EXISTS(Select 'true' FROM ResolutionCats WHERE DId = @DId AND vchName = @ResolutionName AND Id<>@Id)
			BEGIN
				RAISERROR('Can''t update Resolution! The %s already exists.',16,1, @ResolutionName)
			END
		ELSE
			UPDATE ResolutionCats SET vchName = @ResolutionName, btResolved=@btResolved, intUpdatedBy=@UId, dtUpdated=getutcdate() WHERE id = @Id AND DId = @DId		

	

	IF @IsSavedAsInactive = 0 AND @btInactive = 1 -- inactivating category
		BEGIN
			IF @btDontTransferTickets = 0 AND EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id = @DId AND ResolutionCatsId = @Id)
				IF NOT EXISTS (SELECT 'true' FROM ResolutionCats WHERE DId = @DId AND Id <> @Id AND btInactive = 0 AND btResolved = @btResolved)
					UPDATE ResolutionCats SET btInactive=@btInactive, intUpdatedBy=@UId, dtUpdated=getutcdate() WHERE id = @Id AND DId = @DId --RETURN 1 -- have tickets but don't have at least one another active category to transfer these tickets to
				ELSE
					RETURN 2 -- have tickets assigned, and have another active cats to transfer these tickets to
			ELSE
				UPDATE ResolutionCats SET btInactive=@btInactive, intUpdatedBy=@UId, dtUpdated=getutcdate() WHERE id = @Id AND DId = @DId
		END
	ELSE
		IF @IsSavedAsInactive = 1 AND @btInactive = 0 -- activating category
			UPDATE ResolutionCats SET btInactive=@btInactive, intUpdatedBy=@UId, dtUpdated=getutcdate() WHERE id = @Id AND DId = @DId
RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateRoute]...';


GO

CREATE PROCEDURE sp_UpdateRoute
	(
		@DId int,
		@vchDirection varchar(1),
		@tintRoute tinyint
	)
AS
	SET NOCOUNT ON
	
	DECLARE @CurOrder tinyint
	SET @CurOrder = (SELECT tintOrder FROM RoutingOrder WHERE DId=@DId AND tintRoute=@tintRoute)
	
	IF @CurOrder IS NULL
		RETURN -1
	
	IF @vchDirection = 'u'
		BEGIN
			IF @CurOrder < 2
				RETURN -2
			ELSE
				BEGIN
					UPDATE RoutingOrder SET tintOrder=@CurOrder WHERE DId=@DId AND tintOrder=@CurOrder-1
					UPDATE RoutingOrder SET tintOrder=@CurOrder-1 WHERE DId=@DId AND tintRoute=@tintRoute
				END
		END
	
	IF @vchDirection = 'd'
		BEGIN
			DECLARE @MaxOrder tinyint
			SET @MaxOrder = (SELECT max(tintOrder) FROM RoutingOrder WHERE DId=@DId)
			IF @MaxOrder IS NULL
				RETURN -1
				
			IF @MaxOrder <= @CurOrder
				RETURN -3
			ELSE
				BEGIN
					UPDATE RoutingOrder SET tintOrder=@CurOrder WHERE DId=@DId AND tintOrder=@CurOrder+1
					UPDATE RoutingOrder SET tintOrder=@CurOrder+1 WHERE DId=@DId AND tintRoute=@tintRoute
				END	
		END
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateRoutingOrderMode]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateRoutingOrderMode]
	(
		@DId int
	)
AS
	IF EXISTS(SELECT 'true' FROM RoutingOrder WHERE DId=@DId)
		BEGIN
			DELETE FROM RoutingOrder WHERE DId=@DId
		END
	ELSE
		BEGIN
			DECLARE @btClass tinyint
			DECLARE @btLocation tinyint
			DECLARE @btLevel bit
			DECLARE @btAccount bit

			SELECT @btClass = dbo.fxGetConfigValueBit(@DId, 'configClassTracking')
			SELECT @btLocation = dbo.fxGetConfigValueBit(@DId, 'configLocationTracking')
			SELECT @btLevel = dbo.fxGetConfigValueBit(@DId, 'configLVL')
			SELECT @btAccount = dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr')

			INSERT RoutingOrder SELECT @DId as DId, tintOrder, tintRoute FROM fxRoutingOrder(@DId,@btClass,@btLocation,@btLevel,@btAccount)
		END
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateSchedTicketAsset]...';


GO
CREATE Procedure dbo.sp_UpdateSchedTicketAsset
	(
		@Id int OUTPUT,
		@DId int,
		@SchedTicketId int,
		@AssetId int,
		@Description nvarchar(255)
	)

As
	SELECT @Id=Id FROM SchedTicketAssets WHERE DId=@DId AND SchedTicketId=@SchedTicketId AND AssetId=@AssetId

	IF @Id IS NULL
	BEGIN 
		INSERT INTO SchedTicketAssets (DId, SchedTicketId, AssetId, Description) VALUES (@DId, @SchedTicketId, @AssetId, @Description)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE SchedTicketAssets SET Description=@Description WHERE DId=@DId AND SchedTicketId=@SchedTicketId AND AssetId=@AssetId
GO
PRINT N'Creating [dbo].[sp_UpdateSchedTkt]...';


GO
CREATE PROCEDURE dbo.sp_UpdateSchedTkt
	(
		@DId int,
		@Id int,
		@intUserId int,
		@intOwnerId int,
		@intTechId int=NULL,
--		@intLocationId int=NULL,
		@LocationId int=NULL,
		@intPriorityId int=NULL,
		@intClassId int=NULL,
		@intCategoryId int=NULL,
		@tintLevel tinyint=NULL,
		@vchAssetSerial nvarchar(50)=NULL,
		@vchSubject nvarchar(100),
		@vchText nvarchar(max)= NULL,
		@dtNext smalldatetime=NULL,
		@vchRecurringOn varchar(8), --VGOOZ 03-NOV-2005: tkt #2051 -  Scheduled tickets
		@vchEndMethod varchar(5)=NULL,
		@tintEndCount tinyint,
		@dtStop smalldatetime=NULL,
		@tintRecurringFeq tinyint,
		@btEnabled bit,
--		@vchRoom nvarchar(30)=NULL,
		@vchUserEmail nvarchar(50)=NULL,
		@intAcctId int=NULL,
--		@intAcctLocationId int=NULL
		@AccountLocationId int=NULL,
		@vchIdMethod nvarchar(255)=NULL,
		@CustomXML ntext=NULL,
		@ProjectID int=NULL,
		@FolderID int = NULL,
		@RepeatFromCompletion bit
	)
AS
					
	
	IF EXISTS(SELECT 'true' FROM SchedTickets WHERE DId=@DId AND Id=@Id)
		BEGIN
			UPDATE SchedTickets SET intUserId=@intUserId, intOwnerId=@intOwnerId, intTechId=@intTechId, LocationId=@LocationId, intPriorityId=@intPriorityId,
				intClassId=@intClassId, CreationCatsId=@intCategoryId, tintLevel=@tintLevel, vchAssetSerial=@vchAssetSerial, vchSubject=@vchSubject,
				vchText=@vchText, dtNext=@dtNext, vchRecurringOn=@vchRecurringOn, vchEndMethod=@vchEndMethod, tintEndCount=@tintEndCount, dtStop=@dtStop,
				tintRecurringFeq=@tintRecurringFeq, btEnabled=@btEnabled, intAcctId=@intAcctId, AccountLocationId=@AccountLocationId, CustomXML=@CustomXML, vchIdMethod=@vchIdMethod,
				ProjectID = @ProjectID, FolderID = @FolderID, RepeatFromCompletion = @RepeatFromCompletion
			WHERE DId=@DId AND Id=@Id
			RETURN @Id
		END
	ELSE
		BEGIN
			INSERT INTO SchedTickets (DId, intUserId, intOwnerId, intTechId, LocationId, intPriorityId, intClassId, CreationCatsId, tintLevel, vchAssetSerial,
				vchSubject, vchText, dtCreate, dtNext, vchRecurringOn, vchEndMethod, tintEndCount, dtStop, tintRecurringFeq, btEnabled, intAcctId, AccountLocationId, CustomXML, vchIdMethod,
				ProjectID, FolderID, RepeatFromCompletion)
				VALUES (@DId, @intUserId, @intOwnerId, @intTechId, @LocationId, @intPriorityId, @intClassId, @intCategoryId, @tintLevel, @vchAssetSerial,
				@vchSubject, @vchText, getutcdate(), @dtNext, @vchRecurringOn, @vchEndMethod, @tintEndCount, @dtStop, @tintRecurringFeq, @btEnabled, @intAcctId, @AccountLocationId, @CustomXML, @vchIdMethod,
				@ProjectID, @FolderID, @RepeatFromCompletion)
		
			RETURN (SELECT @@Identity) 
		END
GO
PRINT N'Creating [dbo].[sp_UpdateSchedTktDates]...';


GO

CREATE PROCEDURE sp_UpdateSchedTktDates
	(
		@DId int,
		@Id int,
		@btEnabled bit,
		@dtNext smalldatetime,
		@tintEndCount tinyint
	)
AS
	SET NOCOUNT ON
	UPDATE SchedTickets SET btEnabled=@btEnabled, dtNext=@dtNext, tintEndCount=@tintEndCount WHERE DId=@DId AND Id=@Id
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateSchedTktFile]...';


GO



CREATE PROCEDURE dbo.sp_UpdateSchedTktFile
	(
		@DId int,
		@STId int,
		@FileName nvarchar(255), --VGOOZ 02-AUG-2005: tkt 2818 - Error messages (increased FileName size from 50 to 255)
		@FileSize int,
		@FileData image
		
	)
AS
	SET NOCOUNT ON
	IF EXISTS(SELECT 'true' FROM SchedTicketFiles WHERE DId=@DId AND STId=@STId AND FileName=@FileName)
		UPDATE SchedTicketFiles SET FileData=@FileData, FileSize=@FileSize, dtUpdated=getutcdate() WHERE DId=@DId AND STId=@STId AND FileName=@FileName
	ELSE
		INSERT INTO SchedTicketFiles (DId, STId, FileName, FileSize, dtUpdated, FileData) VALUES (@DId, @STId, @FileName, @FileSize, getutcdate(), @FileData)
	
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdateSupportGroup]...';


GO

CREATE PROCEDURE sp_UpdateSupportGroup
	(
		@DId int,
		@Id int,
		@vchName nvarchar(50)
	)
AS
	/*RETURNS
		-1 null vchName
		-2 Group already exists
	*/
	SET NOCOUNT ON
	IF @vchName IS NULL
		RETURN -1
		
	IF EXISTS(SELECT 'true' FROM SupportGroups WHERE DId=@DId AND Id<>@Id AND vchName=@vchName)
		RETURN -2
	ELSE
		BEGIN
			IF @Id=0
				BEGIN
					INSERT INTO SupportGroups (DId,vchName) VALUES (@DId, @vchName)
					RETURN (SELECT @@Identity)
				END
			ELSE
				BEGIN
					UPDATE SupportGroups SET vchName=@vchName WHERE DId=@DId AND Id=@Id
					RETURN 0
				END
		END
GO
PRINT N'Creating [dbo].[sp_UpdateSupportGroupMember]...';


GO

CREATE PROCEDURE sp_UpdateSupportGroupMember
	(
		@DId int,
		@UId int,
		@GroupId int
		
	)
AS
	SET NOCOUNT ON
	UPDATE tbl_LoginCompanyJunc SET SupGroupId=@GroupId WHERE company_id=@DId AND id=@UId
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateSupportPortal]...';


GO
CREATE  PROCEDURE dbo.sp_UpdateSupportPortal
(
	@DId int,
	@AccountID int = null,
	@Header ntext,
    @Footer ntext,
    @Css ntext
)

As
	
	IF NOT EXISTS(SELECT 'true' FROM SupportPortal WHERE @DId = DId AND ISNULL(AccountID, 0) = ISNULL(@AccountID, 0))
	 BEGIN
		INSERT INTO [SupportPortal]
           ([DId]
           ,[AccountID]
           ,[Header]
           ,[Footer]
           ,[Css])
		VALUES
           (@DId
           ,@AccountID
           ,@Header
           ,@Footer
           ,@Css)
	 END
	ELSE
	 BEGIN
		UPDATE 
			SupportPortal
		SET 
			[Header] = @Header,
			[Footer] = @Footer,
			[Css] = @Css
		WHERE 
			@DId = DId 
			AND 
			ISNULL(AccountID, 0) = ISNULL(@AccountID, 0)
	 END
GO
PRINT N'Creating [dbo].[sp_UpdateSupportPortalLink]...';


GO



CREATE  PROCEDURE [dbo].[sp_UpdateSupportPortalLink]
(
	@DId int,
	@SupportPortalLinkID int,
	@Title varchar(50),
    @Url varchar(500),
    @OrderIndex tinyint,
    @Bold bit
)

As
	
	UPDATE [SupportPortalLinks]
		SET [Title] = @Title
      ,[Url] = @Url
      ,[OrderIndex] = @OrderIndex
      ,[Bold] = @Bold
	WHERE 
		DId = @DId
		AND
		Id = @SupportPortalLinkID
GO
PRINT N'Creating [dbo].[sp_UpdateTaskType]...';


GO
CREATE Procedure [dbo].[sp_UpdateTaskType]
	(
		@DepartmentID int,
		@TaskTypeID int,
		@TaskTypeName nvarchar(50),
		@HourlyRate smallmoney,
		@Active bit,
		@AppliesToTickets bit,
		@AppliesToProjects bit,
		@QBAccount nvarchar(200),
		@QBItem nvarchar(200),
		@Cost smallmoney
	)

As	
	UPDATE TaskType SET 
		TaskTypeName = @TaskTypeName,
		HourlyRate = @HourlyRate,
		Active = @Active,
		AppliesToTickets = @AppliesToTickets,
		AppliesToProjects = @AppliesToProjects,
		QBAccountAlias = @QBAccount,
		QBItemAlias = @QBItem,
		EstimatedCost = @Cost
	WHERE (DepartmentID=@DepartmentID)AND(TaskTypeId = @TaskTypeID)
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTaskTypeTechBillableRate]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTaskTypeTechBillableRate
	(
		@DepartmentID int,
		@TaskTypeId int,
		@TechId int,
		@HourlyRate smallmoney	
	)
AS
	IF NOT EXISTS(SELECT 'true' FROM TaskTypeTechBillableRate WHERE DId = @DepartmentID AND TaskTypeId = @TaskTypeId AND TechId = @TechId)
	 BEGIN
		IF @HourlyRate = 0
		 BEGIN
			SELECT
				@HourlyRate = HourlyRate
			FROM
				TaskType
			WHERE
				DepartmentID = @DepartmentID
				AND
				TaskTypeId = @TaskTypeId
		
			IF (@HourlyRate IS NULL)
			 BEGIN
				SELECT
				@HourlyRate = CASE WHEN L.configHourlyBillableRate IS NULL
					THEN CAST(dbo.fxGetConfigValueStr(@DepartmentID, 'configHourlyBillableRate') as smallmoney)
					ELSE L.configHourlyBillableRate
				END
				FROM tbl_LoginCompanyJunc L
					INNER JOIN tbl_Logins LO ON L.login_id = LO.id
					INNER JOIN tbl_company CO ON L.company_id=CO.company_id
				WHERE L.company_id = @DepartmentID AND L.id = @TechId
			END
		 END

		INSERT INTO TaskTypeTechBillableRate ([DId]
			,[TaskTypeId]
			,[TechId]
			,[HourlyRate]) 
		VALUES 
			(@DepartmentID,
			@TaskTypeId,
			@TechId,
			@HourlyRate)
	 END
	ELSE 
	 BEGIN
		UPDATE TaskTypeTechBillableRate 
			SET HourlyRate = @HourlyRate 
		WHERE 
			DId = @DepartmentID 
			AND 
			TaskTypeId = @TaskTypeId 
			AND 
			TechId = @TechId	
	 END
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateTaskTypeTechCost]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateTaskTypeTechCost]
(
		@DId int,
        @TaskTypeID int,
        @TechID int,
		@NewCost smallmoney
)
AS

IF (@TechID > 0)
BEGIN
	DECLARE @TTCount int
	SET @TTCount = 0

	SELECT @TTCount = COUNT(Id)
	FROM TaskTypeTechCost
	WHERE
		DId = @DId
		AND
		TaskTypeId = @TaskTypeID
		AND
		TechId = @TechID
	
	IF @TTCount = 0
	BEGIN
		INSERT INTO TaskTypeTechCost
			(DId, TaskTypeId, TechId, Cost)
		VALUES
			(@DId, @TaskTypeID, @TechID, @NewCost)
	END
	ELSE
	BEGIN
		UPDATE TaskTypeTechCost
		SET
			Cost = @NewCost
		WHERE
			DId = @DId
			AND
			TaskTypeId = @TaskTypeID
			AND
			TechId = @TechID
	END
END
ELSE
BEGIN
	UPDATE TaskType
	SET
		EstimatedCost = @NewCost
	WHERE
		DepartmentID = @DId
		AND
		TaskTypeId = @TaskTypeID		
END

SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[sp_UpdateTechCheckInStatus]...';


GO

CREATE Procedure sp_UpdateTechCheckInStatus
	(
		@DId int,
		@UserId int,
		@Status bit
	)

As
	UPDATE tbl_LoginCompanyJunc SET CheckinStatus = @Status WHERE company_id=@DId AND id=@UserId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTechConfigHourlyBillableRate]...';


GO
CREATE Procedure dbo.sp_UpdateTechConfigHourlyBillableRate
(
		@DepartmentId int,
		@TechId int,
		@configHourlyBillableRate smallmoney
	)
As
	UPDATE tbl_LoginCompanyJunc 
		SET 
			configHourlyBillableRate = @configHourlyBillableRate
	WHERE id = @TechId AND company_id = @DepartmentId
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketAsset]...';


GO
CREATE Procedure dbo.sp_UpdateTicketAsset
	(
		@Id int OUTPUT,
		@DId int,
		@TicketId int,
		@AssetId int,
		@SerialTagNumber nvarchar(50),
		@Description nvarchar(255)
	)

As
	IF @AssetId=0
		SET @AssetId=NULL
	IF NOT @AssetId IS NULL
		SELECT @Id=Id FROM TicketAssets WHERE DId=@DId AND TicketId=@TicketId AND AssetId=@AssetId
	ELSE
		SELECT @Id=Id FROM TicketAssets WHERE DId=@DId AND TicketId=@TicketId AND SerialTagNumber=@SerialTagNumber

	IF @Id IS NULL
	BEGIN 
		INSERT INTO TicketAssets (DId, TicketId, AssetId, SerialTagNumber, Description) VALUES (@DId, @TicketId, @AssetId,  @SerialTagNumber, @Description)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE TicketAssets SET AssetId=@AssetId, SerialTagNumber=@SerialTagNumber, Description=@Description WHERE DId=@DId AND Id=@Id
		
	UPDATE tbl_ticket SET UpdatedTime=getutcdate() WHERE company_id = @DId AND id = @TicketId







/****** Object:  StoredProcedure [dbo].[sp_DeleteTicketAsset]    Script Date: 02/15/2011 15:19:57 ******/
SET ANSI_NULLS OFF
GO
PRINT N'Creating [dbo].[sp_UpdateTicketAssignment]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.sp_UpdateTicketAssignment
	@DepartmentId int,
	@TicketId int,
	@StartUserId int,
	@StopUserId int = NULL,
	@AssignmentType int,
	@IsPrimary bit = 0
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @StopUserId IS NOT NULL
		UPDATE TicketAssignment SET StopDate = GETUTCDATE() WHERE DepartmentId = @DepartmentId AND TicketId = @TicketId AND AssignmentType = @AssignmentType AND UserId = @StopUserId AND StopDate IS NULL

	IF @StartUserId IS NOT NULL
		EXEC sp_InsertTicketAssignment @DepartmentId, @TicketId, @StartUserId, @AssignmentType, @IsPrimary, 1
END
GO
PRINT N'Creating [dbo].[sp_UpdateTicketAssignmentDetach]...';


GO
CREATE Procedure [dbo].[sp_UpdateTicketAssignmentDetach]
	(
		@DepartmentId int,
		@TicketId int,
		@AssignmentId int
	)

As
	UPDATE TicketAssignment SET 
			StopDate = GETUTCDATE()
		WHERE DepartmentId = @DepartmentId AND TicketId = @TicketId AND Id = @AssignmentId;

	UPDATE tbl_ticket SET UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND id = @TicketId







/****** Object:  StoredProcedure [dbo].[sp_InsertTicketAssignment]    Script Date: 02/15/2011 16:49:57 ******/
SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[sp_UpdateTicketCategory]...';


GO
CREATE Procedure dbo.sp_UpdateTicketCategory
	(
		@DepartmentId int,
		@TicketId int,
		@CategoryId int		
		
	)

As

	UPDATE tbl_ticket SET CreationCatsId = @CategoryId, UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND Id = @TicketId

	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketConfirmation]...';


GO
CREATE Procedure dbo.sp_UpdateTicketConfirmation
	(
		@DepartmentId int,
		@TicketId int,
		@UId int,	
		@btConfirmed bit,
		@vchConfirmedNote nvarchar(254)		
		
	)

As

	UPDATE tbl_ticket SET intConfirmedBy = @UId, btConfirmed=@btConfirmed, vchConfirmedNote=@vchConfirmedNote, dtConfirmed=getutcdate(), UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND Id = @TicketId

	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketCriteria]...';


GO
CREATE Procedure dbo.sp_UpdateTicketCriteria
	(
		@DId int,
		@Id int OUTPUT,
		@UserId int,
		@NotificationRuleId int,
		@CriteriaType tinyint,
		@CriteriaName nvarchar(255),
		@btLimitToAssignedTkts bit,
		@btDisabledReports bit,
		@btNoFilter bit
	)

As
	IF @Id IS NULL OR @Id=0
	BEGIN
		IF EXISTS(SELECT * FROM TicketCriterias WHERE DId=@DId AND CriteriaName=@CriteriaName)
			RETURN -1
		ELSE
		BEGIN
			INSERT INTO TicketCriterias (DId, UserId, NotificationRuleId, CriteriaType, CriteriaName, btLimitToAssignedTkts, btDisabledReports, btNoFilter) VALUES (@DId, @UserId, @NotificationRuleId,  @CriteriaType, @CriteriaName, @btLimitToAssignedTkts, @btDisabledReports, @btNoFilter)
			SET @Id=@@IDENTITY
		END
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT * FROM TicketCriterias WHERE DId=@DId AND Id<>@Id AND CriteriaName=@CriteriaName)
			RETURN -1
		ELSE
			UPDATE TicketCriterias SET DId=@DId, UserId=@UserId,  NotificationRuleId=@NotificationRuleId, CriteriaType=@CriteriaType, CriteriaName=@CriteriaName, btLimitToAssignedTkts=@btLimitToAssignedTkts, btDisabledReports=@btDisabledReports, btNoFilter=@btNoFilter WHERE DId=@DId AND Id=@Id
	END
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdateTicketCriteriaData]...';


GO

CREATE Procedure dbo.sp_UpdateTicketCriteriaData

	(
		@DId int,
		@TicketCriteriaId int,
		@FilterType tinyint,
		@FilterDataId int,
		@btExclude bit,
		@Enabled bit
	)

As

IF @Enabled=0
BEGIN
	DELETE FROM TicketCriteriaData WHERE DId=@DId AND TicketCriteriaId=@TicketCriteriaId AND FilterDataId=@FilterDataId AND FilterType=@FilterType
	RETURN 0
END
ELSE
BEGIN
	DECLARE @Id int
	SELECT @Id=Id FROM TicketCriteriaData WHERE DId=@DId AND TicketCriteriaId=@TicketCriteriaId AND FilterDataId=@FilterDataId AND FilterType=@FilterType
	IF @Id IS NULL
	BEGIN
		INSERT INTO TicketCriteriaData (DId, TicketCriteriaId, FilterType, FilterDataId, btExclude) VALUES (@DId, @TicketCriteriaId, @FilterType, @FilterDataId, @btExclude)
		SET @Id=@@IDENTITY
	END
	ELSE
		UPDATE TicketCriteriaData SET btExclude=@btExclude WHERE DId=@DId AND Id=@Id
	RETURN @Id
END
GO
PRINT N'Creating [dbo].[sp_UpdateTicketEndUser]...';


GO
CREATE Procedure dbo.sp_UpdateTicketEndUser

	(
		@DepartmentId int,
		@TicketId int,
		@UserId int
	)

As

	BEGIN TRANSACTION
		DECLARE @OldUserId int
		SELECT @OldUserId = [User_id] FROM tbl_ticket WHERE company_id = @DepartmentId ANd id = @TicketId
		
		UPDATE tbl_ticket set [User_id] = @UserId, UpdatedTime=getutcdate() WHERE company_id = @DepartmentId ANd id = @TicketId
		EXEC sp_UpdateTicketAssignment @DepartmentId, @TicketId, @UserId, @OldUserId, 1, 1
	COMMIT TRANSACTION
	
	return








SET QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_UpdateTicketEstimatedTime]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateTicketEstimatedTime]
(		
	@DepartmentID int,
	@TicketID int,
	@UserID int,	
	@Budget decimal(10,4)
)
AS

	DECLARE @CountHoursRemaining int,
		@RemainingHours decimal(10,4),
		@TotalHours decimal(10,4),
		@TktStatus varchar(15)
		
	SET @RemainingHours = NULL
	
	SELECT @TktStatus = tbl_ticket.Status, @TotalHours = ISNULL(TotalHours, 0) FROM tbl_ticket WHERE (Id = @TicketID) AND (company_id = @DepartmentID)
	
	IF @TktStatus = 'Closed'
	 BEGIN
		SET @RemainingHours = 0
	 END
	ELSE
	 BEGIN
	  DECLARE @btCfgToDo bit,
		@HoursEstimatedRemaining decimal(10, 4)
	  
	  IF ISNULL(@Budget, 0) > 0 OR ISNULL(@HoursEstimatedRemaining, 0) > 0
	   BEGIN
		SET @CountHoursRemaining = 0
		SELECT @CountHoursRemaining = COUNT(Id) FROM TicketTime 
		WHERE 
			(DepartmentId = @DepartmentID)
			AND
			(TicketId = @TicketID) 
			AND 
			Deleted = 0
			AND
			HoursRemaining IS NOT NULL
		IF @CountHoursRemaining = 0 
		 BEGIN
			SET @RemainingHours = ISNULL(@Budget, 0) - ISNULL(@TotalHours, 0)
		 END
	   END
	  SET @btCfgToDo = dbo.fxGetConfigValueBit(@DepartmentID, 'btCfgToDo')
	  IF @btCfgToDo = 1
	   BEGIN
		SELECT 
			@HoursEstimatedRemaining = ISNULL(SUM(ISNULL([ToDoItem].[HoursEstimatedRemaining], 0)), 0)
		FROM [ToDoItem]
		INNER JOIN
			ToDoList ON ToDoItem.DId = ToDoList.DId AND ToDoItem.ToDoListId = ToDoList.Id
		WHERE
			[ToDoItem].[DId] = @DepartmentID
			AND
			ToDoList.[TicketId] = @TicketID
			AND
			[ToDoItem].[Completed] = 0
			
		IF ISNULL(@HoursEstimatedRemaining, 0) <> 0
		BEGIN
			SET @RemainingHours = ISNULL(@RemainingHours, 0) + @HoursEstimatedRemaining
		END
	   END
	 END
	 IF @RemainingHours IS NULL
	 BEGIN
		SELECT TOP 1
			@RemainingHours = HoursRemaining
		FROM 
			TicketTime 
		WHERE 
			(DepartmentId = @DepartmentID)
			AND
			(TicketId = @TicketID) 
			AND 
			Deleted = 0
			AND
			HoursRemaining IS NOT NULL
		ORDER BY
			Date DESC, Id DESC
	 END
		 
	UPDATE [tbl_ticket]
	SET	
		EstimatedTime = @Budget, RemainingHours = @RemainingHours
	WHERE company_id = @DepartmentID AND Id = @TicketID

	DECLARE @dtCreatedTime smalldatetime
	
	SET @dtCreatedTime = getutcdate()

	INSERT INTO TicketTimeEstimated
           ([DId]
           ,[TicketId]           
           ,[UserId]
           ,[Date]
           ,[EstimatedTime]
           ,[CreatedTime]
           ,[CreatedBy])
     VALUES
           (@DepartmentID, @TicketID, @UserID, @dtCreatedTime, @Budget, @dtCreatedTime, @UserID)



SET QUOTED_IDENTIFIER ON
GO
PRINT N'Creating [dbo].[sp_UpdateTicketFolder]...';


GO
CREATE Procedure dbo.sp_UpdateTicketFolder
(
		@DepartmentId int,
		@TicketId int,
		@FolderId int = null
	)

As
	UPDATE tbl_ticket set Folder_id = @FolderId, UpdatedTime=getutcdate() WHERE company_id = @DepartmentId ANd id = @TicketId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketHandledCC]...';


GO
--VGOOZ: 14-MAR-2005 - added Call Centre support
CREATE Procedure dbo.sp_UpdateTicketHandledCC
(
		@CompanyId int,
		@TicketId int,
		@btHandledByCallCentre bit		
	)

As
	UPDATE tbl_ticket SET btHandledByCC = @btHandledByCallCentre, UpdatedTime=getutcdate() WHERE company_id = @CompanyId AND Id = @TicketId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketIDMethod]...';


GO
--VGOOZ: 12-MAR-2005 - added support ticket id method
CREATE Procedure dbo.sp_UpdateTicketIDMethod
	(
		@CompanyId int,
		@TicketId int,
		@vchIdMethod nvarchar(255)		
	)

As
	UPDATE tbl_ticket SET vchIdMethod = @vchIdMethod, UpdatedTime=getutcdate() WHERE company_id = @CompanyId AND Id = @TicketId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketLog]...';


GO
CREATE Procedure dbo.sp_UpdateTicketLog
(
	@DId int,
	@Id int,
	@vchNote nvarchar(max),
	@Hidden bit,
	@EditedBy int
)

As
	
	UPDATE TicketLogs
	SET
		vchNote = @vchNote,
		Hidden = @Hidden,
		EditedBy = @EditedBy,
		EditedTime = getutcdate()
	WHERE
		DId = @DId
		AND
		Id = @Id
GO
PRINT N'Creating [dbo].[sp_UpdateTicketLogEntry]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_UpdateTicketLogEntry]
	@DepartmentId int,
	@LogEntryId int,
	@LogEntryText nvarchar(max),
	@UpdateMode int = 1 /*1 - Append, 2 - Prepend, 3 - Replace*/
AS
BEGIN
	SET NOCOUNT ON;
	
	IF (@UpdateMode NOT IN (1,2,3))
	 RETURN
	
	DECLARE @vchNote nvarchar(max)
	SELECT @vchNote=vchNote FROM TicketLogs WHERE DId = @DepartmentId AND Id = @LogEntryId
	IF (LEN(@vchNote)+LEN(@LogEntryText))>4899
	BEGIN
		SET @vchNote=REPLACE(@vchNote, '--Text truncated at 5000 characters--<br><br>', '')
		SET @vchNote=REPLACE(@vchNote, '<br><br>--Text truncated at 5000 characters--', '')
		SET @vchNote=SUBSTRING(@vchNote, 1, 9600-LEN(@vchNote)-LEN(@LogEntryText))
		SET @vchNote='--Text truncated at 4000 characters--<br><br>'+@vchNote+'<br><br>--Text truncated at 5000 characters--'
	END 
	UPDATE TicketLogs SET
		vchNote = (CASE (@UpdateMode) WHEN 0 THEN vchNote WHEN 1 THEN @vchNote + '<br><br>' + @LogEntryText WHEN 2 THEN @LogEntryText + '<br><br>' + @vchNote WHEN 3 THEN @LogEntryText END)
		WHERE DId = @DepartmentId AND Id = @LogEntryId
END
GO
PRINT N'Creating [dbo].[sp_UpdateTicketNextStep]...';


GO
CREATE  PROCEDURE dbo.sp_UpdateTicketNextStep
(
		@DepartmentId int,
		@TicketId int,
		@NextStep nvarchar(100) = null	
)

As
	DECLARE @NextStepPrev nvarchar(100),
		@NextStepDate datetime
	
	SELECT
		@NextStepPrev = ISNULL(NextStep, ''),
		@NextStepDate = NextStepDate
	FROM
		tbl_ticket
	WHERE
		company_id = @DepartmentId AND Id = @TicketId
		
	IF @NextStepPrev <> ISNULL(@NextStep, '')
	BEGIN
		SET @NextStepDate = getutcdate()
	END

	UPDATE tbl_ticket SET NextStep=@NextStep, NextStepDate = @NextStepDate, UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND Id = @TicketId

	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketPseudoId]...';


GO
CREATE  PROCEDURE dbo.sp_UpdateTicketPseudoId
(
		@DepartmentId int,
		@TicketId int,
		@PseudoId char(6)	
)

As

	UPDATE tbl_ticket SET PseudoId = @PseudoId WHERE company_id = @DepartmentId AND Id = @TicketId
GO
PRINT N'Creating [dbo].[sp_UpdateTicketResolution]...';


GO
CREATE Procedure dbo.sp_UpdateTicketResolution
(
		@DepartmentId int,
		@TicketId int,
		@ResolutionId int,
		@btResolved bit		
	)

As
/* Commented by VGOOZ at 15-DEC-2004
	DECLARE @btResolved bit
	SELECT @btResolved=btResolved FROM ResolutionCats WHERE Id=@ResolutionId AND DId=@DepartmentId
*/
	
	IF @btResolved IS NULL
		RETURN 1 --VGOOZ: 24-DEC-2004 resolving status must be entered before ticket may be closed.

	DECLARE @intResolutionsCount int
	IF @ResolutionId IS NULL
	BEGIN	
		SELECT @intResolutionsCount=COUNT(*) FROM ResolutionCats WHERE DId=@DepartmentId AND btResolved=@btResolved AND btInactive=0
		IF @intResolutionsCount>0
			RETURN 2 --VGOOZ: 24-DEC-2004 resolution must be entered before ticket may be closed
	END

	DECLARE @btCfgCON bit
	SELECT @btCfgCON = dbo.fxGetConfigValueBit(@DepartmentId, 'btCfgCON')
	

	IF @btResolved=1
	BEGIN
		UPDATE tbl_ticket SET ResolutionCatsId = @ResolutionId, btResolved=1, UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND Id = @TicketId
		IF @btCfgCON=0
			UPDATE tbl_ticket SET btConfirmed = 1, UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND Id = @TicketId			
	END
	ELSE
		UPDATE tbl_ticket SET ResolutionCatsId = @ResolutionId, btResolved=0,  btConfirmed=NULL, intConfirmedBy=NULL, dtConfirmed=NULL, vchConfirmedNote=NULL, UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND Id = @TicketId
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdateTicketRoom]...';


GO
CREATE Procedure dbo.sp_UpdateTicketRoom
(
		@CompanyId int,
		@TicketId int,
		@Room nvarchar(50)		
	)

As
	UPDATE tbl_ticket SET Room = @Room, UpdatedTime=getutcdate() WHERE company_id = @CompanyId AND Id = @TicketId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketStatus]...';


GO
CREATE Procedure dbo.sp_UpdateTicketStatus
(
		@CompanyId int,
		@TicketId int,
		@Status int
		/*
		1 = Set to Closed
		2 = On Hold
		3 = Open
		
		*/
	)

As
	
	if @Status = 2
		BEGIN
			UPDATE tbl_ticket SET status = 'On Hold', UpdatedTime=getutcdate() WHERE company_id = @CompanyId AND Id = @TicketId
		END
		
	if @Status = 3
		BEGIN
			UPDATE tbl_ticket SET status = 'Open', UpdatedTime=getutcdate() WHERE company_id = @CompanyId AND Id = @TicketId
		END
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketSubject]...';


GO
CREATE  PROCEDURE dbo.sp_UpdateTicketSubject
(
		@DepartmentId int,
		@TicketId int,
		@Subject nvarchar(100),
		@NextStep nvarchar(100) = null	
	)

As
	DECLARE @NextStepPrev nvarchar(100),
		@NextStepDate datetime
	
	SELECT
		@NextStepPrev = ISNULL(NextStep, ''),
		@NextStepDate = NextStepDate
	FROM
		tbl_ticket
	WHERE
		company_id = @DepartmentId AND Id = @TicketId
		
	IF @NextStepPrev <> ISNULL(@NextStep, '')
	BEGIN
		SET @NextStepDate = getutcdate()
	END

	UPDATE tbl_ticket SET Subject = @Subject, NextStep=@NextStep, NextStepDate = @NextStepDate, UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND Id = @TicketId

	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketSubmissionCat]...';


GO
--VGOOZ: 15-MAR-2005 - added Submission Category support
CREATE Procedure dbo.sp_UpdateTicketSubmissionCat
(
		@CompanyId int,
		@TicketId int,
		@vchSubmissionCat nvarchar(50)
	)

As
	--VGOOZ:15-SEP-2005: tkt #2605 - Submission Category
	DECLARE @intSubmissionCatId int
	DECLARE @intParentSubCatdId int
	IF NOT @vchSubmissionCat IS NULL
		SELECT @intSubmissionCatId=Id, @intParentSubCatdId=ParentId FROM SubmissionCategories WHERE vchName=@vchSubmissionCat
	IF @intParentSubCatdId IS NULL
		SELECT TOP 1 @intSubmissionCatId=Id FROM SubmissionCategories WHERE ParentId=@intSubmissionCatId
	
	UPDATE tbl_ticket SET intSubmissionCatId = @intSubmissionCatId, UpdatedTime=getutcdate() WHERE company_id = @CompanyId AND Id = @TicketId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketTechnician]...';


GO
CREATE Procedure dbo.sp_UpdateTicketTechnician	
(
		@CompanyId int,
		@TicketId int,
		@NewTechnicianId int,
		@KeepTechnicianAssigned bit
	)

As
	BEGIN TRANSACTION
		DECLARE @OldTechnicianId int
		SELECT TOP 1 @OldTechnicianId=Technician_id FROM tbl_ticket WHERE company_id = @CompanyId AND Id = @TicketId
		UPDATE tbl_ticket SET Technician_id = @NewTechnicianId, UpdatedTime=getutcdate() WHERE company_id = @CompanyId AND Id = @TicketId
		
		DECLARE @OldTechnicianParameter int
		SET @OldTechnicianParameter = CASE @KeepTechnicianAssigned WHEN 0 THEN @OldTechnicianId ELSE NULL END
		
		
		EXEC sp_UpdateTicketAssignment @CompanyId, @TicketId, NULL, @OldTechnicianId, 2, 1
		IF @KeepTechnicianAssigned = 1	
				EXEC sp_UpdateTicketAssignment @CompanyId, @TicketId, @OldTechnicianId, NULL, 2, 0
		
		EXEC sp_UpdateTicketAssignment @CompanyId, @TicketId, @NewTechnicianId, NULL, 2, 1
	COMMIT TRANSACTION
	
return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketTechNote]...';


GO
CREATE Procedure dbo.sp_UpdateTicketTechNote
	(
		@TicketId int,
		@Note ntext
	)

As
	UPDATE tbl_ticket SET
	Note = @Note, UpdatedTime=getutcdate()
	WHERE 
	Id = @TicketId
	
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketToDoEstimatedTime]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTicketToDoEstimatedTime
(
	@DId int,
	@ToDoListId uniqueidentifier
)
AS		
	
	DECLARE @TicketID int
		
	SELECT
		@TicketID = ISNULL(TicketId, 0)
	FROM
		ToDoList
	WHERE
		DId = @DId
		AND
		Id = @ToDoListId
	
	IF @TicketID > 0
	 BEGIN
		
	  UPDATE 
		tbl_ticket 
	  SET 
		RemainingHours = dbo.fxCalculateTicketRemainingHours(@DId, @TicketID)
	  WHERE 
		company_id = @DId
		AND
		Id = @TicketID
	 END
GO
PRINT N'Creating [dbo].[sp_UpdateTicketTravelCosts]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTicketTravelCosts
(
	@DepartmentId int,
	@TicketId int,
	@StartLocation nvarchar(250),
	@EndLocation nvarchar(250),
	@Distance int,
	@DistanceRate money,
	@Date smalldatetime,
	@TicketTravelCostID int,
	@Note nvarchar(250)
)
AS
BEGIN
	
	UPDATE TicketTravelCosts
	SET 
		StartLocation = @StartLocation,
		EndLocation = @EndLocation,
		Distance = @Distance,
		DistanceRate = @DistanceRate,
		Date = @Date,
		Note = @Note
	WHERE
		DepartmentId = @DepartmentId
		AND
		TicketId = @TicketId
		AND
		Id = @TicketTravelCostID


	UPDATE tbl_ticket SET TravelCost = (SELECT sum(Total) FROM TicketTravelCosts WHERE DepartmentId = @DepartmentId AND TicketId = @TicketId), UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND id = @TicketId

END
GO
PRINT N'Creating [dbo].[sp_UpdateTicketWorkpad]...';


GO
CREATE Procedure [dbo].[sp_UpdateTicketWorkpad]
	(
		@TicketId int,
		@Workpad ntext
	)

As
	UPDATE tbl_ticket SET
	Workpad = @Workpad, UpdatedTime=getutcdate()
	WHERE 
	Id = @TicketId
	
	
	return




SET ANSI_NULLS OFF
GO
PRINT N'Creating [dbo].[sp_UpdateTimeLogHourlyRate]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTimeLogHourlyRate
	(
		@DId int,
		@UId int,
		@TaskTypeID int
	)
AS

	DECLARE @UIdIntern int,
		@TaskTypeIDIntern int,
		@HourlyRate smallmoney
		
	SET @HourlyRate = 0
		
	DECLARE TimeLogCursor CURSOR LOCAL FOR
	SELECT DISTINCT TTL.UserId, TTL.TaskTypeId FROM (
		SELECT 
			ISNULL(UserId, 0) AS UserId,
			ISNULL(TaskTypeId, 0) AS TaskTypeId
		FROM 
			TicketTime
		WHERE 
			DepartmentId = @DId 
			AND
			Deleted = 0
			AND 
			BillId IS NULL 
			AND
			(UserId = @UId OR @UId = 0)
			AND
			(TaskTypeId = @TaskTypeID OR @TaskTypeID = 0)
		UNION ALL
		SELECT 
			ISNULL(UserId, 0) AS UserId,
			ISNULL(TaskTypeId, 0) AS TaskTypeId
		FROM 
			ProjectTime		
		WHERE 
			DepartmentId = @DId 
			AND
			Deleted = 0
			AND 
			BillId IS NULL 
			AND
			(UserId = @UId OR @UId = 0)
			AND
			(TaskTypeId = @TaskTypeID OR @TaskTypeID = 0)
			) TTL

	OPEN TimeLogCursor

	FETCH NEXT FROM TimeLogCursor INTO @UIdIntern, @TaskTypeIDIntern
	WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @HourlyRate = dbo.fxGetTimeLogHourlyRate(@DId, @UIdIntern, @TaskTypeIDIntern)
	
			UPDATE
				TicketTime
			SET
				HourlyRate = @HourlyRate
			WHERE 
				DepartmentId = @DId 
				AND
				Deleted = 0
				AND 
				BillId IS NULL 
				AND
				UserId = @UIdIntern
				AND
				TaskTypeId = @TaskTypeIDIntern
				
			
			UPDATE
				ProjectTime
			SET
				HourlyRate = @HourlyRate
			WHERE 
				DepartmentId = @DId 
				AND
				Deleted = 0
				AND 
				BillId IS NULL 
				AND
				UserId = @UIdIntern
				AND
				TaskTypeId = @TaskTypeIDIntern


			FETCH NEXT FROM TimeLogCursor INTO @UIdIntern, @TaskTypeIDIntern
		END

	CLOSE TimeLogCursor
GO
PRINT N'Creating [dbo].[sp_UpdateTktAccount]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateTktAccount]
	(
		@DId int,
		@TId int,
		@AcctId int,
		@AcctLocId int,
		@intTransfer int,
		@btTransferUser bit
	)
AS	
	DECLARE @UId int, @btNoAccount bit
	SET @btNoAccount = 0
	IF @AcctId = -2
		SET @btNoAccount = 1
	IF @AcctId <= 0
		SET @AcctId = NULL
	IF @intTransfer=1
		BEGIN
			SET @UId=(SELECT user_id FROM tbl_ticket WHERE company_id=@DId AND id=@TId)
	
			UPDATE tbl_ticket SET
			ProjectID = CASE WHEN ((intAcctId != @AcctId) AND (intAcctId IS NOT NULL) AND (@AcctId IS NOT NULL)) OR ((intAcctId IS NULL) AND (@AcctId IS NOT NULL)) OR ((intAcctId IS NOT NULL) AND (@AcctId IS NULL)) 
			THEN NULL ELSE ProjectID END,
			intAcctId=@AcctId,AccountLocationId=@AcctLocId,btNoAccount=@btNoAccount
			WHERE company_id=@DId AND (id=@TId) OR (user_id=@UId AND intAcctId IS NULL)
			
			IF @btTransferUser = 1
				EXECUTE [sp_UpdateAcctUserLocation] @DId, @UId, @AcctId, @AcctLocId
		END
	
	IF @intTransfer=2
		BEGIN
			SET @UId=(SELECT user_id FROM tbl_ticket WHERE company_id=@DId AND id=@TId)
	
			UPDATE tbl_ticket SET
			ProjectID = CASE WHEN ((intAcctId != @AcctId) AND (intAcctId IS NOT NULL) AND (@AcctId IS NOT NULL)) OR ((intAcctId IS NULL) AND (@AcctId IS NOT NULL)) OR ((intAcctId IS NOT NULL) AND (@AcctId IS NULL)) 
			THEN NULL ELSE ProjectID END,
			intAcctId=@AcctId,AccountLocationId=@AcctLocId,btNoAccount=@btNoAccount WHERE company_id=@DId AND user_id=@UId
			
			IF @btTransferUser = 1
				EXECUTE [sp_UpdateAcctUserLocation] @DId, @UId, @AcctId, @AcctLocId
		END
	
	IF @intTransfer=0
		BEGIN
			UPDATE tbl_ticket SET 
			ProjectID = CASE WHEN ((intAcctId != @AcctId) AND (intAcctId IS NOT NULL) AND (@AcctId IS NOT NULL)) OR ((intAcctId IS NULL) AND (@AcctId IS NOT NULL)) OR ((intAcctId IS NOT NULL) AND (@AcctId IS NULL)) 
			THEN NULL ELSE ProjectID END,
			intAcctId=@AcctId, AccountLocationId=@AcctLocId,btNoAccount=@btNoAccount 			
			WHERE company_id=@DId AND id=@TId
		END
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateTktClose]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTktClose
(
		@DId int,
		@TId int,
		@UId int,
		@vchNote nvarchar(max),
		@SystemGeneratedText nvarchar(max) = null,
		@dtClosureDate smalldatetime, 
		@EmailCC nvarchar(255) --MRUDKOVSKI: 23-AUG-2005 - added EmailCC field
	)
AS
	SET NOCOUNT ON
	
	EXEC sp_InsertTktLog @DId, @TId, @UId,'Closed',@vchNote,@SystemGeneratedText
		
	--This logic was moved to code by MKhramov on 07.05.2013
	--DECLARE @SLAMinUsed int
	--EXEC sp_SelectSLAMinUsed @DId, @TId, 0, @dtClosureDate, @SLAMinUsed OUTPUT
	
	DECLARE @btInitResponse bit
	SET @btInitResponse = (SELECT btInitResponse FROM tbl_ticket WHERE company_id=@DId AND id=@TId)

	Declare @total_response_min smalldatetime
	Declare @total_complete_time smalldatetime

	SELECT Top 1 @total_response_min=CASE WHEN DATEDIFF(n, new_t.CreateTime, new_tl.dtDate) IS NULL THEN new_t.dtSLAResponse ELSE new_tl.dtDate END 
	FROM tbl_ticket new_t LEFT OUTER JOIN TicketLogs new_tl ON new_tl.TId=new_t.id and new_tl.DId=new_t.company_id
	WHERE 
	new_t.company_id=@DId and
	new_t.id=@TId and 
	new_tl.vchType='Response'
	order by new_tl.dtDate asc

	if @@ROWCOUNT=0 
	BEGIN
 	   select @total_response_min=NULL
	END

	IF @btInitResponse = 0
		BEGIN
			--This logic was moved to code by MKhramov on 07.05.2013
			--DECLARE @SLAResponseMinUsed int
			--EXEC sp_SelectSLAMinUsed @DId, @TId, 1, @dtClosureDate, @SLAResponseMinUsed OUTPUT
			--intSLACompleteUsed = intSLACompleteUsed+@SLAMinUsed, intSLAResponseUsed=intSLAResponseUsed+@SLAResponseMinUsed,
			
			IF @total_response_min IS NULL
				UPDATE tbl_ticket SET status = 'Closed', ClosedTime = @dtClosureDate, btInitResponse=1, EmailCC=@EmailCC, Closed_id=@UId, UpdatedTime=getutcdate(), RemainingHours = 0 WHERE company_id=@DId AND Id=@TId
			ELSE
				UPDATE tbl_ticket SET status = 'Closed', ClosedTime = @dtClosureDate, btInitResponse=1, dtSLAResponse=@total_response_min,  EmailCC=@EmailCC, Closed_id=@UId, UpdatedTime=getutcdate(), RemainingHours = 0 WHERE company_id=@DId AND Id=@TId
		END
	ELSE
		BEGIN
			IF @total_response_min IS NULL
				UPDATE tbl_ticket SET status = 'Closed', ClosedTime = @dtClosureDate, EmailCC=@EmailCC, Closed_id=@UId, UpdatedTime=getutcdate(), RemainingHours = 0 WHERE company_id=@DId AND Id=@TId
			ELSE
				UPDATE tbl_ticket SET status = 'Closed', ClosedTime = @dtClosureDate, dtSLAResponse=@total_response_min, EmailCC=@EmailCC, Closed_id=@UId, UpdatedTime=getutcdate(), RemainingHours = 0 WHERE company_id=@DId AND Id=@TId
		END
	
	DECLARE @TktTechId int
	DECLARE @TktUserId int
	
	SELECT @TktUserId=User_id, @TktTechId=Technician_id FROM tbl_ticket WHERE company_id=@DId AND Id=@TId
	IF @TktUserId=@UId AND @TktTechId<>@UId
		UPDATE tbl_ticket SET NewUserPost=1, NewTechPost=0 WHERE company_id=@DId AND Id=@TId
	ELSE IF @TktUserId<>@UId AND @TktTechId=@UId
		UPDATE tbl_ticket SET NewTechPost=1, NewUserPost=0 WHERE company_id=@DId AND Id=@TId
	ELSE IF @TktUserId<>@UId AND @TktTechId<>@UId
		UPDATE tbl_ticket SET NewUserPost=1, NewTechPost=1 WHERE company_id=@DId AND Id=@TId
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateTktCreationTime]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTktCreationTime
	(
		@DId int,
		@TId int,
		@dtCreationTime smalldatetime
	)
AS
	UPDATE tbl_ticket SET CreateTime = @dtCreationTime, UpdatedTime=getutcdate() WHERE company_id=@DId AND id=@TId
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateTktFUD]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTktFUD
	(
		@DId int,
		@TId int,
		@dtFollowUp smalldatetime,
		@vchFollowUpNote nvarchar(50)
	)
AS
	UPDATE tbl_ticket SET dtFollowUp = @dtFollowUp, FollowUpNote = @vchFollowUpNote, UpdatedTime=getutcdate() WHERE company_id=@DId AND id=@TId
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateTktInitReponse]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTktInitReponse
	(
		@DId int,
		@TId int
	)
AS
	SET NOCOUNT ON
	
	DECLARE @CurrentTime smalldatetime
	SET @CurrentTime = getutcdate()
	
	DECLARE @SLAMinUsed int
	EXEC sp_SelectSLAMinUsed @DId, @TId, 1, @CurrentTime, @SLAMinUsed OUTPUT
	
	UPDATE tbl_ticket SET btInitResponse = 1, intSLAResponseUsed=@SLAMinUsed, UpdatedTime=getutcdate() WHERE company_id=@DId AND id=@TId
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateTktLevel]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTktLevel
	(
		@DId int,
		@UId int,
		@TId int,
		@tintLevel tinyint,
		@vchTktNote nvarchar(250)
	)
AS
	IF @tintLevel < 255
		BEGIN
			UPDATE tbl_ticket SET tintLevel=@tintLevel, UpdatedTime=getutcdate() WHERE company_id=@Did AND id=@TId
			
			EXEC sp_InsertTktLog @DId,@TId,@UId,'Level Changed',@vchTktNote
			
			RETURN 0
		END
	ELSE
		RETURN -1
GO
PRINT N'Creating [dbo].[sp_UpdateTktPartCost]...';


GO
CREATE Procedure dbo.sp_UpdateTktPartCost
	(
		@DepartmentId int,
		@TktId int
	)
As
	DECLARE @PartsCost money
	SET @PartsCost = (SELECT sum( (Qty4Tkt*Cost) + ShippingCost ) FROM tbl_part p WHERE p.company_id = @DepartmentId AND p.ticket_id = @TktId)
	
	IF @PartsCost is NULL
		SET @PartsCost = 0
	
	UPDATE tbl_ticket SET PartsCost = @PartsCost, UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND id = @TktId
	
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTktPriority]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTktPriority
(
		@DId int,
		@TId int,
		@PId int,
		@OldPriName nvarchar(50) OUTPUT,
		@OldPriInt tinyint OUTPUT,
		@NewPriName nvarchar(50) OUTPUT,
		@NewPriInt tinyint OUTPUT
		
	)
AS
	DECLARE @dtTempSLAStart smalldatetime
	DECLARE @dtTempTktCreate smalldatetime
	DECLARE @dtSLAStart smalldatetime
	DECLARE @dtSLACompleteOutput smalldatetime
	DECLARE @dtSLAResponseOutput smalldatetime
	DECLARE @OldPriId int
	
	
	SELECT @dtTempTktCreate = CreateTime, @dtTempSLAStart = dtSLAStart, @OldPriId = PriorityId FROM tbl_ticket WHERE company_id=@DId AND id=@TId
	
	SELECT @OldPriName=Name, @OldPriInt = tintPriority FROM Priorities WHERE DId=@DId AND Id=@OldPriId
	SELECT @NewPriName=Name, @NewPriInt = tintPriority FROM Priorities WHERE DId=@DId AND Id=@PId
	
	/*
	IF @dtTempSLAStart is NULL
		SET @dtSLAStart = @dtTempTktCreate
	ELSE
		SET @dtSLAStart = @dtTempSLAStart
	
	EXEC sp_SelectSLADueDate2 @DId, @PId, 0, @dtSLAStart, @dtSLACompleteOutput OUTPUT
	EXEC sp_SelectSLADueDate2 @DId, @PId, 1, @dtSLAStart, @dtSLAResponseOutput OUTPUT
	UPDATE tbl_ticket SET PriorityId=@PId, dtSLAComplete=@dtSLACompleteOutput, dtSLAResponse=@dtSLAResponseOutput, UpdatedTime=getutcdate() WHERE company_id=@DId and id=@TId	
	--This logic was moved to code by MKhramov on 20.05.2013
	*/
	
	UPDATE tbl_ticket SET PriorityId=@PId, UpdatedTime=getutcdate() WHERE company_id=@DId and id=@TId	
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateTktRCD]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTktRCD
	(
		@DId int,
		@TId int,
		@dtReqComp smalldatetime,
		@vchReqComp nvarchar(50)
	)
AS
	UPDATE tbl_ticket SET dtReqComp = @dtReqComp, ReqCompNote = @vchReqComp, UpdatedTime=getutcdate() WHERE company_id=@DId AND id=@TId
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateTktTimeCost]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTktTimeCost
	(
		@DId int,
		@TId int
	)
AS
	SET NOCOUNT ON
	DECLARE @intMin int
	DECLARE @monLaborCost money
	
	SELECT @intMin=ISNULL(ROUND(sum(Hours*60),0), 0), @monLaborCost=ISNULL(sum(HourlyRate*Hours), 0)
	FROM 
		TicketTime 
	WHERE 
		DepartmentId=@DId 
		AND 
		TicketId=@TId
		AND
		Deleted = 0
		
	UPDATE tbl_ticket SET intTktTimeMin=@intMin, LaborCost=@monLaborCost, UpdatedTime=getutcdate() WHERE company_id=@DId and id=@TId


	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateTktTransferByClass]...';


GO
CREATE Procedure dbo.sp_UpdateTktTransferByClass
(
		@DId int,
		@TId int,
		@ClassId int,
		@OldTechName nvarchar(100) = null OUTPUT,
		@NewTechName nvarchar(100) = null OUTPUT,
		@btNoPriorityChange bit,
		@btKeepCurrentLevel bit = 0,
		@KeepTechnicianAssigned bit = 0
	)

As
	SET NOCOUNT ON
	DECLARE @configPriorities tinyint
	DECLARE @configLVL bit
	DECLARE @LocationId int
	DECLARE @TktStatus varchar(15)
	DECLARE @OldTechId int
	DECLARE @PriorityId int
	DECLARE @tintLevel tinyint
	DECLARE @TechId int
	
	SELECT @configPriorities = CAST(dbo.fxGetConfigValueBit(@DId, 'configPriorities') AS tinyint), @configLVL = dbo.fxGetConfigValueBit(@DId, 'configLVL')
	
	SELECT @LocationId=LocationId, @TktStatus=Status, @OldTechId=technician_id, @PriorityId=PriorityId, @tintLevel=tintLevel FROM tbl_ticket WHERE company_id=@DId AND Id=@TId
	
	IF @btKeepCurrentLevel = 1 AND @configLVL = 1
		exec sp_SelectRouting @DId, @ClassId, @LocationId, @TechId OUTPUT, @tintLevel OUTPUT, 1, null, null
	ELSE
		BEGIN
			SET @tintLevel = null
			exec sp_SelectRouting @DId, @ClassId, @LocationId, @TechId OUTPUT, @tintLevel OUTPUT, 0, null, null
		END
	
	/*
	IF @btNoPriorityChange = 0 AND @configPriorities = 1
		BEGIN			
			DECLARE @ClassPriorityId int
			SET @ClassPriorityId = (SELECT intPriorityId FROM tbl_class WHERE company_id=@DId AND id=@ClassId )
			
			IF @ClassPriorityId is not null AND @ClassPriorityId <> @PriorityId
				BEGIN
					--recalcuate the SLA
					EXEC sp_UpdateTktPriority @DId, @TId, @ClassPriorityId, null, null, null, null
				END
				
		END
	*/
		
	IF @TktStatus = 'On Hold'
		UPDATE tbl_ticket SET Technician_id = @TechId, class_Id = @ClassId, Status='Open', tintLevel=@tintLevel, UpdatedTime=getutcdate() WHERE company_id = @DId AND Id = @TId
	ELSE
		UPDATE tbl_ticket SET Technician_id = @TechId, class_Id = @ClassId, tintLevel=@tintLevel, UpdatedTime=getutcdate() WHERE company_id = @DId AND Id = @TId
		
	IF @OldTechId != @TechId
		BEGIN			
			EXEC sp_UpdateTicketAssignment @DId, @TId, NULL, @OldTechId, 2, 1
		
			IF @KeepTechnicianAssigned = 1	
				EXEC sp_UpdateTicketAssignment @DId, @TId, @OldTechId, NULL, 2, 0
		
			EXEC sp_UpdateTicketAssignment @DId, @TId, @TechId, NULL, 2, 1
		END
	SET @OldTechName = (SELECT lo.LastName+', '+lo.FirstName as FullName FROM tbl_LoginCompanyJunc tlj JOIN tbl_Logins lo ON lo.id=tlj.login_id WHERE tlj.company_id=@DId AND tlj.id=@OldTechId)
	SET @NewTechName = (SELECT lo.LastName+', '+lo.FirstName as FullName FROM tbl_LoginCompanyJunc tlj JOIN tbl_Logins lo ON lo.id=tlj.login_id WHERE tlj.company_id=@DId AND tlj.id=@TechId)
	
	return 0
GO
PRINT N'Creating [dbo].[sp_UpdateToDoItem]...';


GO
CREATE PROCEDURE dbo.sp_UpdateToDoItem
(
	@Id uniqueidentifier,
	@DId int,
	@Text nvarchar(1000),
	@UpdatedBy int,
	@AssignedId int = NULL,
	@HoursEstimatedRemaining decimal(10, 4) = NULL,
	@Due datetime = NULL
)
AS		
	
	UPDATE ToDoItem
	SET
		[Text] = @Text,
		UpdatedAt = getutcdate(),
		UpdatedBy = @UpdatedBy,
		AssignedId = @AssignedId,
		HoursEstimatedRemaining = @HoursEstimatedRemaining,
		Due = @Due
	WHERE
		DId = @DId
		AND
		Id = @Id
	
	DECLARE @ToDoListId uniqueidentifier
	SELECT
		@ToDoListId = ToDoListId
	FROM
		ToDoItem
	WHERE
		DId = @DId
		AND
		Id = @Id
	
	EXEC sp_UpdateTicketToDoEstimatedTime @DId, @ToDoListId
GO
PRINT N'Creating [dbo].[sp_UpdateToDoItemTemplate]...';


GO
CREATE PROCEDURE dbo.sp_UpdateToDoItemTemplate
(
	@Id uniqueidentifier,
	@DId int,
	@Text nvarchar(1000),
	@AssignedId int = NULL,
	@HoursEstimatedRemaining decimal(10, 4) = NULL
)
AS		
	UPDATE
		ToDoItemTemplate
	SET
		[Text] = @Text,
		AssignedId = @AssignedId,
		HoursEstimatedRemaining = @HoursEstimatedRemaining
	WHERE
		DId = @DId
		AND
		Id = @Id
GO
PRINT N'Creating [dbo].[sp_UpdateToDoItemTicketID]...';


GO
CREATE PROCEDURE dbo.sp_UpdateToDoItemTicketID
(
	@Id uniqueidentifier,
	@DId int,
	@UpdatedBy int,
	@TicketId int
)
AS		
	
	UPDATE ToDoItem
	SET
		TicketId = @TicketId,
		UpdatedAt = getutcdate(),
		UpdatedBy = @UpdatedBy,
		Completed = 1
	WHERE
		DId = @DId
		AND
		Id = @Id
GO
PRINT N'Creating [dbo].[sp_UpdateToDoList]...';


GO
CREATE PROCEDURE dbo.sp_UpdateToDoList
(
	@Id uniqueidentifier,
	@DId int,
	@Name nvarchar(50)
)
AS		
	
	UPDATE
		ToDoList
	SET
		Name = @Name
	WHERE
		DId = @DId
		AND
		Id = @Id
GO
PRINT N'Creating [dbo].[sp_UpdateToDoListTemplate]...';


GO
CREATE PROCEDURE dbo.sp_UpdateToDoListTemplate
(
	@Id uniqueidentifier,
	@DId int,
	@Name nvarchar(50)
)
AS		
	UPDATE
		ToDoListTemplate
	SET
		Name = @Name
	WHERE
		DId = @DId
		AND
		Id = @Id
GO
PRINT N'Creating [dbo].[sp_UpdateTravelCost]...';


GO
CREATE Procedure dbo.sp_UpdateTravelCost
	(
		@DepartmentId int,
		@TicketId int,
		@TravelCost money
	)
As
	UPDATE tbl_ticket SET TravelCost = @TravelCost, UpdatedTime=getutcdate() WHERE company_id = @DepartmentId AND id = @TicketId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateUnassignedQue]...';


GO
CREATE Procedure [dbo].[sp_UpdateUnassignedQue]
	(
		@DId int,
		@Id int OUTPUT,
		@QueName nvarchar(50),
		@QueEmail nvarchar(255) = null,
		@bitAllowQueEmailParsing bit
	)
As
	DECLARE @LoginId int
	IF @Id<=0
 	BEGIN 
		IF NOT EXISTS(SELECT 'true' FROM tbl_Logins WHERE Email=@QueEmail AND FirstName=@QueName AND ConfigUnassignedQue = 1)
		BEGIN
			DECLARE @RandomLogin nvarchar(50)
			SET @RandomLogin = CONVERT(varchar(50), getutcdate())+@QueName
			INSERT INTO tbl_Logins (Email, FirstName, LastName, Password, ConfigUnassignedQue) VALUES
				(@RandomLogin, @QueName, 'Queue', 'kf9838475jgmvjf87', 1)
							
			SET @LoginId = (SELECT @@Identity)
				
			INSERT INTO tbl_LoginCompanyJunc (login_id, company_id, UserType_Id, QueEmailAddress, bitAllowQueEmailParsing) VALUES
				(@LoginId, @DId, 4, @QueEmail, @bitAllowQueEmailParsing)	
			SET @Id = (SELECT @@Identity)
		END
	END 
	ELSE 
	BEGIN
		SET @LoginId = (SELECT login_id FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@Id )
	
		UPDATE tbl_LoginCompanyJunc SET QueEmailAddress = @QueEmail, bitAllowQueEmailParsing=@bitAllowQueEmailParsing WHERE company_id=@DId AND id=@Id
	
		UPDATE tbl_Logins SET FirstName = @QueName, LastName='Queue' WHERE id = @LoginId
	
		return
	END
GO
PRINT N'Creating [dbo].[sp_UpdateUserEmail]...';


GO
CREATE Procedure [dbo].[sp_UpdateUserEmail]

	(
		@DId int,
		@OldEmail nvarchar(50),
		@NewEmail nvarchar(50)
	)

As
	IF NOT EXISTS(SELECT 'true' FROM  tbl_Logins L INNER JOIN tbl_LoginCompanyJunc LJ ON L.id = LJ.login_id WHERE LJ.company_id=@DId AND L.Email = @OldEmail)
		RETURN 1 --Old Email Not Found
	IF EXISTS(SELECT 'true' FROM  tbl_Logins L WHERE L.Email = @NewEmail)
		RETURN 2 --New Email is already exist
--	IF EXISTS(SELECT 'true' FROM  tbl_Logins L INNER JOIN tbl_LoginCompanyJunc LJ ON L.id = LJ.login_id WHERE LJ.company_id<>@DId AND L.Email = @OldEmail)
--		RETURN 3 --Email is assigned to login which uses for more then one department
	UPDATE tbl_Logins SET Email=@NewEmail 
	FROM  tbl_Logins L INNER JOIN tbl_LoginCompanyJunc LJ ON L.id = LJ.login_id 
	WHERE LJ.company_id=@DId AND L.Email = @OldEmail
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdateUserGlobalFilterByType]...';


GO

CREATE Procedure dbo.sp_UpdateUserGlobalFilterByType

	(
		@UId int,
		@FilterDataId int,
		@State bit,
		@FilterTypeId int
	)

As
IF @State=0 AND @FilterDataId<0
	DELETE FROM GlobalFilters WHERE LoginId=@UId AND FilterTypeId=@FilterTypeId
ELSE IF @State=0
	DELETE FROM GlobalFilters WHERE LoginId=@UId AND FilterDataId=@FilterDataID AND FilterTypeId=@FilterTypeId
ELSE IF NOT EXISTS(SELECT * FROM GlobalFilters WHERE LoginId=@UId AND FilterDataId=@FilterDataID AND FilterTypeId=@FilterTypeId)
	INSERT INTO GlobalFilters (LoginId, FilterTypeId, FilterDataId) VALUES (@UId, @FilterTypeId, @FilterDataID)
	return
GO
PRINT N'Creating [dbo].[sp_UpdateUserGlobalFiltersState]...';


GO
CREATE Procedure sp_UpdateUserGlobalFiltersState

	(
		@CompanyId int,
		@UserId int,
		@btLimitToAssignedTkts bit,
		@btDisabledReports bit,
		@btGlobalFilterEnabled bit
	)

As
	UPDATE tbl_LoginCompanyJunc SET btLimitToAssignedTkts = @btLimitToAssignedTkts, btDisabledReports=@btDisabledReports, btGlobalFilterEnabled=@btGlobalFilterEnabled WHERE company_id = @CompanyId AND id = @UserId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateUserLocation]...';


GO
CREATE Procedure dbo.sp_UpdateUserLocation
	(
		@Id int OUTPUT,
		@DId int,
		@UId int,
		@LocationId int,
		@IsPrimary bit
	)

As
	IF (@Id IS NULL OR @Id=0) AND EXISTS(SELECT * FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@UId AND LocationId=@LocationId)
		SET @IsPrimary=1
	SELECT TOP 1 @Id=Id FROM UserLocations WHERE DId=@DId AND UId=@UId AND LocationId=@LocationId
	IF @Id IS NULL OR @Id=0
	BEGIN
		IF @LocationId IS NULL OR @LocationId=0
		BEGIN
			DELETE FROM UserLocations WHERE DId=@DId AND UId=@UId
		END
	ELSE
		BEGIN
			INSERT INTO UserLocations (DId, UId, LocationId) VALUES (@DId, @UId, @LocationId)
			SET @Id=@@IDENTITY
			DECLARE @ULCount int
			SELECT @ULCount=Count(*) FROM UserLocations WHERE DId=@DId AND UId=@UId
			IF @ULCount=1
				SET @IsPrimary=1
		END
	END
	ELSE
	BEGIN
		IF @LocationId IS NULL OR @LocationId=0
			SELECT @LocationId=LocationId FROM UserLocations WHERE Id=@Id AND DId=@DId

		UPDATE UserLocations SET UId=@UId, LocationId=@LocationId WHERE Id=@Id AND DId=@DId
	END
	IF @IsPrimary=1
		UPDATE tbl_LoginCompanyJunc SET LocationId=@LocationId WHERE Id=@UId AND company_id=@DId
	ELSE
		UPDATE tbl_LoginCompanyJunc SET LocationId=NULL WHERE Id=@UId AND company_id=@DId AND LocationId=@LocationId
GO
PRINT N'Creating [dbo].[sp_UpdateUserPassword]...';


GO

CREATE PROCEDURE [dbo].[sp_UpdateUserPassword]
	(
		@Email nvarchar(50),
		@vchPasscode nvarchar(50)
	)
AS
	SET NOCOUNT ON 
	
	UPDATE tbl_logins SET Password=@vchPasscode WHERE Email=@Email
	
	UPDATE tbl_LoginCompanyJunc SET configPartialSetup=1 
	FROM tbl_LoginCompanyJunc LJ INNER JOIN tbl_Logins L ON L.id=LJ.login_id 
	WHERE L.Email=@Email
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateUserPrimaryAccount]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateUserPrimaryAccount]
	(
		@DepartmentId int,
		@UserID int,
		@AccountID int	
)
AS
BEGIN
	
	DECLARE @UserAccountID int
	SET @UserAccountID = 0
	
	IF @AccountID = -2
	 BEGIN
		SELECT 
			@UserAccountID = UserAccounts.Id 
		FROM 
			tbl_LoginCompanyJunc 
		INNER JOIN
			UserAccounts ON tbl_LoginCompanyJunc.company_id = UserAccounts.DepartmentId 
				AND ISNULL(tbl_LoginCompanyJunc.intAccountId, -1) = ISNULL(UserAccounts.AccountId , -1)
				AND tbl_LoginCompanyJunc.id = UserAccounts.UserId 
		WHERE 
			tbl_LoginCompanyJunc.company_id = @DepartmentId 
			AND
			tbl_LoginCompanyJunc.id = @UserID
	 END
	ELSE
	 BEGIN
		SELECT 
			@UserAccountID = Id 
		FROM 
			UserAccounts 
		WHERE 
			DepartmentId = @DepartmentId 
			AND 
			ISNULL(AccountId, -1)  = ISNULL(@AccountID, -1)
			AND
			UserId = @UserID
	 END
	
	IF @UserAccountID = 0
	 BEGIN
		SET @AccountID = NULL
		SELECT TOP 1 
			@AccountID = AccountId
		FROM
			UserAccounts 
		WHERE 
			DepartmentId = @DepartmentId 
			AND
			UserId = @UserID
		ORDER BY
			ISNULL(AccountId, 0)
	 END
	 
	 IF @AccountID <> -2
	  BEGIN
	    UPDATE
			tbl_LoginCompanyJunc 
		SET 
			intAccountId = @AccountID 
		WHERE 
			company_id=@DepartmentId
			AND
			Id=@UserID
	  END
		
END
GO
PRINT N'Creating [dbo].[sp_UpdateUserPrimaryLocation]...';


GO
CREATE  PROCEDURE dbo.sp_UpdateUserPrimaryLocation
(
		@DepartmentId int,
		@UserID int,
		@LocationID int	
)

As
	
	UPDATE
		tbl_LoginCompanyJunc 
	SET 
		LocationId=@LocationID 
	WHERE 
		company_id=@DepartmentId
		AND
		Id=@UserID
GO
PRINT N'Creating [dbo].[sp_UpdateUserProfile]...';


GO
CREATE Procedure [dbo].[sp_UpdateUserProfile]
(
		@DId int,
		@UId int,
		@firstname nvarchar(50),
		@lastname nvarchar(50),
		@email nvarchar(50),
		@Title nvarchar(30) = null,
		@password nvarchar(50) = null,
		@phone nvarchar(20) = null,
		@MobilePhone nvarchar(20) = null,
		@creationCatId int,
		@MobileEmail nvarchar(50),
		@MobileEmailType tinyint
	)

As
	/*
	Return 0 = All Okay, 1 = email address is already in use
	*/
	SET NOCOUNT ON
	
	DECLARE @loginId int
	set @loginId = (SELECT login_id FROM tbl_LoginCompanyJunc WHERE company_id = @DId AND id = @UId)
	
	
	if @password is not null
		UPDATE tbl_Logins SET Password=@password WHERE id = @loginId
	
	DECLARE @oldEmail nvarchar(50)
	SET @oldEmail = (SELECT email FROM tbl_logins WHERE id = @loginId)
	IF @oldEmail <>  @email 
		BEGIN
			IF EXISTS (SELECT 'true' FROM tbl_Logins WHERE email = @email)
				return 1
		END
	
	
	UPDATE tbl_logins SET Email=@email, FirstName=@firstname, LastName=@lastname, Title=@Title, phone=@phone, MobilePhone=@MobilePhone, MobileEmail=@MobileEmail, MobileEmailType=@MobileEmailType WHERE id = @loginId 
		
	UPDATE tbl_LoginCompanyJunc SET configPartialSetup = 0, CreationCatId = @creationCatId WHERE company_id = @DId AND id = @UId 
	
	
	return 0
GO
PRINT N'Creating [dbo].[sp_UpdateUserProfileLite]...';


GO
CREATE PROCEDURE dbo.sp_UpdateUserProfileLite
	(
		@DId int,
		@UId int,
		@phone nvarchar(20) = null,
		@MobilePhone nvarchar(20) = null
	)

As
	SET NOCOUNT ON
	
	UPDATE tbl_logins SET phone=@phone, MobilePhone=@MobilePhone WHERE id = (SELECT login_id FROM tbl_LoginCompanyJunc WHERE company_id = @DId AND id = @UId) 
		
--	UPDATE tbl_LoginCompanyJunc SET room=@room, location_id=@locationId WHERE company_id = @DId AND id = @UId 
	
	return 0
GO
PRINT N'Creating [dbo].[sp_UpdateUserProfileLocation]...';


GO
CREATE Procedure [dbo].[sp_UpdateUserProfileLocation]
(
		@DId int,
		@UId int,
		@LocationId int = null
	)

As
	SET NOCOUNT ON
		
	UPDATE tbl_LoginCompanyJunc SET LocationId = @LocationId, configPartialSetup = 0 WHERE company_id = @DId AND id = @UId
	EXEC sp_UpdateUserLocation NULL, @DId, @UId, @LocationId, 1
GO
PRINT N'Creating [dbo].[sp_UpdateUserProfilePrintFontSize]...';


GO
CREATE Procedure dbo.sp_UpdateUserProfilePrintFontSize
(
		@DId int,
		@UId int,
		@printFontSize tinyint = null
	)

As
	SET NOCOUNT ON
		
	UPDATE tbl_LoginCompanyJunc SET printFontSize=@printFontSize WHERE company_id = @DId AND id = @UId
GO
PRINT N'Creating [dbo].[sp_UpdateUserProfileTicketTime]...';


GO
CREATE Procedure dbo.sp_UpdateUserProfileTicketTime
(
		@DId int,
		@UId int,
		@tintTicketTimer tinyint = null
	)

As
	SET NOCOUNT ON
		
	UPDATE tbl_LoginCompanyJunc SET tintTicketTimer=@tintTicketTimer WHERE company_id = @DId AND id = @UId
GO
PRINT N'Creating [dbo].[sp_UpdateUserRoom]...';


GO

CREATE Procedure sp_UpdateUserRoom

	(
		@CompanyId int,
		@UserId int,
		@Room nvarchar(30)
	)

As
	UPDATE tbl_LoginCompanyJunc SET Room = @Room WHERE company_id = @CompanyId AND id = @UserId
	return
GO
PRINT N'Creating [dbo].[sp_UpdateUserToken]...';


GO

CREATE PROCEDURE sp_UpdateUserToken
	(
		@DId int,
		@UId int,
		@Action tinyint, /* 1-New, 2-Read */
		@TOKEN bigint = null OUTPUT
		
	)
AS
	IF @Action = 1
		BEGIN
			SET @TOKEN = CAST((RAND()*(999999999999-9999))+9999 AS BIGINT)
			UPDATE tbl_LoginCompanyJunc SET Token = @Token WHERE company_id=@DId AND id=@UId
		END
		
	IF @Action = 2
		BEGIN
			SET @TOKEN = (SELECT Token FROM tbl_LoginCompanyJunc WHERE company_id=@DId and id=@UId)
		END
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateVendor]...';


GO
CREATE Procedure dbo.sp_UpdateVendor

	(
		@DId int,
		@VendorId int,
		@Name nvarchar(50),
		@Phone nvarchar(20),
		@Fax nvarchar(20),
		@AccountNumber nvarchar(50),
		@Notes ntext
	)

As
	/*
	RETURNS
	- 1 - Duplicate Found
	0 Update Success
	id# insert success
	*/	
IF NOT EXISTS(SELECT 'true' FROM tbl_vendors WHERE company_id = @DId AND name = @Name AND id <> @VendorId)
	BEGIN
		if @VendorId = 0 
			BEGIN
				INSERT INTO tbl_vendors (name,phone,fax,AccountNumber,Notes,company_id) VALUES (@Name,@Phone,@Fax,@AccountNumber,@Notes,@DId)
				return (SELECT @@identity)
			END
		ELSE
			BEGIN
				UPDATE tbl_vendors SET 
					name = @Name,
					phone = @Phone,
					fax = @Fax,
					AccountNumber = @AccountNumber,
					Notes = @Notes
				WHERE
					company_id = @DId AND 
					id = @VendorId
				return 0
			END
	END
ELSE
	return -1
GO
PRINT N'Creating [dbo].[sp_UpdateWorkDays]...';


GO
CREATE PROCEDURE dbo.sp_UpdateWorkDays
	(
		@DId int,
		@charWDays char(7)
	)
AS
	SET NOCOUNT ON
	
	DECLARE @InstId uniqueidentifier
	SET @InstId = (SELECT company_guid FROM tbl_company WHERE company_id=@DId)
	
	UPDATE Mc_Instance SET WorkingDays = @charWDays WHERE InstanceId = @InstId
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_UpdateWrkLstFilter]...';


GO


CREATE Procedure [dbo].[sp_UpdateWrkLstFilter]
	(
		@DId int,
		@UId int,
		@vchLocations nvarchar(1024)=null, --MRUDKOVSKI: 19-SEP-2005 - Enlarged Locations and Classes fields up to 1024 characters.
		@vchClasses nvarchar(1024)=null, --MRUDKOVSKI: 19-SEP-2005 - Enlarged Locations and Classes fields up to 1024 characters.
		@vchStatus nvarchar(100)=null,
		@vchPriority nvarchar(10)=null,
		@btFolder bit=null,
		@btProject bit=null,
		@vchLevels nvarchar(100)=null, 
		@vchAccounts nvarchar(1024)=null --VGOOZ: 23-NOV-2005 - Filter by Accounts
	)
As
	IF EXISTS(SELECT 'true' FROM WrkLstFilters WHERE DId=@DId AND UId=@UId)
		UPDATE WrkLstFilters SET vchLocations=@vchLocations,vchClasses=@vchClasses,vchStatus=@vchStatus,vchPriority=@vchPriority,btFolder=@btFolder,btProject=@btProject,vchLevels=@vchLevels,btFilterEnabled=1, vchAccounts=@vchAccounts WHERE DId=@DId AND UId=@UId
	ELSE
		INSERT INTO WrkLstFilters (DId,UId,vchLocations,vchClasses,vchStatus,vchPriority,btFolder,btProject,vchLevels,btFilterEnabled, vchAccounts) VALUES (@DId,@UId,@vchLocations,@vchClasses,@vchStatus,@vchPriority,@btFolder,@btProject,@vchLevels,1, @vchAccounts)
	
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateWrkLstFilterStatus]...';


GO

CREATE PROCEDURE sp_UpdateWrkLstFilterStatus
	(
		@DId int,
		@UId int,
		@btAction bit
	)
AS
	SET NOCOUNT ON

	IF NOT EXISTS(SELECT 'true' FROM WrkLstFilters WHERE DId=@DId AND UId=@UId)
		INSERT INTO WrkLstFilters (DId,UId,btFilterEnabled) VALUES (@DId,@UId,@btAction)
	ELSE
		UPDATE WrkLstFilters SET btFilterEnabled=@btAction WHERE DId=@DId AND UId=@UId
		
		
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateXMLDownloadDates]...';


GO
CREATE Procedure dbo.sp_UpdateXMLDownloadDates
	(
		@DepartmentId int,
		@StartDate smalldatetime,
		@EndDate smalldatetime
	)
As
	DECLARE @prm nvarchar(max)

	SET @prm = CAST(@StartDate AS nvarchar(max))
	EXEC dbo.sp_UpdateConfigValueStr @DepartmentId, 'TktExportdtStart', @prm

	SET @prm = CAST(@EndDate AS nvarchar(max))
	EXEC dbo.sp_UpdateConfigValueStr @DepartmentId, 'TktExportdtEnd', @prm
	
	return
GO
PRINT N'Creating [dbo].[sp_VerifyLogin]...';


GO

CREATE Procedure sp_VerifyLogin
	(
		@DId int,
		@vchEmail nvarchar(50),
		@UserId int OUTPUT,
		@LoginId int OUTPUT
	)
As
	
	IF EXISTS(SELECT 'true' FROM tbl_Logins WHERE Email=@vchEmail)
		BEGIN
			SET @LoginId = (SELECT id FROM tbl_Logins WHERE Email=@vchEmail)
		
			IF EXISTS(SELECT 'true' FROM tbl_loginCompanyJunc WHERE company_id=@DId AND Login_id=@LoginId)
				BEGIN
					SET @UserId = (SELECT id FROM tbl_loginCompanyJunc WHERE company_id=@DId AND Login_id=@LoginId)
				END
			ELSE
				SET @UserId=-1
		END
	ELSE 
		SET @UserId=0
	
	return
GO
PRINT N'Creating [dbo].[UpdateCreationCats]...';


GO

CREATE PROCEDURE [UpdateCreationCats]
(
	@DId int,
	@Id int,
	@btInactive bit,
	@intCreated int,
	@dtCreated datetime,
	@intUpdatedBy int = NULL,
	@dtUpdated datetime = NULL,
	@vchName nvarchar(50)
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[CreationCats]
	SET
		[btInactive] = @btInactive,
		[intCreated] = @intCreated,
		[dtCreated] = @dtCreated,
		[intUpdatedBy] = @intUpdatedBy,
		[dtUpdated] = @dtUpdated,
		[vchName] = @vchName
	WHERE
		[DId] = @DId
	AND	[Id] = @Id


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[UpdateDeploymentLogger]...';


GO
CREATE PROCEDURE [dbo].[UpdateDeploymentLogger]
(
	@ID int,
	@companyID int,
	@DLOrganizationID int,
	@DLDepartmentID int,
	@Enabled bit
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[DeploymentLogger]
	SET
		[companyID] = @companyID,
		[DLOrganizationID] = @DLOrganizationID,
		[DLDepartmentID] = @DLDepartmentID,
		[Enabled] = @Enabled
	WHERE
		[ID] = @ID


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[UpdateDeploymentLoggerUser]...';


GO
CREATE PROCEDURE [dbo].[UpdateDeploymentLoggerUser]
(
	@ID int,
	@LoginID int,
	@DLUserID int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[DeploymentLoggerUser]
	SET
		[LoginID] = @LoginID,
		[DLUserID] = @DLUserID
	WHERE
		[ID] = @ID


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[UpdateLocationRouteLevels]...';


GO
CREATE PROCEDURE [dbo].[UpdateLocationRouteLevels]
(
	@Id int,
	@DId int,
	@LocationId int,
	@TicketLevel tinyint,
	@TechPoolType int,
	@RoutingMethod int,
	@LastResortTechId int
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[LocationRouteLevels]
	SET
		[LocationId] = @LocationId,
		[TicketLevel] = @TicketLevel,
		[TechPoolType] = @TechPoolType,
		[RoutingMethod] = @RoutingMethod,
		[LastResortTechId] = @LastResortTechId
	WHERE
		[Id] = @Id
	AND	[DId] = @DId


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[UpdateLocations]...';


GO
CREATE PROCEDURE [dbo].[UpdateLocations]
(
	@Id int,
	@DId int,
	@ParentId int = NULL,
	@AccountId int = NULL,
	@LocationTypeId int=null,
	@Name nvarchar(50),
	@Inactive bit,
	@Country nvarchar(50) = NULL,
	@State nvarchar(50) = NULL,
	@City nvarchar(50) = NULL,
	@Address1 nvarchar(255) = NULL,
	@Address2 nvarchar(255) = NULL,
	@ZipCode nvarchar(20) = NULL,
	@Phone1 nvarchar(20) = NULL,
	@Phone2 nvarchar(20) = NULL,
	@WorkPlaces int = NULL,
	@RoomNumber nvarchar(10) = NULL,
	@RoomSize decimal(18,2) = NULL,
	@Description nvarchar(512) = NULL,
	@IsDefault bit
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[Locations]
	SET
		[ParentId] = @ParentId,
		[AccountId] = @AccountId,
		[LocationTypeId] = @LocationTypeId,
		[Name] = @Name,
		[Status] = case when @Inactive=0 then 1 else null end,
		[Country] = @Country,
		[State] = @State,
		[City] = @City,
		[Address1] = @Address1,
		[Address2] = @Address2,
		[ZipCode] = @ZipCode,
		[Phone1] = @Phone1,
		[Phone2] = @Phone2,
		[WorkPlaces] = @WorkPlaces,
		[RoomNumber] = @RoomNumber,
		[RoomSize] = @RoomSize,
		[Description] = @Description,
		[IsDefault] = @IsDefault
	WHERE
		[Id] = @Id
	AND	[DId] = @DId


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[UpdatePriorities]...';


GO

CREATE PROCEDURE [UpdatePriorities]
(
	@DId int,
	@Id int,
	@tintPriority tinyint,
	@Name nvarchar(50),
	@Description ntext = NULL,
	@SLAPercentage tinyint = NULL,
	@SLADays tinyint,
	@SLAHours tinyint,
	@SLAMinutes tinyint,
	@bitDefault bit = NULL,
	@btSkipSaturday bit,
	@btSkipSunday bit,
	@btSkipHolidays bit,
	@btUseBusHours bit,
	@SLAResponsePercentage tinyint = NULL,
	@SLAResponseDays tinyint,
	@SLAResponseHours tinyint,
	@SLAResponseMinutes tinyint,
	@btResponseSkipSaturday bit,
	@btResponseSkipSunday bit,
	@btResponseSkipHolidays bit,
	@btResponseUseBusHours bit,
	@btRstrctUsr bit
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[Priorities]
	SET
		[tintPriority] = @tintPriority,
		[Name] = @Name,
		[Description] = @Description,
		[SLAPercentage] = @SLAPercentage,
		[SLADays] = @SLADays,
		[SLAHours] = @SLAHours,
		[SLAMinutes] = @SLAMinutes,
		[bitDefault] = @bitDefault,
		[btSkipSaturday] = @btSkipSaturday,
		[btSkipSunday] = @btSkipSunday,
		[btSkipHolidays] = @btSkipHolidays,
		[btUseBusHours] = @btUseBusHours,
		[SLAResponsePercentage] = @SLAResponsePercentage,
		[SLAResponseDays] = @SLAResponseDays,
		[SLAResponseHours] = @SLAResponseHours,
		[SLAResponseMinutes] = @SLAResponseMinutes,
		[btResponseSkipSaturday] = @btResponseSkipSaturday,
		[btResponseSkipSunday] = @btResponseSkipSunday,
		[btResponseSkipHolidays] = @btResponseSkipHolidays,
		[btResponseUseBusHours] = @btResponseUseBusHours,
		[btRstrctUsr] = @btRstrctUsr
	WHERE
		[DId] = @DId
	AND	[Id] = @Id


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[UpdateResolutionCats]...';


GO

CREATE PROCEDURE [UpdateResolutionCats]
(
	@Id int,
	@DId int,
	@btInactive bit,
	@intCreated int,
	@dtCreated datetime,
	@intUpdatedBy int = NULL,
	@dtUpdated datetime = NULL,
	@vchName nvarchar(50),
	@ParentId int = NULL,
	@btResolved bit
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[ResolutionCats]
	SET
		[btInactive] = @btInactive,
		[intCreated] = @intCreated,
		[dtCreated] = @dtCreated,
		[intUpdatedBy] = @intUpdatedBy,
		[dtUpdated] = @dtUpdated,
		[vchName] = @vchName,
		[ParentId] = @ParentId,
		[btResolved] = @btResolved
	WHERE
		[Id] = @Id
	AND	[DId] = @DId


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Updatetbl_class]...';


GO
CREATE PROCEDURE [dbo].[Updatetbl_class]
(
	@id int,
	@company_id int,
	@Name nvarchar(50),
	@LastResortTechId int,
	@ConfigDistributedRouting tinyint,
	@tintClassType tinyint,
	@bitRestrictToTechs bit,
	@txtDesc ntext = NULL,
	@bitAllowEmailParsing bit,
	@intPriorityId int = NULL,
	@tintLevelOverride tinyint = NULL,
	@btInactive bit,
	@ParentId int = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[tbl_class]
	SET
		[Name] = @Name,
		[LastResortTechId] = @LastResortTechId,
		[ConfigDistributedRouting] = @ConfigDistributedRouting,
		[tintClassType] = @tintClassType,
		[bitRestrictToTechs] = @bitRestrictToTechs,
		[txtDesc] = @txtDesc,
		[bitAllowEmailParsing] = @bitAllowEmailParsing,
		[intPriorityId] = @intPriorityId,
		[tintLevelOverride] = @tintLevelOverride,
		[btInactive] = @btInactive,
		[ParentId] = @ParentId
	WHERE
		[id] = @id
	AND	[company_id] = @company_id


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Updatetbl_ClassTechnicianJctn]...';


GO
CREATE PROCEDURE [dbo].[Updatetbl_ClassTechnicianJctn]
(
	@id int,
	@class_id int = NULL,
	@LoginCompanyJunc_id int = NULL,
	@locations_id int = NULL,
	@LocationId int = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[tbl_ClassTechnicianJctn]
	SET
		[class_id] = @class_id,
		[LoginCompanyJunc_id] = @LoginCompanyJunc_id,
		[locations_id] = @locations_id,
		[LocationId] = @LocationId
	WHERE
		[id] = @id


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Updatetbl_company]...';


GO
CREATE PROCEDURE [dbo].[Updatetbl_company]
(
	@company_id int,
	@company_name nvarchar(150) = NULL,
	@company_guid uniqueidentifier
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[tbl_company]
	SET
		[company_name] = @company_name,
		[company_guid] = @company_guid
	WHERE
		[company_id] = @company_id


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Updatetbl_LoginCompanyJunc]...';


GO
CREATE PROCEDURE [dbo].[Updatetbl_LoginCompanyJunc]
(
	@id int,
	@login_id int,
	@company_id int,
	@location_id int = NULL,
	@UserType_Id int,
	@Room nvarchar(30) = NULL,
	@CheckinStatus bit,
	@Notes ntext = NULL,
	@QueEmailAddress nvarchar(255) = NULL,
	@dtLastLogin smalldatetime = NULL,
	@configHourlyRate smallmoney,
	@configPartialSetup bit,
	@configEmailNewTicket bit,
	@configEmailTicketResponse bit,
	@configEmailUserTicketResponse bit,
	@configEmailUserNewTicket bit,
	@bitAllowQueEmailParsing bit,
	@Token bigint = NULL,
	@tintLevel tinyint = NULL,
	@SupGroupId int = NULL,
	@intAccountId int = NULL,
	@intAcctLocationId int = NULL,
	@btCfgCCRep bit,
	@vchOrganization nvarchar(50) = NULL,
	@btGlobalFilterEnabled bit,
	@btLimitToAssignedTkts bit,
	@btDisabledReports bit,
	@btUserInactive bit,
	@printFontSize tinyint = NULL,
	@AccountLocationId int = NULL,
	@CreationCatId int = NULL,
	@LocationId int = NULL,
	@tintTicketTimer tinyint = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[tbl_LoginCompanyJunc]
	SET
		[login_id] = @login_id,
		[company_id] = @company_id,
		[location_id] = @location_id,
		[UserType_Id] = @UserType_Id,
		[Room] = @Room,
		[CheckinStatus] = @CheckinStatus,
		[Notes] = @Notes,
		[QueEmailAddress] = @QueEmailAddress,
		[dtLastLogin] = @dtLastLogin,
		[configHourlyRate] = @configHourlyRate,
		[configPartialSetup] = @configPartialSetup,
		[configEmailNewTicket] = @configEmailNewTicket,
		[configEmailTicketResponse] = @configEmailTicketResponse,
		[configEmailUserTicketResponse] = @configEmailUserTicketResponse,
		[configEmailUserNewTicket] = @configEmailUserNewTicket,
		[bitAllowQueEmailParsing] = @bitAllowQueEmailParsing,
		[Token] = @Token,
		[tintLevel] = @tintLevel,
		[SupGroupId] = @SupGroupId,
		[intAccountId] = @intAccountId,
		[intAcctLocationId] = @intAcctLocationId,
		[btCfgCCRep] = @btCfgCCRep,
		[vchOrganization] = @vchOrganization,
		[btGlobalFilterEnabled] = @btGlobalFilterEnabled,
		[btLimitToAssignedTkts] = @btLimitToAssignedTkts,
		[btDisabledReports] = @btDisabledReports,
		[btUserInactive] = @btUserInactive,
		[printFontSize] = @printFontSize,
		[AccountLocationId] = @AccountLocationId,
		[CreationCatId] = @CreationCatId,
		[LocationId] = @LocationId,
		[tintTicketTimer] = @tintTicketTimer
	WHERE
		[id] = @id


	SET @Err = @@Error

	RETURN @Err
END





SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[Updatetbl_Logins]...';


GO
CREATE PROCEDURE [dbo].[Updatetbl_Logins]
(
	@id int,
	@Email nvarchar(50),
	@FirstName nvarchar(50),
	@LastName nvarchar(50),
	@Password nvarchar(50),
	@ConfigUnassignedQue bit,
	@Title nvarchar(30) = NULL,
	@Phone nvarchar(20) = NULL,
	@MobilePhone nvarchar(20) = NULL,
	@sintHourOffset smallint = NULL,
	@tintDateFormat tinyint = NULL,
	@Guid uniqueidentifier = NULL,
	@dtUTCUpdated smalldatetime = NULL,
	@LdapUserSID nvarchar(255) = NULL,
	@LdapUserAccount nvarchar(255) = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[tbl_Logins]
	SET
		[Email] = @Email,
		[FirstName] = @FirstName,
		[LastName] = @LastName,
		[Password] = @Password,
		[ConfigUnassignedQue] = @ConfigUnassignedQue,
		[Title] = @Title,
		[Phone] = @Phone,
		[MobilePhone] = @MobilePhone,
		[sintHourOffset] = @sintHourOffset,
		[tintDateFormat] = @tintDateFormat,
		[Guid] = @Guid,
		[dtUTCUpdated] = @dtUTCUpdated,
		[LdapUserSID] = @LdapUserSID,
		[LdapUserAccount] = @LdapUserAccount
	WHERE
		[id] = @id


	SET @Err = @@Error

	RETURN @Err
END



SET ANSI_NULLS ON




SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[Updatetbl_ticket]...';


GO
CREATE PROCEDURE [dbo].[Updatetbl_ticket]
(
	@Id int,
	@company_id int,
	@User_id int,
	@Technician_id int,
	@Created_id int = NULL,
	@location_id int = NULL,
	@class_id int = NULL,
	@Status varchar(15),
	@Subject nvarchar(100) = NULL,
	@CreateTime smalldatetime,
	@Note ntext = NULL,
	@NewUserPost bit = NULL,
	@NewTechPost bit = NULL,
	@ClosedTime smalldatetime = NULL,
	@btPreventive bit,
	@SerialNumber nvarchar(50) = NULL,
	@folder_id int = NULL,
	@Room nvarchar(30) = NULL,
	@TicketNumber int,
	@CustomXML ntext = NULL,
	@PartsCost smallmoney,
	@LaborCost smallmoney,
	@TravelCost smallmoney,
	@MiscCost smallmoney,
	@PriorityId int = NULL,
	@dtSLAComplete smalldatetime = NULL,
	@dtSLAResponse smalldatetime = NULL,
	@dtSLAStart smalldatetime = NULL,
	@intSLACompleteUsed int,
	@intSLAResponseUsed int,
	@btInitResponse bit,
	@dtReqComp smalldatetime = NULL,
	@ReqCompNote nvarchar(50) = NULL,
	@dtFollowUp smalldatetime = NULL,
	@FollowUpNote nvarchar(50) = NULL,
	@tintLevel tinyint = NULL,
	@intTktTimeMin int,
	@btViaEmailParser bit,
	@intAcctId int = NULL,
	@intAcctLocationId int = NULL,
	@ClosureNote nvarchar(50) = NULL,
	@btResolved bit = NULL,
	@ResolutionCatsId int = NULL,
	@btConfirmed bit = NULL,
	@intConfirmedBy int = NULL,
	@dtConfirmed datetime = NULL,
	@vchConfirmedNote nvarchar(254) = NULL,
	@CreationCatsId int = NULL,
	@vchIdMethod nvarchar(255) = NULL,
	@btHandledByCC bit,
	@intSubmissionCatId int = NULL,
	@EmailCC nvarchar(255) = NULL,
	@AccountLocationId int = NULL,
	@LocationId int = NULL,
	@Closed_id int = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[tbl_ticket]
	SET
		[company_id] = @company_id,
		[User_id] = @User_id,
		[Technician_id] = @Technician_id,
		[Created_id] = @Created_id,
		[location_id] = @location_id,
		[class_id] = @class_id,
		[Status] = @Status,
		[Subject] = @Subject,
		[CreateTime] = @CreateTime,
		[Note] = @Note,
		[NewUserPost] = @NewUserPost,
		[NewTechPost] = @NewTechPost,
		[ClosedTime] = @ClosedTime,
		[btPreventive] = @btPreventive,
		[SerialNumber] = @SerialNumber,
		[folder_id] = @folder_id,
		[Room] = @Room,
		[TicketNumber] = @TicketNumber,
		[CustomXML] = @CustomXML,
		[PartsCost] = @PartsCost,
		[LaborCost] = @LaborCost,
		[TravelCost] = @TravelCost,
		[MiscCost] = @MiscCost,
		[PriorityId] = @PriorityId,
		[dtSLAComplete] = @dtSLAComplete,
		[dtSLAResponse] = @dtSLAResponse,
		[dtSLAStart] = @dtSLAStart,
		[intSLACompleteUsed] = @intSLACompleteUsed,
		[intSLAResponseUsed] = @intSLAResponseUsed,
		[btInitResponse] = @btInitResponse,
		[dtReqComp] = @dtReqComp,
		[ReqCompNote] = @ReqCompNote,
		[dtFollowUp] = @dtFollowUp,
		[FollowUpNote] = @FollowUpNote,
		[tintLevel] = @tintLevel,
		[intTktTimeMin] = @intTktTimeMin,
		[btViaEmailParser] = @btViaEmailParser,
		[intAcctId] = @intAcctId,
		[intAcctLocationId] = @intAcctLocationId,
		[ClosureNote] = @ClosureNote,
		[btResolved] = @btResolved,
		[ResolutionCatsId] = @ResolutionCatsId,
		[btConfirmed] = @btConfirmed,
		[intConfirmedBy] = @intConfirmedBy,
		[dtConfirmed] = @dtConfirmed,
		[vchConfirmedNote] = @vchConfirmedNote,
		[CreationCatsId] = @CreationCatsId,
		[vchIdMethod] = @vchIdMethod,
		[btHandledByCC] = @btHandledByCC,
		[intSubmissionCatId] = @intSubmissionCatId,
		[EmailCC] = @EmailCC,
		[AccountLocationId] = @AccountLocationId,
		[LocationId] = @LocationId,
		[Closed_id] = @Closed_id
	WHERE
		[Id] = @Id


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[Updatetbl_UserType]...';


GO

CREATE PROCEDURE [Updatetbl_UserType]
(
	@id int,
	@Name varchar(50)
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[tbl_UserType]
	SET
		[Name] = @Name
	WHERE
		[id] = @id


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[UpdateTktLevels]...';


GO
CREATE PROCEDURE [dbo].[UpdateTktLevels]
(
	@DId int,
	@tintLevel tinyint,
	@Description nvarchar(2000) = NULL,
	@bitDefault bit = NULL,
	@intLastResortId int,
	@tintRoutingType tinyint,
	@LevelName nvarchar(50) = NULL
)
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	UPDATE [dbo].[TktLevels]
	SET
		[Description] = @Description,
		[bitDefault] = @bitDefault,
		[intLastResortId] = @intLastResortId,
		[tintRoutingType] = @tintRoutingType,
		[LevelName] = @LevelName
	WHERE
		[DId] = @DId
	AND	[tintLevel] = @tintLevel


	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[CleanupClient]...';


GO
CREATE PROCEDURE dbo.CleanupClient
AS
BEGIN
	SET NOCOUNT ON

	PRINT '------------------------------------------------------------------------------------------------------------------------'
	PRINT 'MC tables of the client database'
	PRINT ''

	PRINT 'Mc_EntityFieldsValues'
	DELETE t FROM dbo.Mc_EntityFieldsValues AS t
	INNER JOIN dbo.Mc_EntityField AS f
		ON t.EntityFieldId = f.EntityFieldId
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
			ON f.OrganizationId = o.OrganizationId

	PRINT 'Mc_EntityFieldListsValues'
	DELETE t FROM dbo.Mc_EntityFieldListsValues AS t
	INNER JOIN dbo.Mc_EntityField AS f
		ON t.EntityFieldId = f.EntityFieldId
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
			ON f.OrganizationId = o.OrganizationId

	PRINT 'Mc_EntityField'
	DELETE t FROM dbo.Mc_EntityField AS t
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	PRINT 'Mc_EntityNode'
	DELETE t FROM dbo.Mc_EntityNode AS t
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	PRINT 'Mc_EntityNodeType'
	DELETE t FROM dbo.Mc_EntityNodeType AS t
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	PRINT 'Mc_GroupsInstancesActions'
	DELETE a FROM dbo.Mc_GroupsInstancesActions AS a
	INNER JOIN dbo.Mc_Group AS t
		ON a.GroupId = t.GroupId
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	DELETE a FROM dbo.Mc_GroupsInstancesActions AS a
	INNER JOIN dbo.Mc_Instance AS t
		ON a.InstanceId = t.InstanceId
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	PRINT 'Mc_GroupsInstancesRoles'
	DELETE a FROM dbo.Mc_GroupsInstancesRoles AS a
	INNER JOIN dbo.Mc_Group AS t
		ON a.GroupId = t.GroupId
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	DELETE a FROM dbo.Mc_GroupsInstancesRoles AS a
	INNER JOIN dbo.Mc_Instance AS t
		ON a.InstanceId = t.InstanceId
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	PRINT 'Mc_Message'
	DELETE t FROM dbo.Mc_Message AS t
	INNER JOIN dbo.Temp_LoginsToDelete AS o
		ON t.FromUserId = o.LoginId OR t.ToUserId = o.LoginId

	PRINT 'Mc_OrganizationsUsers'
	DELETE t FROM dbo.Mc_OrganizationsUsers AS t
	INNER JOIN dbo.Temp_LoginsToDelete AS o
		ON t.UserId = o.LoginId

	DELETE t FROM dbo.Mc_OrganizationsUsers AS t
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	PRINT 'Mc_RecurringSchedule'
	DELETE t FROM dbo.Mc_RecurringSchedule AS t
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	PRINT 'Mc_RuleParameters'
	DELETE a FROM dbo.Mc_RuleParameters AS a
	INNER JOIN dbo.Mc_Rule AS t
		ON a.RuleId = t.RuleId
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	PRINT 'Mc_Rule'
	DELETE t FROM dbo.Mc_Rule AS t
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	PRINT 'Mc_SettingsValues'
	DELETE t FROM dbo.Mc_SettingsValues AS t
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	PRINT 'Mc_UsersInstances'
	DELETE a FROM dbo.Mc_UsersInstances AS a
	INNER JOIN dbo.Mc_Instance AS t
		ON a.InstanceId = t.InstanceId
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	DELETE t FROM dbo.Mc_UsersInstances AS t
	INNER JOIN dbo.Temp_LoginsToDelete AS o
		ON t.UserId = o.LoginId

	PRINT 'Mc_UsersGroups'
	DELETE a FROM dbo.Mc_UsersGroups AS a
	INNER JOIN dbo.Mc_Group AS t
		ON a.GroupId = t.GroupId
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	DELETE t FROM dbo.Mc_UsersGroups AS t
	INNER JOIN dbo.Temp_LoginsToDelete AS o
		ON t.UserId = o.LoginId

	PRINT 'Mc_Group'
	DELETE t FROM dbo.Mc_Group AS t
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	PRINT 'Mc_User'
	DELETE t FROM dbo.Mc_User AS t
	INNER JOIN dbo.Temp_LoginsToDelete AS o
		ON t.UserId = o.LoginId

	PRINT ''
	PRINT '------------------------------------------------------------------------------------------------------------------------'
	PRINT 'Deleting the companies and related data from HelpDesk tables'
	PRINT ''

	DECLARE @CompanyId int, @CompanyName nvarchar(250)

	DECLARE CompanyCursor CURSOR LOCAL FOR 
		SELECT c.company_id, c.company_name 
		FROM dbo.tbl_company AS c WITH (READUNCOMMITTED)
		INNER JOIN dbo.Mc_Instance AS i WITH (READUNCOMMITTED)
			ON c.company_guid = i.InstanceId
		INNER JOIN dbo.Temp_OrganizationsToDelete AS o WITH (READUNCOMMITTED)
			ON i.OrganizationId = o.OrganizationId

	OPEN CompanyCursor

	FETCH NEXT FROM CompanyCursor INTO @CompanyId, @CompanyName

	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @CompanyId <> 30
		BEGIN
			EXEC dbo.sp_DeleteDepartment @CompanyId, @CompanyName
		
			PRINT ''
		END
		
		FETCH NEXT FROM CompanyCursor INTO @CompanyId, @CompanyName
	END

	CLOSE CompanyCursor
	DEALLOCATE CompanyCursor

	PRINT '------------------------------------------------------------------------------------------------------------------------'
	PRINT 'MC tables of the client database'
	PRINT ''

	PRINT 'Mc_Instance'
	DELETE t FROM dbo.Mc_Instance AS t
	INNER JOIN dbo.Temp_OrganizationsToDelete AS o
		ON t.OrganizationId = o.OrganizationId

	IF EXISTS (SELECT * FROM dbo.sysobjects WHERE name = N'Temp_LoginsToDelete')
		DROP TABLE dbo.Temp_LoginsToDelete

	IF EXISTS (SELECT * FROM dbo.sysobjects WHERE name = N'Temp_OrganizationsToDelete')
		DROP TABLE dbo.Temp_OrganizationsToDelete
END
GO
PRINT N'Creating [dbo].[sp_AutoResolveUserAccountId]...';


GO
CREATE PROCEDURE dbo.sp_AutoResolveUserAccountId 
	@DepartmentId int,
	@UserId int,
	@AccountId int OUTPUT,
	@AccountLocationId int OUTPUT
AS
BEGIN
	DECLARE @userAccounts TABLE(AccountId int, AccountLocationId int, AccountName nvarchar(1024), EmailSuffixes nvarchar(1024))
	DECLARE @UserAccountsCount int
	DECLARE @UserEmailSuffix nvarchar(256)

	DECLARE @IsAutoresolved bit
	SET @IsAutoresolved = 0
			
	-- Selecting all user accounts with email suffixes
	INSERT INTO @userAccounts
	SELECT UA.AccountId, UA.AccountLocationId, A.vchName, A.vchEmailSuffix
	FROM UserAccounts AS UA
	LEFT JOIN Accounts AS A ON A.DId = UA.DepartmentId AND UA.AccountId = A.Id
	WHERE UA.DepartmentId = @DepartmentId AND UA.UserId = @UserId
	ORDER BY A.vchName ASC

	UPDATE @userAccounts SET EmailSuffixes = (SELECT dbo.fxGetConfigValueStr(@DepartmentId, 'emailSuffixes'))
	WHERE AccountId IS NULL
	--

	SELECT @UserAccountsCount = count(*) FROM @userAccounts
	IF @UserAccountsCount = 1
		BEGIN
			SELECT @AccountId = AccountId, @AccountLocationId = AccountLocationId FROM @userAccounts
			RETURN
		END
	ELSE IF @UserAccountsCount > 0
		BEGIN
			DECLARE @userAcountsWithSameEmailSuffix TABLE(AccountId int, AccountLocationId int, AccountName nvarchar(1024), EmailSuffixes nvarchar(1024))
			DECLARE @userAcountsWithSameEmailSuffixCount int

			SELECT @UserEmailSuffix = RIGHT(vchEmail,LEN(vchEmail)-CHARINDEX('@',vchEmail,1)) FROM vw_Logins WHERE DId=@DepartmentId AND Id=@UserId
			
			INSERT INTO @userAcountsWithSameEmailSuffix	
			SELECT * FROM @userAccounts WHERE ';' + REPLACE(EmailSuffixes,' ','')+';' LIKE '%;'+@UserEmailSuffix+';%'
			
			SELECT @userAcountsWithSameEmailSuffixCount = count(*) FROM @userAcountsWithSameEmailSuffix
			
			IF (@userAcountsWithSameEmailSuffixCount) > 0
				BEGIN
					SELECT TOP 1 @AccountId = AccountId, @AccountLocationId = AccountLocationId FROM @userAcountsWithSameEmailSuffix
					RETURN
				END
			ELSE -- Users account can't be resolved by suffix
				BEGIN
				
					-- Trying to search for account by suffix in the department
					SELECT TOP 1 @AccountId = Id, @IsAutoresolved=1 FROM Accounts WHERE DId = @DepartmentId AND ';' + REPLACE(vchEmailSuffix,' ','')+';' LIKE '%;'+@UserEmailSuffix+';%'
			
					-- If found then assigning ticket and user to this account
					IF @IsAutoresolved = 1
						BEGIN
							SET @AccountLocationId = NULL
							EXECUTE [sp_UpdateAcctUserLocation] @DepartmentId, @UserId, @AccountId, @AccountLocationId
							RETURN
						END
					ELSE
						BEGIN
							SELECT TOP 1 @AccountId = AccountId, @AccountLocationId = AccountLocationId FROM @userAccounts
							RETURN
						END
				END
		END
	ELSE
		BEGIN
			
			SELECT TOP 1 @AccountId = Id, @IsAutoresolved=1 FROM Accounts WHERE DId = @DepartmentId AND ';' + REPLACE(vchEmailSuffix,' ','')+';' LIKE '%;'+@UserEmailSuffix+';%'
			
			IF @IsAutoresolved = 1
				BEGIN
					SET @AccountLocationId = NULL
					EXECUTE [sp_UpdateAcctUserLocation] @DepartmentId, @UserId, @AccountId, @AccountLocationId
				END
			RETURN
		END
END
GO
PRINT N'Creating [dbo].[sp_CompleteToDoItem]...';


GO
CREATE PROCEDURE dbo.sp_CompleteToDoItem
(
	@Id uniqueidentifier,
	@DId int,
	@Completed bit,
	@UpdatedBy int
)
AS		
	
	UPDATE ToDoItem
	SET
		Completed = @Completed,
		UpdatedAt = getutcdate(),
		UpdatedBy = @UpdatedBy
	WHERE
		DId = @DId
		AND
		Id = @Id
		
	DECLARE @ToDoListId uniqueidentifier
	
	SELECT
		@ToDoListId = ToDoListId
	FROM
		ToDoItem
	WHERE
		DId = @DId
		AND
		Id = @Id
	
	EXEC sp_UpdateTicketToDoEstimatedTime @DId, @ToDoListId
GO
PRINT N'Creating [dbo].[sp_CopyToDoItemFromTemplate]...';


GO
CREATE PROCEDURE dbo.sp_CopyToDoItemFromTemplate
(
	@DId int,
	@ToDoItemId uniqueidentifier,
	@ToDoListId uniqueidentifier,
	@ToDoItemTemplateId uniqueidentifier,
	@CreatedBy int
)
AS		
	
	INSERT INTO ToDoItem
		(
		[Id]
      ,[DId]
      ,[ToDoListId]
      ,[CreatedAt]
      ,[CreatedBy]
      ,[Text]
      ,[Completed]
      ,[ToDoItemTemplateId]
      ,[Order]
      ,AssignedId
      ,HoursEstimatedRemaining)
	SELECT
		@ToDoItemId,
		@DId,
		@ToDoListId,
		getutcdate(),
		@CreatedBy,
		[Text],
		0,
		@ToDoItemTemplateId,
		[Order],
		AssignedId,
		HoursEstimatedRemaining
	FROM
		ToDoItemTemplate
	WHERE
		[DId] = @DId
		AND
		Id = @ToDoItemTemplateId
		
	EXEC sp_UpdateTicketToDoEstimatedTime @DId, @ToDoListId
GO
PRINT N'Creating [dbo].[sp_DeleteCategory]...';


GO
CREATE Procedure dbo.sp_DeleteCategory
	(
		@DepartmentId int,
		@CategoryID int
	)
As
	
	DECLARE @RecordsFound int
	SET @RecordsFound = 0
	
	IF EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id = @DepartmentId AND CreationCatsId = @CategoryID)
		SET @RecordsFound = 1
	
	/*
	Return Values 
	
	1 - Record is deleted
	2 - Workload must be transferred.
	*/
	
	IF @RecordsFound = 1
		return 2
	
	IF @RecordsFound = 0
	
		BEGIN
			EXEC dbo.sp_UpdateConfigValueStr @DepartmentId, 'CreationCatId', ''

			UPDATE tbl_LoginCompanyJunc 
			SET CreationCatId=NULL
			WHERE CreationCatId=@CategoryID

			DELETE FROM CreationCats WHERE DId = @DepartmentId AND id = @CategoryID
			return 1
		END
GO
PRINT N'Creating [dbo].[sp_DeleteFreshBooksLinks]...';


GO

CREATE PROCEDURE [dbo].[sp_DeleteFreshBooksLinks]
(
	@DepartmentID int
)
AS
BEGIN
	
	UPDATE
		TicketTime
	SET 
		FBTimeEntryID = NULL
	WHERE 
		DepartmentId = @DepartmentID 
		
	UPDATE
		ProjectTime
	SET 
		FBTimeEntryID = NULL
	WHERE 
		DepartmentId = @DepartmentID 
		
	UPDATE
		TaskType
	SET 
		FBTaskTypeID = NULL
	WHERE 
		DepartmentID = @DepartmentID 
		
	UPDATE
		tbl_LoginCompanyJunc
	SET 
		FBStaffID = NULL
	WHERE 
		company_id = @DepartmentID 
		
	UPDATE
		Project
	SET 
		FBProjectID = NULL
	WHERE 
		CompanyID = @DepartmentID 
		
	UPDATE
		Accounts
	SET 
		FBClientId = NULL,
		FBDefaultProjectId = NULL
	WHERE 
		DId = @DepartmentID 

	exec dbo.sp_UpdateConfigValueStr @DepartmentID, 'FBDefaultProjectId', '0'
	exec dbo.sp_UpdateConfigValueStr @DepartmentID, 'FBClientId', '0'
		
END
GO
PRINT N'Creating [dbo].[sp_DeleteJunkMail]...';


GO

CREATE PROCEDURE [dbo].[sp_DeleteJunkMail]
	(
		@DId int,
		@TId int,
		@intUId int
	)
AS
	
	DECLARE @UId int
	SET @UId = (SELECT User_id FROM tbl_ticket WHERE company_id=@DId and id=@TId)
	
	EXEC sp_DeleteTicket @DId, @TId
	
	IF @UId IS NOT NULL
		BEGIN
			DECLARE @vchEmail nvarchar(50)
			SET @vchEmail = (SELECT L.Email FROM tbl_LoginCompanyJunc LCJ INNER JOIN tbl_Logins L ON L.id=LCJ.login_id WHERE LCJ.company_id=@DId AND LCJ.id=@UId)
			EXEC sp_InsertJunkEmail @DId, @intUId, @vchEmail
		
			IF NOT EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id=@Did and User_id=@UId)
				EXEC sp_DeleteLogin @UId, @DId
		END
	RETURN
GO
PRINT N'Creating [dbo].[sp_DeletePart]...';


GO
CREATE Procedure dbo.sp_DeletePart
	(
		@DId int,
		@TId int, 
		@UId int,
		@PartId int,
		@vchTktLog nvarchar(300)
	)

As
	BEGIN TRANSACTION
	
		DELETE FROM tbl_part WHERE id = @PartId AND company_id=@DId AND ticket_id = @TId
	
		IF NOT EXISTS(SELECT 'true' FROM tbl_part WHERE company_id=@DId AND Status <> 'Arrived' AND Status <> 'Lost' AND ticket_id = @TId)
			UPDATE tbl_ticket SET Status = 'Open', UpdatedTime=getutcdate() WHERE company_id=@DId AND Id = @TId
			
		EXEC sp_InsertTktLog @DId,@TId,@UId,'Parts Request Deleted',@vchTktLog
	
		exec sp_UpdateTktPartCost @DId, @TId
		
	COMMIT TRANSACTION
		
	return
GO
PRINT N'Creating [dbo].[sp_DeleteTicketTime]...';


GO
CREATE PROCEDURE [dbo].[sp_DeleteTicketTime]
(	
	@TicketTimeId int,	
	@DepartmentID int,
	@TicketID int
)
AS

	UPDATE
		TicketTime
	SET 
		Deleted = 1
	WHERE 
		DepartmentId = @DepartmentID 
		AND 
		Id = @TicketTimeId

	DECLARE @TotalHours decimal(10,4)
		
	SELECT 
		@TotalHours = SUM(Hours) 
	FROM 
		TicketTime 
	WHERE 
		(TicketId = @TicketID) 
		AND 
		(DepartmentId = @DepartmentID) 
		AND 
		Deleted = 0

	UPDATE tbl_ticket SET TotalHours = @TotalHours, RemainingHours = dbo.fxCalculateTicketRemainingHours(@DepartmentID, @TicketID) WHERE (Id = @TicketID) AND (company_id = @DepartmentID)	
	exec sp_UpdateTktTimeCost @DepartmentID, @TicketID
GO
PRINT N'Creating [dbo].[sp_DeleteToDoItem]...';


GO
CREATE PROCEDURE dbo.sp_DeleteToDoItem
(
	@Id uniqueidentifier,
	@DId int
)
AS		
	DECLARE @ToDoListId uniqueidentifier
	
	SELECT
		@ToDoListId = ToDoListId
	FROM
		ToDoItem
	WHERE
		DId = @DId
		AND
		Id = @Id

	DELETE
		ToDoItem
	WHERE
		DId = @DId
		AND
		Id = @Id
		
	UPDATE 
		tdi
	SET tdi.[Order] = tdi.rNum
	FROM
	(SELECT row_number() over (order by [Order]) AS rNum,*
	FROM
		ToDoItem 
	WHERE
		DId = @DId
		AND
		ToDoListId = @ToDoListId) tdi
		
	DECLARE @CountToDoItems int,
		@ListName nvarchar(50),
		@TicketID int,
		@ProjectID int,
		@CountToDoLists int
	
	SELECT
		@CountToDoItems = COUNT(*)
	FROM
		ToDoItem 
	WHERE
		DId = @DId
		AND
		ToDoListId = @ToDoListId
		
	SELECT
		@ListName = Name,
		@TicketID = ISNULL(TicketId,0),
		@ProjectID = ISNULL(ProjectId, 0)
	FROM
		ToDoList
	WHERE
		DId = @DId
		AND
		Id = @ToDoListId
		
	SELECT
		@CountToDoLists = COUNT(*)
	FROM
		ToDoList 
	WHERE
		DId = @DId
		AND
		(TicketId = @TicketID OR @TicketID = 0)
		AND
		(ProjectId = @ProjectID OR @ProjectID = 0)
	
	IF @CountToDoItems = 0 AND @ListName = 'Main' AND @CountToDoLists <= 1
	 BEGIN
		EXEC sp_DeleteToDoList @ToDoListId, @DId
	 END
	ELSE
	 BEGIN
		EXEC sp_UpdateTicketToDoEstimatedTime @DId, @ToDoListId
	 END
GO
PRINT N'Creating [dbo].[sp_DeleteUserFomAccount]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_DeleteUserFomAccount]
	@DepartmentId int,
	@AccountId int,
	@UserId int
AS
BEGIN
	DELETE FROM UserAccounts WHERE DepartmentId = @DepartmentId AND ISNULL(AccountId, -1) = @AccountId AND UserId = @UserId
	
	EXECUTE dbo.[sp_UpdateUserPrimaryAccount] @DepartmentId, @UserId, NULL
END
GO
PRINT N'Creating [dbo].[sp_EscalateTicket]...';


GO
CREATE PROCEDURE dbo.sp_EscalateTicket
	(
		@DId int,
		@TId int,
		@UId int,
		@vchDirection varchar(4), /* 'up' OR 'down'*/
		@vchText nvarchar(max) OUTPUT, 
		@vchNoteType nvarchar(50) OUTPUT,
		@intRoutingErrCode int = 0 OUTPUT,
		@KeepTechnicianAssigned bit = 0
	)
AS
	/*-1 = No tech returned from routing routine*/
	SET NOCOUNT ON
	
	DECLARE @tintLevel tinyint
	DECLARE @vchStatus varchar(15)
	DECLARE @intOldTechId int
	DECLARE @intNewTechId int
	DECLARE @tintNewLevel tinyint
	DECLARE @LocationId int
	DECLARE @ClassId int
	DECLARE @SystemGeneratedText nvarchar(max)
	DECLARE @intAcctId int
	DECLARE @intAcctLocId int
	
	SELECT @intAcctId=intAcctId, @intAcctLocId=AccountLocationId, @vchStatus=Status, @tintLevel=tintLevel, @intOldTechId=Technician_id, @LocationId=LocationId, @ClassId=class_id FROM tbl_ticket WHERE company_id=@DId AND Id=@TId
	
	IF @vchDirection = 'up' and @tintLevel<9
		BEGIN
			SET @tintNewLevel = @tintLevel+1
			SET @SystemGeneratedText = 'This ticket has been escalated from a Level '+CONVERT(varchar(2), @tintLevel)+' to a Level '+CONVERT(varchar(2), @tintNewLevel)+' ticket.'
			SET @vchNoteType = 'Escalation'
		END
	
	IF @vchDirection = 'down' AND @tintLevel>1
		BEGIN
			SET @tintNewLevel = @tintLevel-1
			SET @SystemGeneratedText = 'This ticket has been descalated from a Level '+CONVERT(varchar(2), @tintLevel)+' to a Level '+CONVERT(varchar(2), @tintNewLevel)+' ticket.'
			SET @vchNoteType = 'Descalation'
		END
	
	IF @tintNewLevel IS NOT NULL	
		exec sp_SelectRouting @DId, @ClassId, @LocationId, @intNewTechId OUTPUT, @tintNewLevel, 0, @intAcctId, @intAcctLocId, @intRoutingErrCode OUTPUT
	
	IF @intNewTechId IS NOT NULL
		BEGIN
			IF @vchStatus = 'On Hold' OR @vchStatus = 'Closed'
				BEGIN
					SET @SystemGeneratedText = @SystemGeneratedText+'<br>Status changed from "'+@vchStatus+'" to "Open"'
					UPDATE tbl_ticket SET Status='Open', tintLevel=@tintNewLevel, Technician_id=@intNewTechId, NewTechPost=1, NewUserPost=1, UpdatedTime=getutcdate() WHERE company_id=@DId AND id=@TId
					EXEC sp_InsertTktLog @DId,@TId,@UId,@vchNoteType,@vchText,@SystemGeneratedText
				END
			ELSE
				BEGIN
					UPDATE tbl_ticket SET tintLevel=@tintNewLevel, Technician_id=@intNewTechId, NewTechPost=1, NewUserPost=1, UpdatedTime=getutcdate() WHERE company_id=@DId AND id=@TId
					EXEC sp_InsertTktLog @DId,@TId,@UId,@vchNoteType,@vchText,@SystemGeneratedText
				END
			
			IF @intOldTechId != @intNewTechId
				BEGIN			
					EXEC sp_UpdateTicketAssignment @DId, @TId, NULL, @intOldTechId, 2, 1
				
					IF @KeepTechnicianAssigned = 1	
						EXEC sp_UpdateTicketAssignment @DId, @TId, @intOldTechId, NULL, 2, 0
				
					EXEC sp_UpdateTicketAssignment @DId, @TId, @intNewTechId, NULL, 2, 1
				END
			
			SET @vchText=@vchText+'<br><br>'+@SystemGeneratedText
			RETURN 0
		END
	ELSE
		RETURN -1
GO
PRINT N'Creating [dbo].[sp_ImportAccount]...';


GO

CREATE PROCEDURE sp_ImportAccount
	(
		@DId int,
		@vchName nvarchar(100),
		@btActive bit,
		@btOrgAcct bit,
		@vchSupportRepEmail nvarchar(100),
		@vchSupportGroup nvarchar(100),
		@vchLocation nvarchar(50),
		@vchError nvarchar(max)=null OUTPUT
	)
AS
	DECLARE @LocationId int
	DECLARE @SupportGroupId int
	DECLARE @SupportRepId int
	DECLARE @ReturnCode int
	
	--Lookup Location
	IF @vchLocation IS NOT NULL
		BEGIN
			SET @LocationId = (SELECT Id FROM tbl_Locations WHERE DId=@DId AND Name=@vchLocation)
			
			IF @LocationId IS NULL
				SET @vchError=@vchError+'Account '+@vchName+' location '+@vchLocation+' is not found.'+CHAR(13)+CHAR(10)
		END
	
	--Lookup Default Support Rep by Email
	IF @vchSupportRepEmail IS NOT NULL
		BEGIN
			SET @SupportRepId = (SELECT id FROM vw_Logins3 WHERE DId=@DId AND vchEmail=@vchSupportRepEmail)
		
			IF @SupportRepId IS NULL
				SET @vchError=@vchError+'Account '+@vchName+' Support Rep Email '+@vchSupportRepEmail+' is not found.'+CHAR(13)+CHAR(10)
		END
	
	
	--Lookup Support Group
		--JV 9/3/2004 Finish Later
		
	EXEC @ReturnCode = sp_UpdateAccount @DId, @SupportRepId, 0, @vchName, @btActive, @btOrgAcct, @SupportRepId, @SupportGroupId, @LocationId, null, null, null
		/*Return
		-1 = Acct Name already exists
		-2 = Acct Num already exists
		*/
	IF @ReturnCode = -1
		SET @vchError=@vchError+'Account '+@vchName+' already exists. Import skipped.'+CHAR(13)+CHAR(10)
	
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_InsertAccountRate]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertAccountRate]
(
		@CompanyID int,
		@AccountID int = NULL,
		@BillingMethodID int = NULL,
		@FlatFee money = NULL,
		@HourlyBlendedRate smallmoney = NULL,
		@RatePlanID int = NULL,
		@FlatFeeMode int = NULL,
		@FlatFeeNextDate smalldatetime = NULL,
		@QBAccountAlias nvarchar(200) = NULL,
		@QBItemAlias nvarchar(200) = NULL
)
AS
BEGIN
	DECLARE @AccountRateID int
	SET @AccountRateID = 0
	
	IF @AccountId<=0
		SET @AccountId=NULL
	
	SELECT
		@AccountRateID = AccountRateID
	FROM
		AccountRate
	WHERE
		CompanyID = @CompanyID
		AND
		ISNULL(AccountID, 0) = ISNULL(@AccountId, 0)
	
	IF @AccountRateID > 0
	 BEGIN
		EXEC dbo.sp_UpdateAccountRate @AccountRateID, @CompanyID,
			@AccountID, @BillingMethodID, @FlatFee, @HourlyBlendedRate,
			@RatePlanID, @FlatFeeMode, @FlatFeeNextDate, @QBAccountAlias, @QBItemAlias
	 END
	ELSE
	 BEGIN
	  INSERT INTO
		AccountRate
		(
		CompanyID,
		AccountID,
      	BillingMethodID,
		FlatFee,
		HourlyBlendedRate,
		RatePlanID,
		FlatFeeMode,
		FlatFeeNextDate,
		QBAccountAlias,
		QBItemAlias
		)
	  VALUES
		(
		@CompanyID,
		@AccountID,
      	@BillingMethodID,
		@FlatFee,
		@HourlyBlendedRate,
		@RatePlanID,
		@FlatFeeMode,
		@FlatFeeNextDate,
		@QBAccountAlias,
		@QBItemAlias
		)
		
	END
END
GO
PRINT N'Creating [dbo].[sp_InsertAcctUserCheck]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertAcctUserCheck]
	(
		@DId int,
		@AcctId int,
		@vchEmail nvarchar(50),
		@AcctLocationId int,
		@btTransfer bit
	)
AS
	IF @AcctId <= 0
		SET @AcctId = NULL

	IF @AcctLocationId = 0
		SET @AcctLocationId = NULL
		
	DECLARE @GlobalId int
	SET @GlobalId = (SELECT id FROM tbl_Logins WHERE email=@vchEmail)
	
	IF @GlobalId IS NULL
		RETURN 0
	
	IF @GlobalId IS NOT NULL
		BEGIN
			DECLARE @LocalId int
			
			SELECT @LocalId=id FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND login_id=@GlobalId
			
			IF @LocalId IS NOT NULL
				BEGIN
						
--VGOOZ 26-SEP-2005: tkt #2951 - Inactive users functionality	
					UPDATE tbl_LoginCompanyJunc SET btUserInactive=0 WHERE company_id=@DId AND id=@LocalId
					EXECUTE [sp_UpdateAcctUserLocation] @DId, @LocalId, @AcctId, @AcctLocationId
					IF @btTransfer=1
						EXEC sp_TransferAcctOldTickets @DId,@LocalId,@AcctId,@AcctLocationId,0
						
					EXECUTE dbo.[sp_UpdateUserPrimaryAccount] @DId, @LocalId, -2
					RETURN @LocalId
				END
			
			IF @LocalId IS NULL
				BEGIN
					INSERT INTO tbl_LoginCompanyJunc (login_Id, company_id) VALUES (@GlobalId, @DId)
					SET @LocalId = (SELECT @@Identity)
					EXECUTE [sp_UpdateAcctUserLocation] @DId, @LocalId, @AcctId, @AcctLocationId
					EXECUTE dbo.[sp_UpdateUserPrimaryAccount] @DId, @LocalId, -2
					RETURN 	@LocalId
				END
		END
GO
PRINT N'Creating [dbo].[sp_InsertAcctUserGlobal]...';


GO
CREATE PROCEDURE dbo.sp_InsertAcctUserGlobal
	(
		@DId int,
		@AcctId int,
		@vchEmail nvarchar(50),
		@AcctLocationId int,
		@vchPassCode nvarchar(50),
		@vchFirstName nvarchar(50),
		@vchLastName nvarchar(50)
	)
AS
	/* RETURNS >0=all okay, id of user acct; -1=email already in use*/
	SET NOCOUNT ON
	IF NOT EXISTS(SELECT 'true' FROM tbl_Logins WHERE email=@vchEmail)
		BEGIN
			INSERT INTO tbl_Logins (Email, FirstName, LastName, Password) VALUES (@vchEmail, @vchFirstName, @vchLastName, @vchPassCode)
			
			DECLARE @LoginId int
			SET @LoginId = (SELECT @@Identity)
			
			INSERT INTO tbl_LoginCompanyJunc (login_Id,company_id,UserType_Id,configPartialSetup) VALUES (@LoginId,@DId,1,1)
			
			DECLARE @lcgId int
			SET @lcgId = (SELECT @@Identity)

			EXECUTE [sp_UpdateAcctUserLocation] @DId, @lcgId, @AcctId, @AcctLocationId

			RETURN @lcgId
		END
	ELSE
		RETURN -1
GO
PRINT N'Creating [dbo].[sp_InsertAssetLog]...';


GO
CREATE Procedure dbo.sp_InsertAssetLog
	(
		@DId int,
		@UId int,
		@AssetId int,
		@Note ntext = null
	)
As
	DECLARE @FullName nvarchar(100)
	EXEC sp_SelectUserFullName @DId, @UId, @FullName OUTPUT
	
	INSERT INTO AssetLogs (AssetId, Note, dtDate, Name) VALUES (@AssetId, @Note, getutcdate(), @FullName)
	return
GO
PRINT N'Creating [dbo].[sp_InsertEmailResponse]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertEmailResponse]
	(
		@DId int,
		@TId int,
		@Text ntext = null,
		@SystemGeneratedText nvarchar(max) = null,
		@FromEmail nvarchar(100),
		@IsServiceEmail bit,
		@TktNumber int = null OUTPUT
	)
AS
	SET NOCOUNT ON
	/*RETURNS
		 0 = Success
		-1 = Department and Ticket does not exist together
		-2 = ntext is null
		-3 = Email address of sender was not found.
		-4 = Ticket is closed
		-5 = Response ntext is exactly the same as the last response
		-6 = User was found as Inactive
	*/
	
	
	
	IF @Text is NULL
		RETURN -2
	ELSE
		BEGIN
			DECLARE @vchText nvarchar(max)
			SET @vchText = CAST(@Text as nvarchar(3990))
		END
		
	--Commented Out by JV 9/20/2004 - HTML stripping is being done via ASP Script. This routing contained too many bugs.
	--Remove HTML Tags from HTML Emails.
	--SET @vchText=dbo.fxRemoveHTMLTags(@vchText)
	
		
	IF NOT EXISTS(SELECT 'true' FROM tbl_ticket WHERE company_id = @DId AND id = @TId)
		RETURN -1
		
	/*If from postmaster*/
	If @IsServiceEmail=1
		BEGIN
			exec sp_UpdateNewPostIcon @DId, @TId, 1, 0
			DECLARE @TktLogId int
			SET @TktLogId=0
			EXEC @TktLogId=sp_InsertTktLog @DId,@TId,null,'Email Parser',@vchText, 'Response was generated by Email Parser.'
			IF @TktLogId<>0
				UPDATE TicketLogs SET UserName=@FromEmail WHERE DId=@DId AND TId=@TId AND Id=@TktLogId
			RETURN 0
		END
		
	/*if this response text is exactly the same as the last response on this ticket abort*/
	If EXISTS(SELECT 'true' FROM TicketLogs WHERE DId=@DId AND TId=@TId AND vchNote=@vchText)
		RETURN -5
	
	
	/*Lookup the Login Id For the email address*/
	DECLARE @UId int
	DECLARE @btUserInactive bit

	IF NOT EXISTS(SELECT 'true' FROM tbl_Logins L INNER JOIN tbl_LoginCompanyJunc LJ ON LJ.company_id = @DId AND LJ.login_id = L.id AND L.Email = @FromEmail)
		RETURN -3
	ELSE
		SELECT @UId=LJ.id, @btUserInactive=LJ.btUserInactive FROM tbl_Logins L INNER JOIN tbl_LoginCompanyJunc LJ ON LJ.company_id = @DId AND LJ.login_id = L.id AND L.Email = @FromEmail
	IF @btUserInactive=1
		RETURN -6	
	
	EXEC sp_UpdateNewPostIcon @DId, @TId, 1, 0
	EXEC sp_UpdateNewPostIcon @DId, @TId, 0, @UId
	
	DECLARE @TechId int
	DECLARE @btInitResponse bit
	DECLARE @TktStatus varchar(15)

	SELECT @TechId = t.Technician_id, @btInitResponse = btInitResponse, @TktNumber=t.TicketNumber, @TktStatus=t.Status FROM tbl_ticket t WHERE t.company_id=@DId AND t.id = @TId
	
	--This logic was moved to code by MKhramov on 07.05.2013	
	--IF @TechId = @UId AND @btInitResponse = 0
	--	EXEC sp_UpdateTktInitReponse @DId, @TId

	/*INSERT RESPONSE*/
	if @TktStatus = 'On Hold'
		BEGIN
			EXEC sp_InsertTktLog @DId,@TId,@UId,'ReOpened',@vchText, @SystemGeneratedText
			exec sp_UpdateTicketStatus @DId, @TId, 3 /*Set to OPEN */
			RETURN 0
		END
	
	EXEC sp_InsertTktLog @DId,@TId,@UId,'Response',@vchText, @SystemGeneratedText
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_InsertKBArticle]...';


GO



CREATE Procedure [dbo].[sp_InsertKBArticle]
	(
		@DId int,
		@PseudoId char(6),
		@user_id int,
		@subject nvarchar(100),
		@KBPublishLevel tinyint,
		@location int,
		@classID int,
		@dtCreatedTime smalldatetime,
		@Workpad nvarchar(max),
		@KBSearchDesc nvarchar(150),
		@KBAlternateId nvarchar(255),
		@techId int = null,
		@intAcctId int=null,
		@AccountLocationId int=null,
		@vchSubmissionCat nvarchar(50) = null,
		@intCategoryId int = null,
		@btNoAccount bit = NULL
	)

As
	set nocount on
	DECLARE @intErrCode int,
		@tintLevel tinyint,
		@TId int
	SET @intErrCode=0
	SET @tintLevel = NULL
	
	IF @location IS NULL
		IF @intAcctId IS NULL 
			SET @location = (SELECT LocationId FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@user_id)
			
	exec sp_SelectRouting @DId, @classID, @location, @techId OUTPUT, @tintLevel OUTPUT,0,@intAcctId,@AccountLocationId,@intErrCode OUTPUT
	
	IF (@intErrCode <> 0 AND @intErrCode<>-2) OR (@intErrCode=-2 AND @techId IS NULL)
		RETURN @intErrCode
		
	DECLARE @NextTicketNumber int
	SET @NextTicketNumber = CAST(dbo.fxGetConfigValueStr(@DId, 'LastTicketNumber') AS int) + 1

	DECLARE @prm nvarchar(max)
	SELECT @prm = CAST(@NextTicketNumber as NVARCHAR(max))
	EXEC dbo.sp_UpdateConfigValueStr @DId, 'LastTicketNumber', @prm
	
	DECLARE @intSubmissionCatId int
	DECLARE @intParentSubCatdId int
	IF NOT @vchSubmissionCat IS NULL
		SELECT @intSubmissionCatId=Id, @intParentSubCatdId=ParentId FROM SubmissionCategories WHERE vchName=@vchSubmissionCat
	IF @intParentSubCatdId IS NULL
		SELECT TOP 1 @intSubmissionCatId=Id FROM SubmissionCategories WHERE ParentId=@intSubmissionCatId
		
	INSERT tbl_ticket
			([company_id]
           ,[User_id]
           ,[Technician_id]
           ,[Created_id]
           ,[Status]
           ,[Subject]
           ,[CreateTime]
           ,[btPreventive]
           ,[TicketNumber]
           ,[KB]
           ,[KBType]
           ,[KBPublishLevel]
           ,Workpad
           ,Closed_id
           ,ClosedTime
           ,intConfirmedBy
           ,btConfirmed
           ,vchConfirmedNote
           ,dtConfirmed
           ,btResolved
           ,intAcctId
           ,Class_id
           ,intSubmissionCatId
           ,CreationCatsId
           ,LocationId
           ,tintLevel
           ,NewUserPost
           ,NewTechPost
           ,PseudoId
           ,KBSearchDesc
           ,KBAlternateId
           ,btNoAccount)
         VALUES(
			@DId,
			@user_id,
			@techId,
			@user_id,
			'Closed',
			@Subject,
			@dtCreatedTime,
			0,
			@NextTicketNumber,
			1,
			1,
			@KBPublishLevel,
			@Workpad,
			@user_id,
			@dtCreatedTime,
			@user_id,
			1,
			'',
			@dtCreatedTime,
			1,
			@intAcctId,
			@classID,
			@intSubmissionCatId,
			@intCategoryId,
			@location,
			@tintLevel,
			1,
			0,
			@PseudoId,
			@KBSearchDesc,
			@KBAlternateId,
			@btNoAccount
         )
	
	
		
	SET @TId = (SELECT @@Identity)
	
	EXEC sp_UpdateTicketAssignment @DId, @TId, @user_id, NULL, 1, 1
	EXEC sp_UpdateTicketAssignment @DId, @TId, @techId, NULL, 2, 1
			   
	RETURN @TId
GO
PRINT N'Creating [dbo].[sp_InsertLogInFromWizard]...';


GO
CREATE Procedure dbo.sp_InsertLogInFromWizard
	(
		@DepartmentId int,
		@Email nvarchar(50),
		@FirstName nvarchar(50) = null,
		@LastName nvarchar(50) = null,
		@Password nvarchar(50),
		@Title nvarchar(30) = null,
		@intDeptLoc int=null,
		@vchEmailSuffix nvarchar(50)=null,
		@intAcctLoc int=null,
		@Room nvarchar(30) = null,
		@Phone nvarchar(20) = null,
		@MobilePhone nvarchar(20) = null
	)
As
	/*
	0 - no work done
	1 - found globally added locally
	2 - added global and local
	3 - password supplied does not match
	*/
	DECLARE @intReturnValue int
	DECLARE @btCfgAcctMngr bit
	DECLARE @intAcctId int
	SELECT @btCfgAcctMngr = dbo.fxGetConfigValueBit(@DepartmentId, 'btCfgAcctMngr')
	
	if @btCfgAcctMngr=1
		BEGIN
			SET @intAcctId = (SELECT TOP 1 Id FROM Accounts WHERE DId=@DepartmentId AND vchEmailSuffix=@vchEmailSuffix)
			
			IF @intAcctId IS NULL
				SET @intAcctLoc=NULL
			
			IF @intAcctLoc IS NOT NULL
				IF NOT EXISTS(SELECT 'true' FROM Locations WHERE DId=@DepartmentId AND AccountId=@intAcctId AND Id=@intAcctLoc)
					SET @intAcctLoc=NULL
		END
	
	
	
	DECLARE @LoginId int
	IF EXISTS(SELECT 'true' FROM tbl_Logins WHERE email = @Email)
		BEGIN
			IF NOT EXISTS(SELECT 'true' FROM tbl_Logins WHERE email = @Email AND password = @Password)
				return 3
			ELSE
				BEGIN
					SET @LoginId = (SELECT id FROM tbl_Logins WHERE email = @Email AND password = @Password)
					IF EXISTS(SELECT 'true' FROM tbl_LoginCompanyJunc WHERE company_id = @DepartmentId AND login_id = @LoginId)
						return 0
					ELSE
						SET @intReturnValue=1
				END
		END
	ELSE
		BEGIN
			INSERT INTO tbl_Logins (Email, FirstName, LastName, Password, Title, Phone, MobilePhone) VALUES (@Email, @FirstName, @LastName, @Password, @Title, @Phone, @MobilePhone)
			SET @LoginId = (SELECT @@Identity)
			SET @intReturnValue=2
		END
		
	if @btCfgAcctMngr=1
		INSERT INTO tbl_LoginCompanyJunc (login_id, company_id, UserType_Id, Room, intAccountId, AccountLocationId ) VALUES (@LoginId, @DepartmentId, 1, @Room, @intAcctId, @intAcctLoc)
	ELSE
	BEGIN
		INSERT INTO tbl_LoginCompanyJunc (login_id, company_id, LocationId, UserType_Id, Room) VALUES (@LoginId, @DepartmentId, @intDeptLoc, 1, @Room)
		IF NOT @intDeptLoc IS NULL
			EXEC sp_UpdateUserLocation NULL, @DepartmentId, @@IDENTITY, @intDeptLoc, 1
	END
	SET @intReturnValue=1		

	RETURN @intReturnValue
GO
PRINT N'Creating [dbo].[sp_InsertPart]...';


GO
CREATE Procedure dbo.sp_InsertPart
	(
		@DId int,
		@TId int,
		@UId int,
		@Mode tinyint, /*1=ToBeOrdered, 2=ToPickup, 3=Arrived*/
		@PartDesc nvarchar(125),
		@Quantity int,
		@TicketLogNote nvarchar(max),
		@Cost money,
		@ExternalPartId int = null,
		@ExternalOrderId int = null
	)

As
	BEGIN TRANSACTION
	
		DECLARE @PartStatus nvarchar(25)
		IF @Mode = 1
			SET @PartStatus = 'To Be Ordered'
		IF @Mode = 2
			SET @PartStatus = 'To Pickup'
		IF @Mode = 3
			SET @PartStatus = 'Arrived'
	
		IF @Mode = 3
			BEGIN
				INSERT INTO tbl_part (company_id, ticket_id, VendorDescription, Qty4Tkt, Status, intRequestedBy, intReceivedBy, Cost, ExpectedArrivalDate, ExternalPartId, ExternalOrderId)
					VALUES (@DId, @TId, @PartDesc, @Quantity, @PartStatus, @UId, @UId, @Cost, getutcdate(), @ExternalPartId, @ExternalOrderId)
					
				IF NOT EXISTS(SELECT 'true' FROM tbl_part WHERE company_id=@DId AND Status <> 'Arrived' AND Status <> 'Lost' AND ticket_id = @TId)
					UPDATE tbl_ticket SET Status = 'Open', UpdatedTime=getutcdate() WHERE company_id=@DId AND Id = @TId
			END
		ELSE
			BEGIN
				INSERT INTO tbl_part (company_id, ticket_id, Description, Qty4Tkt, Status, intRequestedBy)
					VALUES (@DId, @TId, @PartDesc, @Quantity, @PartStatus, @UId)
				
				UPDATE tbl_ticket SET Status = 'Parts On Order', UpdatedTime=getutcdate() WHERE company_id=@DId and id = @TId
			END
		
		
		EXEC sp_InsertTktLog @DId,@TId,@UId,'Parts Requested',@TicketLogNote
		
		exec sp_UpdateTktPartCost @DId, @TId
		
	COMMIT TRANSACTION
	
	return
GO
PRINT N'Creating [dbo].[sp_InsertPartialUser]...';


GO
CREATE Procedure dbo.sp_InsertPartialUser
(
		@DId int,
		@LoginId int,
		@FirstName nvarchar(50) = null,
		@LastName nvarchar(50) = null,
		@Email nvarchar(50) = null,
		@Password nvarchar(50) = null,
		@location int,
		@intAcctId int,
		@intAcctLoc int,
		@Title nvarchar(30),
		@vchOrganization nvarchar(50),
		@Phone nvarchar(20),
		@MobilePhone nvarchar(20)
	)

As
	/*
	If Login Id is null then assume to enter into main database
	
	RETURN
	0 - error
	id - return the login junc id
	*/
	
	DECLARE @UId int
	DECLARE @AccountId int
	IF @intAcctId=0 OR @intAcctId=-1
		SET @AccountId=NULL
	ELSE
		SET @AccountId=@intAcctId
	
	IF @LoginId is null
		BEGIN
			IF EXISTS(SELECT 'true' FROM tbl_logins WHERE email = @Email)
				return 0
			ElSE
				BEGIN
					INSERT INTO tbl_logins (firstname,lastname,email,password, Title, Phone, MobilePhone) VALUES (@FirstName,@LastName,@Email,@Password, @Title, @Phone, @MobilePhone)
					SET @LoginId = (SELECT @@IDENTITY )
					INSERT INTO tbl_LoginCompanyJunc (login_id,usertype_id,company_id,LocationId, configPartialSetup,intAccountId,AccountLocationId, vchOrganization)VALUES(@loginId,1,@DId,@location,1,@AccountId,@intAcctLoc, @vchOrganization)
					SET @UId=@@IDENTITY
					IF NOT @location IS NULL
						EXEC sp_UpdateUserLocation NULL, @DId, @UId, @location, 1
					IF @intAcctId<>0 AND NOT @intAcctId IS NULL
					 BEGIN
						INSERT INTO 
							UserAccounts
						([DepartmentId]
						,[UserId]
						,[AccountId]
						,[AccountLocationId])
						VALUES
						(@DId
						,@UId
						,@AccountId
						,@intAcctLoc)
					 END
					return @UId
				END
		END
	ELSE
		BEGIN
			IF NOT EXISTS(SELECT 'true' FROM tbl_LoginCompanyJunc WHERE login_id = @LoginId AND company_id = @DId)
				BEGIN
					INSERT INTO tbl_LoginCompanyJunc (login_id,usertype_id,company_id,LocationId,configPartialSetup,intAccountId,AccountLocationId, vchOrganization)VALUES(@LoginId,1,@DId,@location,1,@AccountId,@intAcctLoc, @vchOrganization)
					SET @UId=@@IDENTITY
					IF NOT @location IS NULL
						EXEC sp_UpdateUserLocation NULL, @DId, @UId, @location, 1
					IF @intAcctId<>0 AND NOT @intAcctId IS NULL
					 BEGIN
						INSERT INTO 
							UserAccounts
						([DepartmentId]
						,[UserId]
						,[AccountId]
						,[AccountLocationId])
						VALUES
						(@DId
						,@UId
						,@AccountId
						,@intAcctLoc)
					 END
					return @UId
				END
			ELSE
				BEGIN
--VGOOZ 26-SEP-2005: tkt #2951 - Inactive users functionality	
					UPDATE tbl_LoginCompanyJunc SET btUserInactive=0, usertype_id=1, LocationId=@location, configPartialSetup=1, intAccountId=@AccountId, AccountLocationId=@intAcctLoc WHERE login_id = @LoginId AND company_id = @DId
					SELECT @UId=id FROM tbl_LoginCompanyJunc WHERE login_id = @LoginId AND company_id = @DId
					IF NOT @location IS NULL
						EXEC sp_UpdateUserLocation NULL, @DId, @UId, @location, 1
					IF @intAcctId<>0 AND NOT @intAcctId IS NULL AND NOT EXISTS(SELECT 'true' FROM UserAccounts WHERE DepartmentId=@DId AND UserId=@UId AND ISNULL(AccountId,-1)=ISNULL(@AccountId,-1))
					 BEGIN
						INSERT INTO 
							UserAccounts
						([DepartmentId]
						,[UserId]
						,[AccountId]
						,[AccountLocationId])
						VALUES
						(@DId
						,@UId
						,@AccountId
						,@intAcctLoc)
					 END					
					return @UId
				END
		END
GO
PRINT N'Creating [dbo].[sp_InsertTicketTime]...';


GO
CREATE Procedure dbo.sp_InsertTicketTime
(
		@DepartmentID int,
		@TicketID int,
		@UserID int,
		@Date smalldatetime,
		@Hours decimal(8,4),
		@HourlyRate smallmoney,
		@RemainHours decimal(8,4),
		@Note nvarchar(512),
		@StartTime smalldatetime,
		@StopTime smalldatetime,
		@CreatedTime smalldatetime,
		@CreatedBy int,
		@TimeOffset decimal,
		@TaskTypeID int,
		@TimeEntryOnDetail int,
		@TimeLogID int = null OUTPUT
	)

As
	DECLARE @insTaskType int
	IF (@TaskTypeID = 2147483647) SET @insTaskType = NULL
	ELSE SET @insTaskType = @TaskTypeID
	INSERT INTO TicketTime(DepartmentId, TicketId, UserId, 
							Date, Hours, Note, HourlyRate, 
							StartTime, StopTime, Downloaded,
							TaskTypeId, HoursRemaining, UTCOffset, 
							CreatedTime, CreatedBy, Deleted, TimeEntryOnDetail) 
	VALUES	(@DepartmentID, @TicketID, @UserID, @Date, @Hours, @Note, @HourlyRate, @StartTime, @StopTime, 
			0, @insTaskType, @RemainHours, @TimeOffset, @CreatedTime, @CreatedBy, 0, @TimeEntryOnDetail)	
	
	SET @TimeLogID = (SELECT @@Identity)	

	DECLARE @TotalHours decimal(10,4)
	SELECT @TotalHours = SUM(Hours) FROM TicketTime WHERE (TicketId = @TicketID) AND (DepartmentId = @DepartmentID) AND Deleted = 0
		
	UPDATE tbl_ticket SET TotalHours = @TotalHours, RemainingHours = dbo.fxCalculateTicketRemainingHours(@DepartmentID, @TicketID), UpdatedTime=getutcdate() WHERE (Id = @TicketID) AND (company_id = @DepartmentID)	
	exec sp_UpdateTktTimeCost @DepartmentID, @TicketID
	
	return
GO
PRINT N'Creating [dbo].[sp_InsertToDoItem]...';


GO
CREATE PROCEDURE dbo.sp_InsertToDoItem
(
	@Id uniqueidentifier,
	@DId int,
	@ToDoListId uniqueidentifier,
	@Text nvarchar(1000),
	@CreatedBy int,
	@AssignedId int = NULL,
	@HoursEstimatedRemaining decimal(10, 4) = NULL,
	@Due datetime = NULL
)
AS		
	--Calculate Order
	DECLARE @OrderIndex int
	
	SELECT 
		@OrderIndex = ISNULL(COUNT(*), 0)
	FROM
		ToDoItem
	WHERE
		DId = @DId
		AND
		ToDoListId = @ToDoListId

	SET @OrderIndex = @OrderIndex + 1
	
	INSERT INTO ToDoItem
		([Id]
		,[DId]
		,[ToDoListId]
		,[CreatedAt]
		,[CreatedBy]
		,[Text]
		,[AssignedId]
		,[HoursEstimatedRemaining]
		,[Order]
		,[Due])
     VALUES
           (@Id
           ,@DId
           ,@ToDoListId
           ,getutcdate()
           ,@CreatedBy
           ,@Text
           ,@AssignedId
           ,@HoursEstimatedRemaining
           ,@OrderIndex
           ,@Due)
           
     IF ISNULL(@HoursEstimatedRemaining, 0) <> 0
      BEGIN
		EXEC sp_UpdateTicketToDoEstimatedTime @DId, @ToDoListId
      END
GO
PRINT N'Creating [dbo].[sp_LinkFreshBooksClient]...';


GO
CREATE PROCEDURE dbo.sp_LinkFreshBooksClient
(
	@DId int,
	@AccountID int,
	@FBClientId int
)
AS
BEGIN
	DECLARE @btCfgAcctMngr nvarchar(255)
	SET @btCfgAcctMngr = dbo.fxGetConfigValueStr(@DId, 'btCfgAcctMngr')

    IF @AccountID > 0 AND @btCfgAcctMngr = 'true'
	 BEGIN
		UPDATE 
			Accounts
		SET
			FBClientId = @FBClientId
		WHERE
			DId = @DId
			AND
			id = @AccountID
	 END
	ELSE
	 BEGIN
		exec dbo.sp_UpdateConfigValueStr @DId, 'FBClientId', @FBClientId
	 END
	 
END
GO
PRINT N'Creating [dbo].[sp_LinkFreshBooksProject]...';


GO
CREATE PROCEDURE [dbo].[sp_LinkFreshBooksProject]
(
	@CompanyID int,
	@ProjectID int,
	@FBProjectID int,
	@AccountID int
)
AS
BEGIN
	
	DECLARE @btCfgProject bit,
		@btCfgAcctMngr nvarchar(255)
	
	SET @btCfgProject = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgProject')
	SET @btCfgAcctMngr = dbo.fxGetConfigValueStr(@CompanyID, 'btCfgAcctMngr')

	IF @ProjectID > 0 AND @btCfgProject = 1
	 BEGIN
		UPDATE 
			Project
		SET
			FBProjectID = @FBProjectID
		WHERE
			CompanyID = @CompanyID
			AND
			ProjectID = @ProjectID
	 END
	ELSE
	 BEGIN
		IF @AccountID > 0 AND @btCfgAcctMngr = 'true'
		 BEGIN
			UPDATE 
				Accounts
			SET
				FBDefaultProjectId = @FBProjectID
			WHERE
				DId = @CompanyID
				AND
				id = @AccountID
		 END
		ELSE
		 BEGIN
			exec dbo.sp_UpdateConfigValueStr @CompanyID, 'FBDefaultProjectId', @FBProjectID
		 END
	 END

END
GO
PRINT N'Creating [dbo].[sp_ResetTickets]...';


GO
CREATE Procedure [dbo].[sp_ResetTickets]
	(
		@DId int
	)
As
	set nocount on
	DELETE FROM RemoteSessions WHERE DId=@DId
	DELETE FROM TicketLogs WHERE DId=@DId
	DELETE FROM TicketTime WHERE DepartmentId=@DId
	DELETE FROM tbl_part WHERE company_id=@DId
--	DELETE FROM TicketFiles WHERE DId=@DId
	DELETE TicketMiscCosts FROM TicketMiscCosts INNER JOIN tbl_ticket ON TicketMiscCosts.TicketId = tbl_ticket.Id WHERE tbl_ticket.company_id=@DId
	DELETE FROM TicketAssets WHERE DId=@DId
	DELETE FROM TicketTravelCosts WHERE DepartmentId=@DId
	DELETE FROM TicketAssignment WHERE DepartmentId = @DId
	DELETE FROM RelatedTickets WHERE DId = @DId
	DELETE FROM TicketSentEmails WHERE DId=@DId
	DELETE FROM TicketTimeEstimated WHERE DId=@DId
	DELETE FROM ToDoItem WHERE DId=@DId
	DELETE FROM ToDoList WHERE DId=@DId	
	DELETE FROM tbl_ticket WHERE company_id=@DId 

	EXEC dbo.sp_UpdateConfigValueStr @DId, 'LastTicketNumber', '0'	
return
GO
PRINT N'Creating [dbo].[sp_SelectEscalationAvail]...';


GO

CREATE PROCEDURE [dbo].[sp_SelectEscalationAvail]
	(
		@DId int,
		@TId int,
		@LocationId int,
		@ClassId int,
		@tintLevel tinyint,
		@btEscalate bit=0 OUTPUT,
		@btDescalate bit=0 OUTPUT
	)
AS

	DECLARE @TempTechId int
	DECLARE @TemptintLevel tinyint

	IF @tintLevel IS NULL OR @tintLevel <= 1
		SET @btDescalate=0
	
	IF @tintLevel IS NOT NULL AND @tintLevel > 1
		BEGIN
			SET @TemptintLevel = @tintLevel-1
			SET @TempTechId=null
			exec sp_SelectRouting @DId, @ClassId, @LocationId, @TempTechId OUTPUT, @TemptintLevel
			IF @TempTechId IS NULL
				SET @btDescalate=0
			ELSE
				SET @btDescalate=1
		END
		
	IF @tintLevel > 8
		SET @btEscalate=0
		
	IF @tintLevel <= 8 OR @tintLevel IS NULL
		BEGIN
			IF @tintLevel IS NOT NULL
				SET @TemptintLevel=@tintLevel+1
				
			SET @TempTechId=null	
			exec sp_SelectRouting @DId, @ClassId, @LocationId, @TempTechId OUTPUT, @TemptintLevel
			IF @TempTechId IS NULL
				SET @btEscalate=0
			ELSE
				SET @btEscalate=1	
		END
		
	
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectLogOut]...';


GO
CREATE PROCEDURE dbo.sp_SelectLogOut
	(
		@DId int,
		@UId int,
		@intLoginToken int,
		@vchLoginSeed nvarchar(50),
		@LId int = null OUTPUT,
		@vchEmail nvarchar(50) = null OUTPUT,
		@vchPass nvarchar(50) = null OUTPUT
		
	)
AS
	EXEC sp_UpdateUserToken @DId, @UId, 1, null
	EXEC sp_InsertLoginToken @intLoginToken, @vchLoginSeed
	
	--VGOOZ 21-OCT-2005 Tkt #3033: Inactive users still able to access.
	SELECT @LId=lo.id, @vchEmail=lo.Email, @vchPass=lo.password FROM tbl_LoginCompanyJunc lcj JOIN tbl_Logins lo ON lo.id=lcj.login_id WHERE lcj.company_id=@DId and lcj.id=@UId and lcj.btUserInactive=0
	RETURN
GO
PRINT N'Creating [dbo].[sp_SelectSLADueDate]...';


GO
CREATE PROCEDURE [dbo].[sp_SelectSLADueDate]
	(
		@DId int,
		@dtInput smalldatetime,
		@intPriority int,
		@intClassId int,
		@intPriorityOut int OUTPUT,
		@dtSLACompleteOutput smalldatetime OUTPUT,
		@dtSLAResponseOutput smalldatetime OUTPUT
	)
AS
	SET @intPriorityOut = null
	DECLARE @configPriorities bit
	DECLARE @configClassTracking bit
	SELECT @configPriorities = dbo.fxGetConfigValueBit(@DId, 'configPriorities'), @configClassTracking = dbo.fxGetConfigValueBit(@DId, 'configClassTracking')
	IF @configPriorities = 1
		BEGIN
			IF @intPriority IS NOT NULL
				SELECT @intPriorityOut = @intPriority
				
			/*Lookup the correct Priority*/
			IF  @intPriorityOut IS NULL AND @intClassId IS NOT NULL AND @configClassTracking = 1
				SET @intPriorityOut = (SELECT intPriorityId FROM tbl_class WHERE company_id=@DId AND id=@intClassId)
						
			IF @intPriorityOut is NULL
				SELECT @intPriorityOut = (SELECT TOP 1 id FROM Priorities WHERE DId=@DId AND bitDefault=1)
			
			IF @intPriorityOut is NULL
				SELECT @intPriorityOut = (SELECT TOP 1 id FROM Priorities WHERE DId=@DId ORDER BY tintPriority DESC)
			
			/*Look up SLA Offset*/
			IF @intPriorityOut is not NULL
				BEGIN
					EXEC sp_SelectSLADueDate2 @DId, @intPriorityOut, 0, @dtInput, @dtSLACompleteOutput OUTPUT
					EXEC sp_SelectSLADueDate2 @DId, @intPriorityOut, 1, @dtInput, @dtSLAResponseOutput OUTPUT
				END
			ELSE --No Priority Setup
				BEGIN
					SET @dtSLACompleteOutput = null
					SET @dtSLAResponseOutput = null
				END
			
			RETURN 0
		END
	ELSE
		BEGIN
			SET @intPriorityOut = null
			SET @dtSLACompleteOutput = null
			SET @dtSLAResponseOutput = null
		END
GO
PRINT N'Creating [dbo].[sp_TransferTicketCategory]...';


GO

CREATE Procedure sp_TransferTicketCategory

	(
		@oldcategoryid int,
		@newcategoryid int,
		@company_id int
	)
As
	/* set nocount on */
	UPDATE tbl_ticket SET CreationCatsId = @newcategoryId WHERE CreationCatsId = @oldcategoryid AND company_id = @company_id
	exec sp_DeleteCategory @company_id,@oldcategoryid
return
GO
PRINT N'Creating [dbo].[sp_UpdateAcctUser]...';


GO
CREATE PROCEDURE dbo.sp_UpdateAcctUser
(
		@DId int,
		@Id int,
		@vchFirstName nvarchar(50),
		@vchLastName nvarchar(50),
		@AccountId int,
		@AccountLocationId int,
		@vchTitle nvarchar(30)=null,
--		@vchRoom nvarchar(30)=null,
		@vchPhone1 nvarchar(20)=null,
		@vchMobile nvarchar(20)=null,
		@intUserType int=null,
		@AccountingContact bit = null,
		@AccountingContactPrimary bit = null
	)
AS
	SET NOCOUNT ON
	DECLARE @LoginId int
	
	SET @LoginId = (SELECT login_id FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@Id)
	
	EXECUTE [sp_UpdateAcctUserLocation] @DId, @Id, @AccountId, @AccountLocationId, @AccountingContact, @AccountingContactPrimary

	IF @intUserType IS NOT NULL
		UPDATE tbl_LoginCompanyJunc SET UserType_id=@intUserType WHERE company_id=@DId AND id=@ID
	
	UPDATE tbl_Logins SET FirstName=@vchFirstName,LastName=@vchLastName,Title=@vchTitle,Phone=@vchPhone1,
		MobilePhone=@vchMobile
	WHERE id=@LoginId
	
	RETURN
GO
PRINT N'Creating [dbo].[sp_UpdateFreshBooksData]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateFreshBooksData] 
(
	@CompanyID int,
	@UserID int,
	@FBStaffID int,
	@AccountID int,
	@FBClientId int,
	@ProjectID int,
	@FBProjectID int,
	@TaskTypeID int,
	@FBTaskTypeID int
)
AS
BEGIN
	
	DECLARE @btCfgProject bit,
		@btCfgAcctMngr nvarchar(255)
	
	SET @btCfgProject = dbo.fxGetConfigValueBit(@CompanyID, 'btCfgProject')
	SET @btCfgAcctMngr = dbo.fxGetConfigValueStr(@CompanyID, 'btCfgAcctMngr')
	
	UPDATE 
		tbl_LoginCompanyJunc
	SET
		FBStaffID = @FBStaffID
	WHERE
		company_id = @CompanyID
		AND
		id = @UserID
	
	exec dbo.sp_LinkFreshBooksClient @CompanyID, @AccountID, @FBClientId
	 
	exec dbo.sp_LinkFreshBooksProject @CompanyID, @ProjectID, @FBProjectID, @AccountID
	
	UPDATE 
		TaskType
	SET
		FBTaskTypeID = @FBTaskTypeID
	WHERE
		DepartmentID = @CompanyID
		AND
		TaskTypeId = @TaskTypeID
END
GO
PRINT N'Creating [dbo].[sp_UpdateLogin]...';


GO
/* Warning: If you add new parameters then this affect to Ldap changes, when Ldap sync user then possible overwrite your parameters to default */

CREATE Procedure [dbo].[sp_UpdateLogin]
	(
		@code int,
		@DId int,
		@UId int = 0 OUT,
		@user_password nvarchar(50),
		@user_firstname nvarchar(50),
		@user_lastname nvarchar(50),
		@user_title nvarchar(30),
		@user_email nvarchar(50),
		@Phone nvarchar(20),
		@MobilePhone nvarchar(20),
		@location_id int = 0,
		@user_room nvarchar(30) = null,
		@intUserType int,
		@tintLevel tinyint,
		@user_note ntext,
		@btUpdateAcct bit=0,
		@intAcctId int=null,
		@intAcctLocId int=null,
		@intSupGroupId int=null, --VGOOZ: 06-Feb-2005 - Added support groups
		@btCallCentreRep bit=0, --VGOOZ: 12-Mar-2005 - Added Call Centre Support
		@vchOrganization nvarchar(50)=null, --VGOOZ 21-APR-2005: Added Organization field
		@LdapUserSID nvarchar(255)=null,
		@LdapUserAccount nvarchar(255)=null,
		@MobileEmail nvarchar(50)=null,
		@MobileEmailType tinyint=0
	)

As
	--intAcctId and intAcctLocId come from sp_ImportLogins.  These values will normally be null. Do not set the values to null in this sp unless btUpdateAcct = true.
	
	IF @location_id = 0 
		SET @location_id = NULL
		

	IF @Code = 2 AND @UId = 0
		BEGIN
			DECLARE @id int
			IF EXISTS(SELECT 'true' FROM tbl_Logins WHERE LOWER(email) = LOWER(@user_email) )
				BEGIN
					SET @id = (SELECT id FROM tbl_Logins WHERE LOWER(email) = LOWER(@user_email) )
					
					UPDATE tbl_logins SET firstname=@user_firstname, lastname=@user_lastname, email=LOWER(@user_email), password=@user_password, title=@user_title, phone=@Phone, mobilephone=@MobilePhone, LdapUserSID=@LdapUserSID, LdapUserAccount=@LdapUserAccount WHERE Id = @id
				END
			ELSE
				BEGIN
					INSERT INTO tbl_Logins (firstname, lastname, email, password, title, phone, mobilephone, LdapUserSID, LdapUserAccount) VALUES (@user_firstname , @user_lastname, LOWER(@user_email) ,@user_password, @user_title, @Phone, @MobilePhone, @LdapUserSID, @LdapUserAccount )
					SET @id = (SELECT @@IDENTITY)
				END
				
			IF NOT EXISTS(SELECT 'true' FROM tbl_LoginCompanyJunc WHERE company_id = @DId AND login_id = @Id)
				BEGIN
					INSERT INTO tbl_LoginCompanyJunc (login_id,company_id, LocationId, usertype_id, room, notes, tintLevel, SupGroupId, btCfgCCRep, vchOrganization) VALUES (@id,@DId,@location_id, @intUserType, @user_room, @user_note, @tintLevel, @intSupGroupId, @btCallCentreRep, @vchOrganization)			
					SET @UId=(SELECT @@IDENTITY)
					IF NOT @location_id IS NULL
						EXEC sp_UpdateUserLocation NULL, @DId, @UId, @location_id, 1
				END
			ELSE
				BEGIN
					SELECT @UId=id FROM tbl_LoginCompanyJunc WHERE company_id = @DId AND login_id = @Id
					UPDATE tbl_LoginCompanyJunc SET LocationId=@location_id, userType_id=@intUserType, Room=@user_room, notes=@user_note, tintLevel=@tintLevel, SupGroupId=@intSupGroupId, btCfgCCRep=@btCallCentreRep, vchOrganization=@vchOrganization WHERE company_id=@DId AND id=@UId
					IF NOT @location_id IS NULL
						EXEC sp_UpdateUserLocation NULL, @DId, @UId, @location_id, 1
				END
			
			if @btUpdateAcct=1
				BEGIN
					UPDATE tbl_LoginCompanyJunc SET intAccountId=@intAcctId, AccountLocationId=@intAcctLocId WHERE company_id=@DId AND Id=@UId
				END
					
			return 2	
		END	
		
		
	IF @code = 3
		BEGIN
			/*Check to see if they are changing the email address*/
			IF LOWER(@user_email) <> (SELECT LOWER(vchEmail) FROM vw_logins WHERE id = @UId)
				BEGIN
					IF EXISTS (SELECT 'true' FROM tbl_Logins WHERE LOWER(email) = LOWER(@user_email))
					BEGIN
						return 1
					END
				END
				
					
			UPDATE tbl_LoginCompanyJunc SET LocationId=@location_id, userType_id=@intUserType, Room=@user_room, notes=@user_note, tintLevel=@tintLevel, SupGroupId=@intSupGroupId, btCfgCCRep=@btCallCentreRep, vchOrganization=@vchOrganization WHERE company_id=@DId AND id=@UId
			IF NOT @location_id IS NULL
				EXEC sp_UpdateUserLocation NULL, @DId, @UId, @location_id, 1
				
			DECLARE @loginId int
			SET @loginId = (SELECT login_id FROM tbl_LoginCompanyJunc WHERE company_id = @DId AND id = @UId)
			
			if @user_password is not null
				UPDATE tbl_Logins SET password=@user_password WHERE id = @loginId
			
			UPDATE tbl_logins SET firstname=@user_firstname, lastname=@user_lastname, email=LOWER(@user_email), title=@user_title, phone=@Phone, mobilephone=@MobilePhone, LdapUserSID=@LdapUserSID, LdapUserAccount=@LdapUserAccount, MobileEmail=@MobileEmail, MobileEmailType=@MobileEmailType WHERE Id = @loginId
				
			return 2
		END
GO
PRINT N'Creating [dbo].[sp_UpdatePartStaging]...';


GO

CREATE Procedure [dbo].[sp_UpdatePartStaging]

	(
		@CompanyId int,
		@PartId int,
		@VendorDescription nvarchar(150),
		@PartNumber nvarchar(50),
		@Qty4Tkt int,
		@Qty2Inv int,
		@Cost money
	)

As
	UPDATE tbl_part SET
		VendorDescription = @VendorDescription,
		PartNumber = @PartNumber,
		Qty4Tkt = @Qty4Tkt,
		Qty2Inv = @Qty2Inv,
		Cost = @Cost,
		Status = 'Staging'
		WHERE
		id = @PartId AND
		company_id = @CompanyId
	
	DECLARE @TicketId int
	SET @TicketId = (SELECT ticket_id FROM tbl_part WHERE id = @PartId AND company_id = @CompanyId)
	exec sp_UpdateTktPartCost @CompanyId, @TicketId
	
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdatePartStatus]...';


GO

CREATE Procedure [dbo].[sp_UpdatePartStatus]
	(
		@DId int,
		@PartId int,
		@Action tinyint, /*	1 = Part is Lost,2 = Part is received,3 = Part found in inventory */
		@UId int,
		@vchTktLogNote nvarchar(max),
		@VendorDescription nvarchar(150) = null,
		@Cost money = 0,
		@Qty4Tkt int = null

	)

As
	DECLARE @TId int
	SET @TId = (Select ticket_id FROM tbl_part WHERE company_id=@DId AND id = @PartId)
	
	DECLARE @vchLogHeader nvarchar(50)
	
	BEGIN TRANSACTION
		/*LOST*/
		if @Action = 1 
			BEGIN
				INSERT tbl_part (company_id,ticket_id,description,Qty4Tkt,Qty2Inv,Status,intRequestedBy) SELECT @DId,ticket_id,description,Qty4Tkt,Qty2Inv,'To Be Ordered',intRequestedBy FROM tbl_part WHERE id = @PartId
				SET @vchLogHeader = 'Part Declared Lost'
				UPDATE tbl_part SET Status = 'Lost', ExpectedArrivalDate = getutcdate() WHERE company_id=@DId AND id = @PartId
			END
		
		/*Received*/
		if @Action = 2
			BEGIN
				if @VendorDescription is null
					UPDATE tbl_part SET Status = 'Arrived', ExpectedArrivalDate = getutcdate(), intReceivedBy = @UId WHERE company_id=@DId AND id = @PartId
				ELSE	
					UPDATE tbl_part SET Status = 'Arrived', ExpectedArrivalDate = getutcdate(), intReceivedBy = @UId, VendorDescription = @VendorDescription WHERE company_id=@DId AND id = @PartId
				
				SET @vchLogHeader = 'Part Received'
			END
			
		if @Action = 3
			BEGIN
				if @VendorDescription is null
					UPDATE tbl_part SET Status = 'Awaiting Arrival', ExpectedArrivalDate = getutcdate(), intReceivedBy = @UId, Cost = @Cost WHERE company_id=@DId AND id = @PartId
				ELSE	
					UPDATE tbl_part SET Status = 'Awaiting Arrival', ExpectedArrivalDate = getutcdate(), intReceivedBy = @UId, VendorDescription = @VendorDescription, Cost = @Cost WHERE company_id=@DId AND id = @PartId
			
				SET @vchLogHeader = 'Part Aquired'
			END
		
		IF @Qty4Tkt is not null
			UPDATE tbl_part SET Qty4Tkt=@Qty4Tkt WHERE company_id=@DId AND id=@PartId
		
		
		IF NOT EXISTS(SELECT 'true' FROM tbl_part WHERE company_id=@DId AND Status <> 'Arrived' AND Status <> 'Lost' AND ticket_id = @TId)
				UPDATE tbl_ticket SET Status = 'Open' WHERE company_id=@DId AND Id = @TId
		
		EXEC sp_InsertTktLog @DId,@TId,@UId,@vchLogHeader,@vchTktLogNote
		exec sp_UpdateTktPartCost @DId, @TId
		
	COMMIT TRANSACTION
return
GO
PRINT N'Creating [dbo].[sp_UpdateTechConfigHourlyRate]...';


GO
CREATE Procedure dbo.sp_UpdateTechConfigHourlyRate
(
		@DepartmentId int,
		@TechId int,
		@HourlyRate smallmoney,
		@IsBillable bit,
		@QBAccount nvarchar(200)
	)
As
	UPDATE tbl_LoginCompanyJunc 
		SET configHourlyRate = @HourlyRate,
			CfgIsBillable = @IsBillable,
			CfgQBAccount = @QBAccount
	WHERE id = @TechId AND company_id = @DepartmentId
	
	EXEC dbo.sp_UpdateTimeLogHourlyRate @DepartmentId, @TechId, 0
	
	return
GO
PRINT N'Creating [dbo].[sp_UpdateTicketTime]...';


GO
CREATE PROCEDURE [dbo].[sp_UpdateTicketTime]
(	
	@TicketTimeId int,
	@DepartmentID int,
	@TicketID int,
	@UserID int,
	@Date smalldatetime,
	@Hours decimal(8,4),
	@HourlyRate smallmoney,
	@RemainHours decimal(8,4),
	@Note nvarchar(512),
	@StartTime smalldatetime,
	@StopTime smalldatetime,
	@UpdatedTime smalldatetime,
	@UpdatedBy int,
	@TimeOffset decimal,
	@TaskTypeID int
)
AS
	DECLARE @insTaskType int
	IF (@TaskTypeID = 2147483647) SET @insTaskType = NULL
	ELSE SET @insTaskType = @TaskTypeID
		
	UPDATE [TicketTime]
	SET	
		[UserId] = @UserID,
		[Date] = @Date,
		[TaskTypeId] = @insTaskType,		
		[Hours] = @Hours,
		[Note] = @Note,
		[StartTime] = @StartTime,
		[StopTime] = @StopTime,		
		[UpdatedTime] = @UpdatedTime,
		[UpdatedBy] = @UpdatedBy,		
		[HourlyRate] = @HourlyRate,
		[HoursRemaining] = @RemainHours,
		[UTCOffset] = @TimeOffset
	WHERE DepartmentId = @DepartmentID AND Id = @TicketTimeId

	DECLARE @TotalHours decimal(10,4)
	SELECT @TotalHours = SUM(Hours) FROM TicketTime WHERE (TicketId = @TicketID) AND (DepartmentId = @DepartmentID) AND Deleted = 0
		
	UPDATE tbl_ticket SET TotalHours = @TotalHours, RemainingHours = dbo.fxCalculateTicketRemainingHours(@DepartmentID, @TicketID), UpdatedTime=getutcdate() WHERE (Id = @TicketID) AND (company_id = @DepartmentID)	
	exec sp_UpdateTktTimeCost @DepartmentID, @TicketID
GO
PRINT N'Creating [dbo].[sp_UpdateTktResponse]...';


GO
CREATE PROCEDURE dbo.sp_UpdateTktResponse
(
		@DId int,
		@TId int,
		@UId int,
		@btPickup bit,
		@btUserTypeUser bit,
		@btPlaceOnHold bit,
		@LogText nvarchar(max) OUTPUT,
		@SystemGeneratedText nvarchar(max) = NULL OUTPUT,
		@EmailSubject nvarchar(100) = null OUTPUT,
		@UserFullName nvarchar(100) = null OUTPUT,
		@TimeEntryID int = NULL,
		@To nvarchar(1000) = NULL,
		@ReopenClosedOnHold bit = 1
	)
AS
	SET NOCOUNT ON
	
	DECLARE @TktStatus varchar(15)
	DECLARE @btTktInitResponse bit
	DECLARE @PriorityId int
	DECLARE @CurrentTechId int
	DECLARE @CurrentTime smalldatetime
	--DECLARE @SLAMinUsed int
	DECLARE @TktUserId int
	DECLARE @btUserInactive bit
	
	SET @CurrentTime = getutcdate()
	
	SELECT @TktStatus=status, @PriorityId=PriorityId, @CurrentTechId=Technician_id, @btTktInitResponse=btInitResponse, @TktUserId=User_id FROM tbl_ticket WHERE company_id=@DId and Id=@TId
	
--VGOOZ 29-SEP-2005: tkt #2951 - Inactive users functionality	
	SELECT @UserFullName=L.FirstName+' '+L.LastName FROM tbl_LoginCompanyJunc LJ LEFT OUTER JOIN tbl_Logins L ON L.id=LJ.login_id WHERE LJ.company_id=@DId AND LJ.id=@UId
	
	SELECT @btUserInactive=btUserInactive FROM tbl_LoginCompanyJunc WHERE id=@TktUserId

	IF @btUserInactive=1
		RETURN 1
	
	IF (@TktStatus='Closed' OR @TktStatus='On Hold') AND @ReopenClosedOnHold = 1
		BEGIN
			DECLARE @NewTechId int
			IF @btPickup = 0
				BEGIN
					SET @NewTechId = @CurrentTechId
					SET @SystemGeneratedText = 'Ticket was ReOpened by '+@UserFullName + '.' + ISNULL('<br>'+ @SystemGeneratedText,'')
					SET @EmailSubject = 'Tkt ReOpened'
				END
			ELSE
				BEGIN
					DECLARE @OldTechName nvarchar(100)
					SELECT @OldTechName=L.FirstName+' '+L.LastName FROM tbl_LoginCompanyJunc LJ LEFT OUTER JOIN tbl_Logins L ON L.id=LJ.login_id WHERE LJ.company_id=@DId AND LJ.id=@CurrentTechId
					SET @NewTechId = @UId
					SET @SystemGeneratedText = 'Ticket was ReOpened by '+@UserFullName+' and transferred from '+@OldTechName+' to '+@UserFullName + '.' + ISNULL('<br>' + @SystemGeneratedText,'')
					SET @EmailSubject = 'Tkt ReOpened and Transferred'
				END
			
			EXEC sp_InsertTktLog @DId,@TId,@UId,'ReOpened',@LogText,@SystemGeneratedText,@TimeEntryID
			
			/*Calculate New SLA Dates*/
			IF @TktStatus = 'Closed'
				BEGIN
					/*VGOOZ: 02-DEC-2004 Clear Resolution and Confirmation information during reopen ticket*/
					UPDATE tbl_ticket SET btResolved=NULL, ResolutionCatsId=NULL, btConfirmed=NULL, intConfirmedBy=NULL, dtConfirmed=NULL, vchConfirmedNote=NULL, UpdatedTime=getutcdate()  WHERE company_id = @DId AND Id = @TId

					DECLARE @FinalPriority int	
					DECLARE @dtSLAComplete smalldatetime
					DECLARE @dtSLAResponse smalldatetime
					exec sp_SelectSLADueDate @DId, @CurrentTime, @PriorityId, null, @FinalPriority OUTPUT, @dtSLAComplete OUTPUT, @dtSLAResponse OUTPUT					
					
					IF @btUserTypeUser = 1
						UPDATE tbl_ticket SET Status = 'Open', PriorityId=@FinalPriority, Technician_id=@NewTechId, NewUserPost = 1, btInitResponse=0, dtSLAStart=@CurrentTime, UpdatedTime=getutcdate() WHERE company_id = @DId AND Id = @TId
					ELSE
						UPDATE tbl_ticket SET Status = 'Open', PriorityId=@FinalPriority, Technician_id=@NewTechId, NewTechPost = 1, btInitResponse=0, dtSLAStart=@CurrentTime, UpdatedTime=getutcdate() WHERE company_id = @DId AND Id = @TId

				END
			ELSE
				BEGIN
					IF @btUserTypeUser = 1
						UPDATE tbl_ticket SET Status = 'Open', Technician_id=@NewTechId, NewUserPost = 1, UpdatedTime=getutcdate() WHERE company_id = @DId AND Id = @TId
					ELSE
						BEGIN
							IF @btTktInitResponse = 0
								BEGIN
									--EXEC sp_SelectSLAMinUsed @DId, @TId, 1, @CurrentTime, @SLAMinUsed OUTPUT
									--UPDATE tbl_ticket SET Status = 'Open', Technician_id=@NewTechId, NewTechPost = 1, intSLAResponseUsed=intSLAResponseUsed+@SLAMinUsed, btInitResponse=1, UpdatedTime=getutcdate()  WHERE company_id = @DId AND Id = @TId
									--This logic was moved to code by MKhramov on 07.05.2013
									UPDATE tbl_ticket SET Status = 'Open', Technician_id=@NewTechId, NewTechPost = 1, btInitResponse=1, UpdatedTime=getutcdate()  WHERE company_id = @DId AND Id = @TId
								END
							ELSE
								UPDATE tbl_ticket SET Status = 'Open', Technician_id=@NewTechId, NewTechPost = 1, UpdatedTime=getutcdate() WHERE company_id = @DId AND Id = @TId
							
							
						END
				END
				
			EXEC sp_UpdateTicketAssignment @DId, @TId, @NewTechId, @CurrentTechId, 2, 1
		END
	ELSE
		BEGIN
			
			DECLARE @LogHeader nvarchar(50)
			DECLARE @NewTktStatus varchar(15)
			IF @btPlaceOnHold = 1 AND @TktStatus = 'Open'
				BEGIN
					SET @LogHeader = 'Tkt On Hold'
					SET @NewTktStatus = 'On Hold'
					SET @SystemGeneratedText = 'Ticket status changed to "On Hold" by '+@UserFullName + '.' + ISNULL('<br>' + @SystemGeneratedText,'')
				END
			ELSE
				BEGIN
					SET @LogHeader = 'Tkt Response'
					SET @NewTktStatus = @TktStatus
				END
				
			SET @EmailSubject = @LogHeader
			SET @LogHeader = REPLACE(@LogHeader, 'Tkt ', '')
			EXEC sp_InsertTktLog @DId,@TId,@UId,@LogHeader,@LogText,@SystemGeneratedText,@TimeEntryID, @To
			
			
			IF @btUserTypeUser = 1
				UPDATE tbl_ticket SET NewUserPost = 1, status=@NewTktStatus, UpdatedTime=getutcdate() WHERE company_id = @DId AND Id = @TId
			ELSE
				BEGIN
					/*Figure out if this is initial post, must not be user post*/
					IF @btTktInitResponse = 0
						BEGIN
							--This logic was moved to code by MKhramov on 07.05.2013
							--EXEC sp_SelectSLAMinUsed @DId, @TId, 1, @CurrentTime, @SLAMinUsed OUTPUT
							--UPDATE tbl_ticket SET NewTechPost = 1, status=@NewTktStatus, intSLAResponseUsed=intSLAResponseUsed+@SLAMinUsed, btInitResponse=1, UpdatedTime=getutcdate() WHERE company_id = @DId AND Id = @TId
							UPDATE tbl_ticket SET NewTechPost = 1, status=@NewTktStatus, btInitResponse=1, UpdatedTime=getutcdate() WHERE company_id = @DId AND Id = @TId
						END
					ELSE
						UPDATE tbl_ticket SET NewTechPost = 1, status=@NewTktStatus, UpdatedTime=getutcdate() WHERE company_id = @DId AND Id = @TId
				END
		END
		RETURN @@ERROR
GO
PRINT N'Creating [dbo].[sp_ImportLogin]...';


GO
CREATE PROCEDURE dbo.sp_ImportLogin
(
		@UID int OUTPUT,
		@OrgId int,
		@vchPassword nvarchar(50),
		@vchFirstName nvarchar(50),
		@vchLastName nvarchar(50),
		@vchTitle nvarchar(30),
		@vchEmail nvarchar(50),
		@vchPhone nvarchar(20),
		@vchMobile nvarchar(20),
		@vchLocation nvarchar(50),
		@intLocationId int,
		@vchRoom nvarchar(30),
		@intUserType int,
		@vchAccountName nvarchar(1000),
		@vchAccountLocName nvarchar(1000),
		@vchNote ntext = null,
		@vchOrganization nvarchar(50)=null
	)
AS
	
	if @intLocationId IS NULL OR @intLocationId=-1
		BEGIN
			SET @intLocationId = dbo.fxGetLocationIdByFullName(@OrgId,0,@vchLocation)
		END
	
	DECLARE @btCfgAcctMngr bit
	DECLARE @intAcctId int
	DECLARE @intAcctLocId int
	SELECT @btCfgAcctMngr = dbo.fxGetConfigValueBit(@OrgId, 'btCfgAcctMngr')
	
	DECLARE @AccName nvarchar(100)
	DECLARE @chrAIndex int
	DECLARE @chrAStart int
	SET @chrAStart=1
	IF CHARINDEX(';',@vchAccountName,LEN(@vchAccountName))=0
		SET @vchAccountName=@vchAccountName+';'
	SET @chrAIndex=CHARINDEX(';',@vchAccountName,@chrAStart)
	DECLARE @AccLocName nvarchar(100)
	DECLARE @chrLIndex int
	DECLARE @chrLStart int
	SET @chrLStart=1
	IF CHARINDEX(';',@vchAccountLocName,LEN(@vchAccountLocName))=0
		SET @vchAccountLocName=@vchAccountLocName+';'
	SET @chrLIndex=CHARINDEX(';',@vchAccountLocName,@chrLStart)
	IF @btCfgAcctMngr = 1
	BEGIN
		IF @chrAIndex>@chrAStart 
			SET @AccName=LTRIM(RTRIM(SUBSTRING(@vchAccountName, @chrAStart, @chrAIndex-@chrAStart)))
		ELSE
			SET @AccName=''
		IF LEN(@AccName)>0	
			SET @intAcctId = (SELECT Id FROM Accounts WHERE DId=@OrgId AND vchName=@AccName)	
		IF NOT @intAcctId IS NULL
		BEGIN
			IF @chrLIndex>@chrLStart 
				SET @AccLocName=LTRIM(RTRIM(SUBSTRING(@vchAccountLocName, @chrLStart, @chrLIndex-@chrLStart)))
			ELSE
				SET @AccLocName=''
			IF LEN(@AccLocName)>0	
				SET @intAcctLocId = dbo.fxGetLocationIdByFullName(@OrgId,@intAcctId,@AccLocName)
		END
	END
--	DECLARE @LDCount int
--	SELECT @LDCount=Count(*) FROM tbl_LoginCompanyJunc LJ 
--	INNER JOIN tbl_Logins L ON LJ.login_id = L.id WHERE LOWER(L.Email)=LOWER(@vchEmail)
--	IF @LDCount>1 OR LEN(@vchPassword)=0
	IF LEN(@vchPassword)=0
		SELECT @vchPassword=Password FROM tbl_Logins WHERE LOWER(Email)=LOWER(@vchEmail)
	SET @UID=0
	EXEC sp_UpdateLogin 2,@OrgId, @UID out, @vchPassword,@vchFirstName,@vchLastName,@vchTitle,@vchEmail,@vchPhone,@vchMobile,@intLocationId,@vchRoom,@intUserType,null,@vchNote,1,@intAcctId,@intAcctLocId, null, 0, @vchOrganization
	IF @btCfgAcctMngr=1
	BEGIN
		WHILE @chrAIndex>@chrAStart 
		BEGIN
			SET @AccName=LTRIM(RTRIM(SUBSTRING(@vchAccountName, @chrAStart, @chrAIndex-@chrAStart)))
			SET @chrAStart=@chrAIndex+1
			IF LEN(@AccName)>0
			BEGIN
				IF CHARINDEX('(Internal)',@AccName)>0
					SET @intAcctId=-1
				ELSE	
					SET @intAcctId = (SELECT Id FROM Accounts WHERE DId=@OrgId AND vchName=@AccName)
				IF NOT @intAcctId IS NULL
				BEGIN
					IF @chrLIndex>@chrLStart
					BEGIN 
						SET @AccLocName=LTRIM(RTRIM(SUBSTRING(@vchAccountLocName, @chrLStart, @chrLIndex-@chrLStart)))
						SET @chrLStart=@chrLIndex+1
						SET @chrLIndex=CHARINDEX(';',@vchAccountLocName,@chrLStart)
					END	
					ELSE
						SET @AccLocName=''
					IF LEN(@AccLocName)>0
					BEGIN
						IF @intAcctId<0	
							SET @intAcctLocId = dbo.fxGetLocationIdByFullName(@OrgId,0,@AccLocName)
						ELSE	
							SET @intAcctLocId = dbo.fxGetLocationIdByFullName(@OrgId,@intAcctId,@AccLocName)
					END	
					EXEC sp_UpdateAcctUserLocation @OrgId, @UID, @intAcctId, @intAcctLocId	
				END	
			END
			SET @chrAIndex=CHARINDEX(';',@vchAccountName,@chrAStart)
		END
	END
	RETURN
GO
PRINT N'Creating [dbo].[sp_InsertNewTicket]...';


GO
CREATE Procedure [dbo].[sp_InsertNewTicket]
	(
		@DId int,
		@PseudoId char(6),
		@priority int,
		@user_id int,
		@status varchar(50),
		@subject nvarchar(100),
		@vchInitPost nvarchar(max),
		@newuserpost bit = 0,
		@newtechpost bit = 0,
		@createdId int,
		@techId int = null,
		@location int,
		@class int,
		@serialnumber nvarchar(50) = null,
--		@Room nvarchar(30) = null,
		@CustomXML ntext = null,
		@TId int = null OUTPUT,
		@dtReqComp smalldatetime = null,
		@vchReqComp nvarchar(50) = null,
		@btViaEmailParser bit = null,
		@btPreventive bit,
		@intTktNumber int = null OUTPUT,
		@intCategoryId int = null,
		@intAcctId int=null,
--		@intAcctLocId int=null,
		@AccountLocationId int=null,
		@btLookUpAcct bit=0,
		@dtCreatedTime smalldatetime = null, --VGOOZ:18-JAN-2005 - Added edit ticket creation time support
		@vchIdMethod nvarchar(255) = null, --VGOOZ:12-MAR-2005 - Added Ticket ID Method support
		@btHandledByCallCentre bit = null, --VGOOZ:14-MAR-2005 - Added Call Centre Support
		@vchSubmissionCat nvarchar(50) = null, --VGOOZ:15-MAR-2005 - Added Submission Category
		@tintLevel tinyint = null,
		@ProjectID int = null,			----YMYKYTYUK:02-FEB-2009 - Added TicketToProject relation
		@FolderID int = null,
		@SchedTicketID int = null,
		@initialPostId int = 0 OUTPUT,
		@EstimatedTime decimal(10,4) = NULL,
		@btNoAccount bit = NULL
	)

As
	set nocount on
	DECLARE @intErrCode int
	SET @intErrCode=0
	/*
	>0 - all okay
	-1 - Input level is not setup for this class.
	-2 - No routing option turned on Choose Tech Only
	-3 - No Routes Found
	-4 - Level Does not exist
	-5 - Route Found but Tech could not be returned
	*/

	--VGOOZ:18-JAN-2005 - Added edit ticket creation time support	
	IF @dtCreatedTime IS NULL
		SET @dtCreatedTime=getutcdate()

	IF @intAcctId IS NULL AND @btLookUpAcct=1 AND (dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr'))=1
		EXECUTE sp_AutoResolveUserAccountId @DId, @user_id, @intAcctId OUTPUT, @AccountLocationId OUTPUT
	
	--DECLARE @tintLevel tinyint
	
	IF @btPreventive IS NULL
		SET @btPreventive = 0
	
	IF @location IS NULL
		IF @intAcctId IS NULL 
			SET @location = (SELECT LocationId FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@user_id)
--		ELSE /*Use the account's location. Ignore the user's location*/
--			SET @location = (SELECT LocationId FROM Accounts WHERE DId=@DId AND Id=@intAcctId)
		
	
	IF @btViaEmailParser IS NULL
		SET @btViaEmailParser = 0
	
	exec sp_SelectRouting @DId, @class, @location, @techId OUTPUT, @tintLevel OUTPUT,0,@intAcctId,@AccountLocationId,@intErrCode OUTPUT
	
	IF (@intErrCode <> 0 AND @intErrCode<>-2) OR (@intErrCode=-2 AND @techId IS NULL)
		RETURN @intErrCode
	
	DECLARE @FinalPriority int	
	DECLARE @dtSLAComplete smalldatetime
	DECLARE @dtSLAResponse smalldatetime


	DECLARE @dtToday smalldatetime
	set @dtToday = getutcdate()
	exec sp_SelectSLADueDate @DId, @dtToday, @priority, @class, @FinalPriority OUTPUT, @dtSLAComplete OUTPUT, @dtSLAResponse OUTPUT		
	
		
	DECLARE @NextTicketNumber int
	SET @NextTicketNumber = CAST(dbo.fxGetConfigValueStr(@DId, 'LastTicketNumber') AS int) + 1
--	UPDATE tbl_company SET LastTicketNumber = @NextTicketNumber WHERE company_id = @DId

	DECLARE @prm nvarchar(max)
	SELECT @prm = CAST(@NextTicketNumber as NVARCHAR(max))
	EXEC dbo.sp_UpdateConfigValueStr @DId, 'LastTicketNumber', @prm
	SET @intTktNumber = @NextTicketNumber
	
	DECLARE @LookUpAsset bit
	SET @LookUpAsset = 0
	IF @serialnumber is not null AND @serialnumber <> ''
		IF EXISTS(SELECT 'true' FROM tbl_company WHERE company_id = @DId AND (dbo.fxGetConfigValueBit(@DId, 'configAssetTracking')) = 1 AND (dbo.fxGetConfigValueBit(@DId, 'configSerialNumber')) = 1)
			SET @LookUpAsset = 1
			
	DECLARE @AssetId int
	SET @AssetId = null
		
	IF @LookUpAsset = 1
		SET @AssetId = (SELECT TOP 1 id FROM Assets WHERE DepartmentId = @DId AND (SerialNumber = @serialnumber ))
		
	/*Look up room number from user profile if not set to -1*/
--	if @room is null
--		SET @Room = (SELECT Room FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@user_id)

	if @btHandledByCallCentre IS NULL
		SET @btHandledByCallCentre = (SELECT btCfgCCRep FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@user_id)

	--VGOOZ:15-MAR-2005 - look up SubmissionCategory Id by Name	
	DECLARE @intSubmissionCatId int
	--VGOOZ:15-SEP-2005: tkt #2605 - Submission Category
	DECLARE @intParentSubCatdId int
	IF NOT @vchSubmissionCat IS NULL
		SELECT @intSubmissionCatId=Id, @intParentSubCatdId=ParentId FROM SubmissionCategories WHERE vchName=@vchSubmissionCat
	IF @intParentSubCatdId IS NULL
		SELECT TOP 1 @intSubmissionCatId=Id FROM SubmissionCategories WHERE ParentId=@intSubmissionCatId
	
--	if @Room = '-1'
--		SET @Room = null
		
	IF @user_id<>@createdId
		BEGIN
			IF LEN(@vchInitPost)>4900
				BEGIN
					SET @vchInitPost=LEFT(@vchInitPost,4900)
					SET @vchInitPost=@vchInitPost+'<br><br>...Text truncated at 4900 characters.'
				END
			
			DECLARE @vchCreatedFullName nvarchar(100)
			EXEC sp_SelectUserFullName @DId,@createdId,@vchCreatedFullName OUTPUT
			
			SET @vchInitPost=@vchInitPost+'<br><br>This ticket was entered by '+@vchCreatedFullName
			
		END
	
	IF @location <= 0
	 BEGIN
	  SET @location = NULL
	 END
	
	INSERT INTO tbl_ticket (
			company_id,
			PseudoId,
			PriorityId,
			user_id,
			status,
			subject,
			CreateTime,
			NewUserPost,
			NewTechPost,
			Created_id,
			Technician_id,
			LocationId,
			Class_id,
			SerialNumber,
--			Room,
			TicketNumber,
			CustomXML,
			dtSLAComplete,
			dtSLAResponse,
			dtReqComp,
			ReqCompNote,
			tintLevel,
			btViaEmailParser,
			btPreventive,
			CreationCatsId,
			intAcctId,
			AccountLocationId,
			vchIdMethod,
			btHandledByCC,
			intSubmissionCatId,
			ProjectID,
			folder_id,
			SchedTicketID,
			UpdatedTime,
			EstimatedTime,
			btNoAccount)
		VALUES (
			@DId,
			@PseudoId,
			@FinalPriority,
			@user_id,
			@status,
			@subject,
			@dtCreatedTime,
			@newuserpost,
			@Newtechpost,
			@createdId,
			@techId,
			@location,
			@class,
			@serialNumber,
--			@Room,
			@NextTicketNumber,
			@CustomXML,
			@dtSLAComplete,
			@dtSLAResponse,
			@dtReqComp,
			@vchReqComp,
			@tintLevel,
			@btViaEmailParser,
			@btPreventive,
			@intCategoryId,
			@intAcctId,
			@AccountLocationId,
			@vchIdMethod,
			@btHandledByCallCentre,
			@intSubmissionCatId,
			@ProjectID,
			@FolderID,
			@SchedTicketID,
			getutcdate(),
			@EstimatedTime,
			@btNoAccount)
	
	
		
	SET @TId = (SELECT @@Identity)
	
	EXEC sp_UpdateTicketAssignment @DId, @TId, @user_id, NULL, 1, 1
	EXEC sp_UpdateTicketAssignment @DId, @TId, @techId, NULL, 2, 1
	
	EXEC @initialPostId = sp_InsertTktLog @DId,@TId,@user_id,'Initial Post',@vchInitPost
	
	IF (@EstimatedTime IS NOT NULL)
		INSERT INTO TicketTimeEstimated
			   ([DId]
			   ,[TicketId]           
			   ,[UserId]
			   ,[Date]
			   ,[EstimatedTime]
			   ,[CreatedTime]
			   ,[CreatedBy])
		 VALUES
			   (@DId, @TId, @createdId, @dtCreatedTime, @EstimatedTime, @dtCreatedTime, @createdId)
			   
	RETURN @TId
GO
PRINT N'Creating [dbo].[sp_InsertEmailNewTkt]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertEmailNewTkt]
	(
		@DId int,
		@CQId int,
		@ClassorQue varchar(1),
		@TktUserId int,
		@TktSubject nvarchar(100),
		@TktText ntext,
		@TId int OUTPUT,
		@TechEmailPref bit OUTPUT,
		@TechName nvarchar(100) OUTPUT,
		@UserName nvarchar(100) OUTPUT,
		@TechEmail nvarchar(100) OUTPUT,
		@configPriorities tinyint OUTPUT,
		@configUserPriorities tinyint OUTPUT,
		@configLocationTracking tinyint OUTPUT,
		@configClassTracking tinyint OUTPUT,
		@DepartmentName nvarchar(150) OUTPUT,
		@LogoName nvarchar(256) OUTPUT,
		@TktNumber int OUTPUT,
		@ClassName nvarchar(50) OUTPUT,
		@LocationName nvarchar(50) OUTPUT,
		@SuccessMsg nvarchar(max) OUTPUT,
		@dtSLAComplete smalldatetime = null OUTPUT,
		@dtSLAResponse smalldatetime = null OUTPUT,
		@tintPriority tinyint = null OUTPUT,
		@vchPriority nvarchar(50) = null OUTPUT,
		@bitConfigLVL bit = null OUTPUT,
		@bitConfigLVLUser bit = null OUTPUT,
		@tintLevel tinyint = null OUTPUT,
		@btCfgAcctMngr bit = null OUTPUT,
		@vchUserEmailSuffix nvarchar(75) = null,
		@vchAcctName nvarchar(100)=null OUTPUT,
		@vchAcctLocName nvarchar(25)=null OUTPUT
	)
AS
	SET NOCOUNT ON
	
	DECLARE @TktTechId int
	DECLARE @TktClassId int
	if @ClassorQue = 'c'
		BEGIN
			SET @TktTechId = null
			SET @TktClassId = @CQId
		END
	ELSE /*should be a queue id*/
		BEGIN
			SET @TktTechId = @CQId
			SET @TktClassId = null
		END
		
	DECLARE @intAcctId int
	DECLARE @intAcctLocId int
	DECLARE @btLookUpAcct bit
		SET @btLookUpAcct=0

	SELECT @btCfgAcctMngr = dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr')
	SELECT @bitConfigLVL = dbo.fxGetConfigValueBit(@DId, 'configLVL')
	SELECT @bitConfigLVLUser = dbo.fxGetConfigValueBit(@DId, 'btConfigLVLUser')
	SELECT @configPriorities = CAST(dbo.fxGetConfigValueBit(@DId, 'configPriorities') as tinyint)
	SELECT @configUserPriorities = CAST(dbo.fxGetConfigValueBit(@DId, 'configUserPriorities') as tinyint)
	SELECT @configLocationTracking = CAST(dbo.fxGetConfigValueBit(@DId, 'configLocationTracking') as tinyint)
	SELECT @configClassTracking = CAST(dbo.fxGetConfigValueBit(@DId, 'configClassTracking') as tinyint)
	SELECT @LogoName=CAST(dbo.fxGetConfigValueStr(@DId, 'LogoName') as nvarchar(256))

	SELECT @DepartmentName=C.company_name
	FROM tbl_company C 
	INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid 
	WHERE C.company_id=@DId
	
	/*
	IF @btCfgAcctMngr = 1 
		BEGIN
			SELECT @intAcctId=intAccountId,@intAcctLocId=intAcctLocationId FROM tbl_LoginCompanyJunc WHERE company_id=@DId and id=@TktUserId
			
			IF @intAcctId IS NULL 
				BEGIN
					SET @intAcctId = (SELECT TOP 1 id FROM Accounts WHERE DId=@DId AND vchEmailSuffix=@vchUserEmailSuffix)
					SET @intAcctLocId=null
					
					IF @intAcctId IS NOT NULL
						UPDATE tbl_LoginCompanyJunc SET intAccountId=@intAcctId WHERE company_id=@DId AND id=@TktUserId
				END
		END
	
	IF @intAcctId IS NOT NULL
		SET @vchAcctName=(SELECT vchName FROM Accounts WHERE DId=@DId AND id=@intAcctId)
		
	IF @intAcctLocId IS NOT NULL
		SET @vchAcctLocName=(SELECT vchName FROM AccountLocations WHERE DId=@DId AND AccountId=@intAcctId AND Id=@intAcctLocId) 
	*/
	IF @btCfgAcctMngr=1
		SET @btLookUpAcct=1
	
	exec sp_InsertNewTicket @DId, null, @TktUserId, 'Open', @TktSubject, @TktText, 1, 0, @TktUserId, @TktTechId, null, @TktClassId, null, null, null, @TId OUTPUT, null, null, 1, 0, null, null, @intAcctId, @intAcctLocId, @btLookUpAcct, null, null, null, 13
	
	SELECT @vchAcctLocName=dbo.fxGetUserLocationName(@DId, t.AccountLocationId), @vchAcctName=act.vchName,@tintLevel=t.tintLevel, @dtSLAComplete=t.dtSLAComplete, @dtSLAResponse=t.dtSLAResponse, @TktTechId=t.Technician_id, @TktNumber=t.TicketNumber, @LocationName=dbo.fxGetUserLocationName(@DId, t.LocationId), @ClassName=c.name, @tintPriority=p.tintPriority, @vchPriority=p.Name FROM tbl_ticket t LEFT OUTER JOIN tbl_class c ON c.company_id=@DId AND c.id=t.class_id LEFT OUTER JOIN Priorities p ON p.DId=@DId AND p.id=t.PriorityId LEFT OUTER JOIN Accounts act ON act.DId=@DId AND act.id=t.intAcctId WHERE t.company_id=@DId AND t.id=@TId
	
	
	if @ClassorQue = 'c'
		SELECT @TechEmailPref=configEmailNewTicket, @TechEmail=l.Email, @TechName=l.FirstName+' '+l.LastName FROM tbl_LoginCompanyJunc lj JOIN tbl_Logins l ON l.id=lj.login_id WHERE lj.company_id=@DId AND lj.id=@TktTechId
	ELSE
		SELECT @TechEmailPref=1, @TechEmail=lj.QueEmailAddress, @TechName=l.FirstName+' '+l.LastName FROM tbl_LoginCompanyJunc lj JOIN tbl_logins l ON l.id=lj.login_id WHERE lj.company_id=@DId AND lj.id=@TktTechId
	
	SELECT @UserName=l.FirstName+' '+l.LastName FROM tbl_LoginCompanyJunc lj JOIN tbl_Logins l ON l.id=lj.login_id WHERE lj.company_id=@DId AND lj.id=@TktUserId
	
	SELECT @SuccessMsg = txtText FROM CustomText WHERE DId=@DId AND Type='EmailTktCreationSuccess'
	
	RETURN 0
GO
PRINT N'Creating [dbo].[sp_InsertEmailNewTkt2]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertEmailNewTkt2]
	(
		@DId int,
		@PseudoId char(6),
		@CQId int,
		@ClassorQue varchar(1),
		@EDropBoxId nchar(8),
		@EPriority int,
		@TktUserId int,
		@TktCreatedUserId int,
		@TktTechId int = null,
		@TktSubject nvarchar(100),
		@TktText ntext,
		@vchUserEmailSuffixFrom nvarchar(75) = null,
		@vchUserEmailSuffixTo nvarchar(75) = null,
		@TId int OUTPUT,
		@TechEmailPref bit OUTPUT,
		@TechName nvarchar(100) OUTPUT,
		@UserName nvarchar(100) OUTPUT,
		@TechEmail nvarchar(100) OUTPUT,
		@configPriorities tinyint OUTPUT,
		@configUserPriorities tinyint OUTPUT,
		@configLocationTracking tinyint OUTPUT,
		@configClassTracking tinyint OUTPUT,
		@DepartmentName nvarchar(150) OUTPUT,
		@LogoName nvarchar(256) OUTPUT,
		@TktNumber int OUTPUT,
		@ClassName nvarchar(50) OUTPUT,
		@LocationName nvarchar(50) OUTPUT,
		@SuccessMsg nvarchar(max) OUTPUT,
		@dtSLAComplete smalldatetime = null OUTPUT,
		@dtSLAResponse smalldatetime = null OUTPUT,
		@tintPriority tinyint = null OUTPUT,
		@vchPriority nvarchar(50) = null OUTPUT,
		@bitConfigLVL bit = null OUTPUT,
		@bitConfigLVLUser bit = null OUTPUT,
		@tintLevel tinyint = null OUTPUT,
		@btCfgAcctMngr bit = null OUTPUT,
		@vchAcctName nvarchar(100)=null OUTPUT,
		@vchAcctLocName nvarchar(25)=null OUTPUT,
		@vchErrMsg nvarchar(1000)=null OUTPUT,
		@btCfgSuppressBWALogos bit = null OUTPUT,
		@NotificationEventsQueueId int = null OUTPUT
	)
AS
	SET NOCOUNT ON
	---RETURN CODES
	---  0=all okay
	--- -1=Error From sp_InsertNewTicket
	
	DECLARE @Return_Value int
	DECLARE @TktRouteTechId int
	DECLARE @TktClassId int
	DECLARE @TktLevel tinyint
	DECLARE @TktPriority int
	
	IF LEN(@EDropBoxId)>0
	BEGIN
		SELECT @TktRouteTechId=TechnicianId, @TktClassId=ClassId, @TktLevel=tintLevel, 
			@TktPriority=CASE WHEN @EPriority=1 THEN HighPriorityId ELSE CASE WHEN @EPriority=2 THEN NormalPriorityId ELSE CASE WHEN @EPriority=3 THEN LowPriorityId ELSE NULL END END END 
		FROM EMailParserDropBoxes WHERE DId=@DId AND PseudoId=@EDropBoxId
	END
	ELSE IF @ClassorQue = 'c'
		BEGIN
			SET @TktRouteTechId = null
			SET @TktClassId = @CQId
		END
	ELSE /*should be a queue id*/
		BEGIN
			SET @TktRouteTechId = @CQId
			SET @TktClassId = null
		END

	IF @TktTechId IS NULL
		SET @TktTechId=@TktRouteTechId
		
	DECLARE @configCategoryTracking tinyint
	DECLARE @CreationCatId int
	DECLARE @DeptEmailSuffixes nvarchar(1024)
	DECLARE @AccId int
	DECLARE @LookUpAcc bit
	SET @LookUpAcc=1

	SELECT @btCfgAcctMngr = dbo.fxGetConfigValueBit(@DId, 'btCfgAcctMngr')
	SELECT @bitConfigLVL = dbo.fxGetConfigValueBit(@DId, 'configLVL')
	SELECT @bitConfigLVLUser = dbo.fxGetConfigValueBit(@DId, 'btConfigLVLUser')
	SELECT @configPriorities = CAST(dbo.fxGetConfigValueBit(@DId, 'configPriorities') as tinyint)
	SELECT @configUserPriorities = CAST(dbo.fxGetConfigValueBit(@DId, 'configUserPriorities') as tinyint)
	SELECT @configLocationTracking = CAST(dbo.fxGetConfigValueBit(@DId, 'configLocationTracking') as tinyint)
	SELECT @configClassTracking = CAST(dbo.fxGetConfigValueBit(@DId, 'configClassTracking') as tinyint)
	SELECT @configCategoryTracking = CAST(dbo.fxGetConfigValueBit(@DId, 'configCategoryTracking') as tinyint)
	SELECT @btCfgSuppressBWALogos = dbo.fxGetConfigValueBit(@DId, 'btCfgSuppressBWALogos')
	SELECT @DeptEmailSuffixes = dbo.fxGetConfigValueStr(@DId, 'emailSuffixes')
	SELECT @CreationCatId = CAST(dbo.fxGetConfigValueStr(@DId, 'CreationCatId') as int)
	SELECT @LogoName=CAST(dbo.fxGetConfigValueStr(@DId, 'LogoName') as nvarchar(256))
	
	SELECT @DepartmentName=C.company_name
	FROM tbl_company C 
	INNER JOIN Mc_Instance I ON I.InstanceId = C.company_guid 
	WHERE C.company_id=@DId

	IF @configClassTracking<>1
		SET @TktClassId=NULL	
	IF @bitConfigLVL<>1
		SET @TktLevel=NULL
	IF @configPriorities<>1
		SET @TktPriority=NULL
	IF @configCategoryTracking<>1
		SET @CreationCatId=NULL

	IF @btCfgAcctMngr=1
	BEGIN
		IF LEN(ISNULL(@vchUserEmailSuffixFrom,''))>0
			SELECT TOP 1 @AccId=Id FROM Accounts WHERE DId=@DId AND vchEmailSuffix LIKE '%'+@vchUserEmailSuffixFrom+'%'
		IF @AccId IS NULL AND LEN(ISNULL(@vchUserEmailSuffixTo,''))>0
		BEGIN
			IF CHARINDEX(@DeptEmailSuffixes, @vchUserEmailSuffixTo)=0
				SELECT TOP 1 @AccId=Id FROM Accounts WHERE DId=@DId AND vchEmailSuffix LIKE '%'+@vchUserEmailSuffixTo+'%'
		END	
	END
		
	IF CHARINDEX(@DeptEmailSuffixes, @vchUserEmailSuffixFrom)>0
		SET @LookUpAcc=0
		
	SET @Return_Value=0
	exec @Return_Value = sp_InsertNewTicket @DId, @PseudoId, @TktPriority, @TktUserId, 'Open', @TktSubject, @TktText, 1, 0, @TktCreatedUserId, @TktTechId, null, @TktClassId, null, null, @TId OUTPUT, null, null, 1, 0, null, @CreationCatId, @AccId, null, @LookUpAcc, null, null, null, 'Automated Email Parser', @TktLevel
	
	/* INSERT NEW TICKET RETURN CODES
	>0 - all okay
	-1 - Input level is not setup for this class.
	-2 - No routing option turned on Choose Tech Only
	-3 - No Routes Found
	-4 - Level Does not exist
	-5 - Route Found but Tech could not be returned
	*/
	IF @Return_Value < 0
		BEGIN
			IF @Return_Value = -1
				SET @vchErrMsg = 'SP_INSERTNEWTICKET: -1 - Input level is not setup for this class.'
			IF @Return_Value = -2
				SET @vchErrMsg = 'SP_INSERTNEWTICKET: -2 - No routing option turned on Choose Tech Only'
			IF @Return_Value = -3
				SET @vchErrMsg = 'SP_INSERTNEWTICKET: -3 - No Routes Found'
			IF @Return_Value = -4
				SET @vchErrMsg = 'SP_INSERTNEWTICKET: -4 - Level Does not exist'
			IF @Return_Value = -4
				SET @vchErrMsg = 'SP_INSERTNEWTICKET: -5 - Route Found but Tech could not be returned'
				
			RETURN @Return_Value
		END
	
	
	
	SELECT @vchAcctLocName=dbo.fxGetUserLocationName(@DId, t.AccountLocationId),@vchAcctName=act.vchName,@tintLevel=t.tintLevel, @dtSLAComplete=t.dtSLAComplete, @dtSLAResponse=t.dtSLAResponse, @TktTechId=t.Technician_id, @TktNumber=t.TicketNumber, @LocationName=dbo.fxGetUserLocationName(@DId, t.LocationId), @ClassName=c.name, @tintPriority=p.tintPriority, @vchPriority=p.Name 
	FROM tbl_ticket t 
--	LEFT OUTER JOIN tbl_Locations l ON l.DId=@DId AND l.id=t.location_id 
	LEFT OUTER JOIN tbl_class c ON c.company_id=@DId AND c.id=t.class_id 
	LEFT OUTER JOIN Priorities p ON p.DId=@DId AND p.id=t.PriorityId 
	LEFT OUTER JOIN Accounts act ON act.DId=@DId AND act.id=t.intAcctId 
--	LEFT OUTER JOIN AccountLocations actl ON actl.DId=@DId AND actl.AccountId=t.intAcctId AND actl.id=t.intAcctLocationId 
	WHERE t.company_id=@DId AND t.id=@TId
	
	
	--Current Tech is a QUEUE then lookup queue notify list
	if 4=(SELECT UserType_id FROM tbl_LoginCompanyJunc WHERE company_id=@DId AND id=@TktTechId)
		BEGIN
			SELECT @TechEmailPref=1, @TechEmail=lj.QueEmailAddress, @TechName=l.FirstName+' '+l.LastName 
			FROM tbl_LoginCompanyJunc lj 
			LEFT OUTER JOIN tbl_logins l ON lj.login_id=l.id 
			WHERE lj.company_id=@DId AND lj.id=@TktTechId
		END
	ELSE
		BEGIN
			SELECT @TechEmailPref=configEmailNewTicket, @TechEmail=l.Email, @TechName=l.FirstName+' '+l.LastName 
			FROM tbl_LoginCompanyJunc lj 
			LEFT OUTER JOIN tbl_Logins l ON lj.login_id=l.id 
			WHERE lj.company_id=@DId AND lj.id=@TktTechId
		END
		
	
	SELECT @UserName=l.FirstName+' '+l.LastName FROM tbl_LoginCompanyJunc lj JOIN tbl_Logins l ON l.id=lj.login_id WHERE lj.company_id=@DId AND lj.id=@TktUserId
	
	SELECT @SuccessMsg = txtText FROM CustomText WHERE DId=@DId AND Type='EmailTktCreationSuccess'
	
	RETURN 0
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[AccessKey] WITH CHECK CHECK CONSTRAINT [FK_AccessKey_AccessKeyType];

ALTER TABLE [dbo].[AccessKey] WITH CHECK CHECK CONSTRAINT [FK_AccessKey_tbl_company];

ALTER TABLE [dbo].[AccessKey] WITH CHECK CHECK CONSTRAINT [FK_AccessKey_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[AccountFiles] WITH CHECK CHECK CONSTRAINT [fk_AcctFiles_Acct];

ALTER TABLE [dbo].[AccountFiles] WITH CHECK CHECK CONSTRAINT [fk_AcctFiles_DId];

ALTER TABLE [dbo].[AccountFilters] WITH CHECK CHECK CONSTRAINT [fk_AcctFilters_DId];

ALTER TABLE [dbo].[AccountFilters] WITH CHECK CHECK CONSTRAINT [fk_AcctFilters_UId];

ALTER TABLE [dbo].[AccountLevels] WITH CHECK CHECK CONSTRAINT [FK__AccountLeve__DId__46934FA8];

ALTER TABLE [dbo].[AccountLevels] WITH CHECK CHECK CONSTRAINT [fk_AcctLvls_Accts];

ALTER TABLE [dbo].[AccountLevelTechs] WITH CHECK CHECK CONSTRAINT [FK_AccountLevelTechs_tbl_company];

ALTER TABLE [dbo].[AccountLevelTechs] WITH CHECK CHECK CONSTRAINT [FK_AccountLevelTechs_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[AccountLevelTechs] WITH CHECK CHECK CONSTRAINT [fk_ALT_AcctLvls];

ALTER TABLE [dbo].[AccountLocations] WITH CHECK CHECK CONSTRAINT [FK_AcctLoc_Acct];

ALTER TABLE [dbo].[AccountLocations] WITH CHECK CHECK CONSTRAINT [FK_AcctLoc_DId];

ALTER TABLE [dbo].[AccountRate] WITH CHECK CHECK CONSTRAINT [FK_AccountRate_Accounts];

ALTER TABLE [dbo].[AccountRate] WITH CHECK CHECK CONSTRAINT [FK_AccountRate_BillingMethod];

ALTER TABLE [dbo].[AccountRate] WITH CHECK CHECK CONSTRAINT [FK_AccountRate_RatePlan];

ALTER TABLE [dbo].[AccountRate] WITH CHECK CHECK CONSTRAINT [FK_AccountRate_tbl_company];

ALTER TABLE [dbo].[AccountRetainer] WITH CHECK CHECK CONSTRAINT [FK_AccountRetainer_Accounts];

ALTER TABLE [dbo].[AccountRetainer] WITH CHECK CHECK CONSTRAINT [FK_AccountRetainer_tbl_company];

ALTER TABLE [dbo].[AccountRetainer] WITH CHECK CHECK CONSTRAINT [FK_AccountRetainer_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[Accounts] WITH CHECK CHECK CONSTRAINT [FK_Accounts_DId];

ALTER TABLE [dbo].[Accounts] WITH CHECK CHECK CONSTRAINT [fk_Acct_LCJ];

ALTER TABLE [dbo].[Accounts] WITH CHECK CHECK CONSTRAINT [FK_Accts_AcctGroups];

ALTER TABLE [dbo].[AccountsCfg] WITH CHECK CHECK CONSTRAINT [FK_AcctsCfg_DId];

ALTER TABLE [dbo].[AccountTaskTypeRate] WITH CHECK CHECK CONSTRAINT [FK_AccountTaskTypeRate_Accounts];

ALTER TABLE [dbo].[AccountTaskTypeRate] WITH CHECK CHECK CONSTRAINT [FK_AccountTaskTypeRate_TaskType];

ALTER TABLE [dbo].[AccountTaskTypeRate] WITH CHECK CHECK CONSTRAINT [FK_AccountTaskTypeRate_tbl_company];

ALTER TABLE [dbo].[AccountTech] WITH CHECK CHECK CONSTRAINT [FK_AccountTech_Accounts];

ALTER TABLE [dbo].[AccountTech] WITH CHECK CHECK CONSTRAINT [FK_AccountTech_tbl_company];

ALTER TABLE [dbo].[AccountTech] WITH CHECK CHECK CONSTRAINT [FK_AccountTech_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[AssetBulk] WITH CHECK CHECK CONSTRAINT [FK_AssetBulk_AssetCategories];

ALTER TABLE [dbo].[AssetBulk] WITH CHECK CHECK CONSTRAINT [FK_AssetBulk_AssetTypes];

ALTER TABLE [dbo].[AssetBulk] WITH CHECK CHECK CONSTRAINT [FK_AssetBulk_tbl_company];

ALTER TABLE [dbo].[AssetBulk] WITH CHECK CHECK CONSTRAINT [FK_AssetBulk_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[AssetBulk] WITH CHECK CHECK CONSTRAINT [FK_AssetBulk_tbl_LoginCompanyJunc1];

ALTER TABLE [dbo].[AssetBulkLocation] WITH CHECK CHECK CONSTRAINT [FK_AssetBulkLocation_AssetBulk];

ALTER TABLE [dbo].[AssetBulkLocation] WITH CHECK CHECK CONSTRAINT [FK_AssetBulkLocation_LocationAuditHistory];

ALTER TABLE [dbo].[AssetBulkLocation] WITH CHECK CHECK CONSTRAINT [FK_AssetBulkLocation_Locations];

ALTER TABLE [dbo].[AssetBulkLocation] WITH CHECK CHECK CONSTRAINT [FK_AssetBulkLocation_tbl_company];

ALTER TABLE [dbo].[AssetBulkLocation] WITH CHECK CHECK CONSTRAINT [FK_AssetBulkLocation_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[AssetCategories] WITH CHECK CHECK CONSTRAINT [FK_AssetCategories_DepartmentId];

ALTER TABLE [dbo].[AssetColumnSettings] WITH CHECK CHECK CONSTRAINT [FK_AssetColumnSettings_tbl_company];

ALTER TABLE [dbo].[AssetColumnSettings] WITH CHECK CHECK CONSTRAINT [FK_AssetColumnSettings_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[AssetComputerLogicalDrives] WITH CHECK CHECK CONSTRAINT [FK_AssetComputerLogicalDrives_Assets];

ALTER TABLE [dbo].[AssetComputerPrinters] WITH CHECK CHECK CONSTRAINT [FK_AssetComputerPrinters_Assets];

ALTER TABLE [dbo].[AssetComputerProcessors] WITH CHECK CHECK CONSTRAINT [FK_AssetComputerProcessors_Assets];

ALTER TABLE [dbo].[AssetComputers] WITH CHECK CHECK CONSTRAINT [FK_AssetComputers_Assets];

ALTER TABLE [dbo].[AssetComputerSoftwares] WITH CHECK CHECK CONSTRAINT [FK_AssetComputerSoftwares_Assets];

ALTER TABLE [dbo].[AssetFilters] WITH CHECK CHECK CONSTRAINT [FK_AssetFilters_AssetColumnSettings];

ALTER TABLE [dbo].[AssetFilters] WITH CHECK CHECK CONSTRAINT [FK_AssetFilters_tbl_company];

ALTER TABLE [dbo].[AssetFilters] WITH CHECK CHECK CONSTRAINT [FK_AssetFilters_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[AssetImports] WITH CHECK CHECK CONSTRAINT [FK_AssetImports_Assets];

ALTER TABLE [dbo].[AssetImports] WITH CHECK CHECK CONSTRAINT [FK_AssetImports_tbl_company];

ALTER TABLE [dbo].[AssetImports] WITH CHECK CHECK CONSTRAINT [FK_AssetImports_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[AssetMakes] WITH CHECK CHECK CONSTRAINT [FK_AssetMakes_AssetTypes];

ALTER TABLE [dbo].[AssetMakes] WITH CHECK CHECK CONSTRAINT [FK_AssetMakes_DepartmentId];

ALTER TABLE [dbo].[AssetModels] WITH CHECK CHECK CONSTRAINT [FK_AssetModels_AssetMakes];

ALTER TABLE [dbo].[AssetModels] WITH CHECK CHECK CONSTRAINT [FK_DepartmentId];

ALTER TABLE [dbo].[AssetPropertyValues] WITH CHECK CHECK CONSTRAINT [FK_AssetPropertyValues_Assets];

ALTER TABLE [dbo].[AssetPropertyValues] WITH CHECK CHECK CONSTRAINT [FK_AssetPropertyValues_AssetTypeProperties];

ALTER TABLE [dbo].[AssetPropertyValues] WITH CHECK CHECK CONSTRAINT [FK_AssetPropertyValues_tbl_company];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [Assets_tbl_company_fk];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [FK_Assets_Accounts];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [FK_Assets_AssetCategories];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [FK_Assets_AssetMakes];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [FK_Assets_AssetModels];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [FK_Assets_AssetTypes];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [FK_Assets_Locations];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [FK_Assets_MergedAssets];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [fk_Assets_Status];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [FK_Assets_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [FK_Assets_tbl_vendors];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [fk_LCJ_Assets];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [fk_LCJ_Assets2];

ALTER TABLE [dbo].[Assets] WITH CHECK CHECK CONSTRAINT [FK_Locations_Assets];

ALTER TABLE [dbo].[AssetStatusCompany] WITH CHECK CHECK CONSTRAINT [FK_AssetStatusCompany_AssetStatus];

ALTER TABLE [dbo].[AssetStatusCompany] WITH CHECK CHECK CONSTRAINT [FK_AssetStatusCompany_tbl_company];

ALTER TABLE [dbo].[AssetSubAssets] WITH CHECK CHECK CONSTRAINT [FK_AssetSubAssets_Assets];

ALTER TABLE [dbo].[AssetSubAssets] WITH CHECK CHECK CONSTRAINT [FK_AssetSubAssets_Assets1];

ALTER TABLE [dbo].[AssetSubAssets] WITH CHECK CHECK CONSTRAINT [FK_AssetSubAssets_tbl_company];

ALTER TABLE [dbo].[AssetTypeCustFields] WITH CHECK CHECK CONSTRAINT [FK_AssetTypeCustFields_Assets];

ALTER TABLE [dbo].[AssetTypeProperties] WITH CHECK CHECK CONSTRAINT [FK_AssetTypeProperties_AssetTypes];

ALTER TABLE [dbo].[AssetTypeProperties] WITH CHECK CHECK CONSTRAINT [FK_AssetTypeProperties_tbl_company];

ALTER TABLE [dbo].[AssetTypes] WITH CHECK CHECK CONSTRAINT [FK_AssetTypes_AssetCategories];

ALTER TABLE [dbo].[AssetTypes] WITH CHECK CHECK CONSTRAINT [FK_AssetTypes_AssetProfiles];

ALTER TABLE [dbo].[AssetTypes] WITH CHECK CHECK CONSTRAINT [FK_AssetTypes_DepartmentId];

ALTER TABLE [dbo].[ClassLevels] WITH CHECK CHECK CONSTRAINT [fk_ClassLevels_Levels];

ALTER TABLE [dbo].[ClassLevels] WITH CHECK CHECK CONSTRAINT [fk_ClssLvls_Class];

ALTER TABLE [dbo].[ClassLevels] WITH CHECK CHECK CONSTRAINT [fk_ClssLvls_DId];

ALTER TABLE [dbo].[ClassLevels] WITH CHECK CHECK CONSTRAINT [fk_ClssLvls_LCJ];

ALTER TABLE [dbo].[ClassLevelsTechJctn] WITH CHECK CHECK CONSTRAINT [FK_ClassLevelsTechJctn_Locations];

ALTER TABLE [dbo].[ClassLevelsTechJctn] WITH CHECK CHECK CONSTRAINT [fk_ClassLvlsJctn_Loc];

ALTER TABLE [dbo].[ClassLevelsTechJctn] WITH CHECK CHECK CONSTRAINT [fk_ClssLvlsJctn_ClssLvls];

ALTER TABLE [dbo].[ClassLevelsTechJctn] WITH CHECK CHECK CONSTRAINT [fk_ClssLvlsJctn_DId];

ALTER TABLE [dbo].[ClassLevelsTechJctn] WITH CHECK CHECK CONSTRAINT [fk_ClssLvlsJctn_LCJ];

ALTER TABLE [dbo].[CreationCats] WITH CHECK CHECK CONSTRAINT [FK_CreationCats_tbl_company];

ALTER TABLE [dbo].[CreationCats] WITH CHECK CHECK CONSTRAINT [FK_CreationCats_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[CreationCats] WITH CHECK CHECK CONSTRAINT [FK_CreationCats_tbl_LoginCompanyJunc1];

ALTER TABLE [dbo].[CustomEmailFields] WITH CHECK CHECK CONSTRAINT [FK_CustomEmailFields_CustomFields];

ALTER TABLE [dbo].[CustomEmailFields] WITH CHECK CHECK CONSTRAINT [FK_CustomMails_tbl_company];

ALTER TABLE [dbo].[CustomFields] WITH CHECK CHECK CONSTRAINT [DepartmentId_fk];

ALTER TABLE [dbo].[CustomFields] WITH CHECK CHECK CONSTRAINT [FK_CustomFields_tbl_class];

ALTER TABLE [dbo].[CustomNames] WITH CHECK CHECK CONSTRAINT [FK_CustomNames_tbl_company];

ALTER TABLE [dbo].[CustomNames] WITH CHECK CHECK CONSTRAINT [FK_CustomNames_Terms];

ALTER TABLE [dbo].[CustomText] WITH CHECK CHECK CONSTRAINT [FK_CustomText_Company];

ALTER TABLE [dbo].[DaySummaryTime] WITH CHECK CHECK CONSTRAINT [FK_DaySummaryTime_LCJ_CreatedBy];

ALTER TABLE [dbo].[DaySummaryTime] WITH CHECK CHECK CONSTRAINT [FK_DaySummaryTime_LCJ_UID];

ALTER TABLE [dbo].[DaySummaryTime] WITH CHECK CHECK CONSTRAINT [FK_DaySummaryTime_LCJ_UpdatedBy];

ALTER TABLE [dbo].[DaySummaryTime] WITH CHECK CHECK CONSTRAINT [FK_DaySummaryTime_tbl_company];

ALTER TABLE [dbo].[DayTimeProjectNotes] WITH CHECK CHECK CONSTRAINT [FK_DayTimeProjectNotes_Accounts];

ALTER TABLE [dbo].[DayTimeProjectNotes] WITH CHECK CHECK CONSTRAINT [FK_DayTimeProjectNotes_Project];

ALTER TABLE [dbo].[DayTimeProjectNotes] WITH CHECK CHECK CONSTRAINT [FK_DayTimeProjectNotes_tbl_company];

ALTER TABLE [dbo].[DayTimeProjectNotes] WITH CHECK CHECK CONSTRAINT [FK_DayTimeProjectNotes_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[DeploymentLogger] WITH CHECK CHECK CONSTRAINT [FK_DeploymentLogger_tbl_company];

ALTER TABLE [dbo].[DeploymentLoggerUser] WITH CHECK CHECK CONSTRAINT [FK_DeploymentLoggerUser_tbl_Logins];

ALTER TABLE [dbo].[EMailParserDropBoxes] WITH CHECK CHECK CONSTRAINT [FK_EMailParserDropBoxes_Priorities_High];

ALTER TABLE [dbo].[EMailParserDropBoxes] WITH CHECK CHECK CONSTRAINT [FK_EMailParserDropBoxes_Priorities_Low];

ALTER TABLE [dbo].[EMailParserDropBoxes] WITH CHECK CHECK CONSTRAINT [FK_EMailParserDropBoxes_Priorities_Normal];

ALTER TABLE [dbo].[EMailParserDropBoxes] WITH CHECK CHECK CONSTRAINT [FK_EMailParserDropBoxes_tbl_class];

ALTER TABLE [dbo].[EMailParserDropBoxes] WITH CHECK CHECK CONSTRAINT [FK_EMailParserDropBoxes_tbl_company];

ALTER TABLE [dbo].[EMailParserDropBoxes] WITH CHECK CHECK CONSTRAINT [FK_EMailParserDropBoxes_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[EMailParserDropBoxes] WITH CHECK CHECK CONSTRAINT [FK_EMailParserDropBoxes_TktLevels];

ALTER TABLE [dbo].[Folders] WITH CHECK CHECK CONSTRAINT [FK_Company_Folders];

ALTER TABLE [dbo].[GlobalFilters] WITH CHECK CHECK CONSTRAINT [FK_GlobalFilters_GlobalFilterTypes];

ALTER TABLE [dbo].[GlobalFilters] WITH CHECK CHECK CONSTRAINT [FK_GlobalFilters_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[Holidays] WITH CHECK CHECK CONSTRAINT [FK_Holidays_Dept];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_Invoice_Accounts];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_Invoice_BillingMethod];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_Invoice_Project];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_Invoice_tbl_company];

ALTER TABLE [dbo].[Invoice] WITH CHECK CHECK CONSTRAINT [FK_Invoice_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[InvoiceRetainer] WITH CHECK CHECK CONSTRAINT [FK_InvoiceRetainer_Invoice];

ALTER TABLE [dbo].[InvoiceRetainer] WITH CHECK CHECK CONSTRAINT [FK_InvoiceRetainer_tbl_company];

ALTER TABLE [dbo].[InvoiceRetainer] WITH CHECK CHECK CONSTRAINT [FK_InvoiceRetainer_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[IzendaSavedReports] WITH CHECK CHECK CONSTRAINT [FK_IzendaSavedReports_tbl_company];

ALTER TABLE [dbo].[JunkMailRules] WITH CHECK CHECK CONSTRAINT [fk_JMR_DId];

ALTER TABLE [dbo].[LocationAliases] WITH CHECK CHECK CONSTRAINT [FK_LocationAliases_Locations];

ALTER TABLE [dbo].[LocationAliases] WITH CHECK CHECK CONSTRAINT [FK_LocationAliases_tbl_company];

ALTER TABLE [dbo].[LocationAuditHistory] WITH CHECK CHECK CONSTRAINT [FK_LocationAuditHistory_Locations];

ALTER TABLE [dbo].[LocationAuditHistory] WITH CHECK CHECK CONSTRAINT [FK_LocationAuditHistory_tbl_company];

ALTER TABLE [dbo].[LocationAuditHistory] WITH CHECK CHECK CONSTRAINT [FK_LocationAuditHistory_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[LocationAuditHistory] WITH CHECK CHECK CONSTRAINT [FK_LocationAuditHistory_tbl_LoginCompanyJunc1];

ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH CHECK CHECK CONSTRAINT [FK_LocationAuditTaggedAssets_Assets];

ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH CHECK CHECK CONSTRAINT [FK_LocationAuditTaggedAssets_LocationAuditHistory];

ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH CHECK CHECK CONSTRAINT [FK_LocationAuditTaggedAssets_Locations];

ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH CHECK CHECK CONSTRAINT [FK_LocationAuditTaggedAssets_Locations1];

ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH CHECK CHECK CONSTRAINT [FK_LocationAuditTaggedAssets_tbl_company];

ALTER TABLE [dbo].[LocationAuditTaggedAssets] WITH CHECK CHECK CONSTRAINT [FK_LocationAuditTaggedAssets_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[LocationLevels] WITH CHECK CHECK CONSTRAINT [fk_LocLvl_Dept];

ALTER TABLE [dbo].[LocationLevels] WITH CHECK CHECK CONSTRAINT [fk_LocLvl_Locations];

ALTER TABLE [dbo].[LocationLevels] WITH CHECK CHECK CONSTRAINT [fk_LocLvl_Lvls];

ALTER TABLE [dbo].[LocationLevelsTechJctn] WITH CHECK CHECK CONSTRAINT [fk_LocLvlTchJctn];

ALTER TABLE [dbo].[LocationPropertyValues] WITH CHECK CHECK CONSTRAINT [FK_LocationPropertyValues_Locations];

ALTER TABLE [dbo].[LocationPropertyValues] WITH CHECK CHECK CONSTRAINT [FK_LocationPropertyValues_LocationTypeProperties];

ALTER TABLE [dbo].[LocationPropertyValues] WITH CHECK CHECK CONSTRAINT [FK_LocationPropertyValues_tbl_company];

ALTER TABLE [dbo].[LocationRouteLevels] WITH CHECK CHECK CONSTRAINT [FK_LocationRouteLevels_Locations];

ALTER TABLE [dbo].[LocationRouteLevels] WITH CHECK CHECK CONSTRAINT [FK_LocationRouteLevels_tbl_company];

ALTER TABLE [dbo].[LocationRouteLevels] WITH CHECK CHECK CONSTRAINT [FK_LocationRouteLevels_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[LocationRouteLevelTechs] WITH CHECK CHECK CONSTRAINT [FK_LocationRouteLevelTechs_LocationRouteLevels];

ALTER TABLE [dbo].[LocationRouteLevelTechs] WITH CHECK CHECK CONSTRAINT [FK_LocationRouteLevelTechs_tbl_company];

ALTER TABLE [dbo].[LocationRouteLevelTechs] WITH CHECK CHECK CONSTRAINT [FK_LocationRouteLevelTechs_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[Locations] WITH CHECK CHECK CONSTRAINT [FK_Locations_Accounts];

ALTER TABLE [dbo].[Locations] WITH CHECK CHECK CONSTRAINT [FK_Locations_Locations];

ALTER TABLE [dbo].[Locations] WITH CHECK CHECK CONSTRAINT [FK_Locations_LocationTypes];

ALTER TABLE [dbo].[Locations] WITH CHECK CHECK CONSTRAINT [FK_Locations_tbl_company];

ALTER TABLE [dbo].[LocationTechJctn] WITH CHECK CHECK CONSTRAINT [fk_LocTechJctn_Loc];

ALTER TABLE [dbo].[LocationTypeProperties] WITH CHECK CHECK CONSTRAINT [FK_LocationTypeProperties_LocationTypePropertiesGroup];

ALTER TABLE [dbo].[LocationTypeProperties] WITH CHECK CHECK CONSTRAINT [FK_LocationTypeProperties_LocationTypes];

ALTER TABLE [dbo].[LocationTypeProperties] WITH CHECK CHECK CONSTRAINT [FK_LocationTypeProperties_tbl_company];

ALTER TABLE [dbo].[LocationTypePropertiesGroup] WITH CHECK CHECK CONSTRAINT [FK_LocationTypePropertiesGroup_LocationTypes];

ALTER TABLE [dbo].[LocationTypePropertiesGroup] WITH CHECK CHECK CONSTRAINT [FK_LocationTypePropertiesGroup_tbl_company];

ALTER TABLE [dbo].[LocationTypes] WITH CHECK CHECK CONSTRAINT [FK_LocationTypes_tbl_company];

ALTER TABLE [dbo].[MailGroups] WITH CHECK CHECK CONSTRAINT [FK_MailGroups_tbl_company];

ALTER TABLE [dbo].[MailGroupUsers] WITH CHECK CHECK CONSTRAINT [FK_MailGroupUsers_MailGroups];

ALTER TABLE [dbo].[MailGroupUsers] WITH CHECK CHECK CONSTRAINT [FK_MailGroupUsers_tbl_company];

ALTER TABLE [dbo].[MailGroupUsers] WITH CHECK CHECK CONSTRAINT [FK_MailGroupUsers_tbl_Logins1];

ALTER TABLE [dbo].[Mc_EntityField] WITH CHECK CHECK CONSTRAINT [FK_Mc_EntityField_Mc_Instance];

ALTER TABLE [dbo].[Mc_EntityFieldListsValues] WITH CHECK CHECK CONSTRAINT [FK_Mc_EntityFieldListsValues_Mc_EntityField];

ALTER TABLE [dbo].[Mc_EntityFieldsValues] WITH CHECK CHECK CONSTRAINT [FK_Mc_EntityFieldsValues_Mc_EntityField];

ALTER TABLE [dbo].[Mc_EntityNode] WITH CHECK CHECK CONSTRAINT [FK_Mc_EntityNode_Mc_EntityNode];

ALTER TABLE [dbo].[Mc_EntityNode] WITH CHECK CHECK CONSTRAINT [FK_Mc_EntityNode_Mc_Instance];

ALTER TABLE [dbo].[Mc_EntityNodeType] WITH CHECK CHECK CONSTRAINT [FK_Mc_EntityNodeType_Mc_Instance];

ALTER TABLE [dbo].[Mc_GroupsInstancesActions] WITH CHECK CHECK CONSTRAINT [FK_Mc_GroupsInstancesActions_Mc_Group];

ALTER TABLE [dbo].[Mc_GroupsInstancesActions] WITH CHECK CHECK CONSTRAINT [FK_Mc_GroupsInstancesActions_Mc_Instance];

ALTER TABLE [dbo].[Mc_GroupsInstancesRoles] WITH CHECK CHECK CONSTRAINT [FK_Mc_GroupsInstancesRoles_Mc_Group];

ALTER TABLE [dbo].[Mc_GroupsInstancesRoles] WITH CHECK CHECK CONSTRAINT [FK_Mc_GroupsInstancesRoles_Mc_Instance];

ALTER TABLE [dbo].[Mc_Message] WITH CHECK CHECK CONSTRAINT [FK_Mc_Message_Mc_Message];

ALTER TABLE [dbo].[Mc_Message] WITH CHECK CHECK CONSTRAINT [FK_Mc_Message_Mc_User_1];

ALTER TABLE [dbo].[Mc_Message] WITH CHECK CHECK CONSTRAINT [FK_Mc_Message_Mc_User_2];

ALTER TABLE [dbo].[Mc_OrganizationsUsers] WITH CHECK CHECK CONSTRAINT [FK_Mc_OrganizationsUsers_Mc_User];

ALTER TABLE [dbo].[Mc_RuleParameters] WITH CHECK CHECK CONSTRAINT [FK_Mc_RuleEngineParameters_Mc_RuleEngine];

ALTER TABLE [dbo].[Mc_SettingsValues] WITH CHECK CHECK CONSTRAINT [FK_Mc_SettingsValues_Mc_Group];

ALTER TABLE [dbo].[Mc_SettingsValues] WITH CHECK CHECK CONSTRAINT [FK_Mc_SettingsValues_Mc_Instance];

ALTER TABLE [dbo].[Mc_UsersGroups] WITH CHECK CHECK CONSTRAINT [FK_Mc_UsersGroups_Mc_Group];

ALTER TABLE [dbo].[Mc_UsersGroups] WITH CHECK CHECK CONSTRAINT [FK_Mc_UsersGroups_Mc_User];

ALTER TABLE [dbo].[Mc_UsersInstances] WITH CHECK CHECK CONSTRAINT [FK_Mc_UsersInstances_Mc_Instance];

ALTER TABLE [dbo].[Mc_UsersInstances] WITH CHECK CHECK CONSTRAINT [FK_Mc_UsersInstances_Mc_User];

ALTER TABLE [dbo].[NotificationEventsQueue] WITH CHECK CHECK CONSTRAINT [FK_NotificationEventsQueue_SchedTickets];

ALTER TABLE [dbo].[NotificationEventsQueue] WITH CHECK CHECK CONSTRAINT [FK_NotificationEventsQueue_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[NotificationEventsQueueFiles] WITH CHECK CHECK CONSTRAINT [FK_NotificationEventsQueueFiles_NotificationEventsQueue];

ALTER TABLE [dbo].[NotificationRuleEvents] WITH CHECK CHECK CONSTRAINT [FK_NotificationRuleEvents_NotificationRules];

ALTER TABLE [dbo].[NotificationRuleEvents] WITH CHECK CHECK CONSTRAINT [FK_NotificationRuleEvents_tbl_company];

ALTER TABLE [dbo].[NotificationRules] WITH CHECK CHECK CONSTRAINT [FK_NotificationRules_tbl_company];

ALTER TABLE [dbo].[NotificationRules] WITH CHECK CHECK CONSTRAINT [FK_NotificationRules_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[NotificationRules] WITH CHECK CHECK CONSTRAINT [FK_NotificationRules_tbl_LoginCompanyJunc1];

ALTER TABLE [dbo].[NotificationRuleUsers] WITH CHECK CHECK CONSTRAINT [FK_NotificationRuleUsers_MailGroups];

ALTER TABLE [dbo].[NotificationRuleUsers] WITH CHECK CHECK CONSTRAINT [FK_NotificationRuleUsers_NotificationRules];

ALTER TABLE [dbo].[NotificationRuleUsers] WITH CHECK CHECK CONSTRAINT [FK_NotificationRuleUsers_tbl_company];

ALTER TABLE [dbo].[NotificationRuleUsers] WITH CHECK CHECK CONSTRAINT [FK_NotificationRuleUsers_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[Priorities] WITH CHECK CHECK CONSTRAINT [FK_Priorities_Dept];

ALTER TABLE [dbo].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_Accounts];

ALTER TABLE [dbo].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_BillingMethod];

ALTER TABLE [dbo].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_Company];

ALTER TABLE [dbo].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_Project];

ALTER TABLE [dbo].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_ProjectPriority];

ALTER TABLE [dbo].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_RatePlan];

ALTER TABLE [dbo].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_SupportGroups];

ALTER TABLE [dbo].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_tbl_LoginCompanyJuncInternalPM];

ALTER TABLE [dbo].[ProjectRetainer] WITH CHECK CHECK CONSTRAINT [FK_ProjectRetainer_Project];

ALTER TABLE [dbo].[ProjectRetainer] WITH CHECK CHECK CONSTRAINT [FK_ProjectRetainer_tbl_company];

ALTER TABLE [dbo].[ProjectRetainer] WITH CHECK CHECK CONSTRAINT [FK_ProjectRetainer_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[ProjectTaskTypeRate] WITH CHECK CHECK CONSTRAINT [FK_ProjectTaskTypeRate_Project];

ALTER TABLE [dbo].[ProjectTaskTypeRate] WITH CHECK CHECK CONSTRAINT [FK_ProjectTaskTypeRate_TaskType];

ALTER TABLE [dbo].[ProjectTech] WITH CHECK CHECK CONSTRAINT [FK_ProjectTech_Project];

ALTER TABLE [dbo].[ProjectTech] WITH CHECK CHECK CONSTRAINT [FK_ProjectTech_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[ProjectTime] WITH CHECK CHECK CONSTRAINT [FK_ProjectTime_Accounts];

ALTER TABLE [dbo].[ProjectTime] WITH CHECK CHECK CONSTRAINT [fk_ProjectTime_Company];

ALTER TABLE [dbo].[ProjectTime] WITH CHECK CHECK CONSTRAINT [fk_ProjectTime_CreatedByUID];

ALTER TABLE [dbo].[ProjectTime] WITH CHECK CHECK CONSTRAINT [FK_ProjectTime_Invoice];

ALTER TABLE [dbo].[ProjectTime] WITH CHECK CHECK CONSTRAINT [FK_ProjectTime_Project];

ALTER TABLE [dbo].[ProjectTime] WITH CHECK CHECK CONSTRAINT [FK_ProjectTime_TaskType];

ALTER TABLE [dbo].[ProjectTime] WITH CHECK CHECK CONSTRAINT [FK_ProjectTime_TimeBill];

ALTER TABLE [dbo].[ProjectTime] WITH CHECK CHECK CONSTRAINT [fk_ProjectTime_UID];

ALTER TABLE [dbo].[ProjectTime] WITH CHECK CHECK CONSTRAINT [fk_ProjectTime_UpdatedByUID];

ALTER TABLE [dbo].[QueueMembers] WITH CHECK CHECK CONSTRAINT [FK_QueueMembers_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[QueueMembers] WITH CHECK CHECK CONSTRAINT [FK_QueueMembers_tbl_LoginCompanyJunc1];

ALTER TABLE [dbo].[RatePlan] WITH CHECK CHECK CONSTRAINT [FK_RatePlan_tbl_company];

ALTER TABLE [dbo].[RatePlanRates] WITH CHECK CHECK CONSTRAINT [FK_RatePlanRates_RatePlan];

ALTER TABLE [dbo].[RatePlanRates] WITH CHECK CHECK CONSTRAINT [FK_RatePlanRates_TaskType];

ALTER TABLE [dbo].[RatePlanRates] WITH CHECK CHECK CONSTRAINT [FK_RatePlanRates_tbl_company];

ALTER TABLE [dbo].[RelatedTickets] WITH CHECK CHECK CONSTRAINT [FK_RelatedTickets_tbl_company];

ALTER TABLE [dbo].[RelatedTickets] WITH CHECK CHECK CONSTRAINT [FK_RelatedTickets_tbl_ticket];

ALTER TABLE [dbo].[RelatedTickets] WITH CHECK CHECK CONSTRAINT [FK_RelatedTickets_tbl_ticket1];

ALTER TABLE [dbo].[RemoteSessions] WITH CHECK CHECK CONSTRAINT [FK_RemoteSessions_tbl_company];

ALTER TABLE [dbo].[RemoteSessions] WITH CHECK CHECK CONSTRAINT [FK_RemoteSessions_tbl_ticket];

ALTER TABLE [dbo].[ReportFilters] WITH CHECK CHECK CONSTRAINT [FK_ReportFilters_tbl_company];

ALTER TABLE [dbo].[ReportFilters] WITH CHECK CHECK CONSTRAINT [FK_ReportFilters_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[ResolutionCats] WITH CHECK CHECK CONSTRAINT [FK_ResolutionCats_ResolutionCats];

ALTER TABLE [dbo].[ResolutionCats] WITH CHECK CHECK CONSTRAINT [FK_ResolutionCats_tbl_company];

ALTER TABLE [dbo].[ResolutionCats] WITH CHECK CHECK CONSTRAINT [FK_ResolutionCats_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[SchedTicketAssets] WITH CHECK CHECK CONSTRAINT [FK_SchedTicketAssets_Assets];

ALTER TABLE [dbo].[SchedTicketAssets] WITH CHECK CHECK CONSTRAINT [FK_SchedTicketAssets_SchedTickets];

ALTER TABLE [dbo].[SchedTicketAssets] WITH CHECK CHECK CONSTRAINT [FK_SchedTicketAssets_tbl_company];

ALTER TABLE [dbo].[SchedTicketFiles] WITH CHECK CHECK CONSTRAINT [FK_SchedTicketFiles_SchedTickets];

ALTER TABLE [dbo].[SchedTicketFiles] WITH CHECK CHECK CONSTRAINT [FK_SchedTicketFiles_tbl_company];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [FK_SchedTickets_Accounts];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [FK_SchedTickets_CreationCats];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [FK_SchedTickets_Folders];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [FK_SchedTickets_Locations];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [FK_SchedTickets_Locations1];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [FK_SchedTickets_Project];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [fk_SchedTkt_Class];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [fk_SchedTkt_Department];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [fk_SchedTkt_Loc];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [fk_SchedTkt_LVL];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [fk_SchedTkt_Pri];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [fk_ShedTkt_LCJ];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [fk_ShedTkt_LCJ2];

ALTER TABLE [dbo].[SchedTickets] WITH CHECK CHECK CONSTRAINT [fk_ShedTkt_LCJ3];

ALTER TABLE [dbo].[SupportGroups] WITH CHECK CHECK CONSTRAINT [FK_AcctGroups_DId];

ALTER TABLE [dbo].[SupportGroups] WITH CHECK CHECK CONSTRAINT [fk_SupGroup_DId];

ALTER TABLE [dbo].[SupportPortal] WITH CHECK CHECK CONSTRAINT [FK_SupportPortal_Accounts];

ALTER TABLE [dbo].[SupportPortal] WITH CHECK CHECK CONSTRAINT [FK_SupportPortal_tbl_company];

ALTER TABLE [dbo].[SupportPortalLinks] WITH CHECK CHECK CONSTRAINT [FK_SupportPortalLinks_Accounts];

ALTER TABLE [dbo].[SupportPortalLinks] WITH CHECK CHECK CONSTRAINT [FK_SupportPortalLinks_tbl_company];

ALTER TABLE [dbo].[TaskType] WITH CHECK CHECK CONSTRAINT [FK_TaskType_tbl_company];

ALTER TABLE [dbo].[TaskTypeTech] WITH CHECK CHECK CONSTRAINT [FK_TaskTypeTech_TaskType];

ALTER TABLE [dbo].[TaskTypeTech] WITH CHECK CHECK CONSTRAINT [FK_TaskTypeTech_tbl_company];

ALTER TABLE [dbo].[TaskTypeTech] WITH CHECK CHECK CONSTRAINT [FK_TaskTypeTech_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[TaskTypeTechBillableRate] WITH CHECK CHECK CONSTRAINT [FK_TaskTypeTechBillableRate_TaskType];

ALTER TABLE [dbo].[TaskTypeTechBillableRate] WITH CHECK CHECK CONSTRAINT [FK_TaskTypeTechBillableRate_tbl_company];

ALTER TABLE [dbo].[TaskTypeTechBillableRate] WITH CHECK CHECK CONSTRAINT [FK_TaskTypeTechBillableRate_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[TaskTypeTechCost] WITH CHECK CHECK CONSTRAINT [FK_TaskTypeTechCost_TaskType];

ALTER TABLE [dbo].[TaskTypeTechCost] WITH CHECK CHECK CONSTRAINT [FK_TaskTypeTechCost_tbl_company];

ALTER TABLE [dbo].[TaskTypeTechCost] WITH CHECK CHECK CONSTRAINT [FK_TaskTypeTechCost_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[tbl_class] WITH CHECK CHECK CONSTRAINT [FK_Class_Priorities];

ALTER TABLE [dbo].[tbl_class] WITH CHECK CHECK CONSTRAINT [FK_Department_Class];

ALTER TABLE [dbo].[tbl_class] WITH CHECK CHECK CONSTRAINT [FK_tbl_class_tbl_class];

ALTER TABLE [dbo].[tbl_class] WITH CHECK CHECK CONSTRAINT [FK_tbl_class_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[tbl_ClassTechnicianJctn] WITH CHECK CHECK CONSTRAINT [fk_LCJ_CTJ];

ALTER TABLE [dbo].[tbl_ClassTechnicianJctn] WITH CHECK CHECK CONSTRAINT [FK_Locations_CTJ];

ALTER TABLE [dbo].[tbl_Knowledgebase] WITH CHECK CHECK CONSTRAINT [FK_tbl_Knowledgebase_tbl_company];

ALTER TABLE [dbo].[tbl_Knowledgebase] WITH CHECK CHECK CONSTRAINT [FK_tbl_Knowledgebase_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[tbl_KnowledgebaseResponses] WITH CHECK CHECK CONSTRAINT [FK_tbl_KnowledgebaseResponses_tbl_company];

ALTER TABLE [dbo].[tbl_KnowledgebaseResponses] WITH CHECK CHECK CONSTRAINT [FK_tbl_KnowledgebaseResponses_tbl_Knowledgebase];

ALTER TABLE [dbo].[tbl_KnowledgebaseResponses] WITH CHECK CHECK CONSTRAINT [FK_tbl_KnowledgebaseResponses_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[tbl_Locations] WITH CHECK CHECK CONSTRAINT [fk_LCJ_Locations];

ALTER TABLE [dbo].[tbl_LoginCompanyJunc] WITH CHECK CHECK CONSTRAINT [fk_LCJ_SupGroups];

ALTER TABLE [dbo].[tbl_LoginCompanyJunc] WITH CHECK CHECK CONSTRAINT [fk_LCJ_tbl_user];

ALTER TABLE [dbo].[tbl_LoginCompanyJunc] WITH CHECK CHECK CONSTRAINT [FK_tbl_LoginCompanyJunc_tbl_company];

ALTER TABLE [dbo].[tbl_LoginCompanyJunc] WITH CHECK CHECK CONSTRAINT [FK_tbl_LoginCompanyJunc_tbl_Logins];

ALTER TABLE [dbo].[tbl_part] WITH CHECK CHECK CONSTRAINT [fk_LCJ_Part1];

ALTER TABLE [dbo].[tbl_part] WITH CHECK CHECK CONSTRAINT [fk_LCJ_Part2];

ALTER TABLE [dbo].[tbl_part] WITH CHECK CHECK CONSTRAINT [FK_tbl_part_tbl_company];

ALTER TABLE [dbo].[tbl_part] WITH CHECK CHECK CONSTRAINT [FK_tbl_part_tbl_PartsOrder];

ALTER TABLE [dbo].[tbl_PartsOrder] WITH CHECK CHECK CONSTRAINT [fk_LCJ_PartsOrder];

ALTER TABLE [dbo].[tbl_PartsOrder] WITH CHECK CHECK CONSTRAINT [FK_Locations_PartOrders];

ALTER TABLE [dbo].[tbl_PartsOrder] WITH CHECK CHECK CONSTRAINT [FK_tbl_PartsOrder_Locations];

ALTER TABLE [dbo].[tbl_PartsOrder] WITH CHECK CHECK CONSTRAINT [FK_tbl_PartsOrder_tbl_vendors];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_Folders_Ticket];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [fk_LCJ_Ticket1];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [fk_LCJ_Ticket2];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [fk_LCJ_Ticket3];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [fk_LCJ_Ticket4];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_Locations_Ticket];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_tbl_ticket_Accounts];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_tbl_ticket_CreationCats];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_tbl_ticket_Locations];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_tbl_ticket_Locations1];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_tbl_ticket_Project];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_tbl_ticket_ResolutionCats];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_tbl_ticket_SchedTickets];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_tbl_ticket_SubmissionCategories];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_tbl_ticket_tbl_company];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_tbl_ticket_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [fk_ticket_Levels];

ALTER TABLE [dbo].[tbl_ticket] WITH CHECK CHECK CONSTRAINT [FK_Ticket_Priority];

ALTER TABLE [dbo].[TicketAssets] WITH CHECK CHECK CONSTRAINT [FK_TicketAssets_Assets];

ALTER TABLE [dbo].[TicketAssets] WITH CHECK CHECK CONSTRAINT [FK_TicketAssets_tbl_company];

ALTER TABLE [dbo].[TicketAssets] WITH CHECK CHECK CONSTRAINT [FK_TicketAssets_tbl_ticket];

ALTER TABLE [dbo].[TicketAssignment] WITH CHECK CHECK CONSTRAINT [FK_TicketAssignments_tbl_company];

ALTER TABLE [dbo].[TicketAssignment] WITH CHECK CHECK CONSTRAINT [FK_TicketAssignments_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[TicketAssignment] WITH CHECK CHECK CONSTRAINT [FK_TicketAssignments_tbl_ticket];

ALTER TABLE [dbo].[TicketCriteriaData] WITH CHECK CHECK CONSTRAINT [FK_TicketCriteriaData_tbl_company];

ALTER TABLE [dbo].[TicketCriteriaData] WITH CHECK CHECK CONSTRAINT [FK_TicketCriteriaData_TicketCriterias];

ALTER TABLE [dbo].[TicketCriterias] WITH CHECK CHECK CONSTRAINT [FK_TicketCriterias_NotificationRules];

ALTER TABLE [dbo].[TicketCriterias] WITH CHECK CHECK CONSTRAINT [FK_TicketCriterias_tbl_company];

ALTER TABLE [dbo].[TicketCriterias] WITH CHECK CHECK CONSTRAINT [FK_TicketCriterias_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[TicketLogs] WITH CHECK CHECK CONSTRAINT [FK_TicketLogs_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[TicketLogs] WITH CHECK CHECK CONSTRAINT [FK_TicketLogs_tbl_LoginCompanyJunc1];

ALTER TABLE [dbo].[TicketLogs] WITH CHECK CHECK CONSTRAINT [FK_TktLogs_DId];

ALTER TABLE [dbo].[TicketLogs] WITH CHECK CHECK CONSTRAINT [FK_TktLogs_TID];

ALTER TABLE [dbo].[TicketLogs] WITH CHECK CHECK CONSTRAINT [FK_TktLogs_TktTime];

ALTER TABLE [dbo].[TicketMiscCosts] WITH CHECK CHECK CONSTRAINT [fk_LCJ_TMC];

ALTER TABLE [dbo].[TicketMiscCosts] WITH CHECK CHECK CONSTRAINT [FK_TicketMiscCosts_TicketMiscCosts];

ALTER TABLE [dbo].[TicketMiscCosts] WITH CHECK CHECK CONSTRAINT [FK_TicketMiscCosts_TicketMiscCosts1];

ALTER TABLE [dbo].[TicketMiscCosts] WITH CHECK CHECK CONSTRAINT [FK_TicketMiscCosts_TicketMiscCosts2];

ALTER TABLE [dbo].[TicketSentEmails] WITH CHECK CHECK CONSTRAINT [FK_TicketSentEmails_tbl_company];

ALTER TABLE [dbo].[TicketSentEmails] WITH CHECK CHECK CONSTRAINT [FK_TicketSentEmails_tbl_ticket];

ALTER TABLE [dbo].[TicketTime] WITH CHECK CHECK CONSTRAINT [fk_TicketTime_CreatedByUID];

ALTER TABLE [dbo].[TicketTime] WITH CHECK CHECK CONSTRAINT [FK_TicketTime_Invoice];

ALTER TABLE [dbo].[TicketTime] WITH CHECK CHECK CONSTRAINT [FK_TicketTime_TaskType];

ALTER TABLE [dbo].[TicketTime] WITH CHECK CHECK CONSTRAINT [fk_TicketTime_Ticket];

ALTER TABLE [dbo].[TicketTime] WITH CHECK CHECK CONSTRAINT [FK_TicketTime_TimeBill];

ALTER TABLE [dbo].[TicketTime] WITH CHECK CHECK CONSTRAINT [fk_TicketTime_UId];

ALTER TABLE [dbo].[TicketTime] WITH CHECK CHECK CONSTRAINT [fk_TicketTime_UpdatedByUID];

ALTER TABLE [dbo].[TicketTimeEstimated] WITH CHECK CHECK CONSTRAINT [FK_TicketTimeEstimated_tbl_company];

ALTER TABLE [dbo].[TicketTimeEstimated] WITH CHECK CHECK CONSTRAINT [FK_TicketTimeEstimated_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[TicketTimeEstimated] WITH CHECK CHECK CONSTRAINT [FK_TicketTimeEstimated_tbl_LoginCompanyJunc1];

ALTER TABLE [dbo].[TicketTimeEstimated] WITH CHECK CHECK CONSTRAINT [FK_TicketTimeEstimated_tbl_ticket];

ALTER TABLE [dbo].[TicketTravelCosts] WITH CHECK CHECK CONSTRAINT [FK_TicketTravelCosts_Invoice];

ALTER TABLE [dbo].[TicketTravelCosts] WITH CHECK CHECK CONSTRAINT [FK_TicketTravelCosts_tbl_company];

ALTER TABLE [dbo].[TicketTravelCosts] WITH CHECK CHECK CONSTRAINT [FK_TicketTravelCosts_tbl_ticket];

ALTER TABLE [dbo].[TimeBill] WITH CHECK CHECK CONSTRAINT [FK_TimeBill_tbl_company];

ALTER TABLE [dbo].[TimeBill] WITH CHECK CHECK CONSTRAINT [FK_TimeBill_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[TimeBill] WITH CHECK CHECK CONSTRAINT [FK_TimeBill_tbl_LoginCompanyJunc1];

ALTER TABLE [dbo].[TktLevels] WITH CHECK CHECK CONSTRAINT [fk_Levels_company];

ALTER TABLE [dbo].[TktLevels] WITH CHECK CHECK CONSTRAINT [fk_Levels_LCJ];

ALTER TABLE [dbo].[ToDoItem] WITH CHECK CHECK CONSTRAINT [FK_ToDoItem_tbl_company];

ALTER TABLE [dbo].[ToDoItem] WITH CHECK CHECK CONSTRAINT [FK_ToDoItem_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[ToDoItem] WITH CHECK CHECK CONSTRAINT [FK_ToDoItem_tbl_LoginCompanyJunc1];

ALTER TABLE [dbo].[ToDoItem] WITH CHECK CHECK CONSTRAINT [FK_ToDoItem_tbl_LoginCompanyJunc2];

ALTER TABLE [dbo].[ToDoItem] WITH CHECK CHECK CONSTRAINT [FK_ToDoItem_tbl_ticket];

ALTER TABLE [dbo].[ToDoItem] WITH CHECK CHECK CONSTRAINT [FK_ToDoItem_ToDoItemTemplate];

ALTER TABLE [dbo].[ToDoItem] WITH CHECK CHECK CONSTRAINT [FK_ToDoItem_ToDoList];

ALTER TABLE [dbo].[ToDoItemTemplate] WITH CHECK CHECK CONSTRAINT [FK_ToDoItemTemplate_tbl_company];

ALTER TABLE [dbo].[ToDoItemTemplate] WITH CHECK CHECK CONSTRAINT [FK_ToDoItemTemplate_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[ToDoItemTemplate] WITH CHECK CHECK CONSTRAINT [FK_ToDoItemTemplate_ToDoListTemplate];

ALTER TABLE [dbo].[ToDoList] WITH CHECK CHECK CONSTRAINT [FK_ToDoList_Project];

ALTER TABLE [dbo].[ToDoList] WITH CHECK CHECK CONSTRAINT [FK_ToDoList_tbl_company];

ALTER TABLE [dbo].[ToDoList] WITH CHECK CHECK CONSTRAINT [FK_ToDoList_tbl_ticket];

ALTER TABLE [dbo].[ToDoList] WITH CHECK CHECK CONSTRAINT [FK_ToDoList_ToDoListTemplate];

ALTER TABLE [dbo].[ToDoListTemplate] WITH CHECK CHECK CONSTRAINT [FK_ToDoListTemplate_tbl_company];

ALTER TABLE [dbo].[UserAccounts] WITH CHECK CHECK CONSTRAINT [FK_UserAccounts_Accounts];

ALTER TABLE [dbo].[UserAccounts] WITH CHECK CHECK CONSTRAINT [FK_UserAccounts_Locations];

ALTER TABLE [dbo].[UserLocations] WITH CHECK CHECK CONSTRAINT [FK_UserLocations_Locations];

ALTER TABLE [dbo].[UserLocations] WITH CHECK CHECK CONSTRAINT [FK_UserLocations_tbl_company];

ALTER TABLE [dbo].[UserLocations] WITH CHECK CHECK CONSTRAINT [FK_UserLocations_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[UserProjects] WITH CHECK CHECK CONSTRAINT [FK_UserProjects_Project];

ALTER TABLE [dbo].[UserProjects] WITH CHECK CHECK CONSTRAINT [FK_UserProjects_tbl_company];

ALTER TABLE [dbo].[UserProjects] WITH CHECK CHECK CONSTRAINT [FK_UserProjects_tbl_LoginCompanyJunc];

ALTER TABLE [dbo].[WrkLstFilters] WITH CHECK CHECK CONSTRAINT [fk_LCJ_WLF];

ALTER TABLE [dbo].[JunkMailRules] WITH CHECK CHECK CONSTRAINT [CK_JunkMailRules];


GO
PRINT N'Update complete.';


GO
